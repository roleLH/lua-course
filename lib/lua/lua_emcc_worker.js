

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

Module.print = vm_print;
Module.printErr = vm_print_err;

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }




read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};



  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }


} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {




  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';






var STACK_ALIGN = 16;

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}




// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;

  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < table.length; i++) {
      var item = table.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.


  var ret;
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    ret = freeTableIndexes.pop();
  } else {
    ret = table.length;
    // Grow the table
    try {
      table.grow(1);
    } catch (err) {
      if (!(err instanceof RangeError)) {
        throw err;
      }
      throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
    }
  }

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunctionWasm(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}









function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });




// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },


  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg, wasmMemory) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}


  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
function asmFunc(global, env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$0 = env.abort;
 var fimport$1 = env.__cxa_allocate_exception;
 var fimport$2 = env.__cxa_throw;
 var fimport$3 = env.invoke_vii;
 var fimport$4 = env.__cxa_find_matching_catch_3;
 var fimport$5 = env.getTempRet0;
 var fimport$6 = env.__cxa_begin_catch;
 var fimport$7 = env.__cxa_end_catch;
 var fimport$8 = env.invoke_viii;
 var fimport$9 = env.invoke_iiii;
 var fimport$10 = env.invoke_vi;
 var fimport$11 = env.time;
 var fimport$12 = env.emscripten_asm_const_int;
 var fimport$13 = env.popen;
 var fimport$14 = env.clock;
 var fimport$15 = env.gmtime_r;
 var fimport$16 = env.localtime_r;
 var fimport$17 = env.strftime;
 var fimport$18 = env.difftime;
 var fimport$19 = env.system;
 var fimport$20 = env.exit;
 var fimport$21 = env.mktime;
 var fimport$22 = env.dlclose;
 var fimport$23 = env.dlopen;
 var fimport$24 = env.dlerror;
 var fimport$25 = env.dlsym;
 var fimport$26 = env.__clock_gettime;
 var fimport$27 = env.fd_close;
 var fimport$28 = env.__sys_fcntl64;
 var fimport$29 = env.__sys_dup3;
 var fimport$30 = env.__sys_dup2;
 var fimport$31 = env.__sys_rename;
 var fimport$32 = env.__sys_open;
 var fimport$33 = env.fd_write;
 var fimport$34 = env.__wait;
 var fimport$35 = env.__sys_unlink;
 var fimport$36 = env.__sys_ioctl;
 var fimport$37 = env.fd_read;
 var fimport$38 = env.__sys_wait4;
 var fimport$39 = env.__sys_rmdir;
 var fimport$40 = env.environ_sizes_get;
 var fimport$41 = env.environ_get;
 var fimport$42 = env.emscripten_resize_heap;
 var fimport$43 = env.emscripten_memcpy_big;
 var fimport$44 = env.__cxa_uncaught_exceptions;
 var fimport$45 = env.setTempRet0;
 var fimport$46 = env.fd_seek;
 var global$0 = 5266752;
 var global$1 = 23860;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $884();
 }
 
 function $1($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if ((((HEAP32[($0_1 + 28 | 0) >> 2] | 0) - $4_1 | 0) >> 4 | 0 | 0) > ($1_1 | 0)) {
     break label$2
    }
    $5_1 = 0;
    if (((($4_1 - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0) >> 4 | 0) + 5 | 0 | 0) > (1e6 - $1_1 | 0 | 0)) {
     break label$1
    }
    $5_1 = 0;
    $3_1 = $200($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
    if (!$3_1) {
     break label$1
    }
    $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   }
   label$3 : {
    $0_1 = $4_1 + ($1_1 << 4 | 0) | 0;
    if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0) >>> 0 >= $0_1 >>> 0) {
     break label$3
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   }
   $5_1 = $3_1;
  }
  return $5_1 | 0;
 }
 
 function $2($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $24_1 = 0, $46_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $4_1 = $3_1 - ($2_1 << 4 | 0) | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
   $5_1 = 1;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   $24_1 = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $24_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[(i64toi32_i32$0 + 8 | 0) >> 0] = HEAPU8[(($3_1 + ((0 - $2_1 | 0) << 4 | 0) | 0) + 8 | 0) >> 0] | 0;
   $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $3_1 + 16 | 0;
   if (($2_1 | 0) == (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $4_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($5_1 << 4 | 0) | 0;
    i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    $46_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $3_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $46_1;
    HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($3_1 + 24 | 0) >> 0] = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
    $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $3_1 + 16 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $3($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
  HEAP32[($0_1 + 156 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  return +(504.0);
 }
 
 function $5($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 + 1000999 | 0) >>> 0 > 1000999 >>> 0) {
    break label$1
   }
   $1_1 = (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($0_1 + 20 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 4 | 0) + $1_1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $6($0_1) {
  $0_1 = $0_1 | 0;
  return (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($0_1 + 20 | 0) >> 2] | 0) >> 2] | 0) | 0) + -16 | 0) >> 4 | 0 | 0;
 }
 
 function $7($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (0 | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $4_1 = (((HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0) - $3_1 | 0) + 16 | 0;
    $1_1 = $4_1 >> 4 | 0;
    if (($4_1 | 0) < (1 | 0)) {
     break label$1
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $3_1 + 16 | 0;
    HEAP8[($3_1 + 8 | 0) >> 0] = 0;
    $3_1 = ($1_1 | 0) < (1 | 0) ? $1_1 : 1;
    label$3 : {
     if (($4_1 | 0) < (17 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      HEAP32[($0_1 + 12 | 0) >> 2] = $4_1 + 16 | 0;
      HEAP8[($4_1 + 8 | 0) >> 0] = 0;
      $4_1 = ($1_1 | 0) > (2 | 0);
      $1_1 = $1_1 + -1 | 0;
      if ($4_1) {
       continue label$4
      }
      break label$4;
     };
    }
    $1_1 = $3_1 + -1 | 0;
    break label$1;
   }
   $1_1 = $1_1 + 1 | 0;
  }
  label$5 : {
   if (($1_1 | 0) > (-1 | 0)) {
    break label$5
   }
   if ((HEAP16[($2_1 + 32 | 0) >> 1] | 0 | 0) > (-2 | 0)) {
    break label$5
   }
   $229($0_1 | 0, (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0 | 0, 0 | 0) | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
 }
 
 function $8($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $6$hi = 0, $5_1 = 0, $41_1 = 0, $68_1 = 0, $92_1 = 0;
  $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $4_1 = $3_1 + -16 | 0;
  label$1 : {
   if (($1_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = HEAP32[(HEAP32[($0_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
  }
  label$2 : {
   $1_1 = $3_1 + ($1_1 << 4 | 0) | 0;
   $0_1 = $2_1 << 4 | 0;
   $5_1 = ($2_1 | 0) > (-1 | 0) ? $4_1 - $0_1 | 0 : ($1_1 - $0_1 | 0) + -16 | 0;
   if ($1_1 >>> 0 >= $5_1 >>> 0) {
    break label$2
   }
   $2_1 = $1_1;
   $0_1 = $5_1;
   label$3 : while (1) {
    i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $41_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[i64toi32_i32$1 >> 2] = $41_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $3_1 = HEAPU8[(i64toi32_i32$1 + 8 | 0) >> 0] | 0;
    HEAP8[(i64toi32_i32$1 + 8 | 0) >> 0] = HEAPU8[($0_1 + 8 | 0) >> 0] | 0;
    HEAP8[($0_1 + 8 | 0) >> 0] = $3_1;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $6_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = $2_1 + 16 | 0;
    $0_1 = i64toi32_i32$1 + -16 | 0;
    if ($2_1 >>> 0 < $0_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   $2_1 = $5_1 + 16 | 0;
   if ($2_1 >>> 0 >= $4_1 >>> 0) {
    break label$4
   }
   $0_1 = $4_1;
   label$5 : while (1) {
    i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $68_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[i64toi32_i32$1 >> 2] = $68_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $3_1 = HEAPU8[(i64toi32_i32$1 + 8 | 0) >> 0] | 0;
    HEAP8[(i64toi32_i32$1 + 8 | 0) >> 0] = HEAPU8[($0_1 + 8 | 0) >> 0] | 0;
    HEAP8[($0_1 + 8 | 0) >> 0] = $3_1;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $6_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = $2_1 + 16 | 0;
    $0_1 = i64toi32_i32$1 + -16 | 0;
    if ($2_1 >>> 0 < $0_1 >>> 0) {
     continue label$5
    }
    break label$5;
   };
  }
  label$6 : {
   if ($1_1 >>> 0 >= $4_1 >>> 0) {
    break label$6
   }
   label$7 : while (1) {
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    $92_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[i64toi32_i32$1 >> 2] = $92_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = HEAPU8[(i64toi32_i32$1 + 8 | 0) >> 0] | 0;
    HEAP8[(i64toi32_i32$1 + 8 | 0) >> 0] = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
    HEAP8[($4_1 + 8 | 0) >> 0] = $2_1;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $4_1;
    HEAP32[i64toi32_i32$1 >> 2] = $6_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 16 | 0;
    $4_1 = i64toi32_i32$1 + -16 | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     continue label$7
    }
    break label$7;
   };
  }
 }
 
 function $9($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($4_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($4_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$7 : {
   label$8 : {
    if (($2_1 | 0) < (1 | 0)) {
     break label$8
    }
    $3_1 = (HEAP32[$3_1 >> 2] | 0) + ($2_1 << 4 | 0) | 0;
    if ($3_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$7
    }
    $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$7;
   }
   label$9 : {
    if (($2_1 | 0) < (-1000999 | 0)) {
     break label$9
    }
    $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($2_1 << 4 | 0) | 0;
    break label$7;
   }
   label$10 : {
    if (($2_1 | 0) != (-1001e3 | 0)) {
     break label$10
    }
    $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$7;
   }
   label$11 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$11
    }
    $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$7;
   }
   label$12 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((-1001e3 - $2_1 | 0 | 0) > (HEAPU8[($3_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$12
    }
    $3_1 = ($3_1 + ((-1001001 - $2_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$7;
   }
   $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
  label$13 : {
   if (($2_1 | 0) > (-1001001 | 0)) {
    break label$13
   }
   if (!((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
    break label$13
   }
   $2_1 = HEAP32[(HEAP32[(HEAP32[($0_1 + 20 | 0) >> 2] | 0) >> 2] | 0) >> 2] | 0;
   if (!((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
    break label$13
   }
   $1_1 = HEAP32[$1_1 >> 2] | 0;
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$13
   }
   $233($0_1 | 0, $2_1 | 0, $1_1 | 0);
  }
 }
 
 function $10($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = $3_1 + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
 }
 
 function $11($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$7 : {
   $2_1 = (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0;
   if ($2_1) {
    break label$7
   }
   if (($1_1 | 0) != ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0 | 0)) {
    break label$7
   }
   $2_1 = -1;
  }
  return $2_1 | 0;
 }
 
 function $12($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[(($1_1 << 2 | 0) + 4468 | 0) >> 2] | 0 | 0;
 }
 
 function $13($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $1_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
  return ($1_1 | 0) == (22 | 0) | ($1_1 | 0) == (102 | 0) | 0 | 0;
 }
 
 function $14($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  return (HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) == (3 | 0) | 0;
 }
 
 function $15($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($3_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($3_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$7 : {
   label$8 : {
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) != (19 | 0)) {
     break label$8
    }
    HEAPF64[($2_1 + 8 | 0) >> 3] = +HEAPF64[$1_1 >> 3];
    $1_1 = 1;
    break label$7;
   }
   $1_1 = $457($1_1 | 0, $2_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $16($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  return ((((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0) + -3 | 0) & 255 | 0) >>> 0 < 2 >>> 0 | 0;
 }
 
 function $17($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($4_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($4_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$7 : {
   label$8 : {
    if (($2_1 | 0) < (1 | 0)) {
     break label$8
    }
    $2_1 = (HEAP32[$3_1 >> 2] | 0) + ($2_1 << 4 | 0) | 0;
    if ($2_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$7
    }
    $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$7;
   }
   label$9 : {
    if (($2_1 | 0) < (-1000999 | 0)) {
     break label$9
    }
    $2_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($2_1 << 4 | 0) | 0;
    break label$7;
   }
   label$10 : {
    if (($2_1 | 0) != (-1001e3 | 0)) {
     break label$10
    }
    $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$7;
   }
   label$11 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$11
    }
    $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$7;
   }
   label$12 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((-1001e3 - $2_1 | 0 | 0) > (HEAPU8[($3_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$12
    }
    $2_1 = ($3_1 + ((-1001001 - $2_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$7;
   }
   $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$13 : {
   if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
    break label$13
   }
   if (($1_1 | 0) != ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0 | 0)) {
    break label$13
   }
   return 0 | 0;
  }
  label$14 : {
   if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
    break label$14
   }
   if (($2_1 | 0) != ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0 | 0)) {
    break label$14
   }
   return 0 | 0;
  }
  return $465(0 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $18($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (($1_1 & -2 | 0 | 0) != (12 | 0)) {
    break label$1
   }
   $3_1 = $2_1 + -16 | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($2_1 + 8 | 0) >> 0] = HEAPU8[($3_1 + 8 | 0) >> 0] | 0;
   $2_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
  }
  $3_1 = $2_1 + -32 | 0;
  $290($0_1 | 0, $1_1 | 0, $3_1 | 0, $2_1 + -16 | 0 | 0, $3_1 | 0);
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
 }
 
 function $19($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$4_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    if ((HEAPU8[($5_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $5_1 = HEAP32[$5_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($5_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($5_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$7 : {
   label$8 : {
    if (($2_1 | 0) < (1 | 0)) {
     break label$8
    }
    $2_1 = (HEAP32[$4_1 >> 2] | 0) + ($2_1 << 4 | 0) | 0;
    if ($2_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$7
    }
    $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$7;
   }
   label$9 : {
    if (($2_1 | 0) < (-1000999 | 0)) {
     break label$9
    }
    $2_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($2_1 << 4 | 0) | 0;
    break label$7;
   }
   label$10 : {
    if (($2_1 | 0) != (-1001e3 | 0)) {
     break label$10
    }
    $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$7;
   }
   label$11 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$11
    }
    $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$7;
   }
   label$12 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if ((-1001e3 - $2_1 | 0 | 0) > (HEAPU8[($4_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$12
    }
    $2_1 = ($4_1 + ((-1001001 - $2_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$7;
   }
   $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$13 : {
   if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
    break label$13
   }
   if (($1_1 | 0) != ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0 | 0)) {
    break label$13
   }
   return 0 | 0;
  }
  label$14 : {
   if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
    break label$14
   }
   if (($2_1 | 0) != ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0 | 0)) {
    break label$14
   }
   return 0 | 0;
  }
  $4_1 = 0;
  label$15 : {
   switch ($3_1 | 0) {
   case 0:
    return $465($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   case 1:
    return $463($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   case 2:
    $4_1 = $464($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    break;
   default:
    break label$15;
   };
  }
  return $4_1 | 0;
 }
 
 function $20($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $1_1 = $292($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  }
  return $1_1 | 0;
 }
 
 function $21($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$4_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($4_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($4_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$7 : {
   label$8 : {
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) != (19 | 0)) {
     break label$8
    }
    HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[$1_1 >> 3];
    $1_1 = 1;
    break label$7;
   }
   $1_1 = $457($1_1 | 0, $3_1 + 8 | 0 | 0) | 0;
  }
  label$9 : {
   if (!$2_1) {
    break label$9
   }
   HEAP32[$2_1 >> 2] = $1_1;
  }
  $5_1 = +HEAPF64[($3_1 + 8 | 0) >> 3];
  global$0 = $3_1 + 16 | 0;
  return +$5_1;
 }
 
 function $22($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $67_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$4_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($4_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($4_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$7 : {
   label$8 : {
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
     break label$8
    }
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $67_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $67_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
    $1_1 = 1;
    break label$7;
   }
   $1_1 = $460($1_1 | 0, $3_1 + 8 | 0 | 0, 0 | 0) | 0;
  }
  label$9 : {
   if (!$2_1) {
    break label$9
   }
   HEAP32[$2_1 >> 2] = $1_1;
  }
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $23($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $1_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
  return ($1_1 | 0) != (1 | 0) & ($1_1 & 15 | 0 | 0) != (0 | 0) | 0 | 0;
 }
 
 function $24($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $3_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($3_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($3_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $3_1 = ($3_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$7 : {
   label$8 : {
    label$9 : {
     switch (((HEAPU8[($3_1 + 8 | 0) >> 0] | 0) & 15 | 0) + -3 | 0 | 0) {
     default:
      $0_1 = 0;
      if (!$2_1) {
       break label$7
      }
      HEAP32[$2_1 >> 2] = 0;
      return 0 | 0;
     case 1:
      break label$8;
     case 0:
      break label$9;
     };
    }
    $294($0_1 | 0, $3_1 | 0);
    label$11 : {
     if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     $248($0_1 | 0);
    }
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    label$12 : {
     if (($1_1 | 0) < (1 | 0)) {
      break label$12
     }
     $3_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
     if ($3_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
      break label$8
     }
     $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
     break label$8;
    }
    label$13 : {
     if (($1_1 | 0) < (-1000999 | 0)) {
      break label$13
     }
     $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
     break label$8;
    }
    label$14 : {
     if (($1_1 | 0) != (-1001e3 | 0)) {
      break label$14
     }
     $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
     break label$8;
    }
    label$15 : {
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
      break label$15
     }
     $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
     break label$8;
    }
    label$16 : {
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($3_1 + 6 | 0) >> 0] | 0 | 0)) {
      break label$16
     }
     $3_1 = ($3_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
     break label$8;
    }
    $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
   }
   label$17 : {
    if (!$2_1) {
     break label$17
    }
    label$18 : {
     label$19 : {
      $0_1 = HEAP32[$3_1 >> 2] | 0;
      if ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
       break label$19
      }
      $0_1 = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
      break label$18;
     }
     $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    }
    HEAP32[$2_1 >> 2] = $0_1;
   }
   $0_1 = (HEAP32[$3_1 >> 2] | 0) + 16 | 0;
  }
  return $0_1 | 0;
 }
 
 function $25($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $3$hi = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  i64toi32_i32$0 = 0;
  $3_1 = 0;
  $3$hi = i64toi32_i32$0;
  label$7 : {
   switch (((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 63 | 0) + -4 | 0 | 0) {
   case 0:
    i64toi32_i32$2 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
   case 16:
    i64toi32_i32$2 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
   case 3:
    i64toi32_i32$2 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$0 | 0;
   case 1:
    i64toi32_i32$0 = $438(HEAP32[$1_1 >> 2] | 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
    break;
   default:
    break label$7;
   };
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $26($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $61_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $0_1 = 0;
  label$7 : {
   switch (((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0) + -2 | 0 | 0) {
   case 5:
    $1_1 = HEAP32[$1_1 >> 2] | 0;
    $61_1 = $1_1;
    $1_1 = HEAPU16[($1_1 + 6 | 0) >> 1] | 0;
    return $61_1 + ($1_1 ? ($1_1 << 4 | 0) + 24 | 0 : 16) | 0 | 0;
   case 0:
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    break;
   default:
    break label$7;
   };
  }
  return $0_1 | 0;
 }
 
 function $27($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $0_1 = 0;
  label$7 : {
   if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) != (72 | 0)) {
    break label$7
   }
   $0_1 = HEAP32[$1_1 >> 2] | 0;
  }
  return $0_1 | 0;
 }
 
 function $28($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $65_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$7 : {
   label$8 : {
    label$9 : {
     label$10 : {
      $2_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
      switch (($2_1 & 63 | 0) + -2 | 0 | 0) {
      case 0:
      case 5:
       break label$10;
      case 20:
       break label$8;
      default:
       break label$9;
      };
     }
     $0_1 = 0;
     label$11 : {
      switch (($2_1 & 15 | 0) + -2 | 0 | 0) {
      case 5:
       break label$11;
      case 0:
       break label$8;
      default:
       break label$7;
      };
     }
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     $65_1 = $1_1;
     $1_1 = HEAPU16[($1_1 + 6 | 0) >> 1] | 0;
     return $65_1 + ($1_1 ? ($1_1 << 4 | 0) + 24 | 0 : 16) | 0 | 0;
    }
    $0_1 = 0;
    if (!($2_1 & 64 | 0)) {
     break label$7
    }
   }
   $0_1 = HEAP32[$1_1 >> 2] | 0;
  }
  return $0_1 | 0;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 0] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
 }
 
 function $30($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($2_1 + 8 | 0) >> 0] = 19;
  HEAPF64[$2_1 >> 3] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
 }
 
 function $31($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($2_1 + 8 | 0) >> 0] = 3;
  i64toi32_i32$0 = $1$hi;
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
 }
 
 function $32($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $2_1 = $420($0_1 | 0, 1024 | 0) | 0;
    break label$1;
   }
   $2_1 = $417($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
  HEAP8[($1_1 + 8 | 0) >> 0] = HEAPU8[($2_1 + 4 | 0) >> 0] | 0 | 64 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  label$3 : {
   if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$3
   }
   $248($0_1 | 0);
  }
  return $2_1 + 16 | 0 | 0;
 }
 
 function $33($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $1_1 = 0;
    HEAP8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 0] = 0;
    break label$1;
   }
   $1_1 = $420($0_1 | 0, $1_1 | 0) | 0;
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = $1_1;
   HEAP8[($2_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
   $1_1 = $1_1 + 16 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  label$3 : {
   if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$3
   }
   $248($0_1 | 0);
  }
  return $1_1 | 0;
 }
 
 function $34($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $295($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  label$1 : {
   if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $248($0_1 | 0);
  }
  return $1_1 | 0;
 }
 
 function $35($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $295($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  label$1 : {
   if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $248($0_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $36($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $3_1 = 0, $38_1 = 0, $59_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP8[($2_1 + 8 | 0) >> 0] = 22;
   HEAP32[$2_1 >> 2] = $1_1;
   HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
   return;
  }
  $3_1 = $219($0_1 | 0, $2_1 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 - ($2_1 << 4 | 0) | 0;
  $2_1 = $2_1 + -1 | 0;
  $4_1 = $3_1 + ($2_1 << 4 | 0) | 0;
  $1_1 = $1_1 + -16 | 0;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $38_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $38_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($4_1 + 24 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
  label$2 : {
   if (!$2_1) {
    break label$2
   }
   label$3 : while (1) {
    $2_1 = $2_1 + -1 | 0;
    $1_1 = $2_1 << 4 | 0;
    $4_1 = $3_1 + $1_1 | 0;
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $1_1 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $59_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $59_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($4_1 + 24 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($2_1 + 8 | 0) >> 0] = 102;
  HEAP32[$2_1 >> 2] = $3_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  label$4 : {
   if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$4
   }
   $248($0_1 | 0);
  }
 }
 
 function $37($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 0] = $1_1 ? 17 : 1;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
 }
 
 function $38($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($2_1 + 8 | 0) >> 0] = 2;
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
 }
 
 function $39($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 8 | 0) >> 0] = 72;
  HEAP32[$1_1 >> 2] = $0_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  return (HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 160 | 0) >> 2] | 0 | 0) == ($0_1 | 0) | 0;
 }
 
 function $40($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $27_1 = 0;
  i64toi32_i32$0 = 0;
  $2_1 = $435(HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, 2 | 0, i64toi32_i32$0 | 0) | 0;
  $1_1 = $420($0_1 | 0, $1_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
     break label$2
    }
    $3_1 = $437(HEAP32[$2_1 >> 2] | 0 | 0, $1_1 | 0) | 0;
    if (!((HEAPU8[($3_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
     break label$2
    }
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $27_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[$2_1 >> 2] = $27_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP8[($2_1 + 8 | 0) >> 0] = HEAPU8[($3_1 + 8 | 0) >> 0] | 0;
    $2_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
    break label$1;
   }
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = $1_1;
   HEAP8[($4_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 16 | 0;
   $461($0_1 | 0, $2_1 | 0, $1_1 | 0, $1_1 | 0, $3_1 | 0);
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  }
  return (HEAPU8[($2_1 + -8 | 0) >> 0] | 0) & 15 | 0 | 0;
 }
 
 function $41($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $2_1 = 0;
  label$7 : {
   label$8 : {
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
     break label$8
    }
    $2_1 = $427(HEAP32[$1_1 >> 2] | 0 | 0, (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0 | 0) | 0;
    if (!((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
     break label$8
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP8[($1_1 + 8 | 0) >> 0] = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
    break label$7;
   }
   $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
   $461($0_1 | 0, $1_1 | 0, $3_1 | 0, $3_1 | 0, $2_1 | 0);
  }
  return (HEAPU8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -8 | 0) >> 0] | 0) & 15 | 0 | 0;
 }
 
 function $42($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($3_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($3_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $2_1 = $420($0_1 | 0, $2_1 | 0) | 0;
  $3_1 = 0;
  label$7 : {
   label$8 : {
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
     break label$8
    }
    $3_1 = $437(HEAP32[$1_1 >> 2] | 0 | 0, $2_1 | 0) | 0;
    if (!((HEAPU8[($3_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
     break label$8
    }
    $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP8[($1_1 + 8 | 0) >> 0] = HEAPU8[($3_1 + 8 | 0) >> 0] | 0;
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    break label$7;
   }
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = $2_1;
   HEAP8[($4_1 + 8 | 0) >> 0] = HEAPU8[($2_1 + 4 | 0) >> 0] | 0 | 64 | 0;
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $2_1 + 16 | 0;
   $461($0_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, $3_1 | 0);
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  }
  return (HEAPU8[($1_1 + -8 | 0) >> 0] | 0) & 15 | 0 | 0;
 }
 
 function $43($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $5$hi = 0, $5_1 = 0, $70_1 = 0, $70$hi = 0, $89_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$4_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($4_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($4_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $4_1 = 0;
  label$7 : {
   label$8 : {
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
     break label$8
    }
    label$9 : {
     label$10 : {
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + -1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $5_1 = i64toi32_i32$4;
      $5$hi = i64toi32_i32$5;
      $4_1 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$5 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = 0;
      $70_1 = i64toi32_i32$5;
      $70$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$5 = $70$hi;
      i64toi32_i32$3 = $70_1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$10
      }
      i64toi32_i32$0 = $5$hi;
      $4_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ($5_1 << 4 | 0) | 0;
      break label$9;
     }
     i64toi32_i32$0 = $2$hi;
     $4_1 = $435($4_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0;
    }
    if (!((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
     break label$8
    }
    $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    $89_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[$1_1 >> 2] = $89_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$2;
    HEAP8[($1_1 + 8 | 0) >> 0] = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
    break label$7;
   }
   HEAP8[($3_1 + 8 | 0) >> 0] = 3;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = $3_1;
   HEAP32[i64toi32_i32$0 >> 2] = $2_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   $461($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 16 | 0;
  $0_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 & 15 | 0 | 0;
 }
 
 function $44($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $73_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $1_1 = $427(HEAP32[$1_1 >> 2] | 0 | 0, (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0 | 0) | 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $3_1 = $2_1 + -16 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
  label$7 : {
   label$8 : {
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
     break label$8
    }
    $1_1 = 0;
    break label$7;
   }
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $73_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[i64toi32_i32$0 >> 2] = $73_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $1_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
  }
  HEAP8[($2_1 + -8 | 0) >> 0] = $1_1;
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 16 | 0;
  return (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0;
 }
 
 function $45($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $67_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($3_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($3_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  i64toi32_i32$0 = $2$hi;
  $1_1 = $435(HEAP32[$1_1 >> 2] | 0 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0;
  $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$7 : {
   label$8 : {
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
     break label$8
    }
    $1_1 = 0;
    break label$7;
   }
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $67_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[$3_1 >> 2] = $67_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $1_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
  }
  HEAP8[($3_1 + 8 | 0) >> 0] = $1_1;
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 16 | 0;
  return (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0;
 }
 
 function $46($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = $431($0_1 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($4_1 + 8 | 0) >> 0] = 69;
  HEAP32[$4_1 >> 2] = $3_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) > (0 | 0)) {
     break label$2
    }
    if (($2_1 | 0) < (1 | 0)) {
     break label$1
    }
   }
   $425($0_1 | 0, $3_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  label$3 : {
   if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$3
   }
   $248($0_1 | 0);
  }
 }
 
 function $47($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$7 : {
   label$8 : {
    label$9 : {
     label$10 : {
      $2_1 = (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0;
      switch ($2_1 + -5 | 0 | 0) {
      case 0:
       break label$10;
      case 2:
       break label$9;
      default:
       break label$8;
      };
     }
     $1_1 = (HEAP32[$1_1 >> 2] | 0) + 24 | 0;
     break label$7;
    }
    $1_1 = (HEAP32[$1_1 >> 2] | 0) + 12 | 0;
    break label$7;
   }
   $1_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) + 268 | 0;
  }
  label$11 : {
   $1_1 = HEAP32[$1_1 >> 2] | 0;
   if ($1_1) {
    break label$11
   }
   return 0 | 0;
  }
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($2_1 + 8 | 0) >> 0] = 69;
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  return 1 | 0;
 }
 
 function $48($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($3_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($3_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$7 : {
   label$8 : {
    label$9 : {
     if (($2_1 | 0) < (1 | 0)) {
      break label$9
     }
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     if ((HEAPU16[($1_1 + 6 | 0) >> 1] | 0 | 0) >= ($2_1 | 0)) {
      break label$8
     }
    }
    HEAP8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 0] = 0;
    $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $2_1 = -1;
    break label$7;
   }
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $1_1 = ($2_1 << 4 | 0) + $1_1 | 0;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 16 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $2_1 = (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $49($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $50($0_1 | 0, $435(HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, 2 | 0, 0 | 0) | 0 | 0, $1_1 | 0);
 }
 
 function $50($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = $420($0_1 | 0, $2_1 | 0) | 0;
  $3_1 = 0;
  label$1 : {
   if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
    break label$1
   }
   $3_1 = $437(HEAP32[$1_1 >> 2] | 0 | 0, $2_1 | 0) | 0;
   if (!((HEAPU8[($3_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
    break label$1
   }
   $2_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
   label$2 : {
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!((HEAPU8[($2_1 + -8 | 0) >> 0] | 0) & 64 | 0)) {
     break label$2
    }
    $1_1 = HEAP32[$1_1 >> 2] | 0;
    if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
     break label$2
    }
    if (!((HEAPU8[((HEAP32[($2_1 + -16 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
     break label$2
    }
    $235($0_1 | 0, $1_1 | 0);
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = $2_1 + -16 | 0;
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP8[($4_1 + 8 | 0) >> 0] = HEAPU8[($2_1 + 4 | 0) >> 0] | 0 | 64 | 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1 + 16 | 0;
  $462($0_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 + -16 | 0 | 0, $3_1 | 0);
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -32 | 0;
 }
 
 function $51($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $50($0_1 | 0, (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0 | 0, $2_1 | 0);
    return;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $50($0_1 | 0, (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0 | 0, $2_1 | 0);
    return;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $50($0_1 | 0, (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0 | 0, $2_1 | 0);
    return;
   }
   label$5 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $50($0_1 | 0, (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0 | 0, $2_1 | 0);
    return;
   }
   label$6 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($3_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $50($0_1 | 0, ($3_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0 | 0, $2_1 | 0);
    return;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $50($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $52($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, $6_1 = 0, $71_1 = 0, $71$hi = 0, $91_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$4_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($4_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($4_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $4_1 = 0;
  label$7 : {
   label$8 : {
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
     break label$8
    }
    label$9 : {
     label$10 : {
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + -1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      $4_1 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$5 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = 0;
      $71_1 = i64toi32_i32$5;
      $71$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$5 = $71$hi;
      i64toi32_i32$3 = $71_1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$10
      }
      i64toi32_i32$0 = $6$hi;
      $4_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0;
      break label$9;
     }
     i64toi32_i32$0 = $2$hi;
     $4_1 = $435($4_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0;
    }
    if (!((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
     break label$8
    }
    i64toi32_i32$3 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $91_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1;
    HEAP32[$4_1 >> 2] = $91_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$2;
    HEAP8[($4_1 + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$3 + 8 | 0) >> 0] | 0;
    $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!((HEAPU8[($4_1 + -8 | 0) >> 0] | 0) & 64 | 0)) {
     break label$7
    }
    $1_1 = HEAP32[$1_1 >> 2] | 0;
    if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
     break label$7
    }
    if (!((HEAPU8[((HEAP32[($4_1 + -16 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
     break label$7
    }
    $235($0_1 | 0, $1_1 | 0);
    break label$7;
   }
   HEAP8[($3_1 + 8 | 0) >> 0] = 3;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = $3_1;
   HEAP32[i64toi32_i32$0 >> 2] = $2_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
   $462($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0 | 0, $4_1 | 0);
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $53($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $3_1 = $2_1 + -32 | 0;
  $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$4_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < $2_1 >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = $2_1 + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$4_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  $3_1 = $434($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  $2_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
  HEAP8[($1_1 + 6 | 0) >> 0] = 0;
  label$7 : {
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!((HEAPU8[($3_1 + -8 | 0) >> 0] | 0) & 64 | 0)) {
    break label$7
   }
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
    break label$7
   }
   if (!((HEAPU8[((HEAP32[($3_1 + -16 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$7
   }
   $235($0_1 | 0, $1_1 | 0);
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $3_1 + -32 | 0;
 }
 
 function $54($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($3_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($3_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = $2$hi;
  $426($0_1 | 0, $3_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0 | 0);
  label$7 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!((HEAPU8[($1_1 + -8 | 0) >> 0] | 0) & 64 | 0)) {
    break label$7
   }
   if (!((HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
    break label$7
   }
   if (!((HEAPU8[((HEAP32[($1_1 + -16 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$7
   }
   $235($0_1 | 0, $3_1 | 0);
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + -16 | 0;
 }
 
 function $55($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$7 : {
   label$8 : {
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if ((HEAPU8[($2_1 + -8 | 0) >> 0] | 0) & 15 | 0) {
     break label$8
    }
    $2_1 = 0;
    break label$7;
   }
   $2_1 = HEAP32[($2_1 + -16 | 0) >> 2] | 0;
  }
  label$9 : {
   label$10 : {
    label$11 : {
     label$12 : {
      $3_1 = (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0;
      switch ($3_1 + -5 | 0 | 0) {
      case 2:
       break label$11;
      case 0:
       break label$12;
      default:
       break label$10;
      };
     }
     HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] = $2_1;
     if (!$2_1) {
      break label$9
     }
     label$13 : {
      $3_1 = HEAP32[$1_1 >> 2] | 0;
      if (!((HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
       break label$13
      }
      if (!((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
       break label$13
      }
      $233($0_1 | 0, $3_1 | 0, $2_1 | 0);
      $3_1 = HEAP32[$1_1 >> 2] | 0;
     }
     $238($0_1 | 0, $3_1 | 0, $2_1 | 0);
     break label$9;
    }
    HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] = $2_1;
    if (!$2_1) {
     break label$9
    }
    label$14 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if (!((HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
      break label$14
     }
     if (!((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
      break label$14
     }
     $233($0_1 | 0, $3_1 | 0, $2_1 | 0);
     $3_1 = HEAP32[$1_1 >> 2] | 0;
    }
    $238($0_1 | 0, $3_1 | 0, $2_1 | 0);
    break label$9;
   }
   HEAP32[(((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) + 268 | 0) >> 2] = $2_1;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
  return 1 | 0;
 }
 
 function $56($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $75_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($3_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($3_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $3_1 = 0;
  label$7 : {
   $2_1 = $2_1 + -1 | 0;
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if ($2_1 >>> 0 >= (HEAPU16[($4_1 + 6 | 0) >> 1] | 0) >>> 0) {
    break label$7
   }
   $3_1 = $4_1 + ($2_1 << 4 | 0) | 0;
   $2_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
   i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $75_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1 + 24 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $75_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($3_1 + 32 | 0) >> 0] = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
   $3_1 = 1;
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!((HEAPU8[($2_1 + -8 | 0) >> 0] | 0) & 64 | 0)) {
    break label$7
   }
   $1_1 = HEAP32[$1_1 >> 2] | 0;
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
    break label$7
   }
   if (!((HEAPU8[((HEAP32[($2_1 + -16 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$7
   }
   $235($0_1 | 0, $1_1 | 0);
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
  return $3_1 | 0;
 }
 
 function $57($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + (($1_1 ^ -1 | 0) << 4 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    if ((HEAP32[($0_1 + 96 | 0) >> 2] | 0) >>> 0 > 65535 >>> 0) {
     break label$2
    }
    HEAP32[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 16 | 0) >> 2] = $4_1;
    HEAP32[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 24 | 0) >> 2] = $3_1;
    $208($0_1 | 0, $1_1 | 0, $2_1 | 0);
    break label$1;
   }
   $209($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  label$3 : {
   if (($2_1 | 0) > (-1 | 0)) {
    break label$3
   }
   $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0) >>> 0 >= $0_1 >>> 0) {
    break label$3
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
  }
 }
 
 function $58($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if ($3_1) {
     break label$2
    }
    $7_1 = 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (($3_1 | 0) < (1 | 0)) {
      break label$4
     }
     $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     break label$3;
    }
    $7_1 = $0_1 + 12 | 0;
   }
   $7_1 = ((HEAP32[$7_1 >> 2] | 0) + ($3_1 << 4 | 0) | 0) - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
  }
  $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + (($1_1 ^ -1 | 0) << 4 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  label$5 : {
   label$6 : {
    label$7 : {
     if (!$5_1) {
      break label$7
     }
     if ((HEAP32[($0_1 + 96 | 0) >> 2] | 0) >>> 0 < 65536 >>> 0) {
      break label$6
     }
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
    $3_1 = $213($0_1 | 0, 1 | 0, $6_1 + 8 | 0 | 0, $1_1 - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0 | 0, $7_1 | 0) | 0;
    break label$5;
   }
   $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $1_1 - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   $5_1 = $3_1 + 20 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
   HEAP32[($0_1 + 92 | 0) >> 2] = $7_1;
   HEAP16[($3_1 + 34 | 0) >> 1] = (HEAPU16[($3_1 + 34 | 0) >> 1] | 0) & 65526 | 0 | (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0 | 8 | 0;
   $208($0_1 | 0, $1_1 | 0, $2_1 | 0);
   HEAP16[($3_1 + 34 | 0) >> 1] = (HEAPU16[($3_1 + 34 | 0) >> 1] | 0) & 65527 | 0;
   HEAP32[($0_1 + 92 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
   $3_1 = 0;
  }
  label$8 : {
   if (($2_1 | 0) > (-1 | 0)) {
    break label$8
   }
   $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0) >>> 0 >= $0_1 >>> 0) {
    break label$8
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
  }
  global$0 = $6_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $59($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $209($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $60($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $39_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $475($0_1 | 0, $5_1 + 8 | 0 | 0, $1_1 | 0, $2_1 | 0);
  label$1 : {
   $3_1 = $214($0_1 | 0, $5_1 + 8 | 0 | 0, ($3_1 ? $3_1 : 1025) | 0, $4_1 | 0) | 0;
   if ($3_1) {
    break label$1
   }
   $1_1 = HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0) >> 2] | 0;
   if (!(HEAPU8[($1_1 + 6 | 0) >> 0] | 0)) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $4_1 = $435(HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0, 2 | 0, i64toi32_i32$0 | 0) | 0;
   $2_1 = HEAP32[((HEAP32[($1_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   $39_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[i64toi32_i32$0 >> 2] = $39_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[(i64toi32_i32$0 + 8 | 0) >> 0] = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
   if (!((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[$4_1 >> 2] | 0;
   if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$1
   }
   $233($0_1 | 0, $1_1 | 0, $4_1 | 0);
  }
  global$0 = $5_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $61($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = 1;
  label$1 : {
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if ((HEAPU8[($5_1 + -8 | 0) >> 0] | 0 | 0) != (70 | 0)) {
    break label$1
   }
   $4_1 = $216($0_1 | 0, HEAP32[((HEAP32[($5_1 + -16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $62($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[($0_1 + 6 | 0) >> 0] | 0 | 0;
 }
 
 function $63($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = -1;
  label$1 : {
   label$2 : {
    label$3 : {
     switch ($1_1 | 0) {
     case 0:
      $2_1 = 0;
      HEAP8[($4_1 + 81 | 0) >> 0] = 0;
      break label$1;
     case 1:
      $2_1 = 0;
      $396($4_1 | 0, 0 | 0);
      HEAP8[($4_1 + 81 | 0) >> 0] = 1;
      break label$1;
     case 2:
      $2_1 = 0;
      $251($0_1 | 0, 0 | 0);
      break label$1;
     case 3:
      $2_1 = ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) >>> 10 | 0;
      break label$1;
     case 4:
      $2_1 = ((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0) & 1023 | 0;
      break label$1;
     case 5:
      $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
      $1_1 = HEAPU8[($4_1 + 81 | 0) >> 0] | 0;
      $2_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP8[($4_1 + 81 | 0) >> 0] = 1;
      label$14 : {
       if ($2_1) {
        break label$14
       }
       $396($4_1 | 0, 0 | 0);
       $248($0_1 | 0);
       HEAP8[($4_1 + 81 | 0) >> 0] = $1_1;
       break label$2;
      }
      $2_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ($2_1 << 10 | 0) | 0;
      $396($4_1 | 0, $2_1 | 0);
      label$15 : {
       if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
        break label$15
       }
       $248($0_1 | 0);
      }
      HEAP8[($4_1 + 81 | 0) >> 0] = $1_1;
      if (($2_1 | 0) >= (1 | 0)) {
       break label$2
      }
      $2_1 = 0;
      break label$1;
     case 6:
      $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
      $0_1 = HEAPU8[($4_1 + 83 | 0) >> 0] | 0;
      HEAP8[($4_1 + 83 | 0) >> 0] = (HEAP32[$2_1 >> 2] | 0 | 0) / (4 | 0) | 0;
      $2_1 = $0_1 << 2 | 0;
      break label$1;
     case 7:
      $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
      $0_1 = HEAPU8[($4_1 + 84 | 0) >> 0] | 0;
      HEAP8[($4_1 + 84 | 0) >> 0] = (HEAP32[$2_1 >> 2] | 0 | 0) / (4 | 0) | 0;
      $2_1 = $0_1 << 2 | 0;
      break label$1;
     case 9:
      $2_1 = HEAPU8[($4_1 + 81 | 0) >> 0] | 0;
      break label$1;
     case 10:
      $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
      $1_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = $2_1 + 8 | 0;
      $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      $2_1 = 10;
      label$16 : {
       if ((HEAPU8[($4_1 + 78 | 0) >> 0] | 0 | 0) == (1 | 0)) {
        break label$16
       }
       $2_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0 ? 10 : 11;
      }
      label$17 : {
       if (!$1_1) {
        break label$17
       }
       HEAP8[($4_1 + 79 | 0) >> 0] = $1_1;
      }
      label$18 : {
       if (!$5_1) {
        break label$18
       }
       HEAP8[($4_1 + 80 | 0) >> 0] = ($5_1 | 0) / (4 | 0) | 0;
      }
      $240($0_1 | 0, 1 | 0);
      break label$1;
     case 11:
      break label$3;
     default:
      break label$1;
     };
    }
    $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
    $1_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $5_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $2_1 + 12 | 0;
    $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    $2_1 = 10;
    label$19 : {
     if ((HEAPU8[($4_1 + 78 | 0) >> 0] | 0 | 0) == (1 | 0)) {
      break label$19
     }
     $2_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0 ? 10 : 11;
    }
    label$20 : {
     if (!$5_1) {
      break label$20
     }
     HEAP8[($4_1 + 83 | 0) >> 0] = ($5_1 | 0) / (4 | 0) | 0;
    }
    label$21 : {
     if (!$1_1) {
      break label$21
     }
     HEAP8[($4_1 + 84 | 0) >> 0] = ($1_1 | 0) / (4 | 0) | 0;
    }
    label$22 : {
     if (!$6_1) {
      break label$22
     }
     HEAP8[($4_1 + 85 | 0) >> 0] = $6_1;
    }
    $240($0_1 | 0, 0 | 0);
    break label$1;
   }
   $2_1 = (HEAPU8[($4_1 + 77 | 0) >> 0] | 0 | 0) == (8 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $64($0_1) {
  $0_1 = $0_1 | 0;
  $188($0_1 | 0);
  abort();
 }
 
 function $65($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $1_1 = $423($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0 | 0) | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 ? 16 : -16) | 0;
  return $1_1 | 0;
 }
 
 function $66($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    $3_1 = $2_1;
    break label$1;
   }
   $3_1 = $0_1 + 12 | 0;
   $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  }
  $2_1 = HEAP16[($2_1 + 32 | 0) >> 1] | 0;
  $223($0_1 | 0, (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0 | 0);
  label$3 : {
   if (($2_1 | 0) < (-1 | 0)) {
    break label$3
   }
   HEAP16[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 1] = -3 - $2_1 | 0;
  }
 }
 
 function $67($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (2 | 0)) {
     break label$2
    }
    $466($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   if ($1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $2_1 = $417($0_1 | 0, 1024 | 0, 0 | 0) | 0;
   HEAP32[$1_1 >> 2] = $2_1;
   HEAP8[($1_1 + 8 | 0) >> 0] = HEAPU8[($2_1 + 4 | 0) >> 0] | 0 | 64 | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  }
  label$3 : {
   if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$3
   }
   $248($0_1 | 0);
  }
 }
 
 function $68($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$2_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($2_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $467($0_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0);
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
 }
 
 function $69($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  }
  return HEAP32[(HEAP32[($0_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $70($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($0_1 + 728 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 732 | 0) >> 2] = $2_1;
 }
 
 function $71($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $409($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $72($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $421($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($2_1 + 8 | 0) >> 0] = 71;
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  label$1 : {
   if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $248($0_1 | 0);
  }
  $0_1 = HEAPU16[($1_1 + 6 | 0) >> 1] | 0;
  return $1_1 + ($0_1 ? ($0_1 << 4 | 0) + 24 | 0 : 16) | 0 | 0;
 }
 
 function $73($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($3_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($3_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $3_1 = 0;
  label$7 : {
   label$8 : {
    label$9 : {
     $4_1 = (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 63 | 0;
     if (($4_1 | 0) == (6 | 0)) {
      break label$9
     }
     if (($4_1 | 0) != (38 | 0)) {
      break label$7
     }
     $4_1 = $2_1 + -1 | 0;
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     if ($4_1 >>> 0 >= (HEAPU8[($1_1 + 6 | 0) >> 0] | 0) >>> 0) {
      break label$7
     }
     $1_1 = ($1_1 + ($4_1 << 4 | 0) | 0) + 16 | 0;
     $3_1 = 1024;
     break label$8;
    }
    $4_1 = $2_1 + -1 | 0;
    $1_1 = HEAP32[$1_1 >> 2] | 0;
    $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if ($4_1 >>> 0 >= (HEAP32[($2_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$7
    }
    $3_1 = HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + ($4_1 << 3 | 0) | 0) >> 2] | 0;
    $3_1 = $3_1 ? $3_1 + 16 | 0 : 1027;
    $1_1 = HEAP32[((HEAP32[(($1_1 + ($4_1 << 2 | 0) | 0) + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   }
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($4_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  }
  return $3_1 | 0;
 }
 
 function $74($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $5$hi = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($3_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($3_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $3_1 = 0;
  label$7 : {
   label$8 : {
    label$9 : {
     $4_1 = (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 63 | 0;
     if (($4_1 | 0) == (6 | 0)) {
      break label$9
     }
     if (($4_1 | 0) != (38 | 0)) {
      break label$7
     }
     $4_1 = $2_1 + -1 | 0;
     $2_1 = HEAP32[$1_1 >> 2] | 0;
     if ($4_1 >>> 0 >= (HEAPU8[($2_1 + 6 | 0) >> 0] | 0) >>> 0) {
      break label$7
     }
     $4_1 = ($2_1 + ($4_1 << 4 | 0) | 0) + 16 | 0;
     $3_1 = 1024;
     break label$8;
    }
    $4_1 = $2_1 + -1 | 0;
    $1_1 = HEAP32[$1_1 >> 2] | 0;
    $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if ($4_1 >>> 0 >= (HEAP32[($2_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$7
    }
    $3_1 = HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + ($4_1 << 3 | 0) | 0) >> 2] | 0;
    $3_1 = $3_1 ? $3_1 + 16 | 0 : 1027;
    $2_1 = HEAP32[(($1_1 + ($4_1 << 2 | 0) | 0) + 16 | 0) >> 2] | 0;
    $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   }
   $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $5_1 = HEAP32[$1_1 >> 2] | 0;
   $5$hi = i64toi32_i32$1;
   HEAP32[$4_1 >> 2] = $5_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $1_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
   HEAP8[($4_1 + 8 | 0) >> 0] = $1_1;
   if (!($1_1 & 64 | 0)) {
    break label$7
   }
   if (!((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
    break label$7
   }
   i64toi32_i32$1 = $5$hi;
   $1_1 = $5_1;
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$7
   }
   $233($0_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $75($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $4_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($4_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $4_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $4_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $4_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $4_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($4_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $4_1 = ($4_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $4_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  label$7 : {
   label$8 : {
    $5_1 = (HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 63 | 0;
    if (($5_1 | 0) == (38 | 0)) {
     break label$8
    }
    $4_1 = 0;
    if (($5_1 | 0) != (6 | 0)) {
     break label$7
    }
    label$9 : {
     label$10 : {
      if (($1_1 | 0) < (1 | 0)) {
       break label$10
      }
      $1_1 = (HEAP32[$3_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
      if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
      break label$9;
     }
     label$11 : {
      if (($1_1 | 0) < (-1000999 | 0)) {
       break label$11
      }
      $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
      break label$9;
     }
     label$12 : {
      if (($1_1 | 0) != (-1001e3 | 0)) {
       break label$12
      }
      $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
      break label$9;
     }
     label$13 : {
      $4_1 = HEAP32[$3_1 >> 2] | 0;
      if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
       break label$13
      }
      $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
      break label$9;
     }
     label$14 : {
      $4_1 = HEAP32[$4_1 >> 2] | 0;
      if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($4_1 + 6 | 0) >> 0] | 0 | 0)) {
       break label$14
      }
      $1_1 = ($4_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
      break label$9;
     }
     $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    }
    return HEAP32[((($2_1 << 2 | 0) + (HEAP32[$1_1 >> 2] | 0) | 0) + 12 | 0) >> 2] | 0 | 0;
   }
   $4_1 = ($2_1 << 4 | 0) + (HEAP32[$4_1 >> 2] | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $76($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[$5_1 >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if ($1_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$1
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$3 : {
    if (($1_1 | 0) < (-1000999 | 0)) {
     break label$3
    }
    $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != (-1001e3 | 0)) {
     break label$4
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$1;
   }
   label$5 : {
    $6_1 = HEAP32[$5_1 >> 2] | 0;
    if ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$5
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$1;
   }
   label$6 : {
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    if ((-1001e3 - $1_1 | 0 | 0) > (HEAPU8[($6_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$6
    }
    $1_1 = ($6_1 + ((-1001001 - $1_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$1;
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  $2_1 = (($2_1 << 2 | 0) + $1_1 | 0) + 12 | 0;
  label$7 : {
   label$8 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$8
    }
    $3_1 = (HEAP32[$5_1 >> 2] | 0) + ($3_1 << 4 | 0) | 0;
    if ($3_1 >>> 0 < (HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0) {
     break label$7
    }
    $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$7;
   }
   label$9 : {
    if (($3_1 | 0) < (-1000999 | 0)) {
     break label$9
    }
    $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($3_1 << 4 | 0) | 0;
    break label$7;
   }
   label$10 : {
    if (($3_1 | 0) != (-1001e3 | 0)) {
     break label$10
    }
    $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 40 | 0;
    break label$7;
   }
   label$11 : {
    $5_1 = HEAP32[$5_1 >> 2] | 0;
    if ((HEAPU8[($5_1 + 8 | 0) >> 0] | 0 | 0) != (22 | 0)) {
     break label$11
    }
    $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
    break label$7;
   }
   label$12 : {
    $5_1 = HEAP32[$5_1 >> 2] | 0;
    if ((-1001e3 - $3_1 | 0 | 0) > (HEAPU8[($5_1 + 6 | 0) >> 0] | 0 | 0)) {
     break label$12
    }
    $3_1 = ($5_1 + ((-1001001 - $3_1 | 0) << 4 | 0) | 0) + 16 | 0;
    break label$7;
   }
   $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 56 | 0;
  }
  $3_1 = HEAP32[((($4_1 << 2 | 0) + (HEAP32[$3_1 >> 2] | 0) | 0) + 12 | 0) >> 2] | 0;
  HEAP32[$2_1 >> 2] = $3_1;
  label$13 : {
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
    break label$13
   }
   if (!((HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$13
   }
   $233($0_1 | 0, $1_1 | 0, $3_1 | 0);
  }
 }
 
 function $77($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  $258($0_1 | 0, $1_1 | 0);
  abort();
 }
 
 function $78($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0;
  $3_1 = 0;
  label$1 : {
   if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   label$2 : {
    switch ((HEAP32[$1_1 >> 2] | 0) + -1 | 0 | 0) {
    case 2:
     HEAP8[($2_1 + 8 | 0) >> 0] = 1;
     return 1 | 0;
    case 1:
     HEAP8[($2_1 + 8 | 0) >> 0] = 17;
     return 1 | 0;
    case 0:
     HEAP8[($2_1 + 8 | 0) >> 0] = 0;
     return 1 | 0;
    case 6:
     $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     HEAP8[($2_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
     return 1 | 0;
    case 10:
     $1_1 = $79($0_1 | 0, $1_1 | 0) | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP8[($2_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
     return 1 | 0;
    default:
     break label$2;
    };
   }
   $3_1 = $80($1_1 | 0, $2_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $79($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[(HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($1_1 + 8 | 0) >> 2] | 0, 24) | 0 | 0;
 }
 
 function $80($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $19_1 = 0, $4_1 = 0.0;
  $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   label$2 : {
    switch ((HEAP32[$0_1 >> 2] | 0) + -5 | 0 | 0) {
    case 1:
     $2_1 = 1;
     if (!$1_1) {
      break label$1
     }
     i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     HEAP8[($1_1 + 8 | 0) >> 0] = 3;
     $19_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $1_1;
     HEAP32[$1_1 >> 2] = $19_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     return 1 | 0;
    case 0:
     break label$2;
    default:
     break label$1;
    };
   }
   $2_1 = 1;
   if (!$1_1) {
    break label$1
   }
   $4_1 = +HEAPF64[($0_1 + 8 | 0) >> 3];
   HEAP8[($1_1 + 8 | 0) >> 0] = 19;
   HEAPF64[$1_1 >> 3] = $4_1;
  }
  return $2_1 | 0;
 }
 
 function $81($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $3_1 = 0;
  label$1 : {
   $3_1 = $82($0_1 | 0) | 0;
   $4_1 = HEAP32[$3_1 >> 2] | 0;
   if (($4_1 & 127 | 0 | 0) != (8 | 0)) {
    break label$1
   }
   $5_1 = $2_1 + $1_1 | 0;
   $6_1 = ($4_1 >>> 7 | 0) & 255 | 0;
   $7_1 = $6_1 + (($4_1 >>> 16 | 0) & 255 | 0) | 0;
   label$2 : {
    label$3 : {
     if (($6_1 | 0) > ($1_1 | 0)) {
      break label$3
     }
     if (($7_1 + 1 | 0 | 0) >= ($1_1 | 0)) {
      break label$2
     }
    }
    if (($6_1 | 0) < ($1_1 | 0)) {
     break label$1
    }
    if (($6_1 | 0) > ($5_1 | 0)) {
     break label$1
    }
   }
   $1_1 = ($6_1 | 0) < ($1_1 | 0) ? $6_1 : $1_1;
   HEAP32[$3_1 >> 2] = ($1_1 << 7 | 0) & 32640 | 0 | ($4_1 & -16744321 | 0) | 0 | ((((($7_1 | 0) < ($5_1 | 0) ? $5_1 + 255 | 0 : $7_1) - $1_1 | 0) << 16 | 0) & 16711680 | 0) | 0;
   return;
  }
  $83($0_1 | 0, 8 | 0, $1_1 | 0, $2_1 + -1 | 0 | 0, 0 | 0, 0 | 0) | 0;
 }
 
 function $82($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = 1120;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (($2_1 | 0) <= (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $1_1 = (($2_1 << 2 | 0) + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0) | 0) + -4 | 0;
  }
  return $1_1 | 0;
 }
 
 function $83($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $84($0_1 | 0, $2_1 << 7 | 0 | $1_1 | 0 | ($3_1 << 16 | 0) | 0 | ($4_1 << 24 | 0) | 0 | ($5_1 << 15 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $84($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  $3_1 = $280(HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $2_1 + 20 | 0 | 0, 4 | 0, 1073741823 | 0, 1037 | 0) | 0;
  HEAP32[($2_1 + 52 | 0) >> 2] = $3_1;
  $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $4_1 + 1 | 0;
  HEAP32[($3_1 + ($4_1 << 2 | 0) | 0) >> 2] = $1_1;
  $96($0_1 | 0, $2_1 | 0, HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
  return (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + -1 | 0 | 0;
 }
 
 function $85($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    if (($2_1 | 0) == (-1 | 0)) {
     break label$2
    }
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    if (($3_1 | 0) == (-1 | 0)) {
     break label$1
    }
    label$3 : while (1) {
     $1_1 = $3_1;
     $3_1 = $86($0_1 | 0, $1_1 | 0) | 0;
     if (($3_1 | 0) != (-1 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $87($0_1 | 0, $1_1 | 0, $2_1 | 0);
   }
   return;
  }
  HEAP32[$1_1 >> 2] = $2_1;
 }
 
 function $86($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = ((HEAP32[((HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0) >>> 7 | 0) + -16777215 | 0;
  return (($0_1 | 0) == (-1 | 0) ? -1 : ($1_1 + $0_1 | 0) + 1 | 0) | 0;
 }
 
 function $87($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $2_1 = ($1_1 ^ -1 | 0) + $2_1 | 0;
   if (($2_1 + 16777215 | 0) >>> 0 < 33554432 >>> 0) {
    break label$1
   }
   $258(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, 1124 | 0);
   abort();
  }
  $1_1 = (HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  HEAP32[$1_1 >> 2] = ($2_1 << 7 | 0 | ((HEAP32[$1_1 >> 2] | 0) & 127 | 0) | 0) + 2147483520 | 0;
 }
 
 function $88($0_1) {
  $0_1 = $0_1 | 0;
  return $89($0_1 | 0) | 0 | 0;
 }
 
 function $89($0_1) {
  $0_1 = $0_1 | 0;
  return $84($0_1 | 0, 2147483448 | 0) | 0 | 0;
 }
 
 function $90($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $83($0_1 | 0, ($2_1 ? (($2_1 | 0) == (1 | 0) ? 72 : 70) : 71) | 0, $1_1 | 0, $2_1 + 1 | 0 | 0, 0 | 0, 0 | 0) | 0;
 }
 
 function $91($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $92($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $93($0_1 | 0, $1_1 | 0, $2_1 | 0, 255 | 0, $2_1 | 0);
 }
 
 function $93($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   if (($1_1 | 0) == (-1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $5_1 = $86($0_1 | 0, $1_1 | 0) | 0;
    $87($0_1 | 0, $1_1 | 0, ($94($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0 ? $2_1 : $4_1) | 0);
    $1_1 = $5_1;
    if (($1_1 | 0) != (-1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $94($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   $1_1 = $135($0_1 | 0, $1_1 | 0) | 0;
   $0_1 = HEAP32[$1_1 >> 2] | 0;
   if (($0_1 & 127 | 0 | 0) != (67 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (($2_1 | 0) == (255 | 0)) {
      break label$3
     }
     if ((($0_1 >>> 16 | 0) & 255 | 0 | 0) == ($2_1 | 0)) {
      break label$3
     }
     $3_1 = $0_1 & -32641 | 0 | (($2_1 << 7 | 0) & 32640 | 0) | 0;
     break label$2;
    }
    $3_1 = $0_1 & 32768 | 0 | (($0_1 >>> 9 | 0) & 32640 | 0) | 0 | 66 | 0;
   }
   HEAP32[$1_1 >> 2] = $3_1;
   $3_1 = 1;
  }
  return $3_1 | 0;
 }
 
 function $95($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $92($0_1 | 0, $1_1 | 0, $91($0_1 | 0) | 0 | 0);
 }
 
 function $96($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0;
  $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + -1 | 0;
  label$1 : {
   label$2 : {
    $4_1 = $2_1 - (HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
    $5_1 = $4_1 >> 31 | 0;
    if ((($4_1 + $5_1 | 0) ^ $5_1 | 0 | 0) > (127 | 0)) {
     break label$2
    }
    $5_1 = HEAPU8[($0_1 + 53 | 0) >> 0] | 0;
    HEAP8[($0_1 + 53 | 0) >> 0] = $5_1 + 1 | 0;
    if ($5_1 >>> 0 < 121 >>> 0) {
     break label$1
    }
   }
   $4_1 = $280(HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $1_1 + 36 | 0 | 0, 8 | 0, 536870911 | 0, 1151 | 0) | 0;
   HEAP32[($1_1 + 68 | 0) >> 2] = $4_1;
   $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $4_1 = $4_1 + ($5_1 << 3 | 0) | 0;
   HEAP32[$4_1 >> 2] = $3_1;
   HEAP32[($0_1 + 36 | 0) >> 2] = $5_1 + 1 | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $2_1;
   HEAP8[($0_1 + 53 | 0) >> 0] = 0;
   $4_1 = -128;
  }
  $5_1 = $280(HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 64 | 0) >> 2] | 0 | 0, $3_1 | 0, $1_1 + 24 | 0 | 0, 1 | 0, 2147483647 | 0, 1037 | 0) | 0;
  HEAP32[($1_1 + 64 | 0) >> 2] = $5_1;
  HEAP8[($5_1 + $3_1 | 0) >> 0] = $4_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
 }
 
 function $97($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $84($0_1 | 0, $2_1 << 7 | 0 | $1_1 | 0 | ($3_1 << 15 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $98($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $84($0_1 | 0, $2_1 << 7 | 0 | $1_1 | 0 | (($3_1 << 15 | 0) + 2147450880 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $99($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) + $1_1 | 0;
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (($1_1 | 0) <= (HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0)) {
     break label$2
    }
    if (($1_1 | 0) >= (255 | 0)) {
     break label$1
    }
    HEAP8[($2_1 + 8 | 0) >> 0] = $1_1;
   }
   return;
  }
  $258(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, 1045 | 0);
  abort();
 }
 
 function $100($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $99($0_1 | 0, $1_1 | 0);
  HEAP8[($0_1 + 52 | 0) >> 0] = (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) + $1_1 | 0;
 }
 
 function $101($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   i64toi32_i32$0 = $2$hi;
   if (!($102($2_1 | 0, i64toi32_i32$0 | 0) | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $2$hi;
   $98($0_1 | 0, 1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return;
  }
  i64toi32_i32$0 = $2$hi;
  $104($0_1 | 0, $1_1 | 0, $103($0_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0 | 0);
 }
 
 function $102($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$3 = 65535;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + 0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 131072;
  return i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0 | 0;
 }
 
 function $103($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 24 | 0) >> 0] = 2;
  i64toi32_i32$0 = $1$hi;
  HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
  HEAP8[($2_1 + 8 | 0) >> 0] = 3;
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $0_1 = $106($0_1 | 0, $2_1 + 16 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $104($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (($2_1 | 0) > (131071 | 0)) {
    break label$1
   }
   $97($0_1 | 0, 3 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return;
  }
  $97($0_1 | 0, 4 | 0, $1_1 | 0, 0 | 0) | 0;
  $105($0_1 | 0, $2_1 | 0);
 }
 
 function $105($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $84($0_1 | 0, $1_1 << 7 | 0 | 82 | 0 | 0) | 0;
 }
 
 function $106($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $6_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $79_1 = 0;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $5_1 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
    $4_1 = $434($5_1 | 0, HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
    if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
     break label$2
    }
    $6_1 = HEAP32[$4_1 >> 2] | 0;
    if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) <= ($6_1 | 0)) {
     break label$2
    }
    $1_1 = (HEAP32[($3_1 + 48 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0;
    if (((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) ^ (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) | 0) & 63 | 0) {
     break label$2
    }
    if ($465(0 | 0, $1_1 | 0, $2_1 | 0) | 0) {
     break label$1
    }
   }
   $1_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   HEAP8[($4_1 + 8 | 0) >> 0] = 3;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = $6_1 >> 31 | 0;
   i64toi32_i32$1 = $4_1;
   HEAP32[$4_1 >> 2] = $6_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $4_1 = $280($5_1 | 0, HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0, $6_1 | 0, $3_1 + 16 | 0 | 0, 16 | 0, 33554431 | 0, 1157 | 0) | 0;
   HEAP32[($3_1 + 48 | 0) >> 2] = $4_1;
   label$3 : {
    $7_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
    if (($1_1 | 0) >= ($7_1 | 0)) {
     break label$3
    }
    label$4 : while (1) {
     HEAP8[(($4_1 + ($1_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 0;
     $1_1 = $1_1 + 1 | 0;
     if (($1_1 | 0) < ($7_1 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   $1_1 = $4_1 + ($6_1 << 4 | 0) | 0;
   i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $79_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[$1_1 >> 2] = $79_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($1_1 + 8 | 0) >> 0] = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 1 | 0;
   if (!((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
    break label$1
   }
   if (!((HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[$2_1 >> 2] | 0;
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$1
   }
   $233($5_1 | 0, $3_1 | 0, $1_1 | 0);
  }
  return $6_1 | 0;
 }
 
 function $107($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = (HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0) + ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
  $4_1 = HEAP32[$3_1 >> 2] | 0;
  label$1 : {
   if ((HEAP32[$1_1 >> 2] | 0 | 0) != (18 | 0)) {
    break label$1
   }
   HEAP32[$3_1 >> 2] = ($2_1 << 24 | 0 | ($4_1 & 16777215 | 0) | 0) + 16777216 | 0;
   return;
  }
  HEAP32[$3_1 >> 2] = ($2_1 << 24 | 0 | ($4_1 & 16744575 | 0) | 0 | ((HEAPU8[($0_1 + 52 | 0) >> 0] | 0) << 7 | 0) | 0) + 16777216 | 0;
  $100($0_1 | 0, 1 | 0);
 }
 
 function $108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   switch ((HEAP32[$1_1 >> 2] | 0) + -18 | 0 | 0) {
   case 0:
    HEAP32[$1_1 >> 2] = 8;
    HEAP32[($1_1 + 8 | 0) >> 2] = ((HEAP32[((HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0) + ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 7 | 0) & 255 | 0;
    return;
   case 1:
    HEAP8[(((HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0) + ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = 2;
    HEAP32[$1_1 >> 2] = 17;
    break;
   default:
    break label$1;
   };
  }
 }
 
 function $109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   switch ((HEAP32[$1_1 >> 2] | 0) + -9 | 0 | 0) {
   case 2:
    $110($79($0_1 | 0, $1_1 | 0) | 0 | 0, $1_1 | 0);
    return;
   case 0:
    HEAP32[$1_1 >> 2] = 8;
    HEAP32[($1_1 + 8 | 0) >> 2] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
    return;
   case 1:
    $0_1 = $83($0_1 | 0, 9 | 0, 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 17;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    return;
   case 4:
    $0_1 = $83($0_1 | 0, 11 | 0, 0 | 0, HEAPU8[($1_1 + 10 | 0) >> 0] | 0 | 0, HEAP16[($1_1 + 8 | 0) >> 1] | 0 | 0, 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 17;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    return;
   case 5:
    $2_1 = $1_1 + 10 | 0;
    $111($0_1 | 0, HEAPU8[$2_1 >> 0] | 0 | 0);
    $0_1 = $83($0_1 | 0, 13 | 0, 0 | 0, HEAPU8[$2_1 >> 0] | 0 | 0, HEAP16[($1_1 + 8 | 0) >> 1] | 0 | 0, 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 17;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    return;
   case 6:
    $2_1 = $1_1 + 10 | 0;
    $111($0_1 | 0, HEAPU8[$2_1 >> 0] | 0 | 0);
    $0_1 = $83($0_1 | 0, 14 | 0, 0 | 0, HEAPU8[$2_1 >> 0] | 0 | 0, HEAP16[($1_1 + 8 | 0) >> 1] | 0 | 0, 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 17;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    return;
   case 3:
    $2_1 = $1_1 + 10 | 0;
    $112($0_1 | 0, HEAPU8[$2_1 >> 0] | 0 | 0, HEAP16[($1_1 + 8 | 0) >> 1] | 0 | 0);
    $0_1 = $83($0_1 | 0, 12 | 0, 0 | 0, HEAPU8[$2_1 >> 0] | 0 | 0, HEAP16[($1_1 + 8 | 0) >> 1] | 0 | 0, 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = 17;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    return;
   case 9:
   case 10:
    $108($0_1 | 0, $1_1 | 0);
    break;
   default:
    break label$1;
   };
  }
 }
 
 function $110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          $2_1 = (HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 63 | 0;
          switch ($2_1 | 0) {
          case 2:
           break label$1;
          case 4:
           break label$2;
          case 0:
           break label$3;
          case 1:
           break label$5;
          case 3:
           break label$7;
          default:
           break label$8;
          };
         }
         switch ($2_1 + -17 | 0 | 0) {
         case 3:
          break label$2;
         case 0:
          break label$4;
         case 2:
          break label$6;
         default:
          break label$1;
         };
        }
        HEAP32[$1_1 >> 2] = 6;
        i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
        HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
        return;
       }
       HEAP32[$1_1 >> 2] = 5;
       HEAPF64[($1_1 + 8 | 0) >> 3] = +HEAPF64[$0_1 >> 3];
       return;
      }
      HEAP32[$1_1 >> 2] = 3;
      return;
     }
     HEAP32[$1_1 >> 2] = 2;
     return;
    }
    HEAP32[$1_1 >> 2] = 1;
    return;
   }
   HEAP32[$1_1 >> 2] = 7;
   HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  }
 }
 
 function $111($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($300($0_1 | 0) | 0 | 0) > ($1_1 | 0)) {
    break label$1
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) + -1 | 0;
  }
 }
 
 function $112($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = ($1_1 | 0) > ($2_1 | 0);
  $111($0_1 | 0, ($3_1 ? $1_1 : $2_1) | 0);
  $111($0_1 | 0, ($3_1 ? $2_1 : $1_1) | 0);
 }
 
 function $113($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $109($0_1 | 0, $1_1 | 0);
  $114($0_1 | 0, $1_1 | 0);
  $100($0_1 | 0, 1 | 0);
  $115($0_1 | 0, $1_1 | 0, (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) + -1 | 0 | 0);
 }
 
 function $114($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ((HEAP32[$1_1 >> 2] | 0 | 0) != (8 | 0)) {
    break label$1
   }
   $111($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
  }
 }
 
 function $115($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $116($0_1 | 0, $1_1 | 0, $2_1 | 0);
  label$1 : {
   if ((HEAP32[$1_1 >> 2] | 0 | 0) != (16 | 0)) {
    break label$1
   }
   $85($0_1 | 0, $1_1 + 16 | 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   if (($3_1 | 0) == ($4_1 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ($117($0_1 | 0, $3_1 | 0) | 0) {
      break label$4
     }
     if ($117($0_1 | 0, $4_1 | 0) | 0) {
      break label$4
     }
     $4_1 = -1;
     $5_1 = -1;
     break label$3;
    }
    $3_1 = -1;
    label$5 : {
     if ((HEAP32[$1_1 >> 2] | 0 | 0) == (16 | 0)) {
      break label$5
     }
     $3_1 = $88($0_1 | 0) | 0;
    }
    $5_1 = $118($0_1 | 0, $2_1 | 0, 6 | 0) | 0;
    $4_1 = $118($0_1 | 0, $2_1 | 0, 7 | 0) | 0;
    $95($0_1 | 0, $3_1 | 0);
   }
   $3_1 = $91($0_1 | 0) | 0;
   $93($0_1 | 0, HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 | 0, $5_1 | 0);
   $93($0_1 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 | 0, $4_1 | 0);
  }
  HEAP32[($1_1 + 16 | 0) >> 2] = -1;
  HEAP32[($1_1 + 20 | 0) >> 2] = -1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$1_1 >> 2] = 8;
 }
 
 function $116($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0;
  $109($0_1 | 0, $1_1 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     switch ((HEAP32[$1_1 >> 2] | 0) + -1 | 0 | 0) {
     case 0:
      $81($0_1 | 0, $2_1 | 0, 1 | 0);
      break label$2;
     case 2:
      $83($0_1 | 0, 5 | 0, $2_1 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
      break label$2;
     case 1:
      $83($0_1 | 0, 7 | 0, $2_1 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
      break label$2;
     case 6:
      $142($0_1 | 0, $1_1 | 0);
     case 3:
      $104($0_1 | 0, $2_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
      break label$2;
     case 4:
      $174($0_1 | 0, $2_1 | 0, +(+HEAPF64[($1_1 + 8 | 0) >> 3]));
      break label$2;
     case 5:
      i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $101($0_1 | 0, $2_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0);
      break label$2;
     case 16:
      $0_1 = (HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0) + ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0;
      HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -32641 | 0 | (($2_1 << 7 | 0) & 32640 | 0) | 0;
      break label$2;
     case 7:
      break label$3;
     default:
      break label$1;
     };
    }
    $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    if (($3_1 | 0) == ($2_1 | 0)) {
     break label$2
    }
    $83($0_1 | 0, 0 | 0, $2_1 | 0, $3_1 | 0, 0 | 0, 0 | 0) | 0;
   }
   HEAP32[$1_1 >> 2] = 8;
   HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
  }
 }
 
 function $117($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) == (-1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     if (((HEAP32[($135($0_1 | 0, $1_1 | 0) | 0) >> 2] | 0) & 127 | 0 | 0) == (67 | 0)) {
      break label$3
     }
     return 1 | 0;
    }
    $1_1 = $86($0_1 | 0, $1_1 | 0) | 0;
    if (($1_1 | 0) != (-1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $118($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $91($0_1 | 0) | 0;
  return $83($0_1 | 0, $2_1 | 0, $1_1 | 0, 0 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function $119($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $109($0_1 | 0, $1_1 | 0);
  label$1 : {
   label$2 : {
    if ((HEAP32[$1_1 >> 2] | 0 | 0) != (8 | 0)) {
     break label$2
    }
    $2_1 = $1_1 + 8 | 0;
    if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    if ((HEAP32[$2_1 >> 2] | 0 | 0) < ($300($0_1 | 0) | 0 | 0)) {
     break label$2
    }
    $115($0_1 | 0, $1_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $113($0_1 | 0, $1_1 | 0);
   $2_1 = $1_1 + 8 | 0;
  }
  return HEAP32[$2_1 >> 2] | 0 | 0;
 }
 
 function $120($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[$1_1 >> 2] | 0 | 0) != (10 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   $119($0_1 | 0, $1_1 | 0) | 0;
  }
 }
 
 function $121($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $119($0_1 | 0, $1_1 | 0) | 0;
   return;
  }
  $109($0_1 | 0, $1_1 | 0);
 }
 
 function $122($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 1;
  label$1 : {
   if ($123($0_1 | 0, $1_1 | 0) | 0) {
    break label$1
   }
   $119($0_1 | 0, $1_1 | 0) | 0;
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $123($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = 0;
  label$1 : {
   if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     switch ((HEAP32[$1_1 >> 2] | 0) + -1 | 0 | 0) {
     case 1:
      $0_1 = $124($0_1 | 0) | 0;
      break label$2;
     case 2:
      $0_1 = $125($0_1 | 0) | 0;
      break label$2;
     case 0:
      $0_1 = $126($0_1 | 0) | 0;
      break label$2;
     case 5:
      i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $0_1 = $103($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0) | 0;
      break label$2;
     case 4:
      $0_1 = $127($0_1 | 0, +(+HEAPF64[($1_1 + 8 | 0) >> 3])) | 0;
      break label$2;
     case 6:
      $0_1 = $128($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      break label$2;
     case 3:
      break label$3;
     default:
      break label$1;
     };
    }
    $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   }
   if (($0_1 | 0) > (255 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[$1_1 >> 2] = 4;
   $2_1 = 1;
  }
  return $2_1 | 0;
 }
 
 function $124($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP8[($1_1 + 8 | 0) >> 0] = 17;
  $0_1 = $106($0_1 | 0, $1_1 | 0, $1_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $125($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP8[($1_1 + 8 | 0) >> 0] = 1;
  $0_1 = $106($0_1 | 0, $1_1 | 0, $1_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $126($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  HEAP8[($1_1 + 8 | 0) >> 0] = 0;
  $2_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
  HEAP8[($1_1 + 24 | 0) >> 0] = 69;
  HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
  $0_1 = $106($0_1 | 0, $1_1 + 16 | 0 | 0, $1_1 | 0) | 0;
  global$0 = $1_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $127($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 8 | 0) >> 0] = 19;
  HEAPF64[$2_1 >> 3] = $1_1;
  $0_1 = $106($0_1 | 0, $2_1 | 0, $2_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP8[($2_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
  $1_1 = $106($0_1 | 0, $2_1 | 0, $2_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $129($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   label$2 : {
    switch ((HEAP32[$1_1 >> 2] | 0) + -9 | 0 | 0) {
    case 0:
     $114($0_1 | 0, $2_1 | 0);
     $115($0_1 | 0, $2_1 | 0, HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0);
     return;
    case 1:
     $83($0_1 | 0, 10 | 0, $119($0_1 | 0, $2_1 | 0) | 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0) | 0;
     break label$1;
    case 4:
     $130($0_1 | 0, 15 | 0, HEAPU8[($1_1 + 10 | 0) >> 0] | 0 | 0, HEAP16[($1_1 + 8 | 0) >> 1] | 0 | 0, $2_1 | 0);
     break label$1;
    case 5:
     $130($0_1 | 0, 17 | 0, HEAPU8[($1_1 + 10 | 0) >> 0] | 0 | 0, HEAP16[($1_1 + 8 | 0) >> 1] | 0 | 0, $2_1 | 0);
     break label$1;
    case 6:
     $130($0_1 | 0, 18 | 0, HEAPU8[($1_1 + 10 | 0) >> 0] | 0 | 0, HEAP16[($1_1 + 8 | 0) >> 1] | 0 | 0, $2_1 | 0);
     break label$1;
    case 3:
     break label$2;
    default:
     break label$1;
    };
   }
   $130($0_1 | 0, 16 | 0, HEAPU8[($1_1 + 10 | 0) >> 0] | 0 | 0, HEAP16[($1_1 + 8 | 0) >> 1] | 0 | 0, $2_1 | 0);
  }
  $114($0_1 | 0, $2_1 | 0);
 }
 
 function $130($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = $122($0_1 | 0, $4_1 | 0) | 0;
  $83($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
 }
 
 function $131($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $119($0_1 | 0, $1_1 | 0) | 0;
  $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  $114($0_1 | 0, $1_1 | 0);
  $4_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
  HEAP32[$1_1 >> 2] = 8;
  HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
  $100($0_1 | 0, 2 | 0);
  $130($0_1 | 0, 20 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 | 0);
  $114($0_1 | 0, $2_1 | 0);
 }
 
 function $132($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $109($0_1 | 0, $1_1 | 0);
  $2_1 = -1;
  label$1 : {
   label$2 : {
    switch ((HEAP32[$1_1 >> 2] | 0) + -2 | 0 | 0) {
    case 14:
     $133($0_1 | 0, $1_1 | 0);
     $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     break label$1;
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
     break label$1;
    default:
     break label$2;
    };
   }
   $2_1 = $134($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
  }
  $85($0_1 | 0, $1_1 + 20 | 0 | 0, $2_1 | 0);
  $95($0_1 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0);
  HEAP32[($1_1 + 16 | 0) >> 2] = -1;
 }
 
 function $133($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $135($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) ^ 32768 | 0;
 }
 
 function $134($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if ((HEAP32[$1_1 >> 2] | 0 | 0) != (17 | 0)) {
    break label$1
   }
   $3_1 = HEAP32[((HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0) + ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   if (($3_1 & 127 | 0 | 0) != (51 | 0)) {
    break label$1
   }
   $136($0_1 | 0);
   return $137($0_1 | 0, 66 | 0, ($3_1 >>> 16 | 0) & 255 | 0 | 0, 0 | 0, 0 | 0, !$2_1 | 0) | 0 | 0;
  }
  $138($0_1 | 0, $1_1 | 0);
  $114($0_1 | 0, $1_1 | 0);
  return $137($0_1 | 0, 67 | 0, 255 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $135($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = (HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = $0_1 + -4 | 0;
    if ((HEAPU8[(((HEAP32[$1_1 >> 2] | 0) & 127 | 0) + 3360 | 0) >> 0] | 0) & 16 | 0) {
     break label$1
    }
   }
   $1_1 = $0_1;
  }
  return $1_1 | 0;
 }
 
 function $136($0_1) {
  $0_1 = $0_1 | 0;
  $169($0_1 | 0);
  HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + -1 | 0;
 }
 
 function $137($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $83($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0;
  return $88($0_1 | 0) | 0 | 0;
 }
 
 function $138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ((HEAP32[$1_1 >> 2] | 0 | 0) == (8 | 0)) {
    break label$1
   }
   $100($0_1 | 0, 1 | 0);
   $116($0_1 | 0, $1_1 | 0, (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) + -1 | 0 | 0);
  }
 }
 
 function $139($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $109($0_1 | 0, $1_1 | 0);
  $2_1 = -1;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     switch ($3_1 + -1 | 0 | 0) {
     case 0:
     case 2:
      break label$1;
     case 1:
      break label$2;
     default:
      break label$3;
     };
    }
    if (($3_1 | 0) != (16 | 0)) {
     break label$2
    }
    $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   $2_1 = $134($0_1 | 0, $1_1 | 0, 1 | 0) | 0;
  }
  $85($0_1 | 0, $1_1 + 16 | 0 | 0, $2_1 | 0);
  $95($0_1 | 0, HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0);
  HEAP32[($1_1 + 20 | 0) >> 2] = -1;
 }
 
 function $140($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) != (6 | 0)) {
    break label$1
   }
   $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0);
  }
  return $1_1 | 0;
 }
 
 function $141($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if ((HEAP32[$2_1 >> 2] | 0 | 0) != (7 | 0)) {
    break label$1
   }
   $142($0_1 | 0, $2_1 | 0);
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        $3_1 = HEAP32[$1_1 >> 2] | 0;
        if (($3_1 | 0) != (10 | 0)) {
         break label$7
        }
        if ($143($0_1 | 0, $2_1 | 0) | 0) {
         break label$6
        }
        $119($0_1 | 0, $1_1 | 0) | 0;
        $3_1 = HEAP32[$1_1 >> 2] | 0;
       }
       switch ($3_1 + -9 | 0 | 0) {
       case 0:
        break label$5;
       case 1:
        break label$6;
       default:
        break label$4;
       };
      }
      HEAP8[($1_1 + 10 | 0) >> 0] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      $3_1 = $1_1 + 8 | 0;
      $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      $4_1 = 13;
      break label$2;
     }
     $3_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
     break label$3;
    }
    $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   }
   HEAP8[($1_1 + 10 | 0) >> 0] = $3_1;
   $3_1 = $1_1 + 8 | 0;
   label$8 : {
    if (!($143($0_1 | 0, $2_1 | 0) | 0)) {
     break label$8
    }
    $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    $4_1 = 15;
    break label$2;
   }
   label$9 : {
    if (!($144($2_1 | 0) | 0)) {
     break label$9
    }
    $2_1 = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
    $4_1 = 14;
    break label$2;
   }
   $4_1 = 12;
   $2_1 = $119($0_1 | 0, $2_1 | 0) | 0;
  }
  HEAP16[$3_1 >> 1] = $2_1;
  HEAP32[$1_1 >> 2] = $4_1;
 }
 
 function $142($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $128($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 4;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
 }
 
 function $143($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if ((HEAP32[$1_1 >> 2] | 0 | 0) != (4 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   if (($1_1 | 0) > (255 | 0)) {
    break label$1
   }
   $2_1 = (HEAPU8[(((HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0 | 0) == (68 | 0);
  }
  return $2_1 | 0;
 }
 
 function $144($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   if ($140($0_1 | 0) | 0) {
    break label$1
   }
   return 0 | 0;
  }
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  return i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < 256 >>> 0 | 0) | 0 | 0;
 }
 
 function $145($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $109($0_1 | 0, $2_1 | 0);
  label$1 : {
   label$2 : {
    switch ($1_1 | 0) {
    case 0:
    case 1:
     if ($146($0_1 | 0, $1_1 + 12 | 0 | 0, $2_1 | 0, 1096 | 0) | 0) {
      break label$1
     }
    case 3:
     $147($0_1 | 0, $1_1 + 49 | 0 | 0, $2_1 | 0, $3_1 | 0);
     return;
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $148($0_1 | 0, $2_1 | 0);
  }
 }
 
 function $146($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0.0, $5_1 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  label$1 : {
   if (!($80($2_1 | 0, $4_1 + 32 | 0 | 0) | 0)) {
    break label$1
   }
   if (!($80($3_1 | 0, $4_1 + 16 | 0 | 0) | 0)) {
    break label$1
   }
   if (!($149($1_1 | 0, $4_1 + 32 | 0 | 0, $4_1 + 16 | 0 | 0) | 0)) {
    break label$1
   }
   $288(HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, $1_1 | 0, $4_1 + 32 | 0 | 0, $4_1 + 16 | 0 | 0, $4_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = 6;
     i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
     break label$2;
    }
    $6_1 = +HEAPF64[$4_1 >> 3];
    if ($6_1 == 0.0 | $6_1 != $6_1 | 0) {
     break label$1
    }
    HEAPF64[($2_1 + 8 | 0) >> 3] = $6_1;
    HEAP32[$2_1 >> 2] = 5;
   }
   $5_1 = 1;
  }
  global$0 = $4_1 + 48 | 0;
  return $5_1 | 0;
 }
 
 function $147($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $119($0_1 | 0, $2_1 | 0) | 0;
  $114($0_1 | 0, $2_1 | 0);
  $1_1 = $83($0_1 | 0, $1_1 | 0, 0 | 0, $4_1 | 0, 0 | 0, 0 | 0) | 0;
  HEAP32[$2_1 >> 2] = 17;
  HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
  $150($0_1 | 0, $3_1 | 0);
 }
 
 function $148($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    switch ((HEAP32[$1_1 >> 2] | 0) + -1 | 0 | 0) {
    case 0:
    case 2:
     HEAP32[$1_1 >> 2] = 2;
     break label$1;
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
     HEAP32[$1_1 >> 2] = 3;
     break label$1;
    case 15:
     $133($0_1 | 0, $1_1 | 0);
     break label$1;
    case 7:
    case 16:
     break label$2;
    default:
     break label$1;
    };
   }
   $138($0_1 | 0, $1_1 | 0);
   $114($0_1 | 0, $1_1 | 0);
   $2_1 = $83($0_1 | 0, 51 | 0, 0 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0) | 0;
   HEAP32[$1_1 >> 2] = 17;
   HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
  }
  $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
  $151($0_1 | 0, $3_1 | 0);
  $151($0_1 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0);
 }
 
 function $149($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0.0, $29_1 = 0, $40_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   if ($0_1 >>> 0 > 13 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      $0_1 = 1 << $0_1 | 0;
      if ($0_1 & 12160 | 0) {
       break label$4
      }
      if (!($0_1 & 104 | 0)) {
       break label$1
      }
      if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
       break label$3
      }
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = 0;
      $5_1 = +(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0);
      break label$2;
     }
     label$5 : {
      label$6 : {
       if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
        break label$6
       }
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $29_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $3_1;
       HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $29_1;
       HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
       break label$5;
      }
      $4_1 = 0;
      if (!($459($1_1 | 0, $3_1 + 8 | 0 | 0, 0 | 0) | 0)) {
       break label$1
      }
     }
     label$7 : {
      if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      $40_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1;
      HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $40_1;
      HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
      $4_1 = 1;
      break label$1;
     }
     $4_1 = ($459($2_1 | 0, $3_1 + 8 | 0 | 0, 0 | 0) | 0 | 0) != (0 | 0);
     break label$1;
    }
    $5_1 = +HEAPF64[$2_1 >> 3];
   }
   $4_1 = $5_1 != 0.0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $150($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $169($0_1 | 0);
  $96($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1_1 | 0);
 }
 
 function $151($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) == (-1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $94($0_1 | 0, $1_1 | 0, 255 | 0) | 0;
    $1_1 = $86($0_1 | 0, $1_1 | 0) | 0;
    if (($1_1 | 0) != (-1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $152($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $109($0_1 | 0, $2_1 | 0);
  label$1 : {
   label$2 : {
    switch ($1_1 | 0) {
    case 19:
     $132($0_1 | 0, $2_1 | 0);
     break label$1;
    case 20:
     $139($0_1 | 0, $2_1 | 0);
     break label$1;
    case 12:
     $113($0_1 | 0, $2_1 | 0);
     break label$1;
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
     if ($80($2_1 | 0, 0 | 0) | 0) {
      break label$1
     }
     $119($0_1 | 0, $2_1 | 0) | 0;
     break label$1;
    case 13:
    case 16:
     if ($80($2_1 | 0, 0 | 0) | 0) {
      break label$1
     }
     $122($0_1 | 0, $2_1 | 0) | 0;
     break label$1;
    case 14:
    case 15:
    case 17:
    case 18:
     break label$2;
    default:
     break label$1;
    };
   }
   if ($153($2_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0) {
    break label$1
   }
   $119($0_1 | 0, $2_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $153($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $5_1 = 0, $5$hi = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch ((HEAP32[$0_1 >> 2] | 0) + -5 | 0 | 0) {
     case 1:
      i64toi32_i32$0 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $14_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1;
      HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $14_1;
      HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
      break label$2;
     case 0:
      break label$3;
     default:
      break label$1;
     };
    }
    $4_1 = 0;
    if (!($458(+(+HEAPF64[($0_1 + 8 | 0) >> 3]), $3_1 + 8 | 0 | 0, 0 | 0) | 0)) {
     break label$1
    }
    HEAP32[$2_1 >> 2] = 1;
   }
   label$5 : {
    if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
     break label$5
    }
    $4_1 = 0;
    break label$1;
   }
   $4_1 = 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$0;
   if (!($154(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0) | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $5$hi;
   HEAP32[$1_1 >> 2] = $5_1 + 127 | 0;
   $4_1 = 1;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $154($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$3 = 127;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + 0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 256;
  return i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0 | 0;
 }
 
 function $155($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $24_1 = 0, $29_1 = 0, $32_1 = 0, $43_1 = 0, $48_1 = 0, $51_1 = 0;
  $109($0_1 | 0, $3_1 | 0);
  label$1 : {
   label$2 : {
    if (($1_1 | 0) > (11 | 0)) {
     break label$2
    }
    if ($146($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    switch ($1_1 | 0) {
    case 19:
     $85($0_1 | 0, $3_1 + 20 | 0 | 0, HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $3_1 + 16 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $24_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 16 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $24_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $3_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $29_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $29_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     $32_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[$2_1 >> 2] = $32_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 20:
     $1_1 = $3_1 + 16 | 0;
     $4_1 = $2_1 + 16 | 0;
     $85($0_1 | 0, $1_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $43_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $4_1;
     HEAP32[i64toi32_i32$1 >> 2] = $43_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $3_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $48_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $48_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     $51_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[$2_1 >> 2] = $51_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 12:
     $113($0_1 | 0, $3_1 | 0);
     $156($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     return;
    case 0:
    case 2:
     $157($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     return;
    case 1:
     if ($158($0_1 | 0, $2_1 | 0, $3_1 | 0, 21 | 0, $4_1 | 0, 7 | 0) | 0) {
      break label$1
     }
    case 3:
    case 4:
    case 5:
    case 6:
     $159($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, 0 | 0, $4_1 | 0);
     return;
    case 7:
    case 8:
    case 9:
     $160($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     return;
    case 10:
     label$15 : {
      if (!($161($2_1 | 0) | 0)) {
       break label$15
      }
      $162($2_1 | 0, $3_1 | 0);
      $163($0_1 | 0, 33 | 0, $2_1 | 0, $3_1 | 0, 1 | 0, $4_1 | 0, 16 | 0);
      return;
     }
     if ($158($0_1 | 0, $2_1 | 0, $3_1 | 0, 32 | 0, $4_1 | 0, 16 | 0) | 0) {
      break label$1
     }
     $164($0_1 | 0, 44 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     return;
    case 11:
     label$16 : {
      if (!($161($3_1 | 0) | 0)) {
       break label$16
      }
      $163($0_1 | 0, 32 | 0, $2_1 | 0, $3_1 | 0, 0 | 0, $4_1 | 0, 17 | 0);
      return;
     }
     $164($0_1 | 0, 45 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     return;
    case 13:
    case 16:
     $165($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
     return;
    case 14:
    case 15:
     $166($0_1 | 0, $1_1 + 44 | 0 | 0, $2_1 | 0, $3_1 | 0);
     return;
    case 17:
    case 18:
     break label$3;
    default:
     break label$1;
    };
   }
   $162($2_1 | 0, $3_1 | 0);
   $166($0_1 | 0, $1_1 + 41 | 0 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $156($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = $82($0_1 | 0) | 0;
   $5_1 = HEAP32[$4_1 >> 2] | 0;
   if (($5_1 & 127 | 0 | 0) != (53 | 0)) {
    break label$1
   }
   $114($0_1 | 0, $2_1 | 0);
   HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) & -16744321 | 0 | ((($5_1 & 16711680 | 0) + 65536 | 0) & 16711680 | 0) | 0 | (((HEAP32[($1_1 + 8 | 0) >> 2] | 0) << 7 | 0) & 32640 | 0) | 0;
   return;
  }
  $83($0_1 | 0, 53 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 2 | 0, 0 | 0, 0 | 0) | 0;
  $114($0_1 | 0, $2_1 | 0);
  $150($0_1 | 0, $3_1 | 0);
 }
 
 function $157($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = 0;
  label$1 : {
   if (!($80($2_1 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $162($2_1 | 0, $3_1 | 0);
   $5_1 = 1;
  }
  label$2 : {
   if ($1_1) {
    break label$2
   }
   if (!($161($3_1 | 0) | 0)) {
    break label$2
   }
   $163($0_1 | 0, 21 | 0, $2_1 | 0, $3_1 | 0, $5_1 | 0, $4_1 | 0, 6 | 0);
   return;
  }
  $159($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $5_1 | 0, $4_1 | 0);
 }
 
 function $158($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, i64toi32_i32$2 = 0, $7$hi = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $6_1 = 0;
  $6_1 = 0;
  label$1 : {
   if (!($140($2_1 | 0) | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   $7_1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   $7$hi = i64toi32_i32$1;
   if (!($154($7_1 | 0, $7$hi | 0) | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < $7_1 >>> 0) + $7$hi | 0;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
   if (!($154(i64toi32_i32$2 - $7_1 | 0 | 0, i64toi32_i32$5 | 0) | 0)) {
    break label$1
   }
   i64toi32_i32$5 = $7$hi;
   i64toi32_i32$5 = $7$hi;
   $167($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, 127 - $7_1 | 0 | 0, 0 | 0, $4_1 | 0, 47 | 0, $5_1 | 0);
   HEAP8[((((HEAP32[($0_1 + 16 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0) | 0) + -2 | 0) >> 0] = (($7_1 << 16 | 0) + 8323072 | 0) >>> 16 | 0;
   $6_1 = 1;
  }
  return $6_1 | 0;
 }
 
 function $159($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($80($3_1 | 0, 0 | 0) | 0)) {
    break label$1
   }
   if (!($123($0_1 | 0, $3_1 | 0) | 0)) {
    break label$1
   }
   $167($0_1 | 0, $2_1 | 0, $3_1 | 0, $1_1 + 22 | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0, $5_1 | 0, 48 | 0, $1_1 + 6 | 0 | 0);
   return;
  }
  $1_1 = $1_1 + 34 | 0;
  label$2 : {
   if (!$4_1) {
    break label$2
   }
   $162($2_1 | 0, $3_1 | 0);
  }
  $164($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $5_1 | 0);
 }
 
 function $160($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[$2_1 >> 2] | 0 | 0) != (6 | 0)) {
     break label$2
    }
    if (!($122($0_1 | 0, $2_1 | 0) | 0)) {
     break label$2
    }
    $162($2_1 | 0, $3_1 | 0);
    $5_1 = 1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[$3_1 >> 2] | 0 | 0) != (6 | 0)) {
     break label$3
    }
    $5_1 = 0;
    if ($122($0_1 | 0, $3_1 | 0) | 0) {
     break label$1
    }
   }
   $164($0_1 | 0, $1_1 + 34 | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $167($0_1 | 0, $2_1 | 0, $3_1 | 0, $1_1 + 22 | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0, $4_1 | 0, 48 | 0, $1_1 + 6 | 0 | 0);
 }
 
 function $161($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0;
  label$1 : {
   if ($140($0_1 | 0) | 0) {
    break label$1
   }
   return 0 | 0;
  }
  i64toi32_i32$1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  return ($154(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0) | 0 | 0) != (0 | 0) | 0;
 }
 
 function $162($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $17_1 = 0, $25_1 = 0, $28_1 = 0, $33_1 = 0, $38_1 = 0, $41_1 = 0, $44_1 = 0, $47_1 = 0, $50_1 = 0;
  $2_1 = global$0 - 32 | 0;
  $3_1 = ($2_1 + 8 | 0) + 16 | 0;
  $4_1 = $0_1 + 16 | 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[i64toi32_i32$0 >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $5_1 = ($2_1 + 8 | 0) + 8 | 0;
  $6_1 = $0_1 + 8 | 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[i64toi32_i32$1 >> 2] = $25_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $28_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  $7_1 = $1_1 + 16 | 0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $33_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[i64toi32_i32$1 >> 2] = $33_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $4_1 = $1_1 + 8 | 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $38_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $38_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $41_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $41_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $44_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $7_1;
  HEAP32[i64toi32_i32$0 >> 2] = $44_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $47_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[i64toi32_i32$1 >> 2] = $47_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $50_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[i64toi32_i32$0 >> 2] = $50_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $163($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $167($0_1 | 0, $2_1 | 0, $3_1 | 0, $1_1 | 0, (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 127 | 0 | 0, $4_1 | 0, $5_1 | 0, 47 | 0, $6_1 | 0);
 }
 
 function $164($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $167($0_1 | 0, $2_1 | 0, $3_1 | 0, $1_1 | 0, $119($0_1 | 0, $3_1 | 0) | 0 | 0, 0 | 0, $4_1 | 0, 46 | 0, $1_1 + -28 | 0 | 0);
 }
 
 function $165($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $7_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   if ((HEAP32[$2_1 >> 2] | 0 | 0) == (8 | 0)) {
    break label$1
   }
   $162($2_1 | 0, $3_1 | 0);
  }
  $5_1 = $119($0_1 | 0, $2_1 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!($153($3_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = 61;
    $7_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    break label$2;
   }
   label$4 : {
    if (!($122($0_1 | 0, $3_1 | 0) | 0)) {
     break label$4
    }
    $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $6_1 = 60;
    break label$2;
   }
   $6_1 = 57;
   $7_1 = $119($0_1 | 0, $3_1 | 0) | 0;
  }
  $168($0_1 | 0, $2_1 | 0, $3_1 | 0);
  $0_1 = $137($0_1 | 0, $6_1 | 0, $5_1 | 0, $7_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, ($1_1 | 0) == (13 | 0) | 0) | 0;
  HEAP32[$2_1 >> 2] = 16;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $166($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!($153($3_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0) | 0)) {
     break label$2
    }
    $1_1 = $1_1 + 4 | 0;
    $5_1 = $119($0_1 | 0, $2_1 | 0) | 0;
    $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   label$3 : {
    if (!($153($2_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0) | 0)) {
     break label$3
    }
    $1_1 = ($1_1 | 0) == (58 | 0) ? 64 : 65;
    $5_1 = $119($0_1 | 0, $3_1 | 0) | 0;
    $6_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   $5_1 = $119($0_1 | 0, $2_1 | 0) | 0;
   $6_1 = $119($0_1 | 0, $3_1 | 0) | 0;
  }
  $168($0_1 | 0, $2_1 | 0, $3_1 | 0);
  $0_1 = $137($0_1 | 0, $1_1 | 0, $5_1 | 0, $6_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  HEAP32[$2_1 >> 2] = 16;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $167($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $9_1 = 0;
  $9_1 = $119($0_1 | 0, $1_1 | 0) | 0;
  $3_1 = $83($0_1 | 0, $3_1 | 0, 0 | 0, $9_1 | 0, $4_1 | 0, 0 | 0) | 0;
  $168($0_1 | 0, $1_1 | 0, $2_1 | 0);
  HEAP32[$1_1 >> 2] = 17;
  HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
  $150($0_1 | 0, $6_1 | 0);
  $83($0_1 | 0, $7_1 | 0, $9_1 | 0, $4_1 | 0, $8_1 | 0, $5_1 | 0) | 0;
  $150($0_1 | 0, $6_1 | 0);
 }
 
 function $168($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = -1;
  $4_1 = -1;
  label$1 : {
   if ((HEAP32[$1_1 >> 2] | 0 | 0) != (8 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  }
  label$2 : {
   if ((HEAP32[$2_1 >> 2] | 0 | 0) != (8 | 0)) {
    break label$2
   }
   $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  }
  $112($0_1 | 0, $4_1 | 0, $3_1 | 0);
 }
 
 function $169($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP8[(((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + 64 | 0) >> 2] | 0) | 0) + -1 | 0) >> 0] | 0;
   if (($1_1 | 0) == (-128 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) - $1_1 | 0;
   HEAP8[($0_1 + 53 | 0) >> 0] = (HEAPU8[($0_1 + 53 | 0) >> 0] | 0) + -1 | 0;
   return;
  }
  HEAP8[($0_1 + 53 | 0) >> 0] = 121;
  HEAP32[($0_1 + 36 | 0) >> 2] = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + -1 | 0;
 }
 
 function $170($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $0_1 = (HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($4_1) {
     break label$2
    }
    $4_1 = 0;
    break label$1;
   }
   $4_1 = (($287($4_1 | 0) | 0) << 16 | 0) + 65536 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = (($3_1 | 0) / (256 | 0) | 0) << 7 | 0 | 82 | 0;
  HEAP32[$0_1 >> 2] = $2_1 << 7 | 0 | ($3_1 << 24 | 0) | 0 | ((($3_1 | 0) > (255 | 0)) << 15 | 0) | 0 | $4_1 | 0 | 19 | 0;
 }
 
 function $171($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = ($3_1 | 0) == (-1 | 0) ? 0 : $3_1;
  label$1 : {
   label$2 : {
    if (($2_1 | 0) > (255 | 0)) {
     break label$2
    }
    $83($0_1 | 0, 78 | 0, $1_1 | 0, $3_1 | 0, $2_1 | 0, 0 | 0) | 0;
    break label$1;
   }
   $83($0_1 | 0, 78 | 0, $1_1 | 0, $3_1 | 0, $2_1 & 255 | 0 | 0, 1 | 0) | 0;
   $105($0_1 | 0, $2_1 >>> 8 | 0 | 0);
  }
  HEAP8[($0_1 + 52 | 0) >> 0] = $1_1 + 1 | 0;
 }
 
 function $172($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   $2_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $3_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
        $4_1 = $3_1 + ($2_1 << 2 | 0) | 0;
        $5_1 = HEAP32[$4_1 >> 2] | 0;
        $6_1 = $5_1 & 127 | 0;
        switch ($6_1 + -69 | 0 | 0) {
        case 0:
        case 1:
         break label$5;
        case 2:
        case 3:
         break label$6;
        default:
         break label$4;
        };
       }
       label$7 : {
        if (HEAPU8[($0_1 + 54 | 0) >> 0] | 0) {
         break label$7
        }
        if (!(HEAPU8[($1_1 + 7 | 0) >> 0] | 0)) {
         break label$3
        }
       }
       $5_1 = $5_1 & -128 | 0 | 70 | 0;
       HEAP32[$4_1 >> 2] = $5_1;
      }
      label$8 : {
       if (!(HEAPU8[($0_1 + 54 | 0) >> 0] | 0)) {
        break label$8
       }
       $5_1 = $5_1 | 32768 | 0;
       HEAP32[$4_1 >> 2] = $5_1;
      }
      if (!(HEAPU8[($1_1 + 7 | 0) >> 0] | 0)) {
       break label$3
      }
      HEAP32[$4_1 >> 2] = ((HEAPU8[($1_1 + 6 | 0) >> 0] | 0) << 24 | 0 | ($5_1 & 16777215 | 0) | 0) + 16777216 | 0;
      break label$3;
     }
     if (($6_1 | 0) != (56 | 0)) {
      break label$3
     }
     $87($0_1 | 0, $2_1 | 0, $173($3_1 | 0, $2_1 | 0) | 0 | 0);
    }
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = HEAP32[($0_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
    if (($3_1 & 127 | 0 | 0) != (56 | 0)) {
     break label$1
    }
    $1_1 = ($1_1 + ($3_1 >>> 7 | 0) | 0) + -16777214 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != (100 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $174($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $3_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!($458(+$2_1, $3_1 + 8 | 0 | 0, 0 | 0) | 0)) {
     break label$2
    }
    i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $4$hi = i64toi32_i32$1;
    if (!($102($4_1 | 0, i64toi32_i32$1 | 0) | 0)) {
     break label$2
    }
    i64toi32_i32$1 = $4$hi;
    $98($0_1 | 0, 2 | 0, $1_1 | 0, $4_1 | 0) | 0;
    break label$1;
   }
   $104($0_1 | 0, $1_1 | 0, $127($0_1 | 0, +$2_1) | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $175($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = !$1_1 | !$2_1 | 0;
  $5_1 = $4_1 ? 0 : $1_1;
  $4_1 = $4_1 ? 0 : $2_1;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $2_1 = HEAPU16[($1_1 + 34 | 0) >> 1] | 0;
   if ($2_1 & 2 | 0) {
    break label$1
   }
   HEAP32[($0_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  }
  HEAP32[($0_1 + 108 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 88 | 0) >> 2] = $5_1;
  HEAP32[($0_1 + 112 | 0) >> 2] = $4_1 & 255 | 0;
  label$2 : {
   if (!$4_1) {
    break label$2
   }
   label$3 : while (1) {
    label$4 : {
     if ($2_1 & 2 | 0) {
      break label$4
     }
     HEAP32[($1_1 + 20 | 0) >> 2] = 1;
    }
    $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    $2_1 = HEAPU16[($1_1 + 34 | 0) >> 1] | 0;
    continue label$3;
   };
  }
 }
 
 function $176($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 88 | 0) >> 2] | 0 | 0;
 }
 
 function $177($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 112 | 0) >> 2] | 0 | 0;
 }
 
 function $178($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0;
 }
 
 function $179($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $0_1 = $0_1 + 52 | 0;
   $5_1 = ($4_1 | 0) != ($0_1 | 0);
   label$2 : {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     $6_1 = $1_1;
     break label$2;
    }
    label$4 : {
     if (($4_1 | 0) != ($0_1 | 0)) {
      break label$4
     }
     $6_1 = $1_1;
     break label$2;
    }
    label$5 : while (1) {
     $6_1 = $1_1 + -1 | 0;
     $4_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     $5_1 = ($4_1 | 0) != ($0_1 | 0);
     if (($1_1 | 0) < (2 | 0)) {
      break label$2
     }
     $1_1 = $6_1;
     if (($4_1 | 0) != ($0_1 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   if ($6_1) {
    break label$1
   }
   if (!$5_1) {
    break label$1
   }
   HEAP32[($2_1 + 104 | 0) >> 2] = $4_1;
   $3_1 = 1;
  }
  return $3_1 | 0;
 }
 
 function $180($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) & 2 | 0) {
      break label$3
     }
     $5_1 = HEAP32[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 2] | 0;
     label$4 : {
      if (($2_1 | 0) > (-1 | 0)) {
       break label$4
      }
      label$5 : {
       if (HEAPU8[($5_1 + 7 | 0) >> 0] | 0) {
        break label$5
       }
       return 0 | 0;
      }
      $5_1 = 0;
      $1_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      if (($1_1 | 0) < (0 - $2_1 | 0 | 0)) {
       break label$1
      }
      HEAP32[$3_1 >> 2] = ($4_1 - ($1_1 << 4 | 0) | 0) + (($2_1 ^ -1 | 0) << 4 | 0) | 0;
      return 1641 | 0;
     }
     $5_1 = $232($5_1 | 0, $2_1 | 0, (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) - (HEAP32[($5_1 + 52 | 0) >> 2] | 0) | 0) >> 2 | 0) + -1 | 0 | 0) | 0;
     if ($5_1) {
      break label$2
     }
    }
    label$6 : {
     label$7 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
       break label$7
      }
      $0_1 = $0_1 + 12 | 0;
      break label$6;
     }
     $0_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    }
    $5_1 = 0;
    if (($2_1 | 0) < (1 | 0)) {
     break label$1
    }
    if ((((HEAP32[$0_1 >> 2] | 0) - ($4_1 + 16 | 0) | 0) >> 4 | 0 | 0) < ($2_1 | 0)) {
     break label$1
    }
    $5_1 = (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) & 2 | 0 ? 1437 : 1425;
   }
   if (!$3_1) {
    break label$1
   }
   HEAP32[$3_1 >> 2] = $4_1 + ($2_1 << 4 | 0) | 0;
  }
  return $5_1 | 0;
 }
 
 function $181($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $3_1 = 0;
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if ((HEAPU8[($0_1 + -8 | 0) >> 0] | 0 | 0) != (70 | 0)) {
     break label$1
    }
    return $232(HEAP32[((HEAP32[($0_1 + -16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, $2_1 | 0, 0 | 0) | 0 | 0;
   }
   $1_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) & 2 | 0) {
       break label$5
      }
      $3_1 = HEAP32[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 2] | 0;
      label$6 : {
       if (($2_1 | 0) > (-1 | 0)) {
        break label$6
       }
       label$7 : {
        if (HEAPU8[($3_1 + 7 | 0) >> 0] | 0) {
         break label$7
        }
        return 0 | 0;
       }
       $3_1 = 0;
       $1_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
       if (($1_1 | 0) < (0 - $2_1 | 0 | 0)) {
        break label$1
       }
       $2_1 = ($4_1 - ($1_1 << 4 | 0) | 0) + (($2_1 ^ -1 | 0) << 4 | 0) | 0;
       $3_1 = 1641;
       break label$3;
      }
      $3_1 = $232($3_1 | 0, $2_1 | 0, (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) - (HEAP32[($3_1 + 52 | 0) >> 2] | 0) | 0) >> 2 | 0) + -1 | 0 | 0) | 0;
      if ($3_1) {
       break label$4
      }
     }
     label$8 : {
      label$9 : {
       if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$9
       }
       $5_1 = $0_1 + 12 | 0;
       break label$8;
      }
      $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     }
     $3_1 = 0;
     if (($2_1 | 0) < (1 | 0)) {
      break label$1
     }
     if ((((HEAP32[$5_1 >> 2] | 0) - ($4_1 + 16 | 0) | 0) >> 4 | 0 | 0) < ($2_1 | 0)) {
      break label$1
     }
     $3_1 = (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) & 2 | 0 ? 1437 : 1425;
    }
    $2_1 = $4_1 + ($2_1 << 4 | 0) | 0;
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($1_1 + 8 | 0) >> 0] = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  }
  return $3_1 | 0;
 }
 
 function $182($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0;
  $1_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) & 2 | 0) {
       break label$4
      }
      $4_1 = HEAP32[((HEAP32[$3_1 >> 2] | 0) + 12 | 0) >> 2] | 0;
      label$5 : {
       if (($2_1 | 0) > (-1 | 0)) {
        break label$5
       }
       label$6 : {
        if (HEAPU8[($4_1 + 7 | 0) >> 0] | 0) {
         break label$6
        }
        return 0 | 0;
       }
       $4_1 = 0;
       $1_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
       if (($1_1 | 0) < (0 - $2_1 | 0 | 0)) {
        break label$1
       }
       $1_1 = ($3_1 - ($1_1 << 4 | 0) | 0) + (($2_1 ^ -1 | 0) << 4 | 0) | 0;
       $4_1 = 1641;
       break label$2;
      }
      $4_1 = $232($4_1 | 0, $2_1 | 0, (((HEAP32[($1_1 + 16 | 0) >> 2] | 0) - (HEAP32[($4_1 + 52 | 0) >> 2] | 0) | 0) >> 2 | 0) + -1 | 0 | 0) | 0;
      if ($4_1) {
       break label$3
      }
     }
     label$7 : {
      label$8 : {
       if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$8
       }
       $5_1 = $0_1 + 12 | 0;
       break label$7;
      }
      $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     }
     $4_1 = 0;
     if (($2_1 | 0) < (1 | 0)) {
      break label$1
     }
     if ((((HEAP32[$5_1 >> 2] | 0) - ($3_1 + 16 | 0) | 0) >> 4 | 0 | 0) < ($2_1 | 0)) {
      break label$1
     }
     $4_1 = (HEAPU8[($1_1 + 34 | 0) >> 0] | 0) & 2 | 0 ? 1437 : 1425;
    }
    $1_1 = $3_1 + ($2_1 << 4 | 0) | 0;
   }
   $2_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($1_1 + 8 | 0) >> 0] = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
  }
  return $4_1 | 0;
 }
 
 function $183($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $11_1 = 0, $12_1 = 0, $5_1 = 0, $13_1 = 0, $6_1 = 0, $14_1 = 0, $16_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $18_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $17_1 = 0, $8_1 = 0, $23_1 = 0, $9_1 = 0, $10_1 = 0, $238_1 = 0, $304_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (62 | 0)) {
     break label$2
    }
    $4_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
    $1_1 = $1_1 + 1 | 0;
    $5_1 = 0;
    break label$1;
   }
   $5_1 = HEAP32[($2_1 + 104 | 0) >> 2] | 0;
   $4_1 = HEAP32[$5_1 >> 2] | 0;
  }
  $6_1 = 0;
  label$3 : {
   if (((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 31 | 0 | 0) != (6 | 0)) {
    break label$3
   }
   $6_1 = HEAP32[$4_1 >> 2] | 0;
  }
  label$4 : {
   label$5 : {
    $7_1 = HEAPU8[$1_1 >> 0] | 0;
    if ($7_1) {
     break label$5
    }
    $8_1 = 1;
    break label$4;
   }
   $9_1 = $2_1 + 44 | 0;
   $10_1 = $2_1 + 4 | 0;
   $8_1 = 1;
   $11_1 = $1_1;
   label$6 : while (1) {
    $12_1 = $11_1;
    label$7 : {
     label$8 : {
      switch ((($7_1 << 24 | 0) >> 24 | 0) + -76 | 0 | 0) {
      case 7:
       label$15 : {
        label$16 : {
         label$17 : {
          if (!$6_1) {
           break label$17
          }
          if ((HEAPU8[($6_1 + 4 | 0) >> 0] | 0 | 0) != (38 | 0)) {
           break label$16
          }
         }
         i64toi32_i32$1 = $2_1;
         i64toi32_i32$0 = -1;
         HEAP32[($2_1 + 28 | 0) >> 2] = -1;
         HEAP32[($2_1 + 32 | 0) >> 2] = i64toi32_i32$0;
         $7_1 = 4;
         HEAP32[($2_1 + 20 | 0) >> 2] = 4;
         $11_1 = 1651;
         HEAP32[($2_1 + 16 | 0) >> 2] = 1651;
         $13_1 = 1656;
         break label$15;
        }
        label$18 : {
         label$19 : {
          $13_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
          $7_1 = HEAP32[($13_1 + 76 | 0) >> 2] | 0;
          if (!$7_1) {
           break label$19
          }
          $11_1 = $7_1 + 16 | 0;
          HEAP32[($2_1 + 16 | 0) >> 2] = $11_1;
          label$20 : {
           if ((HEAPU8[($7_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
            break label$20
           }
           $7_1 = HEAPU8[($7_1 + 7 | 0) >> 0] | 0;
           break label$18;
          }
          $7_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
          break label$18;
         }
         $11_1 = 1658;
         HEAP32[($2_1 + 16 | 0) >> 2] = 1658;
         $7_1 = 2;
        }
        HEAP32[($2_1 + 20 | 0) >> 2] = $7_1;
        $14_1 = HEAP32[($13_1 + 40 | 0) >> 2] | 0;
        HEAP32[($2_1 + 28 | 0) >> 2] = $14_1;
        HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($13_1 + 44 | 0) >> 2] | 0;
        $13_1 = $14_1 ? 1666 : 1661;
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = $13_1;
       $299($9_1 | 0, $11_1 | 0, $7_1 | 0);
       break label$7;
      case 32:
       $11_1 = -1;
       label$21 : {
        if (!$5_1) {
         break label$21
        }
        if ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) & 2 | 0) {
         break label$21
        }
        $11_1 = -1;
        $7_1 = HEAP32[((HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
        if (!$14_1) {
         break label$21
        }
        $15_1 = ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) - (HEAP32[($7_1 + 52 | 0) >> 2] | 0) | 0) >> 2 | 0;
        $13_1 = $15_1 + -1 | 0;
        label$22 : {
         label$23 : {
          label$24 : {
           $16_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
           if (!$16_1) {
            break label$24
           }
           $17_1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           if ((HEAP32[$17_1 >> 2] | 0 | 0) < ($15_1 | 0)) {
            break label$23
           }
          }
          $11_1 = $7_1 + 40 | 0;
          $7_1 = -1;
          break label$22;
         }
         label$25 : {
          label$26 : {
           $11_1 = $16_1 + -1 | 0;
           if ((HEAP32[($17_1 + ($11_1 << 3 | 0) | 0) >> 2] | 0 | 0) >= ($15_1 | 0)) {
            break label$26
           }
           $7_1 = $11_1;
           break label$25;
          }
          $7_1 = 0;
          if (($16_1 | 0) == (2 | 0)) {
           break label$25
          }
          label$27 : while (1) {
           $16_1 = ($7_1 + $11_1 | 0) >>> 1 | 0;
           $18_1 = (HEAP32[($17_1 + ($16_1 << 3 | 0) | 0) >> 2] | 0 | 0) < ($15_1 | 0);
           $7_1 = $18_1 ? $16_1 : $7_1;
           $11_1 = $18_1 ? $11_1 : $16_1;
           if ($7_1 >>> 0 < ($11_1 + -1 | 0) >>> 0) {
            continue label$27
           }
           break label$27;
          };
         }
         $7_1 = $17_1 + ($7_1 << 3 | 0) | 0;
         $11_1 = $7_1 + 4 | 0;
         $7_1 = HEAP32[$7_1 >> 2] | 0;
        }
        $11_1 = HEAP32[$11_1 >> 2] | 0;
        if (($7_1 | 0) >= ($13_1 | 0)) {
         break label$21
        }
        label$28 : while (1) {
         $7_1 = $7_1 + 1 | 0;
         $11_1 = $11_1 + (HEAP8[($14_1 + $7_1 | 0) >> 0] | 0) | 0;
         if (($7_1 | 0) != ($13_1 | 0)) {
          continue label$28
         }
         break label$28;
        };
       }
       HEAP32[($2_1 + 24 | 0) >> 2] = $11_1;
       break label$7;
      case 41:
       label$29 : {
        label$30 : {
         if (!$6_1) {
          break label$30
         }
         HEAP8[($2_1 + 36 | 0) >> 0] = HEAPU8[($6_1 + 6 | 0) >> 0] | 0;
         if ((HEAPU8[($6_1 + 4 | 0) >> 0] | 0 | 0) == (38 | 0)) {
          break label$29
         }
         HEAP8[($2_1 + 38 | 0) >> 0] = HEAPU8[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 7 | 0) >> 0] | 0;
         HEAP8[($2_1 + 37 | 0) >> 0] = HEAPU8[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0;
         break label$7;
        }
        HEAP8[($2_1 + 36 | 0) >> 0] = 0;
       }
       $23_1 = 256;
       HEAP8[($2_1 + 37 | 0) >> 0] = $23_1;
       HEAP8[($2_1 + 38 | 0) >> 0] = $23_1 >>> 8 | 0;
       break label$7;
      case 40:
       label$31 : {
        if ($5_1) {
         break label$31
        }
        HEAP8[($2_1 + 39 | 0) >> 0] = 0;
        break label$7;
       }
       HEAP8[($2_1 + 39 | 0) >> 0] = (HEAPU16[($5_1 + 34 | 0) >> 1] | 0) & 16 | 0;
       break label$7;
      case 34:
       label$32 : {
        label$33 : {
         if (!$5_1) {
          break label$33
         }
         $7_1 = 1675;
         $11_1 = 1670;
         label$34 : {
          label$35 : {
           $13_1 = HEAPU16[($5_1 + 34 | 0) >> 1] | 0;
           if ($13_1 & 64 | 0) {
            break label$35
           }
           if ($13_1 & 16 | 0) {
            break label$33
           }
           $13_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
           $7_1 = HEAPU16[($13_1 + 34 | 0) >> 1] | 0;
           if ($7_1 & 2 | 0) {
            break label$33
           }
           label$36 : {
            if (!($7_1 & 4 | 0)) {
             break label$36
            }
            $7_1 = 1688;
            $11_1 = 1686;
            break label$35;
           }
           $14_1 = 0;
           $11_1 = 1693;
           $7_1 = 1693;
           label$37 : {
            label$38 : {
             label$39 : {
              label$40 : {
               label$41 : {
                label$42 : {
                 label$43 : {
                  label$44 : {
                   label$45 : {
                    label$46 : {
                     label$47 : {
                      $18_1 = HEAP32[((HEAP32[(HEAP32[$13_1 >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
                      $16_1 = HEAP32[($18_1 + 52 | 0) >> 2] | 0;
                      $238_1 = $16_1;
                      $16_1 = (((HEAP32[($13_1 + 16 | 0) >> 2] | 0) - $16_1 | 0) >> 2 | 0) + -1 | 0;
                      $13_1 = HEAP32[($238_1 + ($16_1 << 2 | 0) | 0) >> 2] | 0;
                      switch (($13_1 & 127 | 0) + -11 | 0 | 0) {
                      case 57:
                      case 58:
                       break label$34;
                      case 65:
                       break label$35;
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 9:
                       break label$38;
                      case 4:
                      case 5:
                      case 6:
                      case 7:
                       break label$39;
                      case 43:
                      case 59:
                       break label$40;
                      case 47:
                      case 48:
                      case 51:
                      case 52:
                       break label$41;
                      case 46:
                       break label$42;
                      case 42:
                       break label$43;
                      case 41:
                       break label$44;
                      case 39:
                       break label$45;
                      case 38:
                       break label$46;
                      case 35:
                      case 36:
                      case 37:
                       break label$47;
                      default:
                       break label$33;
                      };
                     }
                     $14_1 = $13_1 >>> 24 | 0;
                     break label$38;
                    }
                    $14_1 = 18;
                    break label$38;
                   }
                   $14_1 = 19;
                   break label$38;
                  }
                  $14_1 = 4;
                  break label$38;
                 }
                 $14_1 = 22;
                 break label$38;
                }
                $14_1 = 5;
                break label$38;
               }
               $11_1 = 1706;
               break label$37;
              }
              $11_1 = 1712;
              break label$37;
             }
             $14_1 = 1;
            }
            $11_1 = (HEAP32[(((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($14_1 << 2 | 0) | 0) + 168 | 0) >> 2] | 0) + 18 | 0;
           }
           $7_1 = 1675;
          }
          HEAP32[($2_1 + 8 | 0) >> 2] = $7_1;
          HEAP32[($2_1 + 4 | 0) >> 2] = $11_1;
          break label$7;
         }
         $7_1 = $184($18_1 | 0, $16_1 | 0, ($13_1 >>> 7 | 0) & 255 | 0 | 0, $10_1 | 0) | 0;
         HEAP32[($2_1 + 8 | 0) >> 2] = $7_1;
         if (!$7_1) {
          break label$32
         }
         break label$7;
        }
        HEAP32[($2_1 + 8 | 0) >> 2] = 0;
       }
       HEAP32[($2_1 + 4 | 0) >> 2] = 0;
       HEAP32[($2_1 + 8 | 0) >> 2] = 1650;
       break label$7;
      case 38:
       label$48 : {
        label$49 : {
         if (!$5_1) {
          break label$49
         }
         if ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) & 128 | 0) {
          break label$48
         }
        }
        HEAP32[($2_1 + 40 | 0) >> 2] = 0;
        break label$7;
       }
       HEAP16[($2_1 + 40 | 0) >> 1] = HEAPU16[($5_1 + 28 | 0) >> 1] | 0;
       HEAP16[($2_1 + 42 | 0) >> 1] = HEAPU16[($5_1 + 30 | 0) >> 1] | 0;
       break label$7;
      case 0:
      case 26:
       break label$7;
      default:
       break label$8;
      };
     }
     $8_1 = 0;
    }
    $11_1 = $12_1 + 1 | 0;
    $7_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
    if ($7_1) {
     continue label$6
    }
    break label$6;
   };
  }
  label$50 : {
   if (!($865($1_1 | 0, 102 | 0) | 0)) {
    break label$50
   }
   $12_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   $304_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $12_1;
   HEAP32[$12_1 >> 2] = $304_1;
   HEAP32[($12_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($12_1 + 8 | 0) >> 0] = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  }
  label$51 : {
   if (!($865($1_1 | 0, 76 | 0) | 0)) {
    break label$51
   }
   label$52 : {
    label$53 : {
     if (!$6_1) {
      break label$53
     }
     if ((HEAPU8[($6_1 + 4 | 0) >> 0] | 0 | 0) != (38 | 0)) {
      break label$52
     }
    }
    HEAP8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 0] = 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
    break label$51;
   }
   $6_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   $7_1 = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
   $1_1 = $431($0_1 | 0) | 0;
   $12_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP8[($12_1 + 8 | 0) >> 0] = 69;
   HEAP32[$12_1 >> 2] = $1_1;
   HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
   HEAP8[($3_1 + 8 | 0) >> 0] = 17;
   if ((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$51
   }
   $4_1 = $6_1 + 40 | 0;
   $11_1 = 0;
   label$54 : while (1) {
    label$55 : {
     label$56 : {
      $2_1 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
      $12_1 = HEAP8[($2_1 + $11_1 | 0) >> 0] | 0;
      if (($12_1 | 0) == (-128 | 0)) {
       break label$56
      }
      $7_1 = $7_1 + $12_1 | 0;
      break label$55;
     }
     $12_1 = -1;
     label$57 : {
      label$58 : {
       $5_1 = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
       if ($5_1) {
        break label$58
       }
       $7_1 = $4_1;
       break label$57;
      }
      $7_1 = $4_1;
      $14_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
      if ((HEAP32[$14_1 >> 2] | 0 | 0) > ($11_1 | 0)) {
       break label$57
      }
      label$59 : {
       label$60 : {
        $7_1 = $5_1 + -1 | 0;
        if ((HEAP32[($14_1 + ($7_1 << 3 | 0) | 0) >> 2] | 0 | 0) > ($11_1 | 0)) {
         break label$60
        }
        $12_1 = $7_1;
        break label$59;
       }
       $12_1 = 0;
       if (($5_1 | 0) == (2 | 0)) {
        break label$59
       }
       label$61 : while (1) {
        $5_1 = ($12_1 + $7_1 | 0) >>> 1 | 0;
        $13_1 = (HEAP32[($14_1 + ($5_1 << 3 | 0) | 0) >> 2] | 0 | 0) > ($11_1 | 0);
        $12_1 = $13_1 ? $12_1 : $5_1;
        $7_1 = $13_1 ? $5_1 : $7_1;
        if ($12_1 >>> 0 < ($7_1 + -1 | 0) >>> 0) {
         continue label$61
        }
        break label$61;
       };
      }
      $12_1 = $14_1 + ($12_1 << 3 | 0) | 0;
      $7_1 = $12_1 + 4 | 0;
      $12_1 = HEAP32[$12_1 >> 2] | 0;
     }
     $7_1 = HEAP32[$7_1 >> 2] | 0;
     if (($12_1 | 0) >= ($11_1 | 0)) {
      break label$55
     }
     label$62 : while (1) {
      $12_1 = $12_1 + 1 | 0;
      $7_1 = $7_1 + (HEAP8[($2_1 + $12_1 | 0) >> 0] | 0) | 0;
      if (($12_1 | 0) != ($11_1 | 0)) {
       continue label$62
      }
      break label$62;
     };
    }
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = $7_1 >> 31 | 0;
    $426($0_1 | 0, $1_1 | 0, $7_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0);
    $11_1 = $11_1 + 1 | 0;
    if (($11_1 | 0) < (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0)) {
     continue label$54
    }
    break label$54;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $184($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $6_1 = 0, $12_1 = 0, $9_1 = 0, $4_1 = 0, $10_1 = 0, $7_1 = 0, $8_1 = 0, $13_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $232($0_1 | 0, $2_1 + 1 | 0 | 0, $1_1 | 0) | 0;
  HEAP32[$3_1 >> 2] = $5_1;
  $6_1 = 1718;
  label$1 : {
   if ($5_1) {
    break label$1
   }
   $6_1 = 0;
   $7_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $8_1 = ((HEAP8[(((HEAP32[($7_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) & 127 | 0) + 3360 | 0) >> 0] | 0) >> 7 | 0) + $1_1 | 0;
   if (($8_1 | 0) < (1 | 0)) {
    break label$1
   }
   $9_1 = -1;
   $1_1 = 0;
   $10_1 = 0;
   label$2 : while (1) {
    $5_1 = HEAP32[($7_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
    $11_1 = $5_1 >>> 7 | 0;
    $12_1 = $11_1 & 255 | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $13_1 = $5_1 & 127 | 0;
            switch ($13_1 + -56 | 0 | 0) {
            case 20:
             break label$10;
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
             break label$6;
            case 0:
             break label$8;
            case 12:
            case 13:
             break label$9;
            default:
             break label$7;
            };
           }
           if (($12_1 + 2 | 0 | 0) <= ($2_1 | 0)) {
            break label$4
           }
           break label$3;
          }
          if (($12_1 | 0) <= ($2_1 | 0)) {
           break label$4
          }
          break label$3;
         }
         $5_1 = ($1_1 + $11_1 | 0) + -16777214 | 0;
         $10_1 = ($5_1 | 0) <= ($8_1 | 0) ? (($5_1 | 0) > ($10_1 | 0) ? $5_1 : $10_1) : $10_1;
         break label$3;
        }
        if (($13_1 | 0) == (8 | 0)) {
         break label$5
        }
       }
       if (($12_1 | 0) != ($2_1 | 0)) {
        break label$3
       }
       if ((HEAPU8[($13_1 + 3360 | 0) >> 0] | 0) & 8 | 0) {
        break label$4
       }
       break label$3;
      }
      if (($12_1 | 0) > ($2_1 | 0)) {
       break label$3
      }
      if (($12_1 + (($5_1 >>> 16 | 0) & 255 | 0) | 0 | 0) < ($2_1 | 0)) {
       break label$3
      }
     }
     $9_1 = ($1_1 | 0) < ($10_1 | 0) ? -1 : $1_1;
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($8_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   if (($9_1 | 0) == (-1 | 0)) {
    break label$1
   }
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         label$17 : {
          label$18 : {
           label$19 : {
            label$20 : {
             $5_1 = $7_1 + ($9_1 << 2 | 0) | 0;
             $1_1 = HEAP32[$5_1 >> 2] | 0;
             switch ($1_1 & 127 | 0 | 0) {
             case 20:
              break label$11;
             case 4:
              break label$13;
             case 3:
              break label$14;
             case 9:
              break label$15;
             case 14:
              break label$16;
             case 13:
              break label$17;
             case 12:
              break label$18;
             case 11:
              break label$19;
             case 0:
              break label$20;
             default:
              break label$1;
             };
            }
            $5_1 = ($1_1 >>> 16 | 0) & 255 | 0;
            if ($5_1 >>> 0 >= (($1_1 >>> 7 | 0) & 255 | 0) >>> 0) {
             break label$1
            }
            $6_1 = $184($0_1 | 0, $9_1 | 0, $5_1 | 0, $3_1 | 0) | 0;
            break label$1;
           }
           $5_1 = 1686;
           label$21 : {
            $12_1 = (HEAP32[($0_1 + 48 | 0) >> 2] | 0) + (($1_1 >>> 24 | 0) << 4 | 0) | 0;
            if (((HEAPU8[($12_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
             break label$21
            }
            $5_1 = (HEAP32[$12_1 >> 2] | 0) + 16 | 0;
           }
           HEAP32[$3_1 >> 2] = $5_1;
           $1_1 = HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + (($1_1 >>> 13 | 0) & 2040 | 0) | 0) >> 2] | 0;
           $6_1 = $876(($1_1 ? $1_1 + 16 | 0 : 1686) | 0, 1768 | 0) | 0 ? 1738 : 1773;
           break label$1;
          }
          label$22 : {
           label$23 : {
            $5_1 = $184($0_1 | 0, $9_1 | 0, $1_1 >>> 24 | 0 | 0, $3_1 | 0) | 0;
            if (!$5_1) {
             break label$23
            }
            if ((HEAPU8[$5_1 >> 0] | 0 | 0) == (99 | 0)) {
             break label$22
            }
           }
           HEAP32[$3_1 >> 2] = 1686;
          }
          $184($0_1 | 0, $9_1 | 0, ($1_1 >>> 16 | 0) & 255 | 0 | 0, $4_1 + 8 | 0 | 0) | 0;
          label$24 : {
           $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
           if ($1_1) {
            break label$24
           }
           $6_1 = 1738;
           break label$1;
          }
          $6_1 = $876($1_1 | 0, 1768 | 0) | 0 ? 1738 : 1773;
          break label$1;
         }
         HEAP32[$3_1 >> 2] = 1724;
         $6_1 = 1738;
         break label$1;
        }
        $5_1 = 1686;
        label$25 : {
         $12_1 = (HEAP32[($0_1 + 48 | 0) >> 2] | 0) + (($1_1 >>> 24 | 0) << 4 | 0) | 0;
         if (((HEAPU8[($12_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
          break label$25
         }
         $5_1 = (HEAP32[$12_1 >> 2] | 0) + 16 | 0;
        }
        HEAP32[$3_1 >> 2] = $5_1;
        $184($0_1 | 0, $9_1 | 0, ($1_1 >>> 16 | 0) & 255 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
        label$26 : {
         $1_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
         if ($1_1) {
          break label$26
         }
         $6_1 = 1738;
         break label$1;
        }
        $6_1 = $876($1_1 | 0, 1768 | 0) | 0 ? 1738 : 1773;
        break label$1;
       }
       $1_1 = HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + (($1_1 >>> 13 | 0) & 2040 | 0) | 0) >> 2] | 0;
       HEAP32[$3_1 >> 2] = $1_1 ? $1_1 + 16 | 0 : 1686;
       $6_1 = 1744;
       break label$1;
      }
      $1_1 = $1_1 >>> 15 | 0;
      break label$12;
     }
     $1_1 = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 7 | 0;
    }
    $1_1 = (HEAP32[($0_1 + 48 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
    if (((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
     break label$1
    }
    HEAP32[$3_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
    $6_1 = 1752;
    break label$1;
   }
   $5_1 = $1_1 >>> 24 | 0;
   label$27 : {
    label$28 : {
     if (!($1_1 & 32768 | 0)) {
      break label$28
     }
     $1_1 = 1686;
     label$29 : {
      $5_1 = (HEAP32[($0_1 + 48 | 0) >> 2] | 0) + ($5_1 << 4 | 0) | 0;
      if (((HEAPU8[($5_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
       break label$29
      }
      $1_1 = (HEAP32[$5_1 >> 2] | 0) + 16 | 0;
     }
     HEAP32[$3_1 >> 2] = $1_1;
     break label$27;
    }
    label$30 : {
     $1_1 = $184($0_1 | 0, $9_1 | 0, $5_1 | 0, $3_1 | 0) | 0;
     if (!$1_1) {
      break label$30
     }
     $6_1 = 1761;
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (99 | 0)) {
      break label$1
     }
    }
    HEAP32[$3_1 >> 2] = 1686;
   }
   $6_1 = 1761;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $185($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $442($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $186($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
  HEAP32[$3_1 >> 2] = $2_1;
  $187($0_1 | 0, 1451 | 0, $3_1 | 0);
  abort();
 }
 
 function $186($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $8_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $3_1 = 1650;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) & 2 | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      $6_1 = HEAP32[$5_1 >> 2] | 0;
      $7_1 = HEAPU8[($6_1 + 6 | 0) >> 0] | 0;
      if (!$7_1) {
       break label$4
      }
      $8_1 = 0;
      label$5 : while (1) {
       if ((HEAP32[((HEAP32[(($6_1 + ($8_1 << 2 | 0) | 0) + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
        break label$3
       }
       $8_1 = $8_1 + 1 | 0;
       if (($8_1 | 0) != ($7_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     $7_1 = $5_1 + 16 | 0;
     $8_1 = $1_1 - $7_1 | 0;
     if (($8_1 | 0) < (-15 | 0)) {
      break label$1
     }
     if (($8_1 | 0) >= ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - $7_1 | 0 | 0)) {
      break label$1
     }
     $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
     $8_1 = $184($1_1 | 0, (((HEAP32[($4_1 + 16 | 0) >> 2] | 0) - (HEAP32[($1_1 + 52 | 0) >> 2] | 0) | 0) >> 2 | 0) + -1 | 0 | 0, $8_1 >> 4 | 0 | 0, $2_1 + 12 | 0 | 0) | 0;
     if (!$8_1) {
      break label$1
     }
     $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
     break label$2;
    }
    $8_1 = HEAP32[((HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + ($8_1 << 3 | 0) | 0) >> 2] | 0;
    $1_1 = $8_1 ? $8_1 + 16 | 0 : 1686;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    $8_1 = 1744;
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[$2_1 >> 2] = $8_1;
   $3_1 = $298($0_1 | 0, 1780 | 0, $2_1 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $187($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $7_1 = 0, $11_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $248($0_1 | 0);
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $5_1 = $295($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  label$2 : {
   if ((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) & 2 | 0) {
    break label$2
   }
   $6_1 = -1;
   $2_1 = HEAP32[((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   $1_1 = HEAP32[($2_1 + 76 | 0) >> 2] | 0;
   label$3 : {
    $7_1 = HEAP32[($2_1 + 64 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$3
    }
    $6_1 = ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) - (HEAP32[($2_1 + 52 | 0) >> 2] | 0) | 0) >> 2 | 0;
    $4_1 = $6_1 + -1 | 0;
    label$4 : {
     label$5 : {
      label$6 : {
       $8_1 = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
       if (!$8_1) {
        break label$6
       }
       $9_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
       if ((HEAP32[$9_1 >> 2] | 0 | 0) < ($6_1 | 0)) {
        break label$5
       }
      }
      $6_1 = $2_1 + 40 | 0;
      $2_1 = -1;
      break label$4;
     }
     label$7 : {
      label$8 : {
       $10_1 = $8_1 + -1 | 0;
       if ((HEAP32[($9_1 + ($10_1 << 3 | 0) | 0) >> 2] | 0 | 0) >= ($6_1 | 0)) {
        break label$8
       }
       $2_1 = $10_1;
       break label$7;
      }
      $2_1 = 0;
      if (($8_1 | 0) == (2 | 0)) {
       break label$7
      }
      label$9 : while (1) {
       $8_1 = ($2_1 + $10_1 | 0) >>> 1 | 0;
       $11_1 = (HEAP32[($9_1 + ($8_1 << 3 | 0) | 0) >> 2] | 0 | 0) < ($6_1 | 0);
       $2_1 = $11_1 ? $8_1 : $2_1;
       $10_1 = $11_1 ? $10_1 : $8_1;
       if ($2_1 >>> 0 < ($10_1 + -1 | 0) >>> 0) {
        continue label$9
       }
       break label$9;
      };
     }
     $2_1 = $9_1 + ($2_1 << 3 | 0) | 0;
     $6_1 = $2_1 + 4 | 0;
     $2_1 = HEAP32[$2_1 >> 2] | 0;
    }
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    if (($2_1 | 0) >= ($4_1 | 0)) {
     break label$3
    }
    label$10 : while (1) {
     $2_1 = $2_1 + 1 | 0;
     $6_1 = $6_1 + (HEAP8[($7_1 + $2_1 | 0) >> 0] | 0) | 0;
     if (($2_1 | 0) != ($4_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
   }
   label$11 : {
    label$12 : {
     if (!$1_1) {
      break label$12
     }
     $2_1 = $1_1 + 16 | 0;
     label$13 : {
      label$14 : {
       if ((HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
        break label$14
       }
       $4_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
       break label$13;
      }
      $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     }
     $299($3_1 + 16 | 0 | 0, $2_1 | 0, $4_1 | 0);
     break label$11;
    }
    HEAP16[($3_1 + 16 | 0) >> 1] = 63;
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $6_1;
   HEAP32[$3_1 >> 2] = $3_1 + 16 | 0;
   $298($0_1 | 0, 1631 | 0, $3_1 | 0) | 0;
  }
  $188($0_1 | 0);
  abort();
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $17_1 = 0, $29_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3_1 + -16 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[$3_1 >> 2] = $17_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
   $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
   $1_1 = $2_1 + $1_1 | 0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $29_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[$3_1 >> 2] = $29_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 16 | 0;
   $209($0_1 | 0, $1_1 + -16 | 0 | 0, 1 | 0);
  }
  $197($0_1 | 0, 2 | 0);
  abort();
 }
 
 function $189($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $442($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$3_1 >> 2] = $2_1;
  $187($0_1 | 0, 1478 | 0, $3_1 | 0);
  abort();
 }
 
 function $190($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $185($0_1 | 0, (((((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0) + -3 | 0) & 255 | 0) >>> 0 < 2 >>> 0 ? $2_1 : $1_1) | 0, 1517 | 0);
  abort();
 }
 
 function $191($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $185($0_1 | 0, (((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) == (3 | 0) ? $2_1 : $1_1) | 0, $3_1 | 0);
  abort();
 }
 
 function $192($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
     break label$2
    }
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   $2_1 = $459($1_1 | 0, $3_1 + 8 | 0 | 0, 0 | 0) | 0 ? $2_1 : $1_1;
  }
  HEAP32[$3_1 >> 2] = $186($0_1 | 0, $2_1 | 0) | 0;
  $187($0_1 | 0, 1529 | 0, $3_1 | 0);
  abort();
 }
 
 function $193($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   $1_1 = $442($0_1 | 0, $1_1 | 0) | 0;
   $2_1 = $442($0_1 | 0, $2_1 | 0) | 0;
   if ($876($1_1 | 0, $2_1 | 0) | 0) {
    break label$1
   }
   HEAP32[$3_1 >> 2] = $1_1;
   $187($0_1 | 0, 1568 | 0, $3_1 | 0);
   abort();
  }
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $187($0_1 | 0, 1601 | 0, $3_1 + 16 | 0 | 0);
  abort();
 }
 
 function $194($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    $5_1 = $2_1 + 16 | 0;
    label$3 : {
     label$4 : {
      if ((HEAPU8[($2_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
       break label$4
      }
      $2_1 = HEAPU8[($2_1 + 7 | 0) >> 0] | 0;
      break label$3;
     }
     $2_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    }
    $299($4_1 + 16 | 0 | 0, $5_1 | 0, $2_1 | 0);
    break label$1;
   }
   HEAP16[($4_1 + 16 | 0) >> 1] = 63;
  }
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[$4_1 >> 2] = $4_1 + 16 | 0;
  $2_1 = $298($0_1 | 0, 1631 | 0, $4_1 | 0) | 0;
  global$0 = $4_1 + 80 | 0;
  return $2_1 | 0;
 }
 
 function $195($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $9_1 = 0, $10_1 = 0, $7_1 = 0, $5_1 = 0, $2_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $15_1 = 0, $4_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   if ($3_1 & 12 | 0) {
    break label$1
   }
   HEAP32[($2_1 + 20 | 0) >> 2] = 0;
   return 0 | 0;
  }
  $4_1 = $1_1 + 4 | 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = (HEAP32[($0_1 + 108 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($0_1 + 108 | 0) >> 2] = $5_1;
  $1_1 = 1;
  label$2 : {
   label$3 : {
    label$4 : {
     $6_1 = ($3_1 >>> 3 | 0) & !$5_1 | 0;
     if (($6_1 | 0) != (1 | 0)) {
      break label$4
     }
     HEAP32[($0_1 + 108 | 0) >> 2] = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
     break label$3;
    }
    if (!($3_1 & 4 | 0)) {
     break label$2
    }
   }
   label$5 : {
    $5_1 = HEAPU16[($2_1 + 34 | 0) >> 1] | 0;
    if (!($5_1 & 32 | 0)) {
     break label$5
    }
    HEAP16[($2_1 + 34 | 0) >> 1] = $5_1 & 65503 | 0;
    break label$2;
   }
   label$6 : {
    label$7 : {
     $1_1 = HEAP32[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + -4 | 0) >> 2] | 0;
     if ($1_1 & 16711680 | 0) {
      break label$7
     }
     if ((HEAPU8[(($1_1 & 127 | 0) + 3360 | 0) >> 0] | 0) & 32 | 0) {
      break label$6
     }
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   }
   label$8 : {
    if (!$6_1) {
     break label$8
    }
    $203($0_1 | 0, 3 | 0, -1 | 0, 0 | 0, 0 | 0);
   }
   label$9 : {
    if (!($3_1 & 4 | 0)) {
     break label$9
    }
    $1_1 = -1;
    label$10 : {
     label$11 : {
      $7_1 = HEAP32[((HEAP32[(HEAP32[$2_1 >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      $3_1 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
      $8_1 = ($4_1 - $3_1 | 0) >> 2 | 0;
      $5_1 = $8_1 + -1 | 0;
      if (!$5_1) {
       break label$11
      }
      $9_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      if ($4_1 >>> 0 <= $9_1 >>> 0) {
       break label$11
      }
      $3_1 = ($9_1 - $3_1 | 0) >> 2 | 0;
      $9_1 = $3_1 + -1 | 0;
      $10_1 = ($8_1 | 0) > ($3_1 | 0) ? $5_1 : $9_1;
      label$12 : while (1) {
       $3_1 = $9_1;
       if (($3_1 | 0) == ($10_1 | 0)) {
        break label$10
       }
       $11_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
       $9_1 = $3_1 + 1 | 0;
       if (!(HEAPU8[($11_1 + $9_1 | 0) >> 0] | 0)) {
        continue label$12
       }
       break label$12;
      };
      label$13 : {
       label$14 : {
        label$15 : {
         $12_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
         if (!$12_1) {
          break label$15
         }
         $13_1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
         if ((HEAP32[$13_1 >> 2] | 0 | 0) <= ($3_1 | 0)) {
          break label$14
         }
        }
        $10_1 = $7_1 + 40 | 0;
        $9_1 = -1;
        break label$13;
       }
       label$16 : {
        label$17 : {
         $10_1 = $12_1 + -1 | 0;
         if ((HEAP32[($13_1 + ($10_1 << 3 | 0) | 0) >> 2] | 0 | 0) > ($3_1 | 0)) {
          break label$17
         }
         $9_1 = $10_1;
         break label$16;
        }
        $9_1 = 0;
        if (($12_1 | 0) == (2 | 0)) {
         break label$16
        }
        label$18 : while (1) {
         $14_1 = ($9_1 + $10_1 | 0) >>> 1 | 0;
         $15_1 = (HEAP32[($13_1 + ($14_1 << 3 | 0) | 0) >> 2] | 0 | 0) > ($3_1 | 0);
         $9_1 = $15_1 ? $9_1 : $14_1;
         $10_1 = $15_1 ? $14_1 : $10_1;
         if ($9_1 >>> 0 < ($10_1 + -1 | 0) >>> 0) {
          continue label$18
         }
         break label$18;
        };
       }
       $9_1 = $13_1 + ($9_1 << 3 | 0) | 0;
       $10_1 = $9_1 + 4 | 0;
       $9_1 = HEAP32[$9_1 >> 2] | 0;
      }
      $10_1 = HEAP32[$10_1 >> 2] | 0;
      label$19 : {
       if (($9_1 | 0) >= ($3_1 | 0)) {
        break label$19
       }
       label$20 : while (1) {
        $9_1 = $9_1 + 1 | 0;
        $10_1 = $10_1 + (HEAP8[($11_1 + $9_1 | 0) >> 0] | 0) | 0;
        if (($9_1 | 0) != ($3_1 | 0)) {
         continue label$20
        }
        break label$20;
       };
      }
      label$21 : {
       label$22 : {
        label$23 : {
         if (!$12_1) {
          break label$23
         }
         $13_1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
         if ((HEAP32[$13_1 >> 2] | 0 | 0) < ($8_1 | 0)) {
          break label$22
         }
        }
        $9_1 = $7_1 + 40 | 0;
        $3_1 = -1;
        break label$21;
       }
       label$24 : {
        label$25 : {
         $9_1 = $12_1 + -1 | 0;
         if ((HEAP32[($13_1 + ($9_1 << 3 | 0) | 0) >> 2] | 0 | 0) >= ($8_1 | 0)) {
          break label$25
         }
         $3_1 = $9_1;
         break label$24;
        }
        $3_1 = 0;
        if (($12_1 | 0) == (2 | 0)) {
         break label$24
        }
        label$26 : while (1) {
         $14_1 = ($3_1 + $9_1 | 0) >>> 1 | 0;
         $15_1 = (HEAP32[($13_1 + ($14_1 << 3 | 0) | 0) >> 2] | 0 | 0) < ($8_1 | 0);
         $3_1 = $15_1 ? $14_1 : $3_1;
         $9_1 = $15_1 ? $9_1 : $14_1;
         if ($3_1 >>> 0 < ($9_1 + -1 | 0) >>> 0) {
          continue label$26
         }
         break label$26;
        };
       }
       $3_1 = $13_1 + ($3_1 << 3 | 0) | 0;
       $9_1 = $3_1 + 4 | 0;
       $3_1 = HEAP32[$3_1 >> 2] | 0;
      }
      $9_1 = HEAP32[$9_1 >> 2] | 0;
      label$27 : {
       if (($3_1 | 0) >= ($5_1 | 0)) {
        break label$27
       }
       label$28 : while (1) {
        $3_1 = $3_1 + 1 | 0;
        $9_1 = $9_1 + (HEAP8[($11_1 + $3_1 | 0) >> 0] | 0) | 0;
        if (($3_1 | 0) != ($5_1 | 0)) {
         continue label$28
        }
        break label$28;
       };
      }
      if (($10_1 | 0) == ($9_1 | 0)) {
       break label$10
      }
     }
     label$29 : {
      $9_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
      if (!$9_1) {
       break label$29
      }
      label$30 : {
       label$31 : {
        label$32 : {
         $11_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
         if (!$11_1) {
          break label$32
         }
         $10_1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
         if ((HEAP32[$10_1 >> 2] | 0 | 0) < ($8_1 | 0)) {
          break label$31
         }
        }
        $1_1 = $7_1 + 40 | 0;
        $3_1 = -1;
        break label$30;
       }
       label$33 : {
        label$34 : {
         $1_1 = $11_1 + -1 | 0;
         if ((HEAP32[($10_1 + ($1_1 << 3 | 0) | 0) >> 2] | 0 | 0) >= ($8_1 | 0)) {
          break label$34
         }
         $3_1 = $1_1;
         break label$33;
        }
        $3_1 = 0;
        if (($11_1 | 0) == (2 | 0)) {
         break label$33
        }
        label$35 : while (1) {
         $11_1 = ($3_1 + $1_1 | 0) >>> 1 | 0;
         $7_1 = (HEAP32[($10_1 + ($11_1 << 3 | 0) | 0) >> 2] | 0 | 0) < ($8_1 | 0);
         $3_1 = $7_1 ? $11_1 : $3_1;
         $1_1 = $7_1 ? $1_1 : $11_1;
         if ($3_1 >>> 0 < ($1_1 + -1 | 0) >>> 0) {
          continue label$35
         }
         break label$35;
        };
       }
       $3_1 = $10_1 + ($3_1 << 3 | 0) | 0;
       $1_1 = $3_1 + 4 | 0;
       $3_1 = HEAP32[$3_1 >> 2] | 0;
      }
      $1_1 = HEAP32[$1_1 >> 2] | 0;
      if (($3_1 | 0) >= ($5_1 | 0)) {
       break label$29
      }
      label$36 : while (1) {
       $3_1 = $3_1 + 1 | 0;
       $1_1 = $1_1 + (HEAP8[($9_1 + $3_1 | 0) >> 0] | 0) | 0;
       if (($3_1 | 0) != ($5_1 | 0)) {
        continue label$36
       }
       break label$36;
      };
     }
     $203($0_1 | 0, 2 | 0, $1_1 | 0, 0 | 0, 0 | 0);
    }
    HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
   }
   $1_1 = 1;
   if ((HEAPU8[($0_1 + 6 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break label$2
   }
   label$37 : {
    if (!$6_1) {
     break label$37
    }
    HEAP32[($0_1 + 108 | 0) >> 2] = 1;
   }
   HEAP32[($2_1 + 16 | 0) >> 2] = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) + -4 | 0;
   HEAP16[($2_1 + 34 | 0) >> 1] = HEAPU16[($2_1 + 34 | 0) >> 1] | 0 | 32 | 0;
   $197($0_1 | 0, 1 | 0);
   abort();
  }
  return $1_1 | 0;
 }
 
 function $196($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 6:
     $3_1 = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 164 | 0) >> 2] | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     $3_1 = HEAPU8[($3_1 + 4 | 0) >> 0] | 0 | 64 | 0;
     break label$1;
    case 7:
     $3_1 = $417($0_1 | 0, 1791 | 0, 23 | 0) | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     $3_1 = HEAPU8[($3_1 + 4 | 0) >> 0] | 0 | 64 | 0;
     break label$1;
    case 0:
     break label$1;
    default:
     break label$2;
    };
   }
   $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   $3_1 = HEAPU8[($3_1 + 8 | 0) >> 0] | 0;
  }
  HEAP8[($2_1 + 8 | 0) >> 0] = $3_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1 + 16 | 0;
 }
 
 function $197($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $47_1 = 0, $85_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if ($2_1) {
     break label$2
    }
    $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    $3_1 = $229($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
    HEAP8[($0_1 + 6 | 0) >> 0] = $3_1;
    $1_1 = HEAP32[($2_1 + 160 | 0) >> 2] | 0;
    if (HEAP32[($1_1 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    label$3 : {
     if (!(HEAP32[($2_1 + 156 | 0) >> 2] | 0)) {
      break label$3
     }
     $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     $4_1 = 0;
     label$4 : {
      label$5 : {
       switch ($3_1 + 2 | 0 | 0) {
       case 6:
        $3_1 = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 164 | 0) >> 2] | 0;
        HEAP32[$1_1 >> 2] = $3_1;
        $4_1 = HEAPU8[($3_1 + 4 | 0) >> 0] | 0 | 64 | 0;
        break label$4;
       case 7:
        $3_1 = $417($0_1 | 0, 1791 | 0, 23 | 0) | 0;
        HEAP32[$1_1 >> 2] = $3_1;
        $4_1 = HEAPU8[($3_1 + 4 | 0) >> 0] | 0 | 64 | 0;
        break label$4;
       case 0:
        break label$4;
       default:
        break label$5;
       };
      }
      $3_1 = $1_1 + -16 | 0;
      i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      $47_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $1_1;
      HEAP32[$1_1 >> 2] = $47_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      $4_1 = HEAPU8[($3_1 + 8 | 0) >> 0] | 0;
     }
     HEAP8[($1_1 + 8 | 0) >> 0] = $4_1;
     $1_1 = $1_1 + 16 | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
     label$8 : {
      $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0 >= $1_1 >>> 0) {
       break label$8
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
     }
     FUNCTION_TABLE[HEAP32[($2_1 + 156 | 0) >> 2] | 0 | 0]($0_1) | 0;
    }
    fimport$0();
    abort();
   }
   HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
   $1_1 = fimport$1(4 | 0) | 0;
   HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   fimport$2($1_1 | 0, 1852 | 0, 0 | 0);
   abort();
  }
  $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $4_1 + 16 | 0;
  $0_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $85_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[i64toi32_i32$1 >> 2] = $85_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 8 | 0) >> 0] = HEAPU8[($0_1 + 8 | 0) >> 0] | 0;
  $197(HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0, $3_1 | 0);
  abort();
 }
 
 function $198($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
  $5_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $7_1 = HEAP32[($6_1 + 736 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[$3_1 >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[(0 + 23356 | 0) >> 2] = 0;
  fimport$3($1_1 | 0, $0_1 | 0, $2_1 | 0);
  $1_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
  HEAP32[(0 + 23356 | 0) >> 2] = 0;
  label$1 : {
   if (($1_1 | 0) != (1 | 0)) {
    break label$1
   }
   $1_1 = fimport$4(0 | 0) | 0;
   fimport$5() | 0;
   fimport$6($1_1 | 0) | 0;
   label$2 : {
    if (HEAP32[($3_1 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = -1;
   }
   fimport$7();
  }
  HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = ((($5_1 - $7_1 | 0) + $4_1 | 0) + (HEAP32[($6_1 + 736 | 0) >> 2] | 0) | 0) - (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) | 0;
  $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $199($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
    $4_1 = $285($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $3_1 << 4 | 0 | 0, $1_1 << 4 | 0 | 0) | 0;
    if (!$4_1) {
     break label$2
    }
    label$3 : {
     if (($3_1 | 0) >= ($1_1 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      HEAP8[(($4_1 + ($3_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 0;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != ($1_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     if (($2_1 | 0) == ($4_1 | 0)) {
      break label$5
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = $4_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - $2_1 | 0) | 0;
     label$6 : {
      $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$6
      }
      label$7 : while (1) {
       HEAP32[($3_1 + 8 | 0) >> 2] = $4_1 + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) - $2_1 | 0) | 0;
       $3_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if ($3_1) {
        continue label$7
       }
       break label$7;
      };
     }
     $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$5
     }
     label$8 : while (1) {
      HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 + ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $2_1 | 0) | 0;
      HEAP32[$3_1 >> 2] = $4_1 + ((HEAP32[$3_1 >> 2] | 0) - $2_1 | 0) | 0;
      label$9 : {
       if ((HEAPU8[($3_1 + 34 | 0) >> 0] | 0) & 2 | 0) {
        break label$9
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = 1;
      }
      $3_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      if ($3_1) {
       continue label$8
      }
      break label$8;
     };
    }
    HEAP32[($0_1 + 100 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 32 | 0) >> 2] = $4_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = ($4_1 + ($1_1 << 4 | 0) | 0) + -80 | 0;
    $3_1 = 1;
    break label$1;
   }
   $3_1 = 0;
   if (!$2_1) {
    break label$1
   }
   $197($0_1 | 0, 4 | 0);
   abort();
  }
  return $3_1 | 0;
 }
 
 function $200($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
    if (($3_1 | 0) < (1000001 | 0)) {
     break label$2
    }
    $3_1 = 0;
    if (!$2_1) {
     break label$1
    }
    $197($0_1 | 0, 5 | 0);
    abort();
   }
   label$3 : {
    $1_1 = ($1_1 + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0) >> 4 | 0) | 0) + 5 | 0;
    $3_1 = ($3_1 | 0) > (5e5 | 0) ? 1e6 : $3_1 << 1 | 0;
    $3_1 = ($3_1 | 0) < ($1_1 | 0) ? $1_1 : $3_1;
    if (($3_1 | 0) < (1000001 | 0)) {
     break label$3
    }
    $199($0_1 | 0, 1000200 | 0, $2_1 | 0) | 0;
    $3_1 = 0;
    if (!$2_1) {
     break label$1
    }
    $187($0_1 | 0, 1868 | 0, 0 | 0);
    abort();
   }
   $3_1 = $199($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $201($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $1_1 = $1_1 >>> 0 < $3_1 >>> 0 ? $3_1 : $1_1;
    $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $1_1 = $1_1 - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
  $2_1 = ($1_1 >> 4 | 0) + 1 | 0;
  $3_1 = ($2_1 | 0) / (8 | 0) | 0;
  label$3 : {
   if (($1_1 | 0) > (15999919 | 0)) {
    break label$3
   }
   $1_1 = $3_1 + $2_1 | 0;
   $1_1 = (($1_1 | 0) < (999990 | 0) ? $1_1 : 999990) + 10 | 0;
   if (($1_1 | 0) >= (HEAP32[($0_1 + 100 | 0) >> 2] | 0 | 0)) {
    break label$3
   }
   $199($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
  }
  $401($0_1 | 0);
 }
 
 function $202($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (((HEAP32[($0_1 + 28 | 0) >> 2] | 0) - $1_1 | 0 | 0) > (31 | 0)) {
      break label$3
     }
     $2_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
     if (($2_1 | 0) >= (1000001 | 0)) {
      break label$2
     }
     $1_1 = (($1_1 - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0) >> 4 | 0) + 6 | 0;
     $2_1 = ($2_1 | 0) > (5e5 | 0) ? 1e6 : $2_1 << 1 | 0;
     $1_1 = ($2_1 | 0) < ($1_1 | 0) ? $1_1 : $2_1;
     if (($1_1 | 0) >= (1000001 | 0)) {
      break label$1
     }
     $199($0_1 | 0, $1_1 | 0, 1 | 0) | 0;
     $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 16 | 0;
    return;
   }
   $197($0_1 | 0, 5 | 0);
   abort();
  }
  $199($0_1 | 0, 1000200 | 0, 1 | 0) | 0;
  $187($0_1 | 0, 1868 | 0, 0 | 0);
  abort();
 }
 
 function $203($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $5_1 = 0, $9_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $6_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$3
     }
     if (!(HEAPU8[($0_1 + 7 | 0) >> 0] | 0)) {
      break label$3
     }
     $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
     $9_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     $10_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     HEAP32[($5_1 + 104 | 0) >> 2] = $7_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $2_1;
     HEAP32[$5_1 >> 2] = $1_1;
     label$4 : {
      label$5 : {
       if ($4_1) {
        break label$5
       }
       $1_1 = 4;
       $4_1 = $10_1;
       break label$4;
      }
      HEAP16[($7_1 + 28 | 0) >> 1] = $3_1;
      HEAP16[($7_1 + 30 | 0) >> 1] = $4_1;
      $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $1_1 = 132;
     }
     label$6 : {
      label$7 : {
       if (((HEAP32[($0_1 + 28 | 0) >> 2] | 0) - $4_1 | 0 | 0) <= (335 | 0)) {
        break label$7
       }
       $2_1 = $8_1;
       break label$6;
      }
      $2_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
      if (($2_1 | 0) >= (1000001 | 0)) {
       break label$2
      }
      $4_1 = (($4_1 - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0) >> 4 | 0) + 25 | 0;
      $2_1 = ($2_1 | 0) > (5e5 | 0) ? 1e6 : $2_1 << 1 | 0;
      $4_1 = ($2_1 | 0) < ($4_1 | 0) ? $4_1 : $2_1;
      if (($4_1 | 0) >= (1000001 | 0)) {
       break label$1
      }
      $199($0_1 | 0, $4_1 | 0, 1 | 0) | 0;
      $2_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
      $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     }
     $3_1 = $10_1 - $9_1 | 0;
     $9_1 = $8_1 - $9_1 | 0;
     label$8 : {
      $4_1 = $4_1 + 320 | 0;
      if ($4_1 >>> 0 <= $2_1 >>> 0) {
       break label$8
      }
      HEAP32[($7_1 + 4 | 0) >> 2] = $4_1;
     }
     HEAP8[($0_1 + 7 | 0) >> 0] = 0;
     HEAP16[($7_1 + 34 | 0) >> 1] = HEAPU16[($7_1 + 34 | 0) >> 1] | 0 | $1_1 | 0;
     FUNCTION_TABLE[$6_1 | 0]($0_1, $5_1);
     HEAP8[($0_1 + 7 | 0) >> 0] = 1;
     $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     HEAP32[($7_1 + 4 | 0) >> 2] = $4_1 + $9_1 | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $4_1 + $3_1 | 0;
     HEAP16[($7_1 + 34 | 0) >> 1] = (HEAPU16[($7_1 + 34 | 0) >> 1] | 0) & ($1_1 ^ -1 | 0) | 0;
    }
    global$0 = $5_1 + 112 | 0;
    return;
   }
   $197($0_1 | 0, 5 | 0);
   abort();
  }
  $199($0_1 | 0, 1000200 | 0, 1 | 0) | 0;
  $187($0_1 | 0, 1868 | 0, 0 | 0);
  abort();
 }
 
 function $204($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if (!((HEAPU8[($0_1 + 112 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $2_1 = HEAP32[((HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
   $3_1 = HEAPU16[($1_1 + 34 | 0) >> 1] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) + 4 | 0;
   $203($0_1 | 0, ($3_1 >>> 2 | 0) & 4 | 0 | 0, -1 | 0, 1 | 0, HEAPU8[($2_1 + 6 | 0) >> 0] | 0 | 0);
   HEAP32[($1_1 + 16 | 0) >> 2] = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) + -4 | 0;
  }
 }
 
 function $205($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21_1 = 0, $36_1 = 0;
  label$1 : {
   $2_1 = $441($0_1 | 0, $1_1 | 0, 23 | 0) | 0;
   if (!((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if ($3_1 >>> 0 <= $1_1 >>> 0) {
     break label$2
    }
    label$3 : while (1) {
     $4_1 = $3_1 + -16 | 0;
     i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1;
     HEAP32[$3_1 >> 2] = $21_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
     $3_1 = $4_1;
     if ($3_1 >>> 0 > $1_1 >>> 0) {
      continue label$3
     }
     break label$3;
    };
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = $3_1 + 16 | 0;
   i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $36_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1;
   HEAP32[$1_1 >> 2] = $36_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($1_1 + 8 | 0) >> 0] = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
   return;
  }
  $185($0_1 | 0, $1_1 | 0, 1883 | 0);
  abort();
 }
 
 function $206($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $100_1 = 0, $156_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $6_1 = 0;
   label$3 : {
    if ((HEAPU8[($1_1 + 34 | 0) >> 0] | 0) & 6 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      $6_1 = HEAP32[((HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
      if (HEAPU8[($6_1 + 7 | 0) >> 0] | 0) {
       break label$5
      }
      $6_1 = 0;
      break label$4;
     }
     $6_1 = ((HEAP32[($1_1 + 24 | 0) >> 2] | 0) + (HEAPU8[($6_1 + 6 | 0) >> 0] | 0) | 0) + 1 | 0;
    }
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($7_1 >>> 0 <= $4_1 >>> 0) {
     break label$3
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
   }
   label$6 : {
    if (!($3_1 & 2 | 0)) {
     break label$6
    }
    $3_1 = $6_1 << 4 | 0;
    $6_1 = (HEAP32[$1_1 >> 2] | 0) + $3_1 | 0;
    HEAP32[$1_1 >> 2] = $6_1;
    $203($0_1 | 0, 1 | 0, -1 | 0, ((($4_1 - ($2_1 << 4 | 0) | 0) - $6_1 | 0) >>> 4 | 0) & 65535 | 0 | 0, $2_1 | 0);
    HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) - $3_1 | 0;
   }
   label$7 : {
    $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    if ((HEAPU8[($3_1 + 34 | 0) >> 0] | 0) & 2 | 0) {
     break label$7
    }
    HEAP32[($0_1 + 24 | 0) >> 2] = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($4_1 - $5_1 | 0) | 0;
  }
  HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  $6_1 = $2_1;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      $1_1 = HEAP16[($1_1 + 32 | 0) >> 1] | 0;
      switch ($1_1 + 1 | 0 | 0) {
      case 2:
       break label$10;
      case 1:
       break label$11;
      case 0:
       break label$8;
      default:
       break label$9;
      };
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     return;
    }
    label$12 : {
     label$13 : {
      if ($2_1) {
       break label$13
      }
      $1_1 = 0;
      break label$12;
     }
     $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) - ($2_1 << 4 | 0) | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $100_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1;
     HEAP32[$3_1 >> 2] = $100_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     $1_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
    }
    HEAP8[($3_1 + 8 | 0) >> 0] = $1_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $3_1 + 16 | 0;
    return;
   }
   label$14 : {
    if (($1_1 | 0) <= (-2 | 0)) {
     break label$14
    }
    $6_1 = $1_1;
    break label$8;
   }
   $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $229($0_1 | 0, $3_1 | 0, 0 | 0) | 0;
   $1_1 = -3 - $1_1 | 0;
   $6_1 = ($1_1 | 0) == (-1 | 0) ? $2_1 : $1_1;
   $3_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($3_1 - $4_1 | 0) | 0;
  }
  $1_1 = 0;
  label$15 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$15
   }
   if (($6_1 | 0) < (1 | 0)) {
    break label$15
   }
   $7_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) - ($2_1 << 4 | 0) | 0;
   $1_1 = ($6_1 + -1 | 0) >>> 0 < ($2_1 + -1 | 0) >>> 0 ? $6_1 : $2_1;
   $2_1 = 0;
   label$16 : while (1) {
    $4_1 = $2_1 << 4 | 0;
    $5_1 = $3_1 + $4_1 | 0;
    $4_1 = $7_1 + $4_1 | 0;
    i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    $156_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[i64toi32_i32$1 >> 2] = $156_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[(i64toi32_i32$1 + 8 | 0) >> 0] = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$16
    }
    break label$16;
   };
  }
  label$17 : {
   if (($1_1 | 0) >= ($6_1 | 0)) {
    break label$17
   }
   label$18 : while (1) {
    HEAP8[(($3_1 + ($1_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 0;
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($6_1 | 0)) {
     continue label$18
    }
    break label$18;
   };
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $3_1 + ($6_1 << 4 | 0) | 0;
 }
 
 function $207($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $8_1 = 0, $7_1 = 0, $9_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0;
  $4_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + 12 | 0) >> 2] | 0;
  $5_1 = HEAPU8[($4_1 + 6 | 0) >> 0] | 0;
  $6_1 = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
  label$1 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $7_1 = 0;
   label$2 : while (1) {
    $8_1 = $7_1 << 4 | 0;
    $9_1 = (HEAP32[$1_1 >> 2] | 0) + $8_1 | 0;
    $8_1 = $2_1 + $8_1 | 0;
    i64toi32_i32$1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
    HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
    HEAP32[($9_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP8[($9_1 + 8 | 0) >> 0] = HEAPU8[($8_1 + 8 | 0) >> 0] | 0;
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   label$4 : {
    label$5 : {
     $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if ((((HEAP32[($0_1 + 28 | 0) >> 2] | 0) - $7_1 | 0) >> 4 | 0 | 0) > ($6_1 | 0)) {
      break label$5
     }
     $8_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
     if (($8_1 | 0) >= (1000001 | 0)) {
      break label$4
     }
     $7_1 = ($6_1 + (($7_1 - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0) >> 4 | 0) | 0) + 5 | 0;
     $8_1 = ($8_1 | 0) > (5e5 | 0) ? 1e6 : $8_1 << 1 | 0;
     $7_1 = ($8_1 | 0) < ($7_1 | 0) ? $7_1 : $8_1;
     if (($7_1 | 0) >= (1000001 | 0)) {
      break label$3
     }
     $199($0_1 | 0, $7_1 | 0, 1 | 0) | 0;
     if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$5
     }
     $248($0_1 | 0);
    }
    $8_1 = HEAP32[$1_1 >> 2] | 0;
    label$6 : {
     if (($5_1 | 0) < ($3_1 | 0)) {
      break label$6
     }
     $9_1 = $5_1 + 1 | 0;
     label$7 : while (1) {
      HEAP8[(($8_1 + ($3_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 0;
      $7_1 = ($3_1 | 0) != ($5_1 | 0);
      $3_1 = $3_1 + 1 | 0;
      if ($7_1) {
       continue label$7
      }
      break label$7;
     };
     $3_1 = $9_1;
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = ($8_1 + ($6_1 << 4 | 0) | 0) + 16 | 0;
    HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
    HEAP16[($1_1 + 34 | 0) >> 1] = HEAPU16[($1_1 + 34 | 0) >> 1] | 0 | 16 | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $8_1 + ($3_1 << 4 | 0) | 0;
    return;
   }
   $197($0_1 | 0, 5 | 0);
   abort();
  }
  $199($0_1 | 0, 1000200 | 0, 1 | 0) | 0;
  $187($0_1 | 0, 1868 | 0, 0 | 0);
  abort();
 }
 
 function $208($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $165_1 = 0, $180_1 = 0, $8_1 = 0;
  $3_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : while (1) {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              $3_1 = $3_1 & 63 | 0;
              switch ($3_1 + -22 | 0 | 0) {
              case 0:
               break label$11;
              case 16:
               break label$12;
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
               break label$8;
              default:
               break label$9;
              };
             }
             $3_1 = (HEAP32[$1_1 >> 2] | 0) + 12 | 0;
             break label$10;
            }
            $3_1 = $1_1;
           }
           $4_1 = HEAP32[$3_1 >> 2] | 0;
           label$13 : {
            if (((HEAP32[($0_1 + 28 | 0) >> 2] | 0) - (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0 | 0) > (335 | 0)) {
             break label$13
            }
            $5_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
            label$14 : {
             if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
              break label$14
             }
             $248($0_1 | 0);
            }
            $3_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
            if (($3_1 | 0) >= (1000001 | 0)) {
             break label$6
            }
            $6_1 = (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0) >> 4 | 0) + 25 | 0;
            $3_1 = ($3_1 | 0) > (5e5 | 0) ? 1e6 : $3_1 << 1 | 0;
            $3_1 = ($3_1 | 0) < ($6_1 | 0) ? $6_1 : $3_1;
            if (($3_1 | 0) >= (1000001 | 0)) {
             break label$5
            }
            $199($0_1 | 0, $3_1 | 0, 1 | 0) | 0;
            $1_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($1_1 - $5_1 | 0) | 0;
           }
           label$15 : {
            $3_1 = HEAP32[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
            if ($3_1) {
             break label$15
            }
            $3_1 = $400($0_1 | 0) | 0;
           }
           HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
           HEAP16[($3_1 + 34 | 0) >> 1] = 2;
           HEAP16[($3_1 + 32 | 0) >> 1] = $2_1;
           $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
           HEAP32[$3_1 >> 2] = $1_1;
           HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + 320 | 0;
           label$16 : {
            if (!((HEAPU8[($0_1 + 112 | 0) >> 0] | 0) & 1 | 0)) {
             break label$16
            }
            $203($0_1 | 0, 0 | 0, -1 | 0, 1 | 0, (($5_1 - $1_1 | 0) >> 4 | 0) + -1 | 0 | 0);
           }
           $206($0_1 | 0, $3_1 | 0, FUNCTION_TABLE[$4_1 | 0]($0_1) | 0 | 0);
           return;
          }
          if (($3_1 | 0) == (6 | 0)) {
           break label$1
          }
         }
         label$17 : {
          if (((HEAP32[($0_1 + 28 | 0) >> 2] | 0) - (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0 | 0) > (31 | 0)) {
           break label$17
          }
          $5_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
          label$18 : {
           if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
            break label$18
           }
           $248($0_1 | 0);
          }
          $3_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
          if (($3_1 | 0) >= (1000001 | 0)) {
           break label$4
          }
          $4_1 = (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0) >> 4 | 0) + 6 | 0;
          $3_1 = ($3_1 | 0) > (5e5 | 0) ? 1e6 : $3_1 << 1 | 0;
          $3_1 = ($3_1 | 0) < ($4_1 | 0) ? $4_1 : $3_1;
          if (($3_1 | 0) >= (1000001 | 0)) {
           break label$3
          }
          $199($0_1 | 0, $3_1 | 0, 1 | 0) | 0;
          $1_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($1_1 - $5_1 | 0) | 0;
         }
         $4_1 = $441($0_1 | 0, $1_1 | 0, 23 | 0) | 0;
         if (!((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
          break label$2
         }
         label$19 : {
          $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
          if ($3_1 >>> 0 <= $1_1 >>> 0) {
           break label$19
          }
          label$20 : while (1) {
           $5_1 = $3_1 + -16 | 0;
           i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
           $165_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $3_1;
           HEAP32[$3_1 >> 2] = $165_1;
           HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
           HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
           $3_1 = $5_1;
           if ($3_1 >>> 0 > $1_1 >>> 0) {
            continue label$20
           }
           break label$20;
          };
          $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
         }
         HEAP32[($0_1 + 12 | 0) >> 2] = $3_1 + 16 | 0;
         i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         $180_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $1_1;
         HEAP32[$1_1 >> 2] = $180_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $3_1 = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
         HEAP8[($1_1 + 8 | 0) >> 0] = $3_1;
         continue label$7;
        };
       }
       $197($0_1 | 0, 5 | 0);
       abort();
      }
      $199($0_1 | 0, 1000200 | 0, 1 | 0) | 0;
      $187($0_1 | 0, 1868 | 0, 0 | 0);
      abort();
     }
     $197($0_1 | 0, 5 | 0);
     abort();
    }
    $199($0_1 | 0, 1000200 | 0, 1 | 0) | 0;
    $187($0_1 | 0, 1868 | 0, 0 | 0);
    abort();
   }
   $185($0_1 | 0, $1_1 | 0, 1883 | 0);
   abort();
  }
  $5_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0;
  $4_1 = HEAPU8[($5_1 + 6 | 0) >> 0] | 0;
  $3_1 = $1_1;
  label$21 : {
   label$22 : {
    label$23 : {
     $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     $6_1 = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
     if ((((HEAP32[($0_1 + 28 | 0) >> 2] | 0) - $7_1 | 0) >> 4 | 0 | 0) > ($6_1 | 0)) {
      break label$23
     }
     $8_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     label$24 : {
      if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
       break label$24
      }
      $248($0_1 | 0);
     }
     $3_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
     if (($3_1 | 0) >= (1000001 | 0)) {
      break label$22
     }
     $9_1 = ($6_1 + (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0) >> 4 | 0) | 0) + 5 | 0;
     $3_1 = ($3_1 | 0) > (5e5 | 0) ? 1e6 : $3_1 << 1 | 0;
     $3_1 = ($3_1 | 0) < ($9_1 | 0) ? $9_1 : $3_1;
     if (($3_1 | 0) >= (1000001 | 0)) {
      break label$21
     }
     $199($0_1 | 0, $3_1 | 0, 1 | 0) | 0;
     $3_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($1_1 - $8_1 | 0) | 0;
    }
    $7_1 = ($7_1 - $1_1 | 0) >> 4 | 0;
    label$25 : {
     $1_1 = HEAP32[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
     if ($1_1) {
      break label$25
     }
     $1_1 = $400($0_1 | 0) | 0;
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP16[($1_1 + 32 | 0) >> 1] = $2_1;
    $5_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
    HEAP16[($1_1 + 34 | 0) >> 1] = 0;
    HEAP32[($1_1 + 16 | 0) >> 2] = $5_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = ($3_1 + ($6_1 << 4 | 0) | 0) + 16 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    label$26 : {
     if (($7_1 | 0) > ($4_1 | 0)) {
      break label$26
     }
     $3_1 = $7_1 + -1 | 0;
     label$27 : while (1) {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      HEAP32[($0_1 + 12 | 0) >> 2] = $5_1 + 16 | 0;
      HEAP8[($5_1 + 8 | 0) >> 0] = 0;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != ($4_1 | 0)) {
       continue label$27
      }
      break label$27;
     };
    }
    $473($0_1 | 0, $1_1 | 0);
    return;
   }
   $197($0_1 | 0, 5 | 0);
   abort();
  }
  $199($0_1 | 0, 1000200 | 0, 1 | 0) | 0;
  $187($0_1 | 0, 1868 | 0, 0 | 0);
  abort();
 }
 
 function $209($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + 65526 | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = $3_1;
  label$1 : {
   if (($3_1 & 65535 | 0) >>> 0 > 80 >>> 0) {
    break label$1
   }
   $398($0_1 | 0);
  }
  $208($0_1 | 0, $1_1 | 0, $2_1 | 0);
  HEAP32[($0_1 + 96 | 0) >> 2] = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + -65526 | 0;
 }
 
 function $210($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $7_1 = 0, $4_1 = 0, $6_1 = 0, $9_1 = 0, $10_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $326_1 = 0, $11_1 = 0, $526_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $5_1 = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
      switch ($5_1 | 0) {
      case 1:
       break label$2;
      case 0:
       break label$4;
      default:
       break label$3;
      };
     }
     $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     label$5 : {
      $7_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (($7_1 | 0) == ($0_1 + 52 | 0 | 0)) {
       break label$5
      }
      $2_1 = $6_1 - ($2_1 << 4 | 0) | 0;
      HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
      $1_1 = $420($0_1 | 0, 1888 | 0) | 0;
      HEAP32[$2_1 >> 2] = $1_1;
      HEAP8[($2_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
      HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
      $7_1 = 2;
      break label$1;
     }
     if (((($6_1 - (HEAP32[$7_1 >> 2] | 0) | 0) + -16 | 0) >> 4 | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $2_1 = $6_1 - ($2_1 << 4 | 0) | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
     $1_1 = $420($0_1 | 0, 1926 | 0) | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     HEAP8[($2_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
     $7_1 = 2;
     break label$1;
    }
    $2_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) - ($2_1 << 4 | 0) | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
    $1_1 = $420($0_1 | 0, 1926 | 0) | 0;
    HEAP32[$2_1 >> 2] = $1_1;
    HEAP8[($2_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
    $7_1 = 2;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if ($1_1) {
      break label$7
     }
     $1_1 = 160;
     HEAP32[($0_1 + 96 | 0) >> 2] = 160;
     break label$6;
    }
    $1_1 = (((HEAPU16[($1_1 + 96 | 0) >> 1] | 0) + (HEAPU16[($1_1 + 8 | 0) >> 1] | 0) | 0) - (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) | 0) + -10 | 0;
    HEAP32[($0_1 + 96 | 0) >> 2] = $1_1;
    if ($1_1 >>> 0 > 80 >>> 0) {
     break label$6
    }
    $2_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) - ($2_1 << 4 | 0) | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
    $1_1 = $420($0_1 | 0, 1955 | 0) | 0;
    HEAP32[$2_1 >> 2] = $1_1;
    HEAP8[($2_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
    $7_1 = 2;
    break label$1;
   }
   $6_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $8_1 = HEAP32[($7_1 + 736 | 0) >> 2] | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = 0;
   HEAP32[$4_1 >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       if ($5_1) {
        break label$11
       }
       $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       HEAP32[(0 + 23356 | 0) >> 2] = 0;
       fimport$8(2 | 0, $0_1 | 0, ($5_1 - ($2_1 << 4 | 0) | 0) + -16 | 0 | 0, -1 | 0);
       $2_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
       HEAP32[(0 + 23356 | 0) >> 2] = 0;
       if (($2_1 | 0) == (1 | 0)) {
        break label$10
       }
       break label$8;
      }
      $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      HEAP8[($0_1 + 6 | 0) >> 0] = 0;
      label$12 : {
       label$13 : {
        if ((HEAPU8[($5_1 + 34 | 0) >> 0] | 0) & 2 | 0) {
         break label$13
        }
        HEAP32[(0 + 23356 | 0) >> 2] = 0;
        fimport$3(3 | 0, $0_1 | 0, $5_1 | 0);
        $2_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
        HEAP32[(0 + 23356 | 0) >> 2] = 0;
        if (($2_1 | 0) != (1 | 0)) {
         break label$12
        }
        break label$10;
       }
       label$14 : {
        $9_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if (!$9_1) {
         break label$14
        }
        $2_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
        HEAP32[(0 + 23356 | 0) >> 2] = 0;
        $2_1 = fimport$9($9_1 | 0, $0_1 | 0, 1 | 0, $2_1 | 0) | 0;
        $9_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
        HEAP32[(0 + 23356 | 0) >> 2] = 0;
        if (($9_1 | 0) == (1 | 0)) {
         break label$10
        }
       }
       HEAP32[(0 + 23356 | 0) >> 2] = 0;
       fimport$8(4 | 0, $0_1 | 0, $5_1 | 0, $2_1 | 0);
       $2_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
       HEAP32[(0 + 23356 | 0) >> 2] = 0;
       if (($2_1 | 0) == (1 | 0)) {
        break label$10
       }
      }
      $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      $9_1 = $0_1 + 52 | 0;
      if (($2_1 | 0) == ($9_1 | 0)) {
       break label$8
      }
      label$15 : {
       label$16 : while (1) {
        label$17 : {
         label$18 : {
          $5_1 = HEAPU16[($2_1 + 34 | 0) >> 1] | 0;
          if (!($5_1 & 2 | 0)) {
           break label$18
          }
          label$19 : {
           if (!($5_1 & 8 | 0)) {
            break label$19
           }
           HEAP16[($2_1 + 34 | 0) >> 1] = $5_1 & 65527 | 0;
           HEAP32[($0_1 + 92 | 0) >> 2] = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
          }
          label$20 : {
           if ((HEAP16[($2_1 + 32 | 0) >> 1] | 0 | 0) > (-1 | 0)) {
            break label$20
           }
           $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
           if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0) >>> 0 >= $5_1 >>> 0) {
            break label$20
           }
           HEAP32[($2_1 + 4 | 0) >> 2] = $5_1;
          }
          $5_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
          $10_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          HEAP32[(0 + 23356 | 0) >> 2] = 0;
          $10_1 = fimport$9($10_1 | 0, $0_1 | 0, 1 | 0, $5_1 | 0) | 0;
          $5_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
          HEAP32[(0 + 23356 | 0) >> 2] = 0;
          if (($5_1 | 0) == (1 | 0)) {
           break label$15
          }
          HEAP32[(0 + 23356 | 0) >> 2] = 0;
          fimport$8(4 | 0, $0_1 | 0, $2_1 | 0, $10_1 | 0);
          $2_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
          HEAP32[(0 + 23356 | 0) >> 2] = 0;
          if (($2_1 | 0) != (1 | 0)) {
           break label$17
          }
          break label$15;
         }
         HEAP32[(0 + 23356 | 0) >> 2] = 0;
         fimport$10(5 | 0, $0_1 | 0);
         $5_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
         HEAP32[(0 + 23356 | 0) >> 2] = 0;
         if (($5_1 | 0) == (1 | 0)) {
          break label$15
         }
         HEAP32[(0 + 23356 | 0) >> 2] = 0;
         fimport$3(3 | 0, $0_1 | 0, $2_1 | 0);
         $2_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
         HEAP32[(0 + 23356 | 0) >> 2] = 0;
         if (($2_1 | 0) == (1 | 0)) {
          break label$15
         }
        }
        $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        if (($2_1 | 0) != ($9_1 | 0)) {
         continue label$16
        }
        break label$8;
       };
      }
      $2_1 = fimport$4(0 | 0) | 0;
      fimport$5() | 0;
      break label$9;
     }
     $2_1 = fimport$4(0 | 0) | 0;
     fimport$5() | 0;
    }
    fimport$6($2_1 | 0) | 0;
    label$21 : {
     if (HEAP32[($4_1 + 8 | 0) >> 2] | 0) {
      break label$21
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = -1;
    }
    fimport$7();
   }
   HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
   HEAP32[($0_1 + 96 | 0) >> 2] = ((($1_1 - $8_1 | 0) + $6_1 | 0) + (HEAP32[($7_1 + 736 | 0) >> 2] | 0) | 0) - (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) | 0;
   label$22 : {
    label$23 : {
     label$24 : {
      $7_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      if (($7_1 | 0) < (2 | 0)) {
       break label$24
      }
      $8_1 = $0_1 + 52 | 0;
      label$25 : while (1) {
       label$26 : {
        label$27 : {
         label$28 : {
          label$29 : {
           label$30 : {
            label$31 : {
             label$32 : {
              label$33 : {
               label$34 : {
                $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                if (!$2_1) {
                 break label$34
                }
                label$35 : while (1) {
                 if ((HEAPU8[($2_1 + 34 | 0) >> 0] | 0) & 8 | 0) {
                  break label$33
                 }
                 $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
                 if ($2_1) {
                  continue label$35
                 }
                 break label$35;
                };
                if (($7_1 | 0) < (2 | 0)) {
                 break label$24
                }
               }
               HEAP8[($0_1 + 6 | 0) >> 0] = $7_1;
               $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               switch ($7_1 + -4 | 0 | 0) {
               case 1:
                break label$31;
               case 0:
                break label$32;
               default:
                break label$30;
               };
              }
              $229($0_1 | 0, (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + (HEAP32[($2_1 + 28 | 0) >> 2] | 0) | 0 | 0, $7_1 | 0) | 0;
              $1_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + (HEAP32[($2_1 + 28 | 0) >> 2] | 0) | 0;
              $5_1 = 0;
              label$36 : {
               label$37 : {
                switch ($7_1 + 2 | 0 | 0) {
                case 6:
                 $5_1 = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 164 | 0) >> 2] | 0;
                 HEAP32[$1_1 >> 2] = $5_1;
                 $5_1 = HEAPU8[($5_1 + 4 | 0) >> 0] | 0 | 64 | 0;
                 break label$36;
                case 7:
                 $5_1 = $417($0_1 | 0, 1791 | 0, 23 | 0) | 0;
                 HEAP32[$1_1 >> 2] = $5_1;
                 $5_1 = HEAPU8[($5_1 + 4 | 0) >> 0] | 0 | 64 | 0;
                 break label$36;
                case 0:
                 break label$36;
                default:
                 break label$37;
                };
               }
               $5_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
               i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
               $326_1 = i64toi32_i32$0;
               i64toi32_i32$0 = $1_1;
               HEAP32[$1_1 >> 2] = $326_1;
               HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
               $5_1 = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
              }
              HEAP8[($1_1 + 8 | 0) >> 0] = $5_1;
              HEAP32[($0_1 + 20 | 0) >> 2] = $2_1;
              $1_1 = $1_1 + 16 | 0;
              HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
              HEAP8[($0_1 + 7 | 0) >> 0] = (HEAPU8[($2_1 + 34 | 0) >> 0] | 0) & 1 | 0;
              $5_1 = $2_1;
              label$40 : while (1) {
               $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
               $1_1 = $1_1 >>> 0 < $6_1 >>> 0 ? $6_1 : $1_1;
               $5_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
               if ($5_1) {
                continue label$40
               }
               break label$40;
              };
              $1_1 = $1_1 - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
              $5_1 = ($1_1 >> 4 | 0) + 1 | 0;
              $6_1 = ($5_1 | 0) / (8 | 0) | 0;
              label$41 : {
               if (($1_1 | 0) > (15999919 | 0)) {
                break label$41
               }
               $1_1 = $6_1 + $5_1 | 0;
               $1_1 = (($1_1 | 0) < (999990 | 0) ? $1_1 : 999990) + 10 | 0;
               if (($1_1 | 0) >= (HEAP32[($0_1 + 100 | 0) >> 2] | 0 | 0)) {
                break label$41
               }
               $199($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
              }
              $401($0_1 | 0);
              HEAP32[($0_1 + 92 | 0) >> 2] = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
              $5_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
              $6_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
              $9_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
              $10_1 = HEAP32[($9_1 + 736 | 0) >> 2] | 0;
              HEAP32[($4_1 + 8 | 0) >> 2] = 0;
              HEAP32[$4_1 >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
              HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
              label$42 : {
               $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               $1_1 = HEAPU16[($2_1 + 34 | 0) >> 1] | 0;
               if (!($1_1 & 8 | 0)) {
                break label$42
               }
               HEAP16[($2_1 + 34 | 0) >> 1] = $1_1 & 65527 | 0;
               HEAP32[($0_1 + 92 | 0) >> 2] = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
              }
              label$43 : {
               if ((HEAP16[($2_1 + 32 | 0) >> 1] | 0 | 0) > (-1 | 0)) {
                break label$43
               }
               $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0) >>> 0 >= $1_1 >>> 0) {
                break label$43
               }
               HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
              }
              $1_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
              $11_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              HEAP32[(0 + 23356 | 0) >> 2] = 0;
              $7_1 = fimport$9($11_1 | 0, $0_1 | 0, $7_1 | 0, $1_1 | 0) | 0;
              $1_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
              HEAP32[(0 + 23356 | 0) >> 2] = 0;
              label$44 : {
               if (($1_1 | 0) == (1 | 0)) {
                break label$44
               }
               HEAP32[(0 + 23356 | 0) >> 2] = 0;
               fimport$8(4 | 0, $0_1 | 0, $2_1 | 0, $7_1 | 0);
               $2_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
               HEAP32[(0 + 23356 | 0) >> 2] = 0;
               if (($2_1 | 0) == (1 | 0)) {
                break label$44
               }
               $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               if (($2_1 | 0) == ($8_1 | 0)) {
                break label$26
               }
               label$45 : while (1) {
                label$46 : {
                 label$47 : {
                  $1_1 = HEAPU16[($2_1 + 34 | 0) >> 1] | 0;
                  if (!($1_1 & 2 | 0)) {
                   break label$47
                  }
                  label$48 : {
                   if (!($1_1 & 8 | 0)) {
                    break label$48
                   }
                   HEAP16[($2_1 + 34 | 0) >> 1] = $1_1 & 65527 | 0;
                   HEAP32[($0_1 + 92 | 0) >> 2] = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
                  }
                  label$49 : {
                   if ((HEAP16[($2_1 + 32 | 0) >> 1] | 0 | 0) > (-1 | 0)) {
                    break label$49
                   }
                   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
                   if ((HEAP32[($2_1 + 4 | 0) >> 2] | 0) >>> 0 >= $1_1 >>> 0) {
                    break label$49
                   }
                   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
                  }
                  $1_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
                  $7_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
                  HEAP32[(0 + 23356 | 0) >> 2] = 0;
                  $7_1 = fimport$9($7_1 | 0, $0_1 | 0, 1 | 0, $1_1 | 0) | 0;
                  $1_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
                  HEAP32[(0 + 23356 | 0) >> 2] = 0;
                  if (($1_1 | 0) == (1 | 0)) {
                   break label$28
                  }
                  HEAP32[(0 + 23356 | 0) >> 2] = 0;
                  fimport$8(4 | 0, $0_1 | 0, $2_1 | 0, $7_1 | 0);
                  $2_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
                  HEAP32[(0 + 23356 | 0) >> 2] = 0;
                  if (($2_1 | 0) != (1 | 0)) {
                   break label$46
                  }
                  break label$28;
                 }
                 HEAP32[(0 + 23356 | 0) >> 2] = 0;
                 fimport$10(5 | 0, $0_1 | 0);
                 $1_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
                 HEAP32[(0 + 23356 | 0) >> 2] = 0;
                 if (($1_1 | 0) == (1 | 0)) {
                  break label$28
                 }
                 HEAP32[(0 + 23356 | 0) >> 2] = 0;
                 fimport$3(3 | 0, $0_1 | 0, $2_1 | 0);
                 $2_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
                 HEAP32[(0 + 23356 | 0) >> 2] = 0;
                 if (($2_1 | 0) == (1 | 0)) {
                  break label$28
                 }
                }
                $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                if (($2_1 | 0) != ($8_1 | 0)) {
                 continue label$45
                }
                break label$26;
               };
              }
              $2_1 = fimport$4(0 | 0) | 0;
              fimport$5() | 0;
              break label$27;
             }
             $1_1 = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 164 | 0) >> 2] | 0;
             HEAP32[$2_1 >> 2] = $1_1;
             $1_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
             break label$29;
            }
            $1_1 = $417($0_1 | 0, 1791 | 0, 23 | 0) | 0;
            HEAP32[$2_1 >> 2] = $1_1;
            $1_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
            break label$29;
           }
           $1_1 = $2_1 + -16 | 0;
           i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           $526_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $2_1;
           HEAP32[$2_1 >> 2] = $526_1;
           HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
           $1_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
          }
          HEAP8[($2_1 + 8 | 0) >> 0] = $1_1;
          $2_1 = $2_1 + 16 | 0;
          HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
          HEAP32[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2_1;
          break label$23;
         }
         $2_1 = fimport$4(0 | 0) | 0;
         fimport$5() | 0;
        }
        fimport$6($2_1 | 0) | 0;
        label$50 : {
         if (HEAP32[($4_1 + 8 | 0) >> 2] | 0) {
          break label$50
         }
         HEAP32[($4_1 + 8 | 0) >> 2] = -1;
        }
        fimport$7();
       }
       HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
       HEAP32[($0_1 + 96 | 0) >> 2] = ((($5_1 - $10_1 | 0) + $6_1 | 0) + (HEAP32[($9_1 + 736 | 0) >> 2] | 0) | 0) - (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) | 0;
       $7_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       if (($7_1 | 0) > (1 | 0)) {
        continue label$25
       }
       break label$25;
      };
     }
     if (($7_1 | 0) != (1 | 0)) {
      break label$23
     }
     $0_1 = HEAP32[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
     $7_1 = 1;
     break label$22;
    }
    $0_1 = (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - (HEAP32[(HEAP32[($0_1 + 20 | 0) >> 2] | 0) >> 2] | 0) | 0) + -16 | 0) >> 4 | 0;
   }
   HEAP32[$3_1 >> 2] = $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $211($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($0_1 + 96 | 0) >> 2] | 0) >>> 0 < 65536 >>> 0 | 0;
 }
 
 function $212($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($0_1 + 96 | 0) >> 2] | 0) >>> 0 < 65536 >>> 0) {
      break label$3
     }
     if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 160 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
      break label$2
     }
     $187($0_1 | 0, 2014 | 0, 0 | 0);
     abort();
    }
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP8[($0_1 + 6 | 0) >> 0] = 1;
    if (!((HEAPU8[($4_1 + 34 | 0) >> 0] | 0) & 2 | 0)) {
     break label$1
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = $3_1;
    label$4 : {
     if (!$3_1) {
      break label$4
     }
     HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = $1_1;
    $197($0_1 | 0, 1 | 0);
    abort();
   }
   $187($0_1 | 0, 1972 | 0, 0 | 0);
   abort();
  }
  HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  return 0 | 0;
 }
 
 function $213($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $9_1 = 0, $11_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
  HEAP32[($0_1 + 92 | 0) >> 2] = $4_1;
  $7_1 = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
  $8_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $9_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
  $10_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
  $11_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $12_1 = HEAP32[($11_1 + 736 | 0) >> 2] | 0;
  $4_1 = 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = 0;
  HEAP32[$5_1 >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $5_1;
  HEAP32[(0 + 23356 | 0) >> 2] = 0;
  fimport$3($1_1 | 0, $0_1 | 0, $2_1 | 0);
  $1_1 = HEAP32[(0 + 23356 | 0) >> 2] | 0;
  HEAP32[(0 + 23356 | 0) >> 2] = 0;
  label$1 : {
   if (($1_1 | 0) != (1 | 0)) {
    break label$1
   }
   $1_1 = fimport$4(0 | 0) | 0;
   fimport$5() | 0;
   fimport$6($1_1 | 0) | 0;
   label$2 : {
    if (HEAP32[($5_1 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = -1;
   }
   fimport$7();
  }
  HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = ((($9_1 - $12_1 | 0) + $10_1 | 0) + (HEAP32[($11_1 + 736 | 0) >> 2] | 0) | 0) - (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) | 0;
  label$3 : {
   $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
   HEAP8[($0_1 + 7 | 0) >> 0] = $7_1;
   $4_1 = $229($0_1 | 0, (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $3_1 | 0 | 0, $1_1 | 0) | 0;
   $1_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $3_1 | 0;
   $2_1 = 0;
   label$4 : {
    label$5 : {
     switch ($4_1 + 2 | 0 | 0) {
     case 6:
      $2_1 = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 164 | 0) >> 2] | 0;
      HEAP32[$1_1 >> 2] = $2_1;
      $2_1 = HEAPU8[($2_1 + 4 | 0) >> 0] | 0 | 64 | 0;
      break label$4;
     case 7:
      $2_1 = $417($0_1 | 0, 1791 | 0, 23 | 0) | 0;
      HEAP32[$1_1 >> 2] = $2_1;
      $2_1 = HEAPU8[($2_1 + 4 | 0) >> 0] | 0 | 64 | 0;
      break label$4;
     case 0:
      break label$4;
     default:
      break label$5;
     };
    }
    $2_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $2_1 = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
   }
   HEAP8[($1_1 + 8 | 0) >> 0] = $2_1;
   $1_1 = $1_1 + 16 | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
   label$8 : {
    $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    label$9 : while (1) {
     $9_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $1_1 = $1_1 >>> 0 < $9_1 >>> 0 ? $9_1 : $1_1;
     $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$9
     }
     break label$9;
    };
   }
   $1_1 = $1_1 - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
   $2_1 = ($1_1 >> 4 | 0) + 1 | 0;
   $9_1 = ($2_1 | 0) / (8 | 0) | 0;
   label$10 : {
    if (($1_1 | 0) > (15999919 | 0)) {
     break label$10
    }
    $1_1 = $9_1 + $2_1 | 0;
    $1_1 = (($1_1 | 0) < (999990 | 0) ? $1_1 : 999990) + 10 | 0;
    if (($1_1 | 0) >= (HEAP32[($0_1 + 100 | 0) >> 2] | 0 | 0)) {
     break label$10
    }
    $199($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
   }
   $401($0_1 | 0);
  }
  HEAP32[($0_1 + 92 | 0) >> 2] = $6_1;
  global$0 = $5_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $214($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  HEAP32[($0_1 + 96 | 0) >> 2] = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + 65536 | 0;
  $5_1 = $4_1 + 48 | 0;
  HEAP32[$5_1 >> 2] = 0;
  $6_1 = $4_1 + 36 | 0;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = $4_1 + 24 | 0;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 56 | 0) >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $1_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $3_1 = $213($0_1 | 0, 6 | 0, $4_1 | 0, (HEAP32[($0_1 + 12 | 0) >> 2] | 0) - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0 | 0, HEAP32[($0_1 + 92 | 0) >> 2] | 0 | 0) | 0;
  $1_1 = $281($0_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[i64toi32_i32$1 >> 2] | 0 | 0, 0 | 0) | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $284($0_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[$7_1 >> 2] | 0, 24) | 0);
  $284($0_1 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, (HEAP32[$6_1 >> 2] | 0) << 4 | 0 | 0);
  $284($0_1 | 0, HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0, (HEAP32[$5_1 >> 2] | 0) << 4 | 0 | 0);
  HEAP32[($0_1 + 96 | 0) >> 2] = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + -65536 | 0;
  global$0 = $4_1 + 64 | 0;
  return $3_1 | 0;
 }
 
 function $215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = HEAP32[$3_1 >> 2] | 0;
  HEAP32[$3_1 >> 2] = $4_1 + -1 | 0;
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
    $4_1 = HEAPU8[$4_1 >> 0] | 0;
    break label$1;
   }
   $4_1 = $474($3_1 | 0) | 0;
  }
  $3_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (($4_1 | 0) != (27 | 0)) {
       break label$6
      }
      label$7 : {
       if (!$3_1) {
        break label$7
       }
       if (!($865($3_1 | 0, 98 | 0) | 0)) {
        break label$4
       }
      }
      $1_1 = $453($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, HEAP32[($1_1 + 56 | 0) >> 2] | 0 | 0) | 0;
      break label$5;
     }
     label$8 : {
      if (!$3_1) {
       break label$8
      }
      if (!($865($3_1 | 0, 116 | 0) | 0)) {
       break label$3
      }
     }
     $1_1 = $303($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $1_1 + 4 | 0 | 0, $1_1 + 16 | 0 | 0, HEAP32[($1_1 + 56 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0;
    }
    $221($0_1 | 0, $1_1 | 0);
    global$0 = $2_1 + 32 | 0;
    return;
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[$2_1 >> 2] = 2056;
   $298($0_1 | 0, 2068 | 0, $2_1 | 0) | 0;
   $197($0_1 | 0, 3 | 0);
   abort();
  }
  HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 16 | 0) >> 2] = 2063;
  $298($0_1 | 0, 2068 | 0, $2_1 + 16 | 0 | 0) | 0;
  $197($0_1 | 0, 3 | 0);
  abort();
 }
 
 function $216($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = $0_1;
  $4_1 = FUNCTION_TABLE[$2_1 | 0]($0_1, 2110, 4, $3_1) | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
  $7_1 = 63491;
  HEAP8[($5_1 + 27 | 0) >> 0] = $7_1;
  HEAP8[($5_1 + 28 | 0) >> 0] = $7_1 >>> 8 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             if ($4_1) {
              break label$11
             }
             $4_1 = FUNCTION_TABLE[$2_1 | 0]($0_1, $5_1 + 27 | 0, 2, $3_1) | 0;
             HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
             HEAP8[($5_1 + 24 | 0) >> 0] = 0;
             if ($4_1) {
              break label$11
             }
             $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$5_1 >> 2] | 0, $5_1 + 24 | 0, 1, HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
             HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
             if (!$4_1) {
              break label$10
             }
            }
            HEAP8[($5_1 + 24 | 0) >> 0] = 4;
            break label$9;
           }
           $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$5_1 >> 2] | 0, 2115, 6, HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
           HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
           HEAP8[($5_1 + 24 | 0) >> 0] = 4;
           if (!$4_1) {
            break label$8
           }
          }
          HEAP8[($5_1 + 24 | 0) >> 0] = 8;
          break label$7;
         }
         $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$5_1 >> 2] | 0, $5_1 + 24 | 0, 1, HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
         HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
         HEAP8[($5_1 + 24 | 0) >> 0] = 8;
         if (!$4_1) {
          break label$6
         }
        }
        HEAP8[($5_1 + 24 | 0) >> 0] = 8;
        break label$5;
       }
       $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$5_1 >> 2] | 0, $5_1 + 24 | 0, 1, HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
       HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
       HEAP8[($5_1 + 24 | 0) >> 0] = 8;
       if (!$4_1) {
        break label$4
       }
      }
      i64toi32_i32$0 = 0;
      HEAP32[($5_1 + 24 | 0) >> 2] = 22136;
      HEAP32[($5_1 + 28 | 0) >> 2] = i64toi32_i32$0;
      break label$3;
     }
     $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$5_1 >> 2] | 0, $5_1 + 24 | 0, 1, HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
     HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
     i64toi32_i32$0 = 0;
     HEAP32[($5_1 + 24 | 0) >> 2] = 22136;
     HEAP32[($5_1 + 28 | 0) >> 2] = i64toi32_i32$0;
     if (!$4_1) {
      break label$2
     }
    }
    i64toi32_i32$0 = 1081550848;
    HEAP32[($5_1 + 24 | 0) >> 2] = 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$5_1 >> 2] | 0, $5_1 + 24 | 0, 8, HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
   i64toi32_i32$0 = 1081550848;
   HEAP32[($5_1 + 24 | 0) >> 2] = 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = i64toi32_i32$0;
   if ($4_1) {
    break label$1
   }
   $4_1 = FUNCTION_TABLE[HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$5_1 >> 2] | 0, $5_1 + 24 | 0, 8, HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
  }
  HEAP8[($5_1 + 24 | 0) >> 0] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  label$12 : {
   if ($4_1) {
    break label$12
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$5_1 >> 2] | 0, $5_1 + 24 | 0, 1, HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
  }
  $217($5_1 | 0, $1_1 | 0, 0 | 0);
  $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $217($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0, i64toi32_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (HEAP32[($0_1 + 12 | 0) >> 2] | 0) {
      break label$3
     }
     $4_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
     if (($4_1 | 0) != ($2_1 | 0)) {
      break label$2
     }
    }
    HEAP8[($3_1 + 12 | 0) >> 0] = 128;
    if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
     break label$1
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $3_1 + 12 | 0, 1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
    break label$1;
   }
   $218($0_1 | 0, $4_1 | 0);
  }
  $2_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
  $5_1 = 0;
  label$4 : while (1) {
   $6_1 = $5_1;
   HEAP8[((($3_1 + 8 | 0) - $6_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
   $5_1 = $6_1 + 1 | 0;
   $2_1 = $2_1 >>> 7 | 0;
   if ($2_1) {
    continue label$4
   }
   break label$4;
  };
  HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
  label$5 : {
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if ($4_1) {
    break label$5
   }
   $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, (($3_1 + 8 | 0) + ($6_1 ^ -1 | 0) | 0) + 5 | 0, $5_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
  }
  $2_1 = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
  $5_1 = 0;
  label$6 : while (1) {
   $6_1 = $5_1;
   HEAP8[((($3_1 + 8 | 0) - $6_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
   $5_1 = $6_1 + 1 | 0;
   $2_1 = $2_1 >>> 7 | 0;
   if ($2_1) {
    continue label$6
   }
   break label$6;
  };
  HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
  label$7 : {
   if ($4_1) {
    break label$7
   }
   $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, (($3_1 + 8 | 0) + ($6_1 ^ -1 | 0) | 0) + 5 | 0, $5_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
  }
  HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
  label$8 : {
   if ($4_1) {
    break label$8
   }
   $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $3_1 + 8 | 0, 1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
  }
  HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
  label$9 : {
   if ($4_1) {
    break label$9
   }
   $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $3_1 + 8 | 0, 1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
  }
  HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
  label$10 : {
   if ($4_1) {
    break label$10
   }
   $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $3_1 + 8 | 0, 1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
  }
  $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  $5_1 = 0;
  label$11 : while (1) {
   $6_1 = $5_1;
   HEAP8[((($3_1 + 8 | 0) - $6_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
   $5_1 = $6_1 + 1 | 0;
   $2_1 = $2_1 >>> 7 | 0;
   if ($2_1) {
    continue label$11
   }
   break label$11;
  };
  HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
  label$12 : {
   if ($4_1) {
    break label$12
   }
   $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, (($3_1 + 8 | 0) + ($6_1 ^ -1 | 0) | 0) + 5 | 0, $5_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
   if ($4_1) {
    break label$12
   }
   $2_1 = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) << 2 | 0;
   if (!$2_1) {
    break label$12
   }
   $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, HEAP32[($1_1 + 52 | 0) >> 2] | 0, $2_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
  }
  $5_1 = 0;
  $7_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  $2_1 = $7_1;
  label$13 : while (1) {
   $6_1 = $5_1;
   HEAP8[((($3_1 + 8 | 0) - $6_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
   $5_1 = $6_1 + 1 | 0;
   $2_1 = $2_1 >>> 7 | 0;
   if ($2_1) {
    continue label$13
   }
   break label$13;
  };
  HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
  label$14 : {
   if ($4_1) {
    break label$14
   }
   $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, (($3_1 + 8 | 0) + ($6_1 ^ -1 | 0) | 0) + 5 | 0, $5_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
  }
  label$15 : {
   if (($7_1 | 0) < (1 | 0)) {
    break label$15
   }
   $2_1 = 0;
   label$16 : while (1) {
    $6_1 = (HEAP32[($1_1 + 48 | 0) >> 2] | 0) + ($2_1 << 4 | 0) | 0;
    $5_1 = (HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 63 | 0;
    HEAP8[($3_1 + 8 | 0) >> 0] = $5_1;
    label$17 : {
     if ($4_1) {
      break label$17
     }
     $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $3_1 + 8 | 0, 1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
    }
    label$18 : {
     label$19 : {
      switch ($5_1 + -3 | 0 | 0) {
      case 16:
       HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[$6_1 >> 3];
       if ($4_1) {
        break label$18
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $3_1 + 8 | 0, 8, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
       break label$18;
      case 0:
       i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
       HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       if ($4_1) {
        break label$18
       }
       HEAP32[($0_1 + 16 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $3_1 + 8 | 0, 8, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
       break label$18;
      case 1:
      case 17:
       break label$19;
      default:
       break label$18;
      };
     }
     $218($0_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0);
    }
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) == ($7_1 | 0)) {
     break label$15
    }
    $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    continue label$16;
   };
  }
  $5_1 = 0;
  $7_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $2_1 = $7_1;
  label$22 : while (1) {
   $6_1 = $5_1;
   HEAP8[((($3_1 + 8 | 0) - $6_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
   $5_1 = $6_1 + 1 | 0;
   $2_1 = $2_1 >>> 7 | 0;
   if ($2_1) {
    continue label$22
   }
   break label$22;
  };
  HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
  label$23 : {
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if ($4_1) {
    break label$23
   }
   $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, (($3_1 + 8 | 0) + ($6_1 ^ -1 | 0) | 0) + 5 | 0, $5_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
  }
  label$24 : {
   if (($7_1 | 0) < (1 | 0)) {
    break label$24
   }
   $5_1 = 0;
   label$25 : while (1) {
    $2_1 = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
    $6_1 = $5_1 << 3 | 0;
    HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[(($2_1 + $6_1 | 0) + 4 | 0) >> 0] | 0;
    label$26 : {
     if ($4_1) {
      break label$26
     }
     $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $3_1 + 8 | 0, 1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
     $2_1 = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
    }
    HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[(($2_1 + $6_1 | 0) + 5 | 0) >> 0] | 0;
    label$27 : {
     if ($4_1) {
      break label$27
     }
     $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $3_1 + 8 | 0, 1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
     $2_1 = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
    }
    HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[(($2_1 + $6_1 | 0) + 6 | 0) >> 0] | 0;
    label$28 : {
     if ($4_1) {
      break label$28
     }
     $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $3_1 + 8 | 0, 1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
    }
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != ($7_1 | 0)) {
     continue label$25
    }
    break label$25;
   };
  }
  $5_1 = 0;
  $7_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
  $2_1 = $7_1;
  label$29 : while (1) {
   $6_1 = $5_1;
   HEAP8[((($3_1 + 8 | 0) - $6_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
   $5_1 = $6_1 + 1 | 0;
   $2_1 = $2_1 >>> 7 | 0;
   if ($2_1) {
    continue label$29
   }
   break label$29;
  };
  HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
  label$30 : {
   if ($4_1) {
    break label$30
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, (($3_1 + 8 | 0) + ($6_1 ^ -1 | 0) | 0) + 5 | 0, $5_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
  }
  label$31 : {
   if (($7_1 | 0) < (1 | 0)) {
    break label$31
   }
   $2_1 = 0;
   label$32 : while (1) {
    $217($0_1 | 0, HEAP32[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0);
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($7_1 | 0)) {
     continue label$32
    }
    break label$32;
   };
  }
  $4_1 = 0;
  $7_1 = 0;
  label$33 : {
   if (HEAP32[($0_1 + 12 | 0) >> 2] | 0) {
    break label$33
   }
   $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  }
  $2_1 = $7_1;
  label$34 : while (1) {
   $5_1 = $4_1;
   HEAP8[((($3_1 + 8 | 0) - $4_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
   $4_1 = $4_1 + 1 | 0;
   $2_1 = $2_1 >>> 7 | 0;
   if ($2_1) {
    continue label$34
   }
   break label$34;
  };
  HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
  label$35 : {
   $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if ($6_1) {
    break label$35
   }
   $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, (($3_1 + 8 | 0) + ($5_1 ^ -1 | 0) | 0) + 5 | 0, $4_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
   if (!$7_1) {
    break label$35
   }
   if ($6_1) {
    break label$35
   }
   $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, HEAP32[($1_1 + 64 | 0) >> 2] | 0, $7_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
  }
  $4_1 = 0;
  $8_1 = 0;
  label$36 : {
   if (HEAP32[($0_1 + 12 | 0) >> 2] | 0) {
    break label$36
   }
   $8_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
  }
  $2_1 = $8_1;
  label$37 : while (1) {
   $5_1 = $4_1;
   HEAP8[((($3_1 + 8 | 0) - $4_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
   $4_1 = $4_1 + 1 | 0;
   $2_1 = $2_1 >>> 7 | 0;
   if ($2_1) {
    continue label$37
   }
   break label$37;
  };
  HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
  label$38 : {
   if ($6_1) {
    break label$38
   }
   $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, (($3_1 + 8 | 0) + ($5_1 ^ -1 | 0) | 0) + 5 | 0, $4_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
  }
  label$39 : {
   if (($8_1 | 0) < (1 | 0)) {
    break label$39
   }
   $9_1 = $3_1 + 13 | 0;
   $7_1 = 0;
   label$40 : while (1) {
    $10_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
    $11_1 = $7_1 << 3 | 0;
    $2_1 = HEAP32[($10_1 + $11_1 | 0) >> 2] | 0;
    $4_1 = 0;
    label$41 : while (1) {
     $5_1 = $4_1;
     HEAP8[((($3_1 + 8 | 0) - $4_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
     $4_1 = $4_1 + 1 | 0;
     $2_1 = $2_1 >>> 7 | 0;
     if ($2_1) {
      continue label$41
     }
     break label$41;
    };
    HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
    label$42 : {
     if ($6_1) {
      break label$42
     }
     $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $9_1 + ($5_1 ^ -1 | 0) | 0, $4_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
     $10_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
    }
    $2_1 = HEAP32[(($10_1 + $11_1 | 0) + 4 | 0) >> 2] | 0;
    $4_1 = 0;
    label$43 : while (1) {
     $5_1 = $4_1;
     HEAP8[((($3_1 + 8 | 0) - $4_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
     $4_1 = $4_1 + 1 | 0;
     $2_1 = $2_1 >>> 7 | 0;
     if ($2_1) {
      continue label$43
     }
     break label$43;
    };
    HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
    label$44 : {
     if ($6_1) {
      break label$44
     }
     $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $9_1 + ($5_1 ^ -1 | 0) | 0, $4_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
    }
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) != ($8_1 | 0)) {
     continue label$40
    }
    break label$40;
   };
  }
  $4_1 = 0;
  $8_1 = 0;
  label$45 : {
   if (HEAP32[($0_1 + 12 | 0) >> 2] | 0) {
    break label$45
   }
   $8_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
  }
  $2_1 = $8_1;
  label$46 : while (1) {
   $5_1 = $4_1;
   HEAP8[((($3_1 + 8 | 0) - $4_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
   $4_1 = $4_1 + 1 | 0;
   $2_1 = $2_1 >>> 7 | 0;
   if ($2_1) {
    continue label$46
   }
   break label$46;
  };
  HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
  label$47 : {
   if ($6_1) {
    break label$47
   }
   $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, (($3_1 + 8 | 0) + ($5_1 ^ -1 | 0) | 0) + 5 | 0, $4_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
  }
  label$48 : {
   if (($8_1 | 0) < (1 | 0)) {
    break label$48
   }
   $9_1 = $3_1 + 13 | 0;
   $7_1 = 0;
   label$49 : while (1) {
    $10_1 = Math_imul($7_1, 12);
    $218($0_1 | 0, HEAP32[((HEAP32[($1_1 + 72 | 0) >> 2] | 0) + $10_1 | 0) >> 2] | 0 | 0);
    $11_1 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
    $2_1 = HEAP32[(($11_1 + $10_1 | 0) + 4 | 0) >> 2] | 0;
    $4_1 = 0;
    label$50 : while (1) {
     $5_1 = $4_1;
     HEAP8[((($3_1 + 8 | 0) - $4_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
     $4_1 = $4_1 + 1 | 0;
     $2_1 = $2_1 >>> 7 | 0;
     if ($2_1) {
      continue label$50
     }
     break label$50;
    };
    HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
    label$51 : {
     $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if ($6_1) {
      break label$51
     }
     $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $9_1 + ($5_1 ^ -1 | 0) | 0, $4_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
     $11_1 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
    }
    $2_1 = HEAP32[(($11_1 + $10_1 | 0) + 8 | 0) >> 2] | 0;
    $4_1 = 0;
    label$52 : while (1) {
     $5_1 = $4_1;
     HEAP8[((($3_1 + 8 | 0) - $4_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
     $4_1 = $4_1 + 1 | 0;
     $2_1 = $2_1 >>> 7 | 0;
     if ($2_1) {
      continue label$52
     }
     break label$52;
    };
    HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
    label$53 : {
     if ($6_1) {
      break label$53
     }
     $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $9_1 + ($5_1 ^ -1 | 0) | 0, $4_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
     HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
    }
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) != ($8_1 | 0)) {
     continue label$49
    }
    break label$49;
   };
  }
  $4_1 = 0;
  $7_1 = 0;
  label$54 : {
   if (HEAP32[($0_1 + 12 | 0) >> 2] | 0) {
    break label$54
   }
   $7_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  }
  $2_1 = $7_1;
  label$55 : while (1) {
   $5_1 = $4_1;
   HEAP8[((($3_1 + 8 | 0) - $4_1 | 0) + 4 | 0) >> 0] = $2_1 & 127 | 0;
   $4_1 = $4_1 + 1 | 0;
   $2_1 = $2_1 >>> 7 | 0;
   if ($2_1) {
    continue label$55
   }
   break label$55;
  };
  HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 128 | 0;
  label$56 : {
   if ($6_1) {
    break label$56
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, (($3_1 + 8 | 0) + ($5_1 ^ -1 | 0) | 0) + 5 | 0, $4_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
  }
  label$57 : {
   if (($7_1 | 0) < (1 | 0)) {
    break label$57
   }
   $2_1 = 0;
   label$58 : while (1) {
    $218($0_1 | 0, HEAP32[((HEAP32[($1_1 + 60 | 0) >> 2] | 0) + ($2_1 << 3 | 0) | 0) >> 2] | 0 | 0);
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($7_1 | 0)) {
     continue label$58
    }
    break label$58;
   };
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $218($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    HEAP8[($2_1 + 15 | 0) >> 0] = 128;
    if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
     break label$1
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $2_1 + 15 | 0, 1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if ((HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
      break label$4
     }
     $3_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
     break label$3;
    }
    $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   }
   $4_1 = $3_1 + 1 | 0;
   $5_1 = $1_1 + 16 | 0;
   $1_1 = 0;
   label$5 : while (1) {
    $6_1 = $1_1;
    HEAP8[((($2_1 + 11 | 0) - $1_1 | 0) + 4 | 0) >> 0] = $4_1 & 127 | 0;
    $1_1 = $1_1 + 1 | 0;
    $4_1 = $4_1 >>> 7 | 0;
    if ($4_1) {
     continue label$5
    }
    break label$5;
   };
   HEAP8[($2_1 + 15 | 0) >> 0] = HEAPU8[($2_1 + 15 | 0) >> 0] | 0 | 128 | 0;
   if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
    break label$1
   }
   $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, (($2_1 + 11 | 0) + ($6_1 ^ -1 | 0) | 0) + 5 | 0, $1_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
   if (!$3_1) {
    break label$1
   }
   if ($4_1) {
    break label$1
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0](HEAP32[$0_1 >> 2] | 0, $5_1, $3_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $219($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $237($0_1 | 0, 38 | 0, ($1_1 << 4 | 0) + 16 | 0 | 0) | 0;
  HEAP8[($0_1 + 6 | 0) >> 0] = $1_1;
  return $0_1 | 0;
 }
 
 function $220($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1_1 << 2 | 0;
  $0_1 = $237($0_1 | 0, 6 | 0, $2_1 + 16 | 0 | 0) | 0;
  HEAP8[($0_1 + 6 | 0) >> 0] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $952($0_1 + 16 | 0 | 0, 0 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $221($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   if (!(HEAPU8[($1_1 + 6 | 0) >> 0] | 0)) {
    break label$1
   }
   $2_1 = 0;
   label$2 : while (1) {
    $3_1 = $237($0_1 | 0, 9 | 0, 32 | 0) | 0;
    HEAP8[($3_1 + 24 | 0) >> 0] = 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $3_1 + 16 | 0;
    HEAP32[(($1_1 + ($2_1 << 2 | 0) | 0) + 16 | 0) >> 2] = $3_1;
    label$3 : {
     if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
      break label$3
     }
     if (!((HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
      break label$3
     }
     $233($0_1 | 0, $1_1 | 0, $3_1 | 0);
    }
    $2_1 = $2_1 + 1 | 0;
    if ($2_1 >>> 0 < (HEAPU8[($1_1 + 6 | 0) >> 0] | 0) >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $222($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $2_1 = $0_1 + 36 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    if ($4_1 >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    label$3 : while (1) {
     if (($4_1 | 0) == ($1_1 | 0)) {
      break label$1
     }
     $2_1 = $3_1 + 16 | 0;
     $3_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$2
     }
     $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     if ($4_1 >>> 0 >= $1_1 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $3_1 = $237($0_1 | 0, 9 | 0, 32 | 0) | 0;
   $4_1 = HEAP32[$2_1 >> 2] | 0;
   HEAP32[($3_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
   HEAP8[($3_1 + 6 | 0) >> 0] = 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = $3_1 + 16 | 0;
   }
   HEAP32[$2_1 >> 2] = $3_1;
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($0_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 152 | 0) >> 2] | 0;
   HEAP32[($1_1 + 152 | 0) >> 2] = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $223($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
     if (($2_1 | 0) == (1 | 0)) {
      break label$3
     }
     if (!($2_1 & 15 | 0)) {
      break label$3
     }
     if (!((HEAPU8[(($441($0_1 | 0, $1_1 | 0, 24 | 0) | 0) + 8 | 0) >> 0] | 0) & 15 | 0)) {
      break label$2
     }
     if ($198($0_1 | 0, 7 | 0, $1_1 | 0) | 0) {
      break label$1
     }
    }
    return;
   }
   $225($0_1 | 0, $1_1 | 0, 2122 | 0);
   abort();
  }
  $2_1 = $1_1 + 16 | 0;
  $196($0_1 | 0, 4 | 0, $2_1 | 0);
  $226($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $227($0_1 | 0, 0 | 0);
  $197($0_1 | 0, 4 | 0);
  abort();
 }
 
 function $224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $237($0_1 | 0, 9 | 0, 32 | 0) | 0;
  $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  HEAP32[($2_1 + 20 | 0) >> 2] = $0_1 + 36 | 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = $3_1;
  HEAP8[($2_1 + 6 | 0) >> 0] = 1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 + 16 | 0;
  }
  HEAP32[($0_1 + 36 | 0) >> 2] = $2_1;
  label$2 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
    break label$2
   }
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   HEAP32[($0_1 + 44 | 0) >> 2] = HEAP32[($2_1 + 152 | 0) >> 2] | 0;
   HEAP32[($2_1 + 152 | 0) >> 2] = $0_1;
  }
 }
 
 function $225($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $1_1 = $180($0_1 | 0, $4_1 | 0, ($1_1 - (HEAP32[$4_1 >> 2] | 0) | 0) >> 4 | 0 | 0, 0 | 0) | 0;
  HEAP32[$3_1 >> 2] = $1_1 ? $1_1 : 2161;
  $187($0_1 | 0, $2_1 | 0, $3_1 | 0);
  abort();
 }
 
 function $226($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $4_1 = 0, $15_1 = 0, $21_1 = 0, $28_1 = 0;
  $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   $4_1 = $441($0_1 | 0, $1_1 | 0, 24 | 0) | 0;
   if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
    break label$1
   }
   return 0 | 0;
  }
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[i64toi32_i32$0 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[(i64toi32_i32$0 + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $21_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 24 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $28_1;
  HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[(i64toi32_i32$0 + 40 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0 + 48 | 0;
  return 1 | 0;
 }
 
 function $227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $209($0_1 | 0, (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -48 | 0 | 0, 0 | 0);
 }
 
 function $228($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[(HEAP32[($0_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  }
 }
 
 function $229($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $5_1 = 0, $8_1 = 0, $40_1 = 0, $46_1 = 0, $53_1 = 0, $88_1 = 0, $94_1 = 0, $101_1 = 0, $8$hi = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : while (1) {
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    if ($4_1 >>> 0 < $1_1 >>> 0) {
     break label$1
    }
    label$3 : {
     if (($2_1 | 0) == (-1 | 0)) {
      break label$3
     }
     if (!((HEAPU8[($3_1 + 6 | 0) >> 0] | 0) & 255 | 0)) {
      break label$3
     }
     $5_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     label$4 : {
      label$5 : {
       if ($2_1) {
        break label$5
       }
       $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       label$6 : {
        $7_1 = $441($0_1 | 0, $4_1 | 0, 24 | 0) | 0;
        if (!((HEAPU8[($7_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
         break label$6
        }
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $40_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $6_1;
        HEAP32[$6_1 >> 2] = $40_1;
        HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
        HEAP8[($6_1 + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        $46_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $6_1;
        HEAP32[($6_1 + 16 | 0) >> 2] = $46_1;
        HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        HEAP8[($6_1 + 24 | 0) >> 0] = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
        $53_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $6_1;
        HEAP32[($6_1 + 32 | 0) >> 2] = $53_1;
        HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$1;
        HEAP8[($6_1 + 40 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 64 | 0) >> 0] | 0;
        HEAP32[($0_1 + 12 | 0) >> 2] = $6_1 + 48 | 0;
        $2_1 = 0;
        $209($0_1 | 0, $6_1 | 0, 0 | 0);
        break label$4;
       }
       $2_1 = 0;
       $6_1 = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
       if (($6_1 | 0) == (1 | 0)) {
        break label$4
       }
       if (!($6_1 & 15 | 0)) {
        break label$4
       }
       $225($0_1 | 0, $4_1 | 0, 2163 | 0);
       abort();
      }
      $196($0_1 | 0, $2_1 | 0, $4_1 + 16 | 0 | 0);
      $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $7_1 = $441($0_1 | 0, $4_1 | 0, 24 | 0) | 0;
      if (!((HEAPU8[($7_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
       break label$4
      }
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $88_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $6_1;
      HEAP32[$6_1 >> 2] = $88_1;
      HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP8[($6_1 + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      $94_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $6_1;
      HEAP32[($6_1 + 16 | 0) >> 2] = $94_1;
      HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$1;
      HEAP8[($6_1 + 24 | 0) >> 0] = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      $101_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $6_1;
      HEAP32[($6_1 + 32 | 0) >> 2] = $101_1;
      HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$0;
      HEAP8[($6_1 + 40 | 0) >> 0] = HEAPU8[($4_1 + 24 | 0) >> 0] | 0;
      HEAP32[($0_1 + 12 | 0) >> 2] = $6_1 + 48 | 0;
      $4_1 = ($4_1 - $5_1 | 0) + 32 | 0;
      $6_1 = $213($0_1 | 0, 8 | 0, 0 | 0, $4_1 | 0, 0 | 0) | 0;
      label$7 : {
       if (($2_1 | 0) != (-2 | 0)) {
        break label$7
       }
       if (!$6_1) {
        break label$7
       }
       $2_1 = $6_1;
       break label$4;
      }
      label$8 : {
       if (!$6_1) {
        break label$8
       }
       $410($0_1 | 0, 2207 | 0);
      }
      HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $4_1 | 0;
     }
     $1_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($1_1 - $5_1 | 0) | 0;
    }
    $6_1 = $3_1 + 16 | 0;
    HEAP32[(HEAP32[($3_1 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
    label$9 : {
     $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$9
     }
     HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    }
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    $8_1 = i64toi32_i32$0;
    $8$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $8_1;
    HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$1;
    $4_1 = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
    HEAP8[($3_1 + 24 | 0) >> 0] = $4_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
    label$10 : {
     $6_1 = HEAPU8[($3_1 + 5 | 0) >> 0] | 0;
     if ($6_1 & 24 | 0) {
      break label$10
     }
     $6_1 = $6_1 | 32 | 0;
     HEAP8[($3_1 + 5 | 0) >> 0] = $6_1;
    }
    label$11 : {
     if (!($4_1 & 64 | 0)) {
      break label$11
     }
     if (!($6_1 & 32 | 0)) {
      break label$11
     }
     i64toi32_i32$1 = $8$hi;
     $6_1 = $8_1;
     if (!((HEAPU8[($6_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
      break label$11
     }
     $233($0_1 | 0, $3_1 | 0, $6_1 | 0);
    }
    $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $230($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $0_1 = $237($0_1 | 0, 10 | 0, 84 | 0) | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 8 | 0) >> 0] = 0;
  HEAP16[(i64toi32_i32$1 + 6 | 0) >> 1] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 64 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $284($0_1 | 0, HEAP32[($1_1 + 52 | 0) >> 2] | 0 | 0, (HEAP32[($1_1 + 20 | 0) >> 2] | 0) << 2 | 0 | 0);
  $284($0_1 | 0, HEAP32[($1_1 + 56 | 0) >> 2] | 0 | 0, (HEAP32[($1_1 + 28 | 0) >> 2] | 0) << 2 | 0 | 0);
  $284($0_1 | 0, HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0, (HEAP32[($1_1 + 16 | 0) >> 2] | 0) << 4 | 0 | 0);
  $284($0_1 | 0, HEAP32[($1_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0);
  $284($0_1 | 0, HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0, (HEAP32[($1_1 + 36 | 0) >> 2] | 0) << 3 | 0 | 0);
  $284($0_1 | 0, HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($1_1 + 32 | 0) >> 2] | 0, 12) | 0);
  $284($0_1 | 0, HEAP32[($1_1 + 60 | 0) >> 2] | 0 | 0, (HEAP32[($1_1 + 12 | 0) >> 2] | 0) << 3 | 0 | 0);
  $284($0_1 | 0, $1_1 | 0, 84 | 0);
 }
 
 function $232($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (($3_1 | 0) >= (1 | 0)) {
    break label$1
   }
   return 0 | 0;
  }
  $4_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  $0_1 = 0;
  label$2 : {
   label$3 : while (1) {
    $5_1 = $4_1 + Math_imul($0_1, 12) | 0;
    if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) > ($2_1 | 0)) {
     break label$2
    }
    label$4 : {
     if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) <= ($2_1 | 0)) {
      break label$4
     }
     $1_1 = $1_1 + -1 | 0;
     if ($1_1) {
      break label$4
     }
     return (HEAP32[($4_1 + Math_imul($0_1, 12) | 0) >> 2] | 0) + 16 | 0 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) < ($3_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  return 0 | 0;
 }
 
 function $233($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if ((HEAPU8[($0_1 + 77 | 0) >> 0] | 0) >>> 0 > 2 >>> 0) {
      break label$3
     }
     $234($0_1 | 0, $2_1 | 0);
     if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 6 | 0)) {
      break label$1
     }
     $3_1 = $2_1 + 5 | 0;
     $2_1 = (HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & -8 | 0;
     $1_1 = 2;
     break label$2;
    }
    $3_1 = $1_1 + 5 | 0;
    $2_1 = (HEAPU8[($0_1 + 76 | 0) >> 0] | 0) & 24 | 0;
    $1_1 = (HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & -64 | 0;
   }
   HEAP8[$3_1 >> 0] = $2_1 | $1_1 | 0;
  }
 }
 
 function $234($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : while (1) {
        $3_1 = $2_1 & 231 | 0;
        HEAP8[($1_1 + 5 | 0) >> 0] = $3_1;
        label$7 : {
         $2_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
         if (($2_1 | 0) == (9 | 0)) {
          break label$7
         }
         label$8 : {
          switch ($2_1 + -4 | 0 | 0) {
          case 1:
          case 2:
          case 4:
          case 6:
          case 34:
           break label$4;
          case 3:
           break label$5;
          case 0:
          case 16:
           break label$8;
          default:
           break label$1;
          };
         }
         HEAP8[($1_1 + 5 | 0) >> 0] = $3_1 | 32 | 0;
         return;
        }
        label$9 : {
         $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
         if (($2_1 | 0) != ($1_1 + 16 | 0 | 0)) {
          break label$9
         }
         HEAP8[($1_1 + 5 | 0) >> 0] = $3_1 | 32 | 0;
        }
        if (!((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
         break label$1
        }
        $1_1 = HEAP32[$2_1 >> 2] | 0;
        $2_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
        if ($2_1 & 24 | 0) {
         continue label$6
        }
        break label$1;
       };
      }
      label$10 : {
       if (!(HEAPU16[($1_1 + 6 | 0) >> 1] | 0)) {
        break label$10
       }
       $4_1 = $0_1 + 100 | 0;
       $0_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
       break label$3;
      }
      label$11 : {
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$11
       }
       if (!((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
        break label$11
       }
       $234($0_1 | 0, $2_1 | 0);
       $3_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
      }
      HEAP8[($1_1 + 5 | 0) >> 0] = $3_1 | 32 | 0;
      return;
     }
     $4_1 = $0_1 + 100 | 0;
     $0_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
     $3_1 = 0;
     label$12 : {
      switch ($2_1 + -5 | 0 | 0) {
      case 0:
       $3_1 = $1_1 + 28 | 0;
       break label$2;
      case 1:
       $3_1 = $1_1 + 8 | 0;
       break label$2;
      case 33:
       $3_1 = $1_1 + 8 | 0;
       break label$2;
      case 3:
       $3_1 = $1_1 + 40 | 0;
       break label$2;
      case 5:
       break label$12;
      case 2:
       break label$3;
      default:
       break label$2;
      };
     }
     $3_1 = $1_1 + 80 | 0;
     break label$2;
    }
    $3_1 = $1_1 + 16 | 0;
   }
   HEAP32[$3_1 >> 2] = $0_1;
   HEAP32[$4_1 >> 2] = $1_1;
  }
 }
 
 function $235($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
   if (($2_1 & 7 | 0 | 0) == (6 | 0)) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $4_1 = HEAP32[($3_1 + 104 | 0) >> 2] | 0;
   $0_1 = 0;
   label$2 : {
    label$3 : {
     switch ((HEAPU8[($1_1 + 4 | 0) >> 0] | 0) + -5 | 0 | 0) {
     case 0:
      $0_1 = $1_1 + 28 | 0;
      break label$2;
     case 1:
      $0_1 = $1_1 + 8 | 0;
      break label$2;
     case 33:
      $0_1 = $1_1 + 8 | 0;
      break label$2;
     case 3:
      $0_1 = $1_1 + 40 | 0;
      break label$2;
     case 5:
      $0_1 = $1_1 + 80 | 0;
      break label$2;
     case 2:
      break label$3;
     default:
      break label$2;
     };
    }
    $0_1 = $1_1 + 16 | 0;
   }
   HEAP32[$0_1 >> 2] = $4_1;
   HEAP32[($3_1 + 104 | 0) >> 2] = $1_1;
  }
  HEAP8[($1_1 + 5 | 0) >> 0] = $2_1 & 216 | 0 | 5 | 0;
 }
 
 function $236($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP8[($1_1 + 5 | 0) >> 0] = (HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 224 | 0 | 4 | 0;
  HEAP32[($0_1 + 88 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
  HEAP32[($0_1 + 124 | 0) >> 2] = $1_1;
 }
 
 function $237($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $0_1 = $286($0_1 | 0, $2_1 | 0, $1_1 & 15 | 0 | 0) | 0;
  $2_1 = HEAPU8[($3_1 + 76 | 0) >> 0] | 0;
  HEAP8[($0_1 + 4 | 0) >> 0] = $1_1;
  HEAP8[($0_1 + 5 | 0) >> 0] = $2_1 & 24 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($3_1 + 88 | 0) >> 2] | 0;
  HEAP32[($3_1 + 88 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $238($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   if ((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 64 | 0) {
    break label$1
   }
   if ((HEAPU8[($2_1 + 6 | 0) >> 0] | 0) & 4 | 0) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!($440($2_1 | 0, 2 | 0, HEAP32[($3_1 + 176 | 0) >> 2] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ((((HEAPU8[($3_1 + 77 | 0) >> 0] | 0) + -3 | 0) & 255 | 0) >>> 0 > 3 >>> 0) {
      break label$3
     }
     HEAP8[($1_1 + 5 | 0) >> 0] = (HEAPU8[($3_1 + 76 | 0) >> 0] | 0) & 24 | 0 | ((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 192 | 0) | 0;
     if ((HEAP32[($3_1 + 92 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$2
     }
     label$4 : while (1) {
      label$5 : {
       label$6 : {
        $2_1 = HEAP32[$1_1 >> 2] | 0;
        if ($2_1) {
         break label$6
        }
        $2_1 = $1_1;
        $4_1 = 0;
        break label$5;
       }
       label$7 : {
        label$8 : {
         $4_1 = HEAPU8[($2_1 + 5 | 0) >> 0] | 0;
         $5_1 = HEAPU8[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 76 | 0) >> 0] | 0;
         if (!($4_1 & ($5_1 ^ 24 | 0) | 0)) {
          break label$8
         }
         HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
         $239($0_1 | 0, $2_1 | 0);
         $2_1 = $1_1;
         break label$7;
        }
        HEAP8[($2_1 + 5 | 0) >> 0] = $4_1 & 192 | 0 | ($5_1 & 24 | 0) | 0;
       }
       $4_1 = HEAP32[$2_1 >> 2] | 0;
      }
      $2_1 = $4_1 ? $2_1 : 0;
      if (($2_1 | 0) == ($1_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
     HEAP32[($3_1 + 92 | 0) >> 2] = $2_1;
     break label$2;
    }
    label$9 : {
     if ((HEAP32[($3_1 + 128 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$9
     }
     HEAP32[($3_1 + 128 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
    }
    label$10 : {
     if ((HEAP32[($3_1 + 132 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$10
     }
     HEAP32[($3_1 + 132 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
    }
    if ((HEAP32[($3_1 + 136 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 136 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
   }
   $2_1 = $3_1 + 88 | 0;
   label$11 : while (1) {
    $0_1 = $2_1;
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$11
    }
    break label$11;
   };
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$1_1 >> 2] = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
   HEAP32[($3_1 + 96 | 0) >> 2] = $1_1;
   HEAP8[($1_1 + 5 | 0) >> 0] = HEAPU8[($1_1 + 5 | 0) >> 0] | 0 | 64 | 0;
  }
 }
 
 function $239($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   switch ((HEAPU8[($1_1 + 4 | 0) >> 0] | 0) + -4 | 0 | 0) {
   case 6:
    $231($0_1 | 0, $1_1 | 0);
    return;
   case 5:
    label$11 : {
     if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 + 16 | 0 | 0)) {
      break label$11
     }
     $228($1_1 | 0);
    }
    $284($0_1 | 0, $1_1 | 0, 32 | 0);
    return;
   case 2:
    $284($0_1 | 0, $1_1 | 0, ((HEAPU8[($1_1 + 6 | 0) >> 0] | 0) << 2 | 0) + 16 | 0 | 0);
    return;
   case 34:
    $284($0_1 | 0, $1_1 | 0, ((HEAPU8[($1_1 + 6 | 0) >> 0] | 0) << 4 | 0) + 16 | 0 | 0);
    return;
   case 1:
    $432($0_1 | 0, $1_1 | 0);
    return;
   case 4:
    $403($0_1 | 0, $1_1 | 0);
    return;
   case 3:
    $2_1 = HEAPU16[($1_1 + 6 | 0) >> 1] | 0;
    $284($0_1 | 0, $1_1 | 0, ($2_1 ? ($2_1 << 4 | 0) + 24 | 0 : 16) + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0 | 0);
    return;
   case 0:
    $419($0_1 | 0, $1_1 | 0);
    $284($0_1 | 0, $1_1 | 0, (HEAPU8[($1_1 + 7 | 0) >> 0] | 0) + 17 | 0 | 0);
    return;
   case 16:
    $284($0_1 | 0, $1_1 | 0, (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 17 | 0 | 0);
    break;
   default:
    break label$1;
   };
  }
 }
 
 function $240($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if ((HEAPU8[($2_1 + 78 | 0) >> 0] | 0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (($1_1 | 0) != (1 | 0)) {
     break label$2
    }
    $1_1 = $2_1;
    label$3 : {
     label$4 : {
      if ((HEAPU8[($2_1 + 77 | 0) >> 0] | 0 | 0) == (8 | 0)) {
       break label$4
      }
      label$5 : while (1) {
       $241($0_1 | 0) | 0;
       if ((HEAPU8[($2_1 + 77 | 0) >> 0] | 0 | 0) != (8 | 0)) {
        continue label$5
       }
       break label$5;
      };
      $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if (!(HEAPU8[($1_1 + 77 | 0) >> 0] | 0)) {
       break label$3
      }
     }
     label$6 : while (1) {
      $241($0_1 | 0) | 0;
      if (HEAPU8[($1_1 + 77 | 0) >> 0] | 0) {
       continue label$6
      }
      break label$6;
     };
    }
    $242($0_1 | 0) | 0;
    $243($0_1 | 0, $2_1 | 0);
    break label$1;
   }
   $1_1 = (HEAPU8[($2_1 + 76 | 0) >> 0] | 0) & 24 | 0;
   label$7 : {
    $0_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$7
    }
    label$8 : while (1) {
     HEAP8[($0_1 + 5 | 0) >> 0] = (HEAPU8[($0_1 + 5 | 0) >> 0] | 0) & 192 | 0 | $1_1 | 0;
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1) {
      continue label$8
     }
     break label$8;
    };
   }
   HEAP32[($2_1 + 136 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[($2_1 + 128 | 0) >> 2] = 0;
   HEAP32[($2_1 + 132 | 0) >> 2] = i64toi32_i32$0;
   label$9 : {
    $0_1 = HEAP32[($2_1 + 96 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$9
    }
    label$10 : while (1) {
     HEAP8[($0_1 + 5 | 0) >> 0] = (HEAPU8[($0_1 + 5 | 0) >> 0] | 0) & 192 | 0 | $1_1 | 0;
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1) {
      continue label$10
     }
     break label$10;
    };
   }
   label$11 : {
    $0_1 = HEAP32[($2_1 + 120 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$11
    }
    label$12 : while (1) {
     HEAP8[($0_1 + 5 | 0) >> 0] = (HEAPU8[($0_1 + 5 | 0) >> 0] | 0) & 192 | 0 | $1_1 | 0;
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1) {
      continue label$12
     }
     break label$12;
    };
   }
   HEAP32[($2_1 + 148 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[($2_1 + 140 | 0) >> 2] = 0;
   HEAP32[($2_1 + 144 | 0) >> 2] = i64toi32_i32$0;
   $4_1 = 8;
   HEAP8[($2_1 + 77 | 0) >> 0] = $4_1;
   HEAP8[($2_1 + 78 | 0) >> 0] = $4_1 >>> 8 | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = 0;
  }
  HEAP32[($2_1 + 20 | 0) >> 2] = 0;
 }
 
 function $241($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $7_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
           switch (HEAPU8[($1_1 + 77 | 0) >> 0] | 0 | 0) {
           case 7:
            break label$2;
           case 6:
            break label$3;
           case 5:
            break label$4;
           case 4:
            break label$5;
           case 3:
            break label$6;
           case 1:
            break label$7;
           case 0:
            break label$8;
           case 8:
            break label$9;
           default:
            break label$1;
           };
          }
          i64toi32_i32$1 = $1_1;
          i64toi32_i32$0 = 0;
          HEAP32[($1_1 + 100 | 0) >> 2] = 0;
          HEAP32[($1_1 + 104 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($1_1 + 116 | 0) >> 2] = 0;
          i64toi32_i32$1 = $1_1 + 108 | 0;
          i64toi32_i32$0 = 0;
          HEAP32[i64toi32_i32$1 >> 2] = 0;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          label$10 : {
           $2_1 = HEAP32[($1_1 + 160 | 0) >> 2] | 0;
           if (!((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
            break label$10
           }
           $234($1_1 | 0, $2_1 | 0);
          }
          label$11 : {
           if (!((HEAPU8[($1_1 + 48 | 0) >> 0] | 0) & 64 | 0)) {
            break label$11
           }
           $2_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
           if (!((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
            break label$11
           }
           $234($1_1 | 0, $2_1 | 0);
          }
          $246($1_1 | 0);
          label$12 : {
           $2_1 = HEAP32[($1_1 + 120 | 0) >> 2] | 0;
           if (!$2_1) {
            break label$12
           }
           label$13 : while (1) {
            label$14 : {
             if (!((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
              break label$14
             }
             $234($1_1 | 0, $2_1 | 0);
            }
            $2_1 = HEAP32[$2_1 >> 2] | 0;
            if ($2_1) {
             continue label$13
            }
            break label$13;
           };
          }
          HEAP8[($1_1 + 77 | 0) >> 0] = 0;
          return 1 | 0;
         }
         label$15 : {
          if (HEAP32[($1_1 + 100 | 0) >> 2] | 0) {
           break label$15
          }
          HEAP8[($1_1 + 77 | 0) >> 0] = 1;
          return 0 | 0;
         }
         return $247($1_1 | 0) | 0 | 0;
        }
        $3_1 = $242($0_1 | 0) | 0;
        $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        HEAP8[($4_1 + 77 | 0) >> 0] = 3;
        $5_1 = $4_1 + 88 | 0;
        $6_1 = $4_1;
        label$16 : while (1) {
         $2_1 = $5_1;
         $7_1 = 0;
         label$17 : {
          $8_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
          if (!$8_1) {
           break label$17
          }
          label$18 : {
           label$19 : {
            $2_1 = HEAPU8[($8_1 + 5 | 0) >> 0] | 0;
            $7_1 = HEAPU8[($6_1 + 76 | 0) >> 0] | 0;
            if (!($2_1 & ($7_1 ^ 24 | 0) | 0)) {
             break label$19
            }
            HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
            $239($0_1 | 0, $8_1 | 0);
            $2_1 = $5_1;
            break label$18;
           }
           HEAP8[($8_1 + 5 | 0) >> 0] = $2_1 & 192 | 0 | ($7_1 & 24 | 0) | 0;
           $2_1 = $8_1;
          }
          $7_1 = HEAP32[$2_1 >> 2] | 0;
         }
         label$20 : {
          $2_1 = $7_1 ? $2_1 : 0;
          if (($2_1 | 0) != ($5_1 | 0)) {
           break label$20
          }
          $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
          continue label$16;
         }
         break label$16;
        };
        HEAP32[($4_1 + 92 | 0) >> 2] = $2_1;
        HEAP32[($1_1 + 16 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0;
        return $3_1 | 0;
       }
       label$21 : {
        $5_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
        if (!$5_1) {
         break label$21
        }
        $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        $8_1 = 0;
        label$22 : {
         label$23 : {
          $2_1 = HEAP32[$5_1 >> 2] | 0;
          if ($2_1) {
           break label$23
          }
          $2_1 = $3_1;
          $7_1 = 0;
          break label$22;
         }
         $7_1 = HEAPU8[($1_1 + 76 | 0) >> 0] | 0;
         $4_1 = $7_1 & 24 | 0;
         $6_1 = $7_1 ^ 24 | 0;
         label$24 : while (1) {
          label$25 : {
           label$26 : {
            $7_1 = HEAPU8[($2_1 + 5 | 0) >> 0] | 0;
            if (!($7_1 & $6_1 | 0)) {
             break label$26
            }
            HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
            $239($0_1 | 0, $2_1 | 0);
            break label$25;
           }
           HEAP8[($2_1 + 5 | 0) >> 0] = $7_1 & 192 | 0 | $4_1 | 0;
           $5_1 = $2_1;
          }
          $7_1 = $8_1 + 1 | 0;
          $2_1 = HEAP32[$5_1 >> 2] | 0;
          label$27 : {
           if ($8_1 >>> 0 > 98 >>> 0) {
            break label$27
           }
           $8_1 = $7_1;
           if ($2_1) {
            continue label$24
           }
          }
          break label$24;
         };
         $8_1 = $2_1 ? $5_1 : 0;
         $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($1_1 + 92 | 0) >> 2] = $8_1;
        HEAP32[($1_1 + 16 | 0) >> 2] = ($2_1 - $3_1 | 0) + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0;
        return $7_1 | 0;
       }
       HEAP8[($1_1 + 77 | 0) >> 0] = 4;
       HEAP32[($1_1 + 92 | 0) >> 2] = $1_1 + 96 | 0;
       return 0 | 0;
      }
      label$28 : {
       $5_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
       if (!$5_1) {
        break label$28
       }
       $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       $8_1 = 0;
       label$29 : {
        label$30 : {
         $2_1 = HEAP32[$5_1 >> 2] | 0;
         if ($2_1) {
          break label$30
         }
         $2_1 = $3_1;
         $7_1 = 0;
         break label$29;
        }
        $7_1 = HEAPU8[($1_1 + 76 | 0) >> 0] | 0;
        $4_1 = $7_1 & 24 | 0;
        $6_1 = $7_1 ^ 24 | 0;
        label$31 : while (1) {
         label$32 : {
          label$33 : {
           $7_1 = HEAPU8[($2_1 + 5 | 0) >> 0] | 0;
           if (!($7_1 & $6_1 | 0)) {
            break label$33
           }
           HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
           $239($0_1 | 0, $2_1 | 0);
           break label$32;
          }
          HEAP8[($2_1 + 5 | 0) >> 0] = $7_1 & 192 | 0 | $4_1 | 0;
          $5_1 = $2_1;
         }
         $7_1 = $8_1 + 1 | 0;
         $2_1 = HEAP32[$5_1 >> 2] | 0;
         label$34 : {
          if ($8_1 >>> 0 > 98 >>> 0) {
           break label$34
          }
          $8_1 = $7_1;
          if ($2_1) {
           continue label$31
          }
         }
         break label$31;
        };
        $8_1 = $2_1 ? $5_1 : 0;
        $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($1_1 + 92 | 0) >> 2] = $8_1;
       HEAP32[($1_1 + 16 | 0) >> 2] = ($2_1 - $3_1 | 0) + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0;
       return $7_1 | 0;
      }
      HEAP8[($1_1 + 77 | 0) >> 0] = 5;
      HEAP32[($1_1 + 92 | 0) >> 2] = $1_1 + 120 | 0;
      return 0 | 0;
     }
     label$35 : {
      $5_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$35
      }
      $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $8_1 = 0;
      label$36 : {
       label$37 : {
        $2_1 = HEAP32[$5_1 >> 2] | 0;
        if ($2_1) {
         break label$37
        }
        $2_1 = $3_1;
        $7_1 = 0;
        break label$36;
       }
       $7_1 = HEAPU8[($1_1 + 76 | 0) >> 0] | 0;
       $4_1 = $7_1 & 24 | 0;
       $6_1 = $7_1 ^ 24 | 0;
       label$38 : while (1) {
        label$39 : {
         label$40 : {
          $7_1 = HEAPU8[($2_1 + 5 | 0) >> 0] | 0;
          if (!($7_1 & $6_1 | 0)) {
           break label$40
          }
          HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
          $239($0_1 | 0, $2_1 | 0);
          break label$39;
         }
         HEAP8[($2_1 + 5 | 0) >> 0] = $7_1 & 192 | 0 | $4_1 | 0;
         $5_1 = $2_1;
        }
        $7_1 = $8_1 + 1 | 0;
        $2_1 = HEAP32[$5_1 >> 2] | 0;
        label$41 : {
         if ($8_1 >>> 0 > 98 >>> 0) {
          break label$41
         }
         $8_1 = $7_1;
         if ($2_1) {
          continue label$38
         }
        }
        break label$38;
       };
       $8_1 = $2_1 ? $5_1 : 0;
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      }
      HEAP32[($1_1 + 92 | 0) >> 2] = $8_1;
      HEAP32[($1_1 + 16 | 0) >> 2] = ($2_1 - $3_1 | 0) + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0;
      return $7_1 | 0;
     }
     HEAP32[($1_1 + 92 | 0) >> 2] = 0;
     HEAP8[($1_1 + 77 | 0) >> 0] = 6;
     return 0 | 0;
    }
    label$42 : {
     if (HEAPU8[($1_1 + 82 | 0) >> 0] | 0) {
      break label$42
     }
     $2_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) >= (($2_1 | 0) / (4 | 0) | 0 | 0)) {
      break label$42
     }
     $8_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     $414($0_1 | 0, ($2_1 | 0) / (2 | 0) | 0 | 0);
     HEAP32[($1_1 + 16 | 0) >> 2] = ((HEAP32[($1_1 + 12 | 0) >> 2] | 0) - $8_1 | 0) + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0;
    }
    HEAP8[($1_1 + 77 | 0) >> 0] = 7;
    return 0 | 0;
   }
   label$43 : {
    if (!(HEAP32[($1_1 + 120 | 0) >> 2] | 0)) {
     break label$43
    }
    if (HEAPU8[($1_1 + 82 | 0) >> 0] | 0) {
     break label$43
    }
    $245($0_1 | 0);
    label$44 : {
     if (HEAP32[($1_1 + 120 | 0) >> 2] | 0) {
      break label$44
     }
     return 50 | 0;
    }
    $245($0_1 | 0);
    label$45 : {
     if (HEAP32[($1_1 + 120 | 0) >> 2] | 0) {
      break label$45
     }
     return 100 | 0;
    }
    $245($0_1 | 0);
    label$46 : {
     if (HEAP32[($1_1 + 120 | 0) >> 2] | 0) {
      break label$46
     }
     return 150 | 0;
    }
    $245($0_1 | 0);
    label$47 : {
     if (HEAP32[($1_1 + 120 | 0) >> 2] | 0) {
      break label$47
     }
     return 200 | 0;
    }
    $245($0_1 | 0);
    label$48 : {
     if (HEAP32[($1_1 + 120 | 0) >> 2] | 0) {
      break label$48
     }
     return 250 | 0;
    }
    $245($0_1 | 0);
    label$49 : {
     if (HEAP32[($1_1 + 120 | 0) >> 2] | 0) {
      break label$49
     }
     return 300 | 0;
    }
    $245($0_1 | 0);
    label$50 : {
     if (HEAP32[($1_1 + 120 | 0) >> 2] | 0) {
      break label$50
     }
     return 350 | 0;
    }
    $245($0_1 | 0);
    label$51 : {
     if (HEAP32[($1_1 + 120 | 0) >> 2] | 0) {
      break label$51
     }
     return 400 | 0;
    }
    $245($0_1 | 0);
    label$52 : {
     if (HEAP32[($1_1 + 120 | 0) >> 2] | 0) {
      break label$52
     }
     return 450 | 0;
    }
    $245($0_1 | 0);
    return 500 | 0;
   }
   HEAP8[($1_1 + 77 | 0) >> 0] = 8;
  }
  return 0 | 0;
 }
 
 function $242($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $6_1 = 0, $7_1 = 0, $3_1 = 0, $11_1 = 0, $4_1 = 0, $5_1 = 0, $8_1 = 0, $13_1 = 0, $12_1 = 0, $9_1 = 0, $10_1 = 0;
  $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP8[($1_1 + 77 | 0) >> 0] = 2;
  $2_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
  HEAP32[($1_1 + 104 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAPU8[($0_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$1
   }
   $234($1_1 | 0, $0_1 | 0);
  }
  label$2 : {
   if (!((HEAPU8[($1_1 + 48 | 0) >> 0] | 0) & 64 | 0)) {
    break label$2
   }
   $0_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
   if (!((HEAPU8[($0_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$2
   }
   $234($1_1 | 0, $0_1 | 0);
  }
  $246($1_1 | 0);
  $3_1 = 0;
  $4_1 = 0;
  label$3 : {
   if (!(HEAP32[($1_1 + 100 | 0) >> 2] | 0)) {
    break label$3
   }
   $4_1 = 0;
   label$4 : while (1) {
    $4_1 = ($247($1_1 | 0) | 0) + $4_1 | 0;
    if (HEAP32[($1_1 + 100 | 0) >> 2] | 0) {
     continue label$4
    }
    break label$4;
   };
  }
  label$5 : {
   label$6 : {
    $0_1 = HEAP32[($1_1 + 152 | 0) >> 2] | 0;
    if ($0_1) {
     break label$6
    }
    $5_1 = 0;
    break label$5;
   }
   $6_1 = $1_1 + 152 | 0;
   label$7 : while (1) {
    $3_1 = $3_1 + 1 | 0;
    label$8 : {
     label$9 : {
      if ((HEAPU8[($0_1 + 5 | 0) >> 0] | 0) & 56 | 0) {
       break label$9
      }
      if (!(HEAP32[($0_1 + 36 | 0) >> 2] | 0)) {
       break label$9
      }
      $6_1 = $0_1 + 44 | 0;
      break label$8;
     }
     HEAP32[$6_1 >> 2] = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     HEAP32[($0_1 + 44 | 0) >> 2] = $0_1;
     $0_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$8
     }
     label$10 : while (1) {
      label$11 : {
       if ((HEAPU8[($0_1 + 5 | 0) >> 0] | 0) & 24 | 0) {
        break label$11
       }
       $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       if (!((HEAPU8[($7_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
        break label$11
       }
       $7_1 = HEAP32[$7_1 >> 2] | 0;
       if (!((HEAPU8[($7_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
        break label$11
       }
       $234($1_1 | 0, $7_1 | 0);
      }
      $3_1 = $3_1 + 1 | 0;
      $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($0_1) {
       continue label$10
      }
      break label$10;
     };
    }
    $0_1 = HEAP32[$6_1 >> 2] | 0;
    if ($0_1) {
     continue label$7
    }
    break label$7;
   };
   $5_1 = 0;
   if (!(HEAP32[($1_1 + 100 | 0) >> 2] | 0)) {
    break label$5
   }
   label$12 : while (1) {
    $5_1 = ($247($1_1 | 0) | 0) + $5_1 | 0;
    if (HEAP32[($1_1 + 100 | 0) >> 2] | 0) {
     continue label$12
    }
    break label$12;
   };
  }
  HEAP32[($1_1 + 100 | 0) >> 2] = $2_1;
  $6_1 = 0;
  $8_1 = 0;
  label$13 : {
   if (!$2_1) {
    break label$13
   }
   $8_1 = 0;
   label$14 : while (1) {
    $8_1 = ($247($1_1 | 0) | 0) + $8_1 | 0;
    if (HEAP32[($1_1 + 100 | 0) >> 2] | 0) {
     continue label$14
    }
    break label$14;
   };
  }
  label$15 : {
   label$16 : while (1) {
    $0_1 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
    $2_1 = 0;
    HEAP32[($1_1 + 112 | 0) >> 2] = 0;
    if (!$0_1) {
     break label$15
    }
    label$17 : while (1) {
     $7_1 = $0_1;
     $0_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     label$18 : {
      if (!($252($1_1 | 0, $7_1 | 0, $6_1 | 0) | 0)) {
       break label$18
      }
      $2_1 = 1;
      if (!(HEAP32[($1_1 + 100 | 0) >> 2] | 0)) {
       break label$18
      }
      label$19 : while (1) {
       $247($1_1 | 0) | 0;
       if (HEAP32[($1_1 + 100 | 0) >> 2] | 0) {
        continue label$19
       }
       break label$19;
      };
     }
     if ($0_1) {
      continue label$17
     }
     break label$17;
    };
    $6_1 = $6_1 ^ 1 | 0;
    if ($2_1) {
     continue label$16
    }
    break label$16;
   };
  }
  $253($1_1 | 0, HEAP32[($1_1 + 108 | 0) >> 2] | 0 | 0, 0 | 0);
  $253($1_1 | 0, HEAP32[($1_1 + 116 | 0) >> 2] | 0 | 0, 0 | 0);
  $9_1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
  $10_1 = HEAP32[($1_1 + 108 | 0) >> 2] | 0;
  $11_1 = $1_1 + 120 | 0;
  $0_1 = $11_1;
  label$20 : while (1) {
   $7_1 = $0_1;
   $0_1 = HEAP32[$0_1 >> 2] | 0;
   if ($0_1) {
    continue label$20
   }
   break label$20;
  };
  label$21 : {
   $0_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
   $2_1 = HEAP32[($1_1 + 144 | 0) >> 2] | 0;
   if (($0_1 | 0) == ($2_1 | 0)) {
    break label$21
   }
   $6_1 = $1_1 + 96 | 0;
   label$22 : while (1) {
    label$23 : {
     label$24 : {
      if ((HEAPU8[($0_1 + 5 | 0) >> 0] | 0) & 24 | 0) {
       break label$24
      }
      $6_1 = $0_1;
      break label$23;
     }
     $2_1 = HEAP32[$0_1 >> 2] | 0;
     label$25 : {
      if (($0_1 | 0) != (HEAP32[($1_1 + 140 | 0) >> 2] | 0 | 0)) {
       break label$25
      }
      HEAP32[($1_1 + 140 | 0) >> 2] = $2_1;
     }
     HEAP32[$6_1 >> 2] = $2_1;
     HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
     HEAP32[$7_1 >> 2] = $0_1;
     $2_1 = HEAP32[($1_1 + 144 | 0) >> 2] | 0;
     $7_1 = $0_1;
    }
    $0_1 = HEAP32[$6_1 >> 2] | 0;
    if (($0_1 | 0) != ($2_1 | 0)) {
     continue label$22
    }
    break label$22;
   };
  }
  $12_1 = 0;
  $13_1 = 0;
  label$26 : {
   $0_1 = HEAP32[$11_1 >> 2] | 0;
   if (!$0_1) {
    break label$26
   }
   $13_1 = 0;
   label$27 : while (1) {
    label$28 : {
     if (!((HEAPU8[($0_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
      break label$28
     }
     $234($1_1 | 0, $0_1 | 0);
    }
    $13_1 = $13_1 + 1 | 0;
    $0_1 = HEAP32[$0_1 >> 2] | 0;
    if ($0_1) {
     continue label$27
    }
    break label$27;
   };
  }
  label$29 : {
   if (!(HEAP32[($1_1 + 100 | 0) >> 2] | 0)) {
    break label$29
   }
   label$30 : while (1) {
    $12_1 = ($247($1_1 | 0) | 0) + $12_1 | 0;
    if (HEAP32[($1_1 + 100 | 0) >> 2] | 0) {
     continue label$30
    }
    break label$30;
   };
  }
  $11_1 = 0;
  $6_1 = 0;
  label$31 : {
   label$32 : while (1) {
    $0_1 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
    HEAP32[($1_1 + 112 | 0) >> 2] = 0;
    $2_1 = 0;
    if (!$0_1) {
     break label$31
    }
    label$33 : while (1) {
     $7_1 = $0_1;
     $0_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     label$34 : {
      if (!($252($1_1 | 0, $7_1 | 0, $6_1 | 0) | 0)) {
       break label$34
      }
      $2_1 = 1;
      if (!(HEAP32[($1_1 + 100 | 0) >> 2] | 0)) {
       break label$34
      }
      label$35 : while (1) {
       $247($1_1 | 0) | 0;
       if (HEAP32[($1_1 + 100 | 0) >> 2] | 0) {
        continue label$35
       }
       break label$35;
      };
     }
     if ($0_1) {
      continue label$33
     }
     break label$33;
    };
    $6_1 = $6_1 ^ 1 | 0;
    if ($2_1) {
     continue label$32
    }
    break label$32;
   };
   $11_1 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
  }
  $254($1_1 | 0, $11_1 | 0);
  $254($1_1 | 0, HEAP32[($1_1 + 116 | 0) >> 2] | 0 | 0);
  $253($1_1 | 0, HEAP32[($1_1 + 108 | 0) >> 2] | 0 | 0, $10_1 | 0);
  $253($1_1 | 0, HEAP32[($1_1 + 116 | 0) >> 2] | 0 | 0, $9_1 | 0);
  $415($1_1 | 0);
  HEAP8[($1_1 + 76 | 0) >> 0] = (HEAPU8[($1_1 + 76 | 0) >> 0] | 0) ^ 24 | 0;
  return (((($3_1 + $4_1 | 0) + $5_1 | 0) + $8_1 | 0) + $13_1 | 0) + $12_1 | 0 | 0;
 }
 
 function $243($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, $6_1 = 0, $2_1 = 0, $5_1 = 0;
  $2_1 = 0;
  $3_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   $5_1 = $1_1 + 88 | 0;
   $3_1 = $5_1;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $6_1 = HEAPU8[($4_1 + 5 | 0) >> 0] | 0;
      if (!($6_1 & 24 | 0)) {
       break label$4
      }
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
      $239($0_1 | 0, $4_1 | 0);
      break label$3;
     }
     HEAP8[($4_1 + 5 | 0) >> 0] = $6_1 & 248 | 0 | 4 | 0;
     $3_1 = $4_1;
    }
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    if ($4_1) {
     continue label$2
    }
    break label$2;
   };
   $3_1 = HEAP32[$5_1 >> 2] | 0;
  }
  HEAP32[($1_1 + 136 | 0) >> 2] = $3_1;
  HEAP32[($1_1 + 132 | 0) >> 2] = $3_1;
  HEAP32[($1_1 + 128 | 0) >> 2] = $3_1;
  label$5 : {
   $4_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$5
   }
   $2_1 = $1_1 + 96 | 0;
   $3_1 = $2_1;
   label$6 : while (1) {
    label$7 : {
     label$8 : {
      $6_1 = HEAPU8[($4_1 + 5 | 0) >> 0] | 0;
      if (!($6_1 & 24 | 0)) {
       break label$8
      }
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
      $239($0_1 | 0, $4_1 | 0);
      break label$7;
     }
     HEAP8[($4_1 + 5 | 0) >> 0] = $6_1 & 248 | 0 | 4 | 0;
     $3_1 = $4_1;
    }
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    if ($4_1) {
     continue label$6
    }
    break label$6;
   };
   $2_1 = HEAP32[$2_1 >> 2] | 0;
  }
  HEAP32[($1_1 + 148 | 0) >> 2] = $2_1;
  HEAP32[($1_1 + 144 | 0) >> 2] = $2_1;
  HEAP32[($1_1 + 140 | 0) >> 2] = $2_1;
  label$9 : {
   $4_1 = HEAP32[($1_1 + 120 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$9
   }
   $3_1 = $1_1 + 120 | 0;
   label$10 : while (1) {
    label$11 : {
     label$12 : {
      $6_1 = HEAPU8[($4_1 + 5 | 0) >> 0] | 0;
      if (!($6_1 & 24 | 0)) {
       break label$12
      }
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
      $239($0_1 | 0, $4_1 | 0);
      break label$11;
     }
     HEAP8[($4_1 + 5 | 0) >> 0] = $6_1 & 248 | 0 | 4 | 0;
     $3_1 = $4_1;
    }
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    if ($4_1) {
     continue label$10
    }
    break label$10;
   };
  }
  HEAP32[($1_1 + 20 | 0) >> 2] = 0;
  HEAP8[($1_1 + 78 | 0) >> 0] = 1;
  HEAP32[($1_1 + 16 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0;
  $250($0_1 | 0, $1_1 | 0);
 }
 
 function $244($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!(HEAPU8[($1_1 + 78 | 0) >> 0] | 0)) {
    break label$1
   }
   $2_1 = (HEAPU8[($1_1 + 76 | 0) >> 0] | 0) & 24 | 0;
   label$2 : {
    $3_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    label$3 : while (1) {
     HEAP8[($3_1 + 5 | 0) >> 0] = (HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 192 | 0 | $2_1 | 0;
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if ($3_1) {
      continue label$3
     }
     break label$3;
    };
   }
   HEAP32[($1_1 + 136 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[($1_1 + 128 | 0) >> 2] = 0;
   HEAP32[($1_1 + 132 | 0) >> 2] = i64toi32_i32$0;
   label$4 : {
    $3_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$4
    }
    label$5 : while (1) {
     HEAP8[($3_1 + 5 | 0) >> 0] = (HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 192 | 0 | $2_1 | 0;
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
   }
   label$6 : {
    $3_1 = HEAP32[($1_1 + 120 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$6
    }
    label$7 : while (1) {
     HEAP8[($3_1 + 5 | 0) >> 0] = (HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 192 | 0 | $2_1 | 0;
     $3_1 = HEAP32[$3_1 >> 2] | 0;
     if ($3_1) {
      continue label$7
     }
     break label$7;
    };
   }
   HEAP32[($1_1 + 148 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[($1_1 + 140 | 0) >> 2] = 0;
   HEAP32[($1_1 + 144 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = 8;
   HEAP8[($1_1 + 77 | 0) >> 0] = $6_1;
   HEAP8[($1_1 + 78 | 0) >> 0] = $6_1 >>> 8 | 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
  }
  HEAP32[($1_1 + 20 | 0) >> 2] = 0;
  $3_1 = $1_1 + 120 | 0;
  label$8 : while (1) {
   $2_1 = $3_1;
   $3_1 = HEAP32[$3_1 >> 2] | 0;
   if ($3_1) {
    continue label$8
   }
   break label$8;
  };
  $4_1 = $1_1;
  label$9 : {
   $3_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
   if (($3_1 | 0) == (HEAP32[($1_1 + 144 | 0) >> 2] | 0 | 0)) {
    break label$9
   }
   label$10 : while (1) {
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    label$11 : {
     if (($3_1 | 0) != (HEAP32[($1_1 + 140 | 0) >> 2] | 0 | 0)) {
      break label$11
     }
     HEAP32[($1_1 + 140 | 0) >> 2] = $4_1;
    }
    HEAP32[($1_1 + 96 | 0) >> 2] = $4_1;
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $3_1;
    $2_1 = $3_1;
    $4_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
    $3_1 = $4_1;
    if (($3_1 | 0) != (HEAP32[($1_1 + 144 | 0) >> 2] | 0 | 0)) {
     continue label$10
    }
    break label$10;
   };
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  }
  label$12 : {
   if (!(HEAP32[($4_1 + 120 | 0) >> 2] | 0)) {
    break label$12
   }
   label$13 : while (1) {
    $245($0_1 | 0);
    if (HEAP32[($4_1 + 120 | 0) >> 2] | 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   $3_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
   $4_1 = HEAP32[($1_1 + 160 | 0) >> 2] | 0;
   if (($3_1 | 0) == ($4_1 | 0)) {
    break label$14
   }
   label$15 : while (1) {
    $2_1 = HEAP32[$3_1 >> 2] | 0;
    $239($0_1 | 0, $3_1 | 0);
    $3_1 = $2_1;
    if (($3_1 | 0) != ($4_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  label$16 : {
   $3_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$16
   }
   label$17 : while (1) {
    $2_1 = HEAP32[$3_1 >> 2] | 0;
    $239($0_1 | 0, $3_1 | 0);
    $3_1 = $2_1;
    if ($3_1) {
     continue label$17
    }
    break label$17;
   };
  }
  label$18 : {
   $3_1 = HEAP32[($1_1 + 124 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$18
   }
   label$19 : while (1) {
    $1_1 = HEAP32[$3_1 >> 2] | 0;
    $239($0_1 | 0, $3_1 | 0);
    $3_1 = $1_1;
    if ($3_1) {
     continue label$19
    }
    break label$19;
   };
  }
 }
 
 function $245($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $65_1 = 0, $76_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $3_1 = HEAP32[($2_1 + 120 | 0) >> 2] | 0;
  HEAP32[($2_1 + 120 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
  HEAP32[$3_1 >> 2] = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
  HEAP32[($2_1 + 88 | 0) >> 2] = $3_1;
  $4_1 = HEAPU8[($3_1 + 5 | 0) >> 0] | 0;
  HEAP8[($3_1 + 5 | 0) >> 0] = $4_1 & 191 | 0;
  label$1 : {
   if ((((HEAPU8[($2_1 + 77 | 0) >> 0] | 0) + -3 | 0) & 255 | 0) >>> 0 > 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + 5 | 0) >> 0] = (HEAPU8[($2_1 + 76 | 0) >> 0] | 0) & 24 | 0 | ($4_1 & 128 | 0) | 0;
  }
  HEAP32[$1_1 >> 2] = $3_1;
  HEAP8[($1_1 + 8 | 0) >> 0] = HEAPU8[($3_1 + 4 | 0) >> 0] | 0 | 64 | 0;
  label$2 : {
   $3_1 = $441($0_1 | 0, $1_1 | 0, 2 | 0) | 0;
   if (!((HEAPU8[($3_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
    break label$2
   }
   $5_1 = HEAPU8[($2_1 + 81 | 0) >> 0] | 0;
   $6_1 = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
   HEAP8[($0_1 + 7 | 0) >> 0] = 0;
   HEAP8[($2_1 + 81 | 0) >> 0] = 0;
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1 + 16 | 0;
   i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $65_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1;
   HEAP32[$4_1 >> 2] = $65_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($4_1 + 8 | 0) >> 0] = HEAPU8[($3_1 + 8 | 0) >> 0] | 0;
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $3_1 + 16 | 0;
   i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $76_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[$3_1 >> 2] = $76_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
   $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   HEAP16[($3_1 + 34 | 0) >> 1] = HEAPU16[($3_1 + 34 | 0) >> 1] | 0 | 64 | 0;
   $3_1 = $213($0_1 | 0, 9 | 0, 0 | 0, ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0) + -32 | 0 | 0, 0 | 0) | 0;
   $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   HEAP16[($4_1 + 34 | 0) >> 1] = (HEAPU16[($4_1 + 34 | 0) >> 1] | 0) & 65471 | 0;
   HEAP8[($0_1 + 7 | 0) >> 0] = $6_1;
   HEAP8[($2_1 + 81 | 0) >> 0] = $5_1;
   if (!$3_1) {
    break label$2
   }
   $410($0_1 | 0, 2226 | 0);
   HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $246($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 268 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$1
   }
   $234($0_1 | 0, $1_1 | 0);
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 272 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$2
   }
   $234($0_1 | 0, $1_1 | 0);
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 276 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$3
   }
   $234($0_1 | 0, $1_1 | 0);
  }
  label$4 : {
   $1_1 = HEAP32[($0_1 + 280 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$4
   }
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$4
   }
   $234($0_1 | 0, $1_1 | 0);
  }
  label$5 : {
   $1_1 = HEAP32[($0_1 + 284 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$5
   }
   $234($0_1 | 0, $1_1 | 0);
  }
  label$6 : {
   $1_1 = HEAP32[($0_1 + 288 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$6
   }
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$6
   }
   $234($0_1 | 0, $1_1 | 0);
  }
  label$7 : {
   $1_1 = HEAP32[($0_1 + 292 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$7
   }
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$7
   }
   $234($0_1 | 0, $1_1 | 0);
  }
  label$8 : {
   $1_1 = HEAP32[($0_1 + 296 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$8
   }
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$8
   }
   $234($0_1 | 0, $1_1 | 0);
  }
  label$9 : {
   $1_1 = HEAP32[($0_1 + 300 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$9
   }
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$9
   }
   $234($0_1 | 0, $1_1 | 0);
  }
 }
 
 function $247($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
  $2_1 = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
  HEAP8[($1_1 + 5 | 0) >> 0] = $2_1 | 32 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          switch ((HEAPU8[($1_1 + 4 | 0) >> 0] | 0) + -5 | 0 | 0) {
          case 33:
           HEAP32[($0_1 + 100 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
           $2_1 = 0;
           $3_1 = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
           if ($3_1) {
            break label$7
           }
           $3_1 = 0;
           break label$6;
          case 3:
           HEAP32[($0_1 + 100 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
           HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
           HEAP32[($0_1 + 104 | 0) >> 2] = $1_1;
           HEAP8[($1_1 + 5 | 0) >> 0] = $2_1 & 223 | 0;
           $2_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
           if ($2_1) {
            break label$4
           }
           return 1 | 0;
          default:
           abort();
          case 0:
           HEAP32[($0_1 + 100 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
           $2_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
           if ($2_1) {
            break label$3
           }
           break label$2;
          case 2:
           HEAP32[($0_1 + 100 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
           label$14 : {
            $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
            if (!$2_1) {
             break label$14
            }
            if (!((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
             break label$14
            }
            $234($0_1 | 0, $2_1 | 0);
           }
           $2_1 = 0;
           label$15 : {
            label$16 : {
             $3_1 = HEAPU16[($1_1 + 6 | 0) >> 1] | 0;
             if ($3_1) {
              break label$16
             }
             $3_1 = 0;
             break label$15;
            }
            label$17 : while (1) {
             label$18 : {
              $4_1 = $1_1 + ($2_1 << 4 | 0) | 0;
              if (!((HEAPU8[($4_1 + 32 | 0) >> 0] | 0) & 64 | 0)) {
               break label$18
              }
              $4_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
              if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
               break label$18
              }
              $234($0_1 | 0, $4_1 | 0);
              $3_1 = HEAPU16[($1_1 + 6 | 0) >> 1] | 0;
             }
             $2_1 = $2_1 + 1 | 0;
             if ($2_1 >>> 0 < ($3_1 & 65535 | 0) >>> 0) {
              continue label$17
             }
             break label$17;
            };
           }
           label$19 : {
            if ((HEAPU8[($0_1 + 78 | 0) >> 0] | 0 | 0) != (1 | 0)) {
             break label$19
            }
            HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
            HEAP32[($0_1 + 104 | 0) >> 2] = $1_1;
            HEAP8[($1_1 + 5 | 0) >> 0] = (HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 223 | 0;
           }
           return ($3_1 & 65535 | 0) + 1 | 0 | 0;
          case 5:
           break label$5;
          case 1:
           break label$8;
          };
         }
         HEAP32[($0_1 + 100 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
         label$20 : {
          $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          if (!$2_1) {
           break label$20
          }
          if (!((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
           break label$20
          }
          $234($0_1 | 0, $2_1 | 0);
         }
         $2_1 = 0;
         label$21 : {
          label$22 : {
           $3_1 = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
           if ($3_1) {
            break label$22
           }
           $3_1 = 0;
           break label$21;
          }
          label$23 : while (1) {
           label$24 : {
            $4_1 = HEAP32[(($1_1 + ($2_1 << 2 | 0) | 0) + 16 | 0) >> 2] | 0;
            if (!$4_1) {
             break label$24
            }
            if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
             break label$24
            }
            $234($0_1 | 0, $4_1 | 0);
            $3_1 = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
           }
           $2_1 = $2_1 + 1 | 0;
           if ($2_1 >>> 0 < ($3_1 & 255 | 0) >>> 0) {
            continue label$23
           }
           break label$23;
          };
         }
         return ($3_1 & 255 | 0) + 1 | 0 | 0;
        }
        label$25 : while (1) {
         label$26 : {
          $4_1 = $1_1 + ($2_1 << 4 | 0) | 0;
          if (!((HEAPU8[($4_1 + 24 | 0) >> 0] | 0) & 64 | 0)) {
           break label$26
          }
          $4_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
          if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
           break label$26
          }
          $234($0_1 | 0, $4_1 | 0);
          $3_1 = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
         }
         $2_1 = $2_1 + 1 | 0;
         if ($2_1 >>> 0 < ($3_1 & 255 | 0) >>> 0) {
          continue label$25
         }
         break label$25;
        };
       }
       return ($3_1 & 255 | 0) + 1 | 0 | 0;
      }
      HEAP32[($0_1 + 100 | 0) >> 2] = HEAP32[($1_1 + 80 | 0) >> 2] | 0;
      label$27 : {
       $2_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$27
       }
       if (!((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
        break label$27
       }
       $234($0_1 | 0, $2_1 | 0);
      }
      label$28 : {
       $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
       if (($3_1 | 0) < (1 | 0)) {
        break label$28
       }
       $2_1 = 0;
       label$29 : while (1) {
        label$30 : {
         $4_1 = (HEAP32[($1_1 + 48 | 0) >> 2] | 0) + ($2_1 << 4 | 0) | 0;
         if (!((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
          break label$30
         }
         $4_1 = HEAP32[$4_1 >> 2] | 0;
         if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
          break label$30
         }
         $234($0_1 | 0, $4_1 | 0);
         $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
        }
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) < ($3_1 | 0)) {
         continue label$29
        }
        break label$29;
       };
      }
      label$31 : {
       $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($3_1 | 0) < (1 | 0)) {
        break label$31
       }
       $2_1 = 0;
       label$32 : while (1) {
        label$33 : {
         $4_1 = HEAP32[((HEAP32[($1_1 + 60 | 0) >> 2] | 0) + ($2_1 << 3 | 0) | 0) >> 2] | 0;
         if (!$4_1) {
          break label$33
         }
         if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
          break label$33
         }
         $234($0_1 | 0, $4_1 | 0);
         $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        }
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) < ($3_1 | 0)) {
         continue label$32
        }
        break label$32;
       };
      }
      label$34 : {
       $3_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       if (($3_1 | 0) < (1 | 0)) {
        break label$34
       }
       $2_1 = 0;
       label$35 : while (1) {
        label$36 : {
         $4_1 = HEAP32[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0;
         if (!$4_1) {
          break label$36
         }
         if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
          break label$36
         }
         $234($0_1 | 0, $4_1 | 0);
         $3_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
        }
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) < ($3_1 | 0)) {
         continue label$35
        }
        break label$35;
       };
      }
      label$37 : {
       $5_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
       if (($5_1 | 0) < (1 | 0)) {
        break label$37
       }
       $2_1 = 0;
       label$38 : while (1) {
        label$39 : {
         $4_1 = HEAP32[((HEAP32[($1_1 + 72 | 0) >> 2] | 0) + Math_imul($2_1, 12) | 0) >> 2] | 0;
         if (!$4_1) {
          break label$39
         }
         if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
          break label$39
         }
         $234($0_1 | 0, $4_1 | 0);
         $5_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
        }
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) < ($5_1 | 0)) {
         continue label$38
        }
        break label$38;
       };
       $3_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      }
      return ((($3_1 + $5_1 | 0) + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0) + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0) + 1 | 0 | 0;
     }
     label$40 : {
      $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= $4_1 >>> 0) {
       break label$40
      }
      label$41 : while (1) {
       label$42 : {
        if (!((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
         break label$42
        }
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        if (!((HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
         break label$42
        }
        $234($0_1 | 0, $3_1 | 0);
        $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       }
       $2_1 = $2_1 + 16 | 0;
       if ($2_1 >>> 0 < $4_1 >>> 0) {
        continue label$41
       }
       break label$41;
      };
     }
     label$43 : {
      $4_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$43
      }
      label$44 : while (1) {
       label$45 : {
        if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
         break label$45
        }
        $234($0_1 | 0, $4_1 | 0);
       }
       $4_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$44
       }
       break label$44;
      };
     }
     label$46 : {
      label$47 : {
       if ((HEAPU8[($0_1 + 77 | 0) >> 0] | 0 | 0) != (2 | 0)) {
        break label$47
       }
       label$48 : {
        $4_1 = (HEAP32[($1_1 + 32 | 0) >> 2] | 0) + ((HEAP32[($1_1 + 100 | 0) >> 2] | 0) << 4 | 0) | 0;
        if ($2_1 >>> 0 >= $4_1 >>> 0) {
         break label$48
        }
        label$49 : while (1) {
         HEAP8[($2_1 + 8 | 0) >> 0] = 0;
         $2_1 = $2_1 + 16 | 0;
         if ($2_1 >>> 0 < $4_1 >>> 0) {
          continue label$49
         }
         break label$49;
        };
       }
       if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$46
       }
       if (!(HEAP32[($1_1 + 36 | 0) >> 2] | 0)) {
        break label$46
       }
       HEAP32[($1_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 152 | 0) >> 2] | 0;
       HEAP32[($0_1 + 152 | 0) >> 2] = $1_1;
       break label$46;
      }
      if (HEAPU8[($0_1 + 82 | 0) >> 0] | 0) {
       break label$46
      }
      $201($1_1 | 0);
     }
     return (HEAP32[($1_1 + 100 | 0) >> 2] | 0) + 1 | 0 | 0;
    }
    $4_1 = 0;
    label$50 : {
     label$51 : {
      if ((HEAPU8[($2_1 + 6 | 0) >> 0] | 0) & 8 | 0) {
       break label$51
      }
      $4_1 = $440($2_1 | 0, 3 | 0, HEAP32[($0_1 + 180 | 0) >> 2] | 0 | 0) | 0;
      $2_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$50
      }
     }
     if (!((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
      break label$50
     }
     $234($0_1 | 0, $2_1 | 0);
    }
    if (!$4_1) {
     break label$2
    }
    if (((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
     break label$2
    }
    $2_1 = (HEAP32[$4_1 >> 2] | 0) + 16 | 0;
    $4_1 = $865($2_1 | 0, 107 | 0) | 0;
    $2_1 = $865($2_1 | 0, 118 | 0) | 0;
    if (!($4_1 | $2_1 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 5 | 0) >> 0] = (HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 223 | 0;
    label$52 : {
     if ($4_1) {
      break label$52
     }
     $5_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0);
     label$53 : {
      $4_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
      if (($4_1 | 0) == (31 | 0)) {
       break label$53
      }
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      $3_1 = $2_1 + Math_imul(1 << $4_1 | 0, 24) | 0;
      label$54 : while (1) {
       $4_1 = (HEAPU8[($2_1 + 9 | 0) >> 0] | 0) & 64 | 0;
       label$55 : {
        label$56 : {
         if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
          break label$56
         }
         if (!$4_1) {
          break label$55
         }
         if (!((HEAPU8[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
          break label$55
         }
         HEAP32[($2_1 + 16 | 0) >> 2] = 0;
         HEAP8[($2_1 + 9 | 0) >> 0] = 5;
         break label$55;
        }
        label$57 : {
         if (!$4_1) {
          break label$57
         }
         $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
         if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
          break label$57
         }
         $234($0_1 | 0, $4_1 | 0);
        }
        if ($5_1) {
         break label$55
        }
        label$58 : {
         if (!((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
          break label$58
         }
         $4_1 = HEAP32[$2_1 >> 2] | 0;
         if (!$4_1) {
          break label$58
         }
         $6_1 = (HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0;
         label$59 : {
          if (((HEAPU8[($4_1 + 4 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
           break label$59
          }
          if (!$6_1) {
           break label$58
          }
          $234($0_1 | 0, $4_1 | 0);
          break label$58;
         }
         $5_1 = 1;
         if ($6_1) {
          break label$55
         }
        }
        $5_1 = 0;
       }
       $2_1 = $2_1 + 24 | 0;
       if ($2_1 >>> 0 < $3_1 >>> 0) {
        continue label$54
       }
       break label$54;
      };
     }
     label$60 : {
      if (!$5_1) {
       break label$60
      }
      if (((HEAPU8[($0_1 + 77 | 0) >> 0] | 0) & 255 | 0 | 0) != (2 | 0)) {
       break label$60
      }
      $2_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
      HEAP32[($0_1 + 108 | 0) >> 2] = $1_1;
      HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
      break label$1;
     }
     $2_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
     HEAP32[($0_1 + 104 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
     break label$1;
    }
    label$61 : {
     if ($2_1) {
      break label$61
     }
     $252($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
     break label$1;
    }
    HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
    HEAP32[($0_1 + 116 | 0) >> 2] = $1_1;
    break label$1;
   }
   $5_1 = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) + Math_imul(1 << (HEAPU8[($1_1 + 7 | 0) >> 0] | 0) | 0, 24) | 0;
   label$62 : {
    $3_1 = $422($1_1 | 0) | 0;
    if (!$3_1) {
     break label$62
    }
    $2_1 = 0;
    label$63 : while (1) {
     label$64 : {
      $4_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($2_1 << 4 | 0) | 0;
      if (!((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
       break label$64
      }
      $4_1 = HEAP32[$4_1 >> 2] | 0;
      if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
       break label$64
      }
      $234($0_1 | 0, $4_1 | 0);
     }
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$63
     }
     break label$63;
    };
   }
   label$65 : {
    $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= $5_1 >>> 0) {
     break label$65
    }
    label$66 : while (1) {
     $4_1 = (HEAPU8[($2_1 + 9 | 0) >> 0] | 0) & 64 | 0;
     label$67 : {
      label$68 : {
       $3_1 = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
       if ($3_1 & 15 | 0) {
        break label$68
       }
       if (!$4_1) {
        break label$67
       }
       if (!((HEAPU8[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
        break label$67
       }
       HEAP32[($2_1 + 16 | 0) >> 2] = 0;
       HEAP8[($2_1 + 9 | 0) >> 0] = 5;
       break label$67;
      }
      label$69 : {
       if (!$4_1) {
        break label$69
       }
       $4_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
        break label$69
       }
       $234($0_1 | 0, $4_1 | 0);
       $3_1 = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
      }
      if (!($3_1 & 64 | 0)) {
       break label$67
      }
      $4_1 = HEAP32[$2_1 >> 2] | 0;
      if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
       break label$67
      }
      $234($0_1 | 0, $4_1 | 0);
     }
     $2_1 = $2_1 + 24 | 0;
     if ($2_1 >>> 0 < $5_1 >>> 0) {
      continue label$66
     }
     break label$66;
    };
   }
   if ((HEAPU8[($0_1 + 78 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
   HEAP32[($0_1 + 104 | 0) >> 2] = $1_1;
   HEAP8[($1_1 + 5 | 0) >> 0] = (HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 223 | 0;
  }
  $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  label$70 : {
   label$71 : {
    if (HEAP32[($1_1 + 20 | 0) >> 2] | 0) {
     break label$71
    }
    $1_1 = 0;
    break label$70;
   }
   $1_1 = 2 << (HEAPU8[($1_1 + 7 | 0) >> 0] | 0) | 0;
  }
  return ($0_1 + $1_1 | 0) + 1 | 0 | 0;
 }
 
 function $248($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $1_1 = 0, $3_1 = 0, $2_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $10_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!(HEAPU8[($1_1 + 81 | 0) >> 0] | 0)) {
    break label$1
   }
   $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if ((HEAPU8[($1_1 + 78 | 0) >> 0] | 0 | 0) == (1 | 0)) {
         break label$6
        }
        if (!$2_1) {
         break label$2
        }
        if (HEAPU8[($1_1 + 77 | 0) >> 0] | 0) {
         break label$5
        }
        break label$4;
       }
       if (!$2_1) {
        break label$3
       }
       $3_1 = (HEAPU8[($1_1 + 76 | 0) >> 0] | 0) & 24 | 0;
       label$7 : {
        $4_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
        if (!$4_1) {
         break label$7
        }
        label$8 : while (1) {
         HEAP8[($4_1 + 5 | 0) >> 0] = (HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 192 | 0 | $3_1 | 0;
         $4_1 = HEAP32[$4_1 >> 2] | 0;
         if ($4_1) {
          continue label$8
         }
         break label$8;
        };
       }
       HEAP32[($1_1 + 136 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       HEAP32[($1_1 + 128 | 0) >> 2] = 0;
       HEAP32[($1_1 + 132 | 0) >> 2] = i64toi32_i32$0;
       label$9 : {
        $4_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
        if (!$4_1) {
         break label$9
        }
        label$10 : while (1) {
         HEAP8[($4_1 + 5 | 0) >> 0] = (HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 192 | 0 | $3_1 | 0;
         $4_1 = HEAP32[$4_1 >> 2] | 0;
         if ($4_1) {
          continue label$10
         }
         break label$10;
        };
       }
       label$11 : {
        $4_1 = HEAP32[($1_1 + 120 | 0) >> 2] | 0;
        if (!$4_1) {
         break label$11
        }
        label$12 : while (1) {
         HEAP8[($4_1 + 5 | 0) >> 0] = (HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 192 | 0 | $3_1 | 0;
         $4_1 = HEAP32[$4_1 >> 2] | 0;
         if ($4_1) {
          continue label$12
         }
         break label$12;
        };
       }
       HEAP32[($1_1 + 148 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       HEAP32[($1_1 + 140 | 0) >> 2] = 0;
       HEAP32[($1_1 + 144 | 0) >> 2] = i64toi32_i32$0;
       $10_1 = 8;
       HEAP8[($1_1 + 77 | 0) >> 0] = $10_1;
       HEAP8[($1_1 + 78 | 0) >> 0] = $10_1 >>> 8 | 0;
       HEAP32[($1_1 + 20 | 0) >> 2] = 0;
      }
      label$13 : while (1) {
       $241($0_1 | 0) | 0;
       if (HEAPU8[($1_1 + 77 | 0) >> 0] | 0) {
        continue label$13
       }
       break label$13;
      };
     }
     label$14 : {
      $5_1 = $242($0_1 | 0) | 0;
      if ($5_1 >>> 0 >= (($2_1 >>> 3 | 0) + $2_1 | 0) >>> 0) {
       break label$14
      }
      $243($0_1 | 0, $1_1 | 0);
      $396($1_1 | 0, 0 - Math_imul((((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >>> 0) / (100 >>> 0) | 0, HEAPU8[($1_1 + 79 | 0) >> 0] | 0) | 0 | 0);
      return;
     }
     HEAP32[($1_1 + 16 | 0) >> 2] = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0;
     $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     HEAP8[($6_1 + 77 | 0) >> 0] = 3;
     $2_1 = $6_1 + 88 | 0;
     $7_1 = $6_1;
     label$15 : while (1) {
      $4_1 = $2_1;
      $8_1 = 0;
      label$16 : {
       $3_1 = HEAP32[($6_1 + 88 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$16
       }
       label$17 : {
        label$18 : {
         $4_1 = HEAPU8[($3_1 + 5 | 0) >> 0] | 0;
         $8_1 = HEAPU8[($7_1 + 76 | 0) >> 0] | 0;
         if (!($4_1 & ($8_1 ^ 24 | 0) | 0)) {
          break label$18
         }
         HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
         $239($0_1 | 0, $3_1 | 0);
         $4_1 = $2_1;
         break label$17;
        }
        HEAP8[($3_1 + 5 | 0) >> 0] = $4_1 & 192 | 0 | ($8_1 & 24 | 0) | 0;
        $4_1 = $3_1;
       }
       $8_1 = HEAP32[$4_1 >> 2] | 0;
      }
      label$19 : {
       $4_1 = $8_1 ? $4_1 : 0;
       if (($4_1 | 0) != ($2_1 | 0)) {
        break label$19
       }
       $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       continue label$15;
      }
      break label$15;
     };
     HEAP32[($6_1 + 92 | 0) >> 2] = $4_1;
     label$20 : {
      $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ((HEAPU8[($4_1 + 77 | 0) >> 0] | 0 | 0) == (8 | 0)) {
       break label$20
      }
      label$21 : while (1) {
       $241($0_1 | 0) | 0;
       if ((HEAPU8[($4_1 + 77 | 0) >> 0] | 0 | 0) != (8 | 0)) {
        continue label$21
       }
       break label$21;
      };
     }
     $0_1 = ((HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) / (100 >>> 0) | 0;
     $4_1 = (HEAPU8[($1_1 + 83 | 0) >> 0] | 0) << 2 | 0;
     $0_1 = ((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) - ($4_1 >>> 0 < ((2147483647 >>> 0) / ($0_1 >>> 0) | 0) >>> 0 ? Math_imul($0_1, $4_1) : 2147483647) | 0;
     $396($1_1 | 0, ($0_1 >> 31 | 0) & $0_1 | 0 | 0);
     HEAP32[($1_1 + 20 | 0) >> 2] = $5_1;
     return;
    }
    $5_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    $4_1 = ($5_1 >>> 0) / (100 >>> 0) | 0;
    label$22 : {
     $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (($3_1 | 0) < (1 | 0)) {
      break label$22
     }
     $4_1 = Math_imul(HEAPU8[($1_1 + 80 | 0) >> 0] | 0, $4_1) << 2 | 0;
     if (((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $3_1 | 0) >>> 0 <= ($4_1 + $5_1 | 0) >>> 0) {
      break label$22
     }
     $3_1 = $249($0_1 | 0, $1_1 | 0) | 0;
     label$23 : {
      $0_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0;
      if ($0_1 >>> 0 >= (($4_1 >>> 1 | 0) + $5_1 | 0) >>> 0) {
       break label$23
      }
      $396($1_1 | 0, 0 - Math_imul(($0_1 >>> 0) / (100 >>> 0) | 0, HEAPU8[($1_1 + 79 | 0) >> 0] | 0) | 0 | 0);
      return;
     }
     HEAP32[($1_1 + 20 | 0) >> 2] = $3_1;
     $4_1 = ((HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) / (100 >>> 0) | 0;
     $3_1 = (HEAPU8[($1_1 + 83 | 0) >> 0] | 0) << 2 | 0;
     $0_1 = $0_1 - ($3_1 >>> 0 < ((2147483647 >>> 0) / ($4_1 >>> 0) | 0) >>> 0 ? Math_imul($4_1, $3_1) : 2147483647) | 0;
     $396($1_1 | 0, ($0_1 >> 31 | 0) & $0_1 | 0 | 0);
     return;
    }
    label$24 : {
     $4_1 = HEAP32[($1_1 + 128 | 0) >> 2] | 0;
     $2_1 = HEAP32[($1_1 + 136 | 0) >> 2] | 0;
     if (($4_1 | 0) == ($2_1 | 0)) {
      break label$24
     }
     label$25 : while (1) {
      label$26 : {
       $3_1 = HEAPU8[($4_1 + 5 | 0) >> 0] | 0;
       if (($3_1 & 39 | 0 | 0) != (35 | 0)) {
        break label$26
       }
       HEAP8[($4_1 + 5 | 0) >> 0] = $3_1 & 223 | 0;
       $234($1_1 | 0, $4_1 | 0);
      }
      $4_1 = HEAP32[$4_1 >> 2] | 0;
      if (($4_1 | 0) != ($2_1 | 0)) {
       continue label$25
      }
      break label$25;
     };
    }
    label$27 : {
     $4_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
     $2_1 = HEAP32[($1_1 + 148 | 0) >> 2] | 0;
     if (($4_1 | 0) == ($2_1 | 0)) {
      break label$27
     }
     label$28 : while (1) {
      label$29 : {
       $3_1 = HEAPU8[($4_1 + 5 | 0) >> 0] | 0;
       if (($3_1 & 39 | 0 | 0) != (35 | 0)) {
        break label$29
       }
       HEAP8[($4_1 + 5 | 0) >> 0] = $3_1 & 223 | 0;
       $234($1_1 | 0, $4_1 | 0);
      }
      $4_1 = HEAP32[$4_1 >> 2] | 0;
      if (($4_1 | 0) != ($2_1 | 0)) {
       continue label$28
      }
      break label$28;
     };
    }
    $242($0_1 | 0) | 0;
    $8_1 = $1_1 + 88 | 0;
    $6_1 = (HEAPU8[($1_1 + 76 | 0) >> 0] | 0) & 24 | 0;
    label$30 : {
     $3_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
     $4_1 = HEAP32[($1_1 + 128 | 0) >> 2] | 0;
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$30
     }
     label$31 : while (1) {
      label$32 : {
       label$33 : {
        $2_1 = HEAPU8[($3_1 + 5 | 0) >> 0] | 0;
        if (!($2_1 & 24 | 0)) {
         break label$33
        }
        HEAP32[$8_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
        $239($0_1 | 0, $3_1 | 0);
        break label$32;
       }
       label$34 : {
        if ($2_1 & 7 | 0) {
         break label$34
        }
        $2_1 = $2_1 & 199 | 0 | $6_1 | 0;
        HEAP8[($3_1 + 5 | 0) >> 0] = $2_1;
       }
       HEAP8[($3_1 + 5 | 0) >> 0] = $2_1 & 248 | 0 | (HEAPU8[(($2_1 & 7 | 0) + 2242 | 0) >> 0] | 0) | 0;
       $8_1 = $3_1;
      }
      $3_1 = HEAP32[$8_1 >> 2] | 0;
      if (($3_1 | 0) != ($4_1 | 0)) {
       continue label$31
      }
      break label$31;
     };
     $6_1 = (HEAPU8[($1_1 + 76 | 0) >> 0] | 0) & 24 | 0;
    }
    label$35 : {
     $7_1 = HEAP32[($1_1 + 136 | 0) >> 2] | 0;
     if (($4_1 | 0) == ($7_1 | 0)) {
      break label$35
     }
     $2_1 = $8_1;
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $3_1 = HEAPU8[($4_1 + 5 | 0) >> 0] | 0;
        if (!($3_1 & 24 | 0)) {
         break label$38
        }
        HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
        $239($0_1 | 0, $4_1 | 0);
        break label$37;
       }
       label$39 : {
        if ($3_1 & 7 | 0) {
         break label$39
        }
        $3_1 = $3_1 & 199 | 0 | $6_1 | 0;
        HEAP8[($4_1 + 5 | 0) >> 0] = $3_1;
       }
       HEAP8[($4_1 + 5 | 0) >> 0] = $3_1 & 248 | 0 | (HEAPU8[(($3_1 & 7 | 0) + 2242 | 0) >> 0] | 0) | 0;
       $2_1 = $4_1;
      }
      $4_1 = HEAP32[$2_1 >> 2] | 0;
      if (($4_1 | 0) != ($7_1 | 0)) {
       continue label$36
      }
      break label$36;
     };
     $6_1 = (HEAPU8[($1_1 + 76 | 0) >> 0] | 0) & 24 | 0;
    }
    $7_1 = $1_1 + 96 | 0;
    HEAP32[($1_1 + 136 | 0) >> 2] = HEAP32[($1_1 + 132 | 0) >> 2] | 0;
    $4_1 = HEAP32[$8_1 >> 2] | 0;
    HEAP32[($1_1 + 128 | 0) >> 2] = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
    HEAP32[($1_1 + 132 | 0) >> 2] = $4_1;
    label$40 : {
     $3_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
     $4_1 = HEAP32[($1_1 + 140 | 0) >> 2] | 0;
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$40
     }
     label$41 : while (1) {
      label$42 : {
       label$43 : {
        $2_1 = HEAPU8[($3_1 + 5 | 0) >> 0] | 0;
        if (!($2_1 & 24 | 0)) {
         break label$43
        }
        HEAP32[$7_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
        $239($0_1 | 0, $3_1 | 0);
        break label$42;
       }
       label$44 : {
        if ($2_1 & 7 | 0) {
         break label$44
        }
        $2_1 = $2_1 & 199 | 0 | $6_1 | 0;
        HEAP8[($3_1 + 5 | 0) >> 0] = $2_1;
       }
       HEAP8[($3_1 + 5 | 0) >> 0] = $2_1 & 248 | 0 | (HEAPU8[(($2_1 & 7 | 0) + 2242 | 0) >> 0] | 0) | 0;
       $7_1 = $3_1;
      }
      $3_1 = HEAP32[$7_1 >> 2] | 0;
      if (($3_1 | 0) != ($4_1 | 0)) {
       continue label$41
      }
      break label$41;
     };
     $6_1 = (HEAPU8[($1_1 + 76 | 0) >> 0] | 0) & 24 | 0;
    }
    label$45 : {
     $8_1 = HEAP32[($1_1 + 148 | 0) >> 2] | 0;
     if (($4_1 | 0) == ($8_1 | 0)) {
      break label$45
     }
     $2_1 = $7_1;
     label$46 : while (1) {
      label$47 : {
       label$48 : {
        $3_1 = HEAPU8[($4_1 + 5 | 0) >> 0] | 0;
        if (!($3_1 & 24 | 0)) {
         break label$48
        }
        HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
        $239($0_1 | 0, $4_1 | 0);
        break label$47;
       }
       label$49 : {
        if ($3_1 & 7 | 0) {
         break label$49
        }
        $3_1 = $3_1 & 199 | 0 | $6_1 | 0;
        HEAP8[($4_1 + 5 | 0) >> 0] = $3_1;
       }
       HEAP8[($4_1 + 5 | 0) >> 0] = $3_1 & 248 | 0 | (HEAPU8[(($3_1 & 7 | 0) + 2242 | 0) >> 0] | 0) | 0;
       $2_1 = $4_1;
      }
      $4_1 = HEAP32[$2_1 >> 2] | 0;
      if (($4_1 | 0) != ($8_1 | 0)) {
       continue label$46
      }
      break label$46;
     };
     $6_1 = (HEAPU8[($1_1 + 76 | 0) >> 0] | 0) & 24 | 0;
    }
    HEAP32[($1_1 + 148 | 0) >> 2] = HEAP32[($1_1 + 144 | 0) >> 2] | 0;
    $4_1 = HEAP32[$7_1 >> 2] | 0;
    HEAP32[($1_1 + 140 | 0) >> 2] = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
    HEAP32[($1_1 + 144 | 0) >> 2] = $4_1;
    label$50 : {
     $4_1 = HEAP32[($1_1 + 120 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$50
     }
     $2_1 = $1_1 + 120 | 0;
     label$51 : while (1) {
      label$52 : {
       label$53 : {
        $3_1 = HEAPU8[($4_1 + 5 | 0) >> 0] | 0;
        if (!($3_1 & 24 | 0)) {
         break label$53
        }
        HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
        $239($0_1 | 0, $4_1 | 0);
        break label$52;
       }
       label$54 : {
        if ($3_1 & 7 | 0) {
         break label$54
        }
        $3_1 = $3_1 & 199 | 0 | $6_1 | 0;
        HEAP8[($4_1 + 5 | 0) >> 0] = $3_1;
       }
       HEAP8[($4_1 + 5 | 0) >> 0] = $3_1 & 248 | 0 | (HEAPU8[(($3_1 & 7 | 0) + 2242 | 0) >> 0] | 0) | 0;
       $2_1 = $4_1;
      }
      $4_1 = HEAP32[$2_1 >> 2] | 0;
      if ($4_1) {
       continue label$51
      }
      break label$51;
     };
    }
    $250($0_1 | 0, $1_1 | 0);
    $396($1_1 | 0, 0 - Math_imul((((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) >>> 0) / (100 >>> 0) | 0, HEAPU8[($1_1 + 79 | 0) >> 0] | 0) | 0 | 0);
    HEAP32[($1_1 + 16 | 0) >> 2] = $5_1;
    return;
   }
   $7_1 = (HEAPU8[($1_1 + 84 | 0) >> 0] | 0) << 2 | 0 | 1 | 0;
   $4_1 = Math_imul($7_1, (HEAP32[($1_1 + 12 | 0) >> 2] | 0) >>> 4 | 0);
   $3_1 = HEAPU8[($1_1 + 85 | 0) >> 0] | 0;
   $8_1 = 0 - ($3_1 >>> 0 < 31 >>> 0 ? Math_imul((1 << $3_1 | 0) >>> 4 | 0, $7_1) : 2147483647) | 0;
   label$55 : {
    label$56 : {
     label$57 : {
      label$58 : while (1) {
       $3_1 = $241($0_1 | 0) | 0;
       $2_1 = HEAPU8[($1_1 + 77 | 0) >> 0] | 0;
       $4_1 = $4_1 - $3_1 | 0;
       if (($4_1 | 0) <= ($8_1 | 0)) {
        break label$57
       }
       if (($2_1 & 255 | 0 | 0) != (8 | 0)) {
        continue label$58
       }
       break label$56;
      };
     }
     if (($2_1 & 255 | 0 | 0) != (8 | 0)) {
      break label$55
     }
    }
    $0_1 = ((HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) / (100 >>> 0) | 0;
    $4_1 = (HEAPU8[($1_1 + 83 | 0) >> 0] | 0) << 2 | 0;
    $0_1 = ((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) - ($4_1 >>> 0 < ((2147483647 >>> 0) / ($0_1 >>> 0) | 0) >>> 0 ? Math_imul($0_1, $4_1) : 2147483647) | 0;
    $396($1_1 | 0, ($0_1 >> 31 | 0) & $0_1 | 0 | 0);
    return;
   }
   $396($1_1 | 0, (($4_1 | 0) / ($7_1 | 0) | 0) << 4 | 0 | 0);
  }
 }
 
 function $249($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  $2_1 = (HEAPU8[($1_1 + 76 | 0) >> 0] | 0) & 24 | 0;
  label$1 : {
   $3_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : while (1) {
    HEAP8[($3_1 + 5 | 0) >> 0] = (HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 192 | 0 | $2_1 | 0;
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[($1_1 + 136 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($1_1 + 128 | 0) >> 2] = 0;
  HEAP32[($1_1 + 132 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   $3_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$3
   }
   label$4 : while (1) {
    HEAP8[($3_1 + 5 | 0) >> 0] = (HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 192 | 0 | $2_1 | 0;
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ($3_1) {
     continue label$4
    }
    break label$4;
   };
  }
  label$5 : {
   $3_1 = HEAP32[($1_1 + 120 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$5
   }
   label$6 : while (1) {
    HEAP8[($3_1 + 5 | 0) >> 0] = (HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 192 | 0 | $2_1 | 0;
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if ($3_1) {
     continue label$6
    }
    break label$6;
   };
  }
  HEAP32[($1_1 + 148 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($1_1 + 140 | 0) >> 2] = 0;
  HEAP32[($1_1 + 144 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = 8;
  HEAP8[($1_1 + 77 | 0) >> 0] = $5_1;
  HEAP8[($1_1 + 78 | 0) >> 0] = $5_1 >>> 8 | 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 0;
  label$7 : {
   label$8 : {
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ((HEAPU8[($3_1 + 77 | 0) >> 0] | 0 | 0) == (8 | 0)) {
     break label$8
    }
    label$9 : while (1) {
     $241($0_1 | 0) | 0;
     if ((HEAPU8[($3_1 + 77 | 0) >> 0] | 0 | 0) != (8 | 0)) {
      continue label$9
     }
     break label$9;
    };
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if (!(HEAPU8[($3_1 + 77 | 0) >> 0] | 0)) {
     break label$7
    }
   }
   label$10 : while (1) {
    $241($0_1 | 0) | 0;
    if (HEAPU8[($3_1 + 77 | 0) >> 0] | 0) {
     continue label$10
    }
    break label$10;
   };
  }
  $3_1 = $242($0_1 | 0) | 0;
  $243($0_1 | 0, $1_1 | 0);
  return $3_1 | 0;
 }
 
 function $250($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0;
  $2_1 = $1_1 + 104 | 0;
  label$1 : {
   $3_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          switch ((HEAPU8[($3_1 + 4 | 0) >> 0] | 0) + -5 | 0 | 0) {
          case 0:
           $4_1 = $3_1 + 28 | 0;
           break label$7;
          case 3:
           break label$6;
          case 2:
           break label$8;
          default:
           break label$5;
          };
         }
         $4_1 = $3_1 + 16 | 0;
        }
        label$10 : {
         $5_1 = HEAPU8[($3_1 + 5 | 0) >> 0] | 0;
         $6_1 = $5_1 & 7 | 0;
         if (($6_1 | 0) != (5 | 0)) {
          break label$10
         }
         HEAP8[($3_1 + 5 | 0) >> 0] = ($5_1 | 32 | 0) ^ 3 | 0;
         $2_1 = $4_1;
         break label$5;
        }
        label$11 : {
         if ($5_1 & 24 | 0) {
          break label$11
         }
         label$12 : {
          if (($6_1 | 0) != (6 | 0)) {
           break label$12
          }
          $5_1 = $5_1 ^ 2 | 0;
          HEAP8[($3_1 + 5 | 0) >> 0] = $5_1;
         }
         HEAP8[($3_1 + 5 | 0) >> 0] = $5_1 | 32 | 0;
        }
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $3_1;
        break label$3;
       }
       $5_1 = $3_1 + 40 | 0;
       if ((HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 24 | 0) {
        break label$4
       }
       $2_1 = $5_1;
      }
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      break label$3;
     }
     $3_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $3_1;
    }
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 108 | 0) >> 2] | 0;
  HEAP32[($1_1 + 108 | 0) >> 2] = 0;
  label$13 : {
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   if (!$3_1) {
    break label$13
   }
   label$14 : while (1) {
    label$15 : {
     label$16 : {
      label$17 : {
       label$18 : {
        label$19 : {
         label$20 : {
          switch ((HEAPU8[($3_1 + 4 | 0) >> 0] | 0) + -5 | 0 | 0) {
          case 0:
           $4_1 = $3_1 + 28 | 0;
           break label$19;
          case 3:
           break label$18;
          case 2:
           break label$20;
          default:
           break label$17;
          };
         }
         $4_1 = $3_1 + 16 | 0;
        }
        label$22 : {
         $5_1 = HEAPU8[($3_1 + 5 | 0) >> 0] | 0;
         $6_1 = $5_1 & 7 | 0;
         if (($6_1 | 0) != (5 | 0)) {
          break label$22
         }
         HEAP8[($3_1 + 5 | 0) >> 0] = ($5_1 | 32 | 0) ^ 3 | 0;
         $2_1 = $4_1;
         break label$17;
        }
        label$23 : {
         if ($5_1 & 24 | 0) {
          break label$23
         }
         label$24 : {
          if (($6_1 | 0) != (6 | 0)) {
           break label$24
          }
          $5_1 = $5_1 ^ 2 | 0;
          HEAP8[($3_1 + 5 | 0) >> 0] = $5_1;
         }
         HEAP8[($3_1 + 5 | 0) >> 0] = $5_1 | 32 | 0;
        }
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $3_1;
        break label$15;
       }
       $5_1 = $3_1 + 40 | 0;
       if ((HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 24 | 0) {
        break label$16
       }
       $2_1 = $5_1;
      }
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      break label$15;
     }
     $3_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $3_1;
    }
    if ($3_1) {
     continue label$14
    }
    break label$14;
   };
  }
  HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
  HEAP32[($1_1 + 116 | 0) >> 2] = 0;
  label$25 : {
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   if (!$3_1) {
    break label$25
   }
   label$26 : while (1) {
    label$27 : {
     label$28 : {
      label$29 : {
       label$30 : {
        label$31 : {
         label$32 : {
          switch ((HEAPU8[($3_1 + 4 | 0) >> 0] | 0) + -5 | 0 | 0) {
          case 0:
           $4_1 = $3_1 + 28 | 0;
           break label$31;
          case 3:
           break label$30;
          case 2:
           break label$32;
          default:
           break label$29;
          };
         }
         $4_1 = $3_1 + 16 | 0;
        }
        label$34 : {
         $5_1 = HEAPU8[($3_1 + 5 | 0) >> 0] | 0;
         $6_1 = $5_1 & 7 | 0;
         if (($6_1 | 0) != (5 | 0)) {
          break label$34
         }
         HEAP8[($3_1 + 5 | 0) >> 0] = ($5_1 | 32 | 0) ^ 3 | 0;
         $2_1 = $4_1;
         break label$29;
        }
        label$35 : {
         if ($5_1 & 24 | 0) {
          break label$35
         }
         label$36 : {
          if (($6_1 | 0) != (6 | 0)) {
           break label$36
          }
          $5_1 = $5_1 ^ 2 | 0;
          HEAP8[($3_1 + 5 | 0) >> 0] = $5_1;
         }
         HEAP8[($3_1 + 5 | 0) >> 0] = $5_1 | 32 | 0;
        }
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $3_1;
        break label$27;
       }
       $5_1 = $3_1 + 40 | 0;
       if ((HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 24 | 0) {
        break label$28
       }
       $2_1 = $5_1;
      }
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      break label$27;
     }
     $3_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $3_1;
    }
    if ($3_1) {
     continue label$26
    }
    break label$26;
   };
  }
  HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
  HEAP32[($1_1 + 112 | 0) >> 2] = 0;
  label$37 : {
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   if (!$3_1) {
    break label$37
   }
   label$38 : while (1) {
    label$39 : {
     label$40 : {
      label$41 : {
       label$42 : {
        label$43 : {
         label$44 : {
          switch ((HEAPU8[($3_1 + 4 | 0) >> 0] | 0) + -5 | 0 | 0) {
          case 0:
           $4_1 = $3_1 + 28 | 0;
           break label$43;
          case 3:
           break label$42;
          case 2:
           break label$44;
          default:
           break label$41;
          };
         }
         $4_1 = $3_1 + 16 | 0;
        }
        label$46 : {
         $5_1 = HEAPU8[($3_1 + 5 | 0) >> 0] | 0;
         $6_1 = $5_1 & 7 | 0;
         if (($6_1 | 0) != (5 | 0)) {
          break label$46
         }
         HEAP8[($3_1 + 5 | 0) >> 0] = ($5_1 | 32 | 0) ^ 3 | 0;
         $2_1 = $4_1;
         break label$41;
        }
        label$47 : {
         if ($5_1 & 24 | 0) {
          break label$47
         }
         label$48 : {
          if (($6_1 | 0) != (6 | 0)) {
           break label$48
          }
          $5_1 = $5_1 ^ 2 | 0;
          HEAP8[($3_1 + 5 | 0) >> 0] = $5_1;
         }
         HEAP8[($3_1 + 5 | 0) >> 0] = $5_1 | 32 | 0;
        }
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $3_1;
        break label$39;
       }
       $5_1 = $3_1 + 40 | 0;
       if ((HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 24 | 0) {
        break label$40
       }
       $2_1 = $5_1;
      }
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      break label$39;
     }
     $3_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $3_1;
    }
    if ($3_1) {
     continue label$38
    }
    break label$38;
   };
  }
  label$49 : {
   if (!(HEAPU8[($1_1 + 82 | 0) >> 0] | 0)) {
    break label$49
   }
   HEAP8[($1_1 + 77 | 0) >> 0] = 0;
   return;
  }
  label$50 : {
   label$51 : {
    label$52 : {
     $2_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) < (($2_1 | 0) / (4 | 0) | 0 | 0)) {
      break label$52
     }
     HEAP8[($1_1 + 77 | 0) >> 0] = 0;
     break label$51;
    }
    $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $414($0_1 | 0, ($2_1 | 0) / (2 | 0) | 0 | 0);
    HEAP8[($1_1 + 77 | 0) >> 0] = 0;
    HEAP32[($1_1 + 16 | 0) >> 2] = ((HEAP32[($1_1 + 12 | 0) >> 2] | 0) - $3_1 | 0) + (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0;
    if (HEAPU8[($1_1 + 82 | 0) >> 0] | 0) {
     break label$50
    }
   }
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!(HEAP32[($2_1 + 120 | 0) >> 2] | 0)) {
    break label$50
   }
   label$53 : while (1) {
    $245($0_1 | 0);
    if (HEAP32[($2_1 + 120 | 0) >> 2] | 0) {
     continue label$53
    }
    break label$53;
   };
  }
 }
 
 function $251($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP8[($2_1 + 82 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    if (HEAPU8[($2_1 + 78 | 0) >> 0] | 0) {
     break label$2
    }
    $1_1 = $2_1;
    label$3 : {
     $3_1 = HEAPU8[($2_1 + 77 | 0) >> 0] | 0;
     if ($3_1 >>> 0 > 2 >>> 0) {
      break label$3
     }
     HEAP8[($2_1 + 77 | 0) >> 0] = 3;
     $4_1 = $2_1 + 88 | 0;
     $5_1 = $2_1;
     label$4 : while (1) {
      $1_1 = $4_1;
      $6_1 = 0;
      label$5 : {
       $3_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$5
       }
       label$6 : {
        label$7 : {
         $1_1 = HEAPU8[($3_1 + 5 | 0) >> 0] | 0;
         $6_1 = HEAPU8[($5_1 + 76 | 0) >> 0] | 0;
         if (!($1_1 & ($6_1 ^ 24 | 0) | 0)) {
          break label$7
         }
         HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
         $239($0_1 | 0, $3_1 | 0);
         $1_1 = $4_1;
         break label$6;
        }
        HEAP8[($3_1 + 5 | 0) >> 0] = $1_1 & 192 | 0 | ($6_1 & 24 | 0) | 0;
        $1_1 = $3_1;
       }
       $6_1 = HEAP32[$1_1 >> 2] | 0;
      }
      label$8 : {
       $1_1 = $6_1 ? $1_1 : 0;
       if (($1_1 | 0) != ($4_1 | 0)) {
        break label$8
       }
       $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       continue label$4;
      }
      break label$4;
     };
     HEAP32[($2_1 + 92 | 0) >> 2] = $1_1;
     $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $3_1 = HEAPU8[($1_1 + 77 | 0) >> 0] | 0;
    }
    label$9 : {
     label$10 : {
      label$11 : {
       if (($3_1 & 255 | 0 | 0) == (8 | 0)) {
        break label$11
       }
       label$12 : while (1) {
        $241($0_1 | 0) | 0;
        if ((HEAPU8[($1_1 + 77 | 0) >> 0] | 0 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$12;
       };
       $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if ((HEAPU8[($1_1 + 77 | 0) >> 0] | 0 | 0) == (7 | 0)) {
        break label$10
       }
      }
      label$13 : while (1) {
       $241($0_1 | 0) | 0;
       if ((HEAPU8[($1_1 + 77 | 0) >> 0] | 0 | 0) != (7 | 0)) {
        continue label$13
       }
       break label$13;
      };
      $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ((HEAPU8[($1_1 + 77 | 0) >> 0] | 0 | 0) == (8 | 0)) {
       break label$9
      }
     }
     label$14 : while (1) {
      $241($0_1 | 0) | 0;
      if ((HEAPU8[($1_1 + 77 | 0) >> 0] | 0 | 0) != (8 | 0)) {
       continue label$14
      }
      break label$14;
     };
    }
    $0_1 = ((HEAP32[($2_1 + 16 | 0) >> 2] | 0) >>> 0) / (100 >>> 0) | 0;
    $1_1 = (HEAPU8[($2_1 + 83 | 0) >> 0] | 0) << 2 | 0;
    $0_1 = ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + (HEAP32[($2_1 + 8 | 0) >> 2] | 0) | 0) - ($1_1 >>> 0 < ((2147483647 >>> 0) / ($0_1 >>> 0) | 0) >>> 0 ? Math_imul($0_1, $1_1) : 2147483647) | 0;
    $396($2_1 | 0, ($0_1 >> 31 | 0) & $0_1 | 0 | 0);
    break label$1;
   }
   $249($0_1 | 0, $2_1 | 0) | 0;
  }
  HEAP8[($2_1 + 82 | 0) >> 0] = 0;
 }
 
 function $252($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $11_1 = 0, $4_1 = 0, $9_1 = 0, $10_1 = 0, $12_1 = 0, $8_1 = 0;
  $3_1 = $422($1_1 | 0) | 0;
  $4_1 = 1 << (HEAPU8[($1_1 + 7 | 0) >> 0] | 0) | 0;
  $5_1 = 0;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $5_1 = 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $7_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0;
     if (!((HEAPU8[($7_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
      break label$3
     }
     $7_1 = HEAP32[$7_1 >> 2] | 0;
     if (!((HEAPU8[($7_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
      break label$3
     }
     $234($0_1 | 0, $7_1 | 0);
     $5_1 = 1;
    }
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $8_1 = $4_1 >>> 0 > 1 >>> 0 ? $4_1 : 1;
  $9_1 = 0;
  $10_1 = 0;
  $6_1 = 0;
  label$4 : while (1) {
   $7_1 = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) + Math_imul($2_1 ? $4_1 + ($6_1 ^ -1 | 0) | 0 : $6_1, 24) | 0;
   $3_1 = (HEAPU8[($7_1 + 9 | 0) >> 0] | 0) & 64 | 0;
   label$5 : {
    label$6 : {
     $11_1 = HEAPU8[($7_1 + 8 | 0) >> 0] | 0;
     if ($11_1 & 15 | 0) {
      break label$6
     }
     if (!$3_1) {
      break label$5
     }
     if (!((HEAPU8[((HEAP32[($7_1 + 16 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
      break label$5
     }
     HEAP8[($7_1 + 9 | 0) >> 0] = 5;
     HEAP32[($7_1 + 16 | 0) >> 2] = 0;
     break label$5;
    }
    label$7 : {
     if (!$3_1) {
      break label$7
     }
     $3_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$7
     }
     $12_1 = (HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 24 | 0;
     label$8 : {
      if (((HEAPU8[($3_1 + 4 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
       break label$8
      }
      if (!$12_1) {
       break label$7
      }
      $234($0_1 | 0, $3_1 | 0);
      $11_1 = HEAPU8[($7_1 + 8 | 0) >> 0] | 0;
      break label$7;
     }
     if (!$12_1) {
      break label$7
     }
     $9_1 = 1;
     if (!($11_1 & 64 | 0)) {
      break label$5
     }
     $9_1 = 1;
     $10_1 = (HEAPU8[((HEAP32[$7_1 >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0 ? 1 : $10_1;
     break label$5;
    }
    if (!($11_1 & 64 | 0)) {
     break label$5
    }
    $7_1 = HEAP32[$7_1 >> 2] | 0;
    if (!((HEAPU8[($7_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
     break label$5
    }
    $234($0_1 | 0, $7_1 | 0);
    $5_1 = 1;
   }
   $6_1 = $6_1 + 1 | 0;
   if (($6_1 | 0) != ($8_1 | 0)) {
    continue label$4
   }
   break label$4;
  };
  label$9 : {
   if (HEAPU8[($0_1 + 77 | 0) >> 0] | 0) {
    break label$9
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
   HEAP32[($0_1 + 104 | 0) >> 2] = $1_1;
   return $5_1 | 0;
  }
  label$10 : {
   if (!$10_1) {
    break label$10
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   HEAP32[($0_1 + 112 | 0) >> 2] = $1_1;
   return $5_1 | 0;
  }
  label$11 : {
   if (!$9_1) {
    break label$11
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   HEAP32[($0_1 + 116 | 0) >> 2] = $1_1;
   return $5_1 | 0;
  }
  label$12 : {
   if ((HEAPU8[($0_1 + 78 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break label$12
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
   HEAP32[($0_1 + 104 | 0) >> 2] = $1_1;
   return $5_1 | 0;
  }
  HEAP8[($1_1 + 5 | 0) >> 0] = HEAPU8[($1_1 + 5 | 0) >> 0] | 0 | 32 | 0;
  return $5_1 | 0;
 }
 
 function $253($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $4_1 = 0, $3_1 = 0, $8_1 = 0;
  label$1 : {
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) + Math_imul(1 << (HEAPU8[($1_1 + 7 | 0) >> 0] | 0) | 0, 24) | 0;
    label$3 : {
     $4_1 = $422($1_1 | 0) | 0;
     if (!$4_1) {
      break label$3
     }
     $5_1 = 0;
     label$4 : while (1) {
      label$5 : {
       $6_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($5_1 << 4 | 0) | 0;
       if (!((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
        break label$5
       }
       $7_1 = HEAP32[$6_1 >> 2] | 0;
       if (!$7_1) {
        break label$5
       }
       $8_1 = (HEAPU8[($7_1 + 5 | 0) >> 0] | 0) & 24 | 0;
       label$6 : {
        if (((HEAPU8[($7_1 + 4 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
         break label$6
        }
        if (!$8_1) {
         break label$5
        }
        $234($0_1 | 0, $7_1 | 0);
        break label$5;
       }
       if (!$8_1) {
        break label$5
       }
       HEAP8[($6_1 + 8 | 0) >> 0] = 16;
      }
      $5_1 = $5_1 + 1 | 0;
      if (($5_1 | 0) != ($4_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    label$7 : {
     $5_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if ($5_1 >>> 0 >= $3_1 >>> 0) {
      break label$7
     }
     label$8 : while (1) {
      label$9 : {
       label$10 : {
        label$11 : {
         $6_1 = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
         if (!($6_1 & 64 | 0)) {
          break label$11
         }
         $7_1 = HEAP32[$5_1 >> 2] | 0;
         if (!$7_1) {
          break label$11
         }
         $4_1 = (HEAPU8[($7_1 + 5 | 0) >> 0] | 0) & 24 | 0;
         label$12 : {
          if (((HEAPU8[($7_1 + 4 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
           break label$12
          }
          if (!$4_1) {
           break label$11
          }
          $234($0_1 | 0, $7_1 | 0);
          $6_1 = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
          break label$11;
         }
         if (!$4_1) {
          break label$11
         }
         HEAP8[($5_1 + 8 | 0) >> 0] = 16;
         break label$10;
        }
        if ($6_1 & 15 | 0) {
         break label$9
        }
       }
       if (!((HEAPU8[($5_1 + 9 | 0) >> 0] | 0) & 64 | 0)) {
        break label$9
       }
       if (!((HEAPU8[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
        break label$9
       }
       HEAP32[($5_1 + 16 | 0) >> 2] = 0;
       HEAP8[($5_1 + 9 | 0) >> 0] = 5;
      }
      $5_1 = $5_1 + 24 | 0;
      if ($5_1 >>> 0 < $3_1 >>> 0) {
       continue label$8
      }
      break label$8;
     };
    }
    $1_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $254($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $2_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
     if (($2_1 | 0) == (31 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     $4_1 = $3_1 + Math_imul(1 << $2_1 | 0, 24) | 0;
     label$4 : while (1) {
      label$5 : {
       if (!((HEAPU8[($3_1 + 9 | 0) >> 0] | 0) & 64 | 0)) {
        break label$5
       }
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$5
       }
       $5_1 = (HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 24 | 0;
       label$6 : {
        if (((HEAPU8[($2_1 + 4 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
         break label$6
        }
        if (!$5_1) {
         break label$5
        }
        $234($0_1 | 0, $2_1 | 0);
        break label$5;
       }
       if (!$5_1) {
        break label$5
       }
       HEAP8[($3_1 + 8 | 0) >> 0] = 16;
      }
      label$7 : {
       if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
        break label$7
       }
       if (!((HEAPU8[($3_1 + 9 | 0) >> 0] | 0) & 64 | 0)) {
        break label$7
       }
       if (!((HEAPU8[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
        break label$7
       }
       HEAP32[($3_1 + 16 | 0) >> 2] = 0;
       HEAP8[($3_1 + 9 | 0) >> 0] = 5;
      }
      $3_1 = $3_1 + 24 | 0;
      if ($3_1 >>> 0 < $4_1 >>> 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $1_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $255($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $209($0_1 | 0, (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -32 | 0 | 0, 0 | 0);
 }
 
 function $256($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $236($0_1 | 0, $417($0_1 | 0, 2249 | 0, 4 | 0) | 0 | 0);
  $1_1 = 0;
  label$1 : while (1) {
   $2_1 = $420($0_1 | 0, HEAP32[(($1_1 << 2 | 0) + 2256 | 0) >> 2] | 0 | 0) | 0;
   $236($0_1 | 0, $2_1 | 0);
   $1_1 = $1_1 + 1 | 0;
   HEAP8[($2_1 + 6 | 0) >> 0] = $1_1;
   if (($1_1 | 0) != (22 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $257($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) > (256 | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    label$3 : {
     if (!((HEAPU8[($1_1 + 1169 | 0) >> 0] | 0) & 4 | 0)) {
      break label$3
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
     $3_1 = $298($3_1 | 0, 2404 | 0, $2_1 + 16 | 0 | 0) | 0;
     break label$1;
    }
    HEAP32[$2_1 >> 2] = $1_1;
    $3_1 = $298($3_1 | 0, 2409 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   $3_1 = HEAP32[(($1_1 << 2 | 0) + 1228 | 0) >> 2] | 0;
   if (($1_1 | 0) > (288 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = $3_1;
   $3_1 = $298($1_1 | 0, 2417 | 0, $2_1 + 32 | 0 | 0) | 0;
  }
  global$0 = $2_1 + 48 | 0;
  return $3_1 | 0;
 }
 
 function $258($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $259($0_1 | 0, $1_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  abort();
 }
 
 function $259($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1_1 = $194(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $260($0_1 | 0, $2_1 | 0) | 0;
   HEAP32[$3_1 >> 2] = $1_1;
   $298($4_1 | 0, 2606 | 0, $3_1 | 0) | 0;
  }
  $197(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0, 3 | 0);
  abort();
 }
 
 function $260($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (($1_1 + -290 | 0) >>> 0 > 3 >>> 0) {
     break label$2
    }
    $265($0_1 | 0, 0 | 0);
    $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = HEAP32[(HEAP32[($0_1 + 60 | 0) >> 2] | 0) >> 2] | 0;
    $0_1 = $298($1_1 | 0, 2417 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $257($0_1 | 0, $1_1 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $261($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $1_1 = $417($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1 + 16 | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP8[($2_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
  label$1 : {
   label$2 : {
    $0_1 = $434($3_1 | 0, HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0, (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + -16 | 0 | 0) | 0;
    if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
     break label$2
    }
    HEAP8[($0_1 + 8 | 0) >> 0] = 17;
    if ((HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$1
    }
    $248($3_1 | 0);
    break label$1;
   }
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + -16 | 0;
  return $1_1 | 0;
 }
 
 function $262($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[($1_1 + 52 | 0) >> 2] = $0_1;
  HEAP32[($1_1 + 16 | 0) >> 2] = 0;
  HEAP32[($1_1 + 56 | 0) >> 2] = $2_1;
  HEAP32[($1_1 + 32 | 0) >> 2] = 289;
  HEAP32[$1_1 >> 2] = $4_1;
  HEAP32[($1_1 + 48 | 0) >> 2] = 0;
  HEAP32[($1_1 + 72 | 0) >> 2] = $3_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = 1;
  HEAP32[($1_1 + 8 | 0) >> 2] = 1;
  HEAP32[($1_1 + 76 | 0) >> 2] = $417($0_1 | 0, 2249 | 0, 4 | 0) | 0;
  $0_1 = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
  $0_1 = $281(HEAP32[($1_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, 32 | 0) | 0;
  $1_1 = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 32;
  HEAP32[$1_1 >> 2] = $0_1;
 }
 
 function $263($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $12_1 = 0, $17_1 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) == (289 | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $0_1 + 32 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $12_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 16 | 0) >> 2] = $12_1;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $17_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 32 | 0) >> 2] = 289;
   return;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = $264($0_1 | 0, $0_1 + 24 | 0 | 0) | 0;
 }
 
 function $264($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  label$1 : while (1) {
   $2_1 = 289;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                label$15 : {
                 label$16 : {
                  label$17 : {
                   label$18 : {
                    $3_1 = HEAP32[$0_1 >> 2] | 0;
                    switch ($3_1 + 1 | 0 | 0) {
                    case 63:
                     break label$10;
                    case 48:
                     break label$11;
                    case 59:
                     break label$13;
                    case 35:
                    case 40:
                     break label$14;
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                     break label$15;
                    case 47:
                     break label$16;
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 34:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 60:
                     break label$17;
                    case 11:
                    case 14:
                     break label$2;
                    case 10:
                    case 12:
                    case 13:
                    case 33:
                     break label$3;
                    case 0:
                     break label$5;
                    case 46:
                     break label$6;
                    case 62:
                     break label$8;
                    case 61:
                     break label$9;
                    default:
                     break label$18;
                    };
                   }
                   if (($3_1 | 0) == (91 | 0)) {
                    break label$7
                   }
                   if (($3_1 | 0) == (126 | 0)) {
                    break label$12
                   }
                  }
                  label$19 : {
                   if (!((HEAPU8[($3_1 + 1169 | 0) >> 0] | 0) & 1 | 0)) {
                    break label$19
                   }
                   label$20 : while (1) {
                    $265($0_1 | 0, $3_1 | 0);
                    $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
                    $3_1 = HEAP32[$2_1 >> 2] | 0;
                    HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
                    label$21 : {
                     label$22 : {
                      if (!$3_1) {
                       break label$22
                      }
                      $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                      HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
                      $3_1 = HEAPU8[$3_1 >> 0] | 0;
                      break label$21;
                     }
                     $3_1 = $474($2_1 | 0) | 0;
                    }
                    HEAP32[$0_1 >> 2] = $3_1;
                    if ((HEAPU8[($3_1 + 1169 | 0) >> 0] | 0) & 3 | 0) {
                     continue label$20
                    }
                    break label$20;
                   };
                   $2_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
                   $0_1 = $261($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) | 0;
                   HEAP32[$1_1 >> 2] = $0_1;
                   $2_1 = 292;
                   if ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
                    break label$5
                   }
                   $0_1 = HEAPU8[($0_1 + 6 | 0) >> 0] | 0;
                   if (!$0_1) {
                    break label$5
                   }
                   return $0_1 | 256 | 0 | 0;
                  }
                  $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
                  $1_1 = HEAP32[$2_1 >> 2] | 0;
                  HEAP32[$2_1 >> 2] = $1_1 + -1 | 0;
                  label$23 : {
                   label$24 : {
                    if (!$1_1) {
                     break label$24
                    }
                    $1_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
                    $2_1 = HEAPU8[$1_1 >> 0] | 0;
                    break label$23;
                   }
                   $2_1 = $474($2_1 | 0) | 0;
                  }
                  HEAP32[$0_1 >> 2] = $2_1;
                  $2_1 = $3_1;
                  break label$5;
                 }
                 $265($0_1 | 0, 46 | 0);
                 $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
                 $3_1 = HEAP32[$2_1 >> 2] | 0;
                 HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
                 label$25 : {
                  label$26 : {
                   if (!$3_1) {
                    break label$26
                   }
                   $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                   HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
                   $2_1 = HEAPU8[$3_1 >> 0] | 0;
                   break label$25;
                  }
                  $2_1 = $474($2_1 | 0) | 0;
                 }
                 HEAP32[$0_1 >> 2] = $2_1;
                 $2_1 = 46;
                 label$27 : {
                  if (!($266($0_1 | 0, 46 | 0) | 0)) {
                   break label$27
                  }
                  return ($266($0_1 | 0, 46 | 0) | 0 ? 281 : 280) | 0;
                 }
                 if (!((HEAPU8[((HEAP32[$0_1 >> 2] | 0) + 1169 | 0) >> 0] | 0) & 2 | 0)) {
                  break label$5
                 }
                }
                return $267($0_1 | 0, $1_1 | 0) | 0 | 0;
               }
               $268($0_1 | 0, $3_1 | 0, $1_1 | 0);
               return 293 | 0;
              }
              $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
              $3_1 = HEAP32[$2_1 >> 2] | 0;
              HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
              label$28 : {
               label$29 : {
                if (!$3_1) {
                 break label$29
                }
                $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
                HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
                $2_1 = HEAPU8[$3_1 >> 0] | 0;
                break label$28;
               }
               $2_1 = $474($2_1 | 0) | 0;
              }
              HEAP32[$0_1 >> 2] = $2_1;
              return ($266($0_1 | 0, 58 | 0) | 0 ? 288 : 58) | 0;
             }
             $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
             $3_1 = HEAP32[$2_1 >> 2] | 0;
             HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
             label$30 : {
              label$31 : {
               if (!$3_1) {
                break label$31
               }
               $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
               HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
               $2_1 = HEAPU8[$3_1 >> 0] | 0;
               break label$30;
              }
              $2_1 = $474($2_1 | 0) | 0;
             }
             HEAP32[$0_1 >> 2] = $2_1;
             return ($266($0_1 | 0, 61 | 0) | 0 ? 285 : 126) | 0;
            }
            $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
            $3_1 = HEAP32[$2_1 >> 2] | 0;
            HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
            label$32 : {
             label$33 : {
              if (!$3_1) {
               break label$33
              }
              $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
              HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
              $2_1 = HEAPU8[$3_1 >> 0] | 0;
              break label$32;
             }
             $2_1 = $474($2_1 | 0) | 0;
            }
            HEAP32[$0_1 >> 2] = $2_1;
            return ($266($0_1 | 0, 47 | 0) | 0 ? 279 : 47) | 0;
           }
           $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
           $3_1 = HEAP32[$2_1 >> 2] | 0;
           HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
           label$34 : {
            label$35 : {
             if (!$3_1) {
              break label$35
             }
             $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
             HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
             $2_1 = HEAPU8[$3_1 >> 0] | 0;
             break label$34;
            }
            $2_1 = $474($2_1 | 0) | 0;
           }
           HEAP32[$0_1 >> 2] = $2_1;
           $2_1 = 283;
           if ($266($0_1 | 0, 61 | 0) | 0) {
            break label$5
           }
           return ($266($0_1 | 0, 62 | 0) | 0 ? 287 : 62) | 0;
          }
          $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
          $3_1 = HEAP32[$2_1 >> 2] | 0;
          HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
          label$36 : {
           label$37 : {
            if (!$3_1) {
             break label$37
            }
            $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
            $2_1 = HEAPU8[$3_1 >> 0] | 0;
            break label$36;
           }
           $2_1 = $474($2_1 | 0) | 0;
          }
          HEAP32[$0_1 >> 2] = $2_1;
          $2_1 = 284;
          if ($266($0_1 | 0, 61 | 0) | 0) {
           break label$5
          }
          return ($266($0_1 | 0, 60 | 0) | 0 ? 286 : 60) | 0;
         }
         $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         $3_1 = HEAP32[$2_1 >> 2] | 0;
         HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
         label$38 : {
          label$39 : {
           if (!$3_1) {
            break label$39
           }
           $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
           HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
           $2_1 = HEAPU8[$3_1 >> 0] | 0;
           break label$38;
          }
          $2_1 = $474($2_1 | 0) | 0;
         }
         HEAP32[$0_1 >> 2] = $2_1;
         return ($266($0_1 | 0, 61 | 0) | 0 ? 282 : 61) | 0;
        }
        label$40 : {
         $3_1 = $269($0_1 | 0) | 0;
         if ($3_1 >>> 0 < 2 >>> 0) {
          break label$40
         }
         $270($0_1 | 0, $1_1 | 0, $3_1 | 0);
         return 293 | 0;
        }
        $2_1 = 91;
        if ($3_1) {
         break label$5
        }
        $259($0_1 | 0, 2642 | 0, 293 | 0);
        abort();
       }
       $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       $3_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
       label$41 : {
        label$42 : {
         if (!$3_1) {
          break label$42
         }
         $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
         $3_1 = HEAPU8[$3_1 >> 0] | 0;
         break label$41;
        }
        $3_1 = $474($2_1 | 0) | 0;
       }
       HEAP32[$0_1 >> 2] = $3_1;
       $2_1 = 45;
       if (($3_1 | 0) != (45 | 0)) {
        break label$5
       }
       $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       $3_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
       label$43 : {
        label$44 : {
         if (!$3_1) {
          break label$44
         }
         $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
         $2_1 = HEAPU8[$3_1 >> 0] | 0;
         break label$43;
        }
        $2_1 = $474($2_1 | 0) | 0;
       }
       HEAP32[$0_1 >> 2] = $2_1;
       label$45 : {
        if (($2_1 | 0) != (91 | 0)) {
         break label$45
        }
        $2_1 = $269($0_1 | 0) | 0;
        HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
        if ($2_1 >>> 0 > 1 >>> 0) {
         break label$4
        }
        $2_1 = HEAP32[$0_1 >> 2] | 0;
       }
       label$46 : while (1) {
        label$47 : {
         switch ($2_1 + -10 | 0 | 0) {
         default:
          if (($2_1 | 0) == (-1 | 0)) {
           continue label$1
          }
          break;
         case 0:
         case 3:
          continue label$1;
         case 1:
         case 2:
          break label$47;
         };
        }
        $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
        label$49 : {
         label$50 : {
          if (!$3_1) {
           break label$50
          }
          $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
          HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
          $2_1 = HEAPU8[$3_1 >> 0] | 0;
          break label$49;
         }
         $2_1 = $474($2_1 | 0) | 0;
        }
        HEAP32[$0_1 >> 2] = $2_1;
        continue label$46;
       };
      }
      return $2_1 | 0;
     }
     $270($0_1 | 0, 0 | 0, $2_1 | 0);
     HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
     continue label$1;
    }
    $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
    label$51 : {
     label$52 : {
      if (!$3_1) {
       break label$52
      }
      $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      break label$51;
     }
     $2_1 = $474($2_1 | 0) | 0;
    }
    HEAP32[$0_1 >> 2] = $2_1;
    continue label$1;
   }
   $271($0_1 | 0);
   continue label$1;
  };
 }
 
 function $265($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $4_1 = $3_1 + 1 | 0;
     $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     if ($4_1 >>> 0 > $5_1 >>> 0) {
      break label$3
     }
     $0_1 = HEAP32[$2_1 >> 2] | 0;
     break label$2;
    }
    if ($5_1 >>> 0 >= 2147483647 >>> 0) {
     break label$1
    }
    $3_1 = $5_1 << 1 | 0;
    $0_1 = $281(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0, $5_1 | 0, $3_1 | 0) | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
    HEAP32[$2_1 >> 2] = $0_1;
    $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $4_1 = $3_1 + 1 | 0;
   }
   HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + $3_1 | 0) >> 0] = $1_1;
   return;
  }
  $259($0_1 | 0, 2617 | 0, 0 | 0);
  abort();
 }
 
 function $266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $1_1 = HEAP32[$2_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = $1_1 + -1 | 0;
   label$2 : {
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     $1_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
     $2_1 = HEAPU8[$1_1 >> 0] | 0;
     break label$2;
    }
    $2_1 = $474($2_1 | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = $2_1;
   $2_1 = 1;
  }
  return $2_1 | 0;
 }
 
 function $267($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $115_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $265($0_1 | 0, $3_1 | 0);
  $4_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  HEAP32[$4_1 >> 2] = $5_1 + -1 | 0;
  label$1 : {
   label$2 : {
    if (!$5_1) {
     break label$2
    }
    $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
    $4_1 = HEAPU8[$5_1 >> 0] | 0;
    break label$1;
   }
   $4_1 = $474($4_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $4_1;
  $5_1 = 2893;
  label$3 : {
   if (($3_1 | 0) != (48 | 0)) {
    break label$3
   }
   $5_1 = $277($0_1 | 0, 2896 | 0) | 0 ? 2899 : 2893;
  }
  label$4 : while (1) {
   label$5 : {
    if (!($277($0_1 | 0, $5_1 | 0) | 0)) {
     break label$5
    }
    $277($0_1 | 0, 2902 | 0) | 0;
    continue label$4;
   }
   $4_1 = HEAP32[$0_1 >> 2] | 0;
   $6_1 = HEAPU8[($4_1 + 1169 | 0) >> 0] | 0;
   $3_1 = $6_1 & 16 | 0;
   label$6 : {
    label$7 : {
     if (($4_1 | 0) == (46 | 0)) {
      break label$7
     }
     if (!$3_1) {
      break label$6
     }
    }
    $265($0_1 | 0, $4_1 | 0);
    $4_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $3_1 + -1 | 0;
    label$8 : {
     label$9 : {
      if (!$3_1) {
       break label$9
      }
      $3_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
      $4_1 = HEAPU8[$3_1 >> 0] | 0;
      break label$8;
     }
     $4_1 = $474($4_1 | 0) | 0;
    }
    HEAP32[$0_1 >> 2] = $4_1;
    continue label$4;
   }
   break label$4;
  };
  label$10 : {
   if (!($6_1 & 1 | 0)) {
    break label$10
   }
   $265($0_1 | 0, $4_1 | 0);
   $4_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $5_1 = HEAP32[$4_1 >> 2] | 0;
   HEAP32[$4_1 >> 2] = $5_1 + -1 | 0;
   label$11 : {
    label$12 : {
     if (!$5_1) {
      break label$12
     }
     $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
     $4_1 = HEAPU8[$5_1 >> 0] | 0;
     break label$11;
    }
    $4_1 = $474($4_1 | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = $4_1;
  }
  $265($0_1 | 0, 0 | 0);
  label$13 : {
   if (!($292(HEAP32[(HEAP32[($0_1 + 60 | 0) >> 2] | 0) >> 2] | 0 | 0, $2_1 | 0) | 0)) {
    break label$13
   }
   label$14 : {
    label$15 : {
     if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
      break label$15
     }
     i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $115_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $1_1;
     HEAP32[i64toi32_i32$0 >> 2] = $115_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $0_1 = 291;
     break label$14;
    }
    HEAPF64[$1_1 >> 3] = +HEAPF64[$2_1 >> 3];
    $0_1 = 290;
   }
   global$0 = $2_1 + 16 | 0;
   return $0_1 | 0;
  }
  $259($0_1 | 0, 2905 | 0, 290 | 0);
  abort();
 }
 
 function $268($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $265($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
  $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $4_1 = HEAP32[$3_1 >> 2] | 0;
  HEAP32[$3_1 >> 2] = $4_1 + -1 | 0;
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
    $3_1 = HEAPU8[$4_1 >> 0] | 0;
    break label$1;
   }
   $3_1 = $474($3_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $3_1;
  label$3 : {
   if (($3_1 | 0) == ($1_1 | 0)) {
    break label$3
   }
   label$4 : while (1) {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           if (($3_1 | 0) == (92 | 0)) {
            break label$11
           }
           label$12 : {
            switch ($3_1 + -10 | 0 | 0) {
            default:
             if (($3_1 | 0) != (-1 | 0)) {
              break label$10
             }
             $259($0_1 | 0, 2753 | 0, 289 | 0);
             abort();
            case 1:
            case 2:
             break label$10;
            case 0:
            case 3:
             break label$12;
            };
           }
           $259($0_1 | 0, 2753 | 0, 293 | 0);
           abort();
          }
          $265($0_1 | 0, 92 | 0);
          $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
          $4_1 = HEAP32[$3_1 >> 2] | 0;
          HEAP32[$3_1 >> 2] = $4_1 + -1 | 0;
          label$14 : {
           label$15 : {
            if (!$4_1) {
             break label$15
            }
            $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
            HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
            $3_1 = HEAPU8[$4_1 >> 0] | 0;
            break label$14;
           }
           $3_1 = $474($3_1 | 0) | 0;
          }
          HEAP32[$0_1 >> 2] = $3_1;
          label$16 : {
           label$17 : {
            label$18 : {
             label$19 : {
              label$20 : {
               label$21 : {
                label$22 : {
                 label$23 : {
                  label$24 : {
                   label$25 : {
                    label$26 : {
                     if (($3_1 | 0) > (109 | 0)) {
                      break label$26
                     }
                     label$27 : {
                      if (($3_1 | 0) > (38 | 0)) {
                       break label$27
                      }
                      label$28 : {
                       switch ($3_1 + -10 | 0 | 0) {
                       case 0:
                       case 3:
                        break label$18;
                       case 1:
                       case 2:
                        break label$9;
                       default:
                        break label$28;
                       };
                      }
                      if (($3_1 | 0) == (-1 | 0)) {
                       break label$5
                      }
                      if (($3_1 | 0) == (34 | 0)) {
                       break label$8
                      }
                      break label$9;
                     }
                     $4_1 = 7;
                     label$29 : {
                      switch ($3_1 + -97 | 0 | 0) {
                      case 1:
                       break label$16;
                      case 5:
                       break label$25;
                      case 0:
                       break label$7;
                      case 2:
                      case 3:
                      case 4:
                       break label$9;
                      default:
                       break label$29;
                      };
                     }
                     if (($3_1 | 0) == (39 | 0)) {
                      break label$8
                     }
                     if (($3_1 | 0) == (92 | 0)) {
                      break label$8
                     }
                     break label$9;
                    }
                    switch ($3_1 + -110 | 0 | 0) {
                    case 12:
                     break label$17;
                    case 7:
                     break label$19;
                    case 10:
                     break label$20;
                    case 8:
                     break label$21;
                    case 6:
                     break label$22;
                    case 4:
                     break label$23;
                    case 0:
                     break label$24;
                    default:
                     break label$9;
                    };
                   }
                   $4_1 = 12;
                   break label$7;
                  }
                  $4_1 = 10;
                  break label$7;
                 }
                 $4_1 = 13;
                 break label$7;
                }
                $4_1 = 9;
                break label$7;
               }
               $4_1 = 11;
               break label$7;
              }
              $4_1 = $273($0_1 | 0) | 0;
              break label$7;
             }
             $274($0_1 | 0);
             break label$5;
            }
            $271($0_1 | 0);
            $4_1 = 10;
            break label$6;
           }
           $3_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
           HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + -1 | 0;
           $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
           $4_1 = HEAP32[$3_1 >> 2] | 0;
           HEAP32[$3_1 >> 2] = $4_1 + -1 | 0;
           label$30 : {
            label$31 : {
             if (!$4_1) {
              break label$31
             }
             $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
             HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
             $3_1 = HEAPU8[$4_1 >> 0] | 0;
             break label$30;
            }
            $3_1 = $474($3_1 | 0) | 0;
           }
           HEAP32[$0_1 >> 2] = $3_1;
           if (!((HEAPU8[($3_1 + 1169 | 0) >> 0] | 0) & 8 | 0)) {
            break label$5
           }
           label$32 : while (1) {
            label$33 : {
             label$34 : {
              switch ($3_1 + -10 | 0 | 0) {
              case 0:
              case 3:
               $271($0_1 | 0);
               $3_1 = HEAP32[$0_1 >> 2] | 0;
               break label$33;
              default:
               break label$34;
              };
             }
             $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
             $4_1 = HEAP32[$3_1 >> 2] | 0;
             HEAP32[$3_1 >> 2] = $4_1 + -1 | 0;
             label$36 : {
              label$37 : {
               if (!$4_1) {
                break label$37
               }
               $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
               HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
               $3_1 = HEAPU8[$4_1 >> 0] | 0;
               break label$36;
              }
              $3_1 = $474($3_1 | 0) | 0;
             }
             HEAP32[$0_1 >> 2] = $3_1;
            }
            if ((HEAPU8[($3_1 + 1169 | 0) >> 0] | 0) & 8 | 0) {
             continue label$32
            }
            break label$5;
           };
          }
          $4_1 = 8;
          break label$7;
         }
         $265($0_1 | 0, $3_1 | 0);
         $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         $4_1 = HEAP32[$3_1 >> 2] | 0;
         HEAP32[$3_1 >> 2] = $4_1 + -1 | 0;
         label$38 : {
          label$39 : {
           if (!$4_1) {
            break label$39
           }
           $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
           HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
           $3_1 = HEAPU8[$4_1 >> 0] | 0;
           break label$38;
          }
          $3_1 = $474($3_1 | 0) | 0;
         }
         HEAP32[$0_1 >> 2] = $3_1;
         break label$5;
        }
        $275($0_1 | 0, (HEAPU8[($3_1 + 1169 | 0) >> 0] | 0) & 2 | 0 | 0, 2771 | 0);
        $4_1 = $276($0_1 | 0) | 0;
        break label$6;
       }
       $4_1 = $3_1;
      }
      $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
      $5_1 = HEAP32[$3_1 >> 2] | 0;
      HEAP32[$3_1 >> 2] = $5_1 + -1 | 0;
      label$40 : {
       label$41 : {
        if (!$5_1) {
         break label$41
        }
        $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $3_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$40;
       }
       $3_1 = $474($3_1 | 0) | 0;
      }
      HEAP32[$0_1 >> 2] = $3_1;
     }
     $3_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     $265($0_1 | 0, $4_1 | 0);
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    if (($3_1 | 0) != ($1_1 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  $265($0_1 | 0, $1_1 | 0);
  $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $1_1 = HEAP32[$3_1 >> 2] | 0;
  HEAP32[$3_1 >> 2] = $1_1 + -1 | 0;
  label$42 : {
   label$43 : {
    if (!$1_1) {
     break label$43
    }
    $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    $3_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$42;
   }
   $3_1 = $474($3_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $3_1;
  $3_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  HEAP32[$2_1 >> 2] = $261($0_1 | 0, (HEAP32[$3_1 >> 2] | 0) + 1 | 0 | 0, (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + -2 | 0 | 0) | 0;
 }
 
 function $269($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  $265($0_1 | 0, $1_1 | 0);
  $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $3_1 = HEAP32[$2_1 >> 2] | 0;
  HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
    $2_1 = HEAPU8[$3_1 >> 0] | 0;
    break label$1;
   }
   $2_1 = $474($2_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $2_1;
  $3_1 = 0;
  label$3 : {
   if (($2_1 | 0) != (61 | 0)) {
    break label$3
   }
   label$4 : while (1) {
    $265($0_1 | 0, 61 | 0);
    $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $4_1 + -1 | 0;
    label$5 : {
     label$6 : {
      if (!$4_1) {
       break label$6
      }
      $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
      $2_1 = HEAPU8[$4_1 >> 0] | 0;
      break label$5;
     }
     $2_1 = $474($2_1 | 0) | 0;
    }
    HEAP32[$0_1 >> 2] = $2_1;
    $3_1 = $3_1 + 1 | 0;
    if (($2_1 | 0) == (61 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  return (($2_1 | 0) == ($1_1 | 0) ? $3_1 + 2 | 0 : !$3_1) | 0;
 }
 
 function $270($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $265($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
  $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $6_1 = HEAP32[$5_1 >> 2] | 0;
  HEAP32[$5_1 >> 2] = $6_1 + -1 | 0;
  label$1 : {
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
    $5_1 = HEAPU8[$6_1 >> 0] | 0;
    break label$1;
   }
   $5_1 = $474($5_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $5_1;
  label$3 : {
   switch ($5_1 + -10 | 0 | 0) {
   case 0:
   case 3:
    $271($0_1 | 0);
    break;
   default:
    break label$3;
   };
  }
  label$5 : while (1) {
   label$6 : {
    label$7 : {
     label$8 : {
      $5_1 = HEAP32[$0_1 >> 2] | 0;
      switch ($5_1 + -10 | 0 | 0) {
      case 1:
      case 2:
       break label$6;
      case 0:
      case 3:
       break label$7;
      default:
       break label$8;
      };
     }
     label$9 : {
      if (($5_1 | 0) == (93 | 0)) {
       break label$9
      }
      if (($5_1 | 0) != (-1 | 0)) {
       break label$6
      }
      $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
      HEAP32[$3_1 >> 2] = $1_1 ? 2697 : 2704;
      $259($0_1 | 0, $298($5_1 | 0, 2712 | 0, $3_1 | 0) | 0 | 0, 289 | 0);
      abort();
     }
     if (($269($0_1 | 0) | 0 | 0) != ($2_1 | 0)) {
      continue label$5
     }
     $265($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
     $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $6_1 + -1 | 0;
     label$10 : {
      label$11 : {
       if (!$6_1) {
        break label$11
       }
       $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
       HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
       $5_1 = HEAPU8[$6_1 >> 0] | 0;
       break label$10;
      }
      $5_1 = $474($5_1 | 0) | 0;
     }
     HEAP32[$0_1 >> 2] = $5_1;
     label$12 : {
      if (!$1_1) {
       break label$12
      }
      $5_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
      HEAP32[$1_1 >> 2] = $261($0_1 | 0, (HEAP32[$5_1 >> 2] | 0) + $2_1 | 0 | 0, (HEAP32[($5_1 + 4 | 0) >> 2] | 0) - ($2_1 << 1 | 0) | 0 | 0) | 0;
     }
     global$0 = $3_1 + 16 | 0;
     return;
    }
    $265($0_1 | 0, 10 | 0);
    $271($0_1 | 0);
    if ($1_1) {
     continue label$5
    }
    HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
    continue label$5;
   }
   label$13 : {
    if (!$1_1) {
     break label$13
    }
    $265($0_1 | 0, $5_1 | 0);
    $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    $6_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $6_1 + -1 | 0;
    label$14 : {
     label$15 : {
      if (!$6_1) {
       break label$15
      }
      $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
      $5_1 = HEAPU8[$6_1 >> 0] | 0;
      break label$14;
     }
     $5_1 = $474($5_1 | 0) | 0;
    }
    HEAP32[$0_1 >> 2] = $5_1;
    continue label$5;
   }
   $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $6_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $6_1 + -1 | 0;
   label$16 : {
    label$17 : {
     if (!$6_1) {
      break label$17
     }
     $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
     $5_1 = HEAPU8[$6_1 >> 0] | 0;
     break label$16;
    }
    $5_1 = $474($5_1 | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = $5_1;
   continue label$5;
  };
 }
 
 function $271($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $3_1 = HEAP32[$2_1 >> 2] | 0;
  HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
    $2_1 = HEAPU8[$3_1 >> 0] | 0;
    break label$1;
   }
   $2_1 = $474($2_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $2_1;
  label$3 : {
   label$4 : {
    switch ($2_1 + -10 | 0 | 0) {
    case 0:
    case 3:
     break label$4;
    default:
     break label$3;
    };
   }
   if (($2_1 | 0) == ($1_1 | 0)) {
    break label$3
   }
   $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = $3_1 + -1 | 0;
   label$5 : {
    label$6 : {
     if (!$3_1) {
      break label$6
     }
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
     $2_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$5;
    }
    $2_1 = $474($2_1 | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = $2_1;
  }
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
  label$7 : {
   if (($2_1 | 0) < (2147483646 | 0)) {
    break label$7
   }
   $259($0_1 | 0, 2672 | 0, 0 | 0);
   abort();
  }
 }
 
 function $272($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $264($0_1 | 0, $0_1 + 40 | 0 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $273($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $278($0_1 | 0) | 0;
  $2_1 = $278($0_1 | 0) | 0;
  $0_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -2 | 0;
  return $2_1 + ($1_1 << 4 | 0) | 0 | 0;
 }
 
 function $274($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = $293($1_1 + 8 | 0 | 0, $279($0_1 | 0) | 0 | 0) | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $265($0_1 | 0, HEAP8[((($1_1 + 8 | 0) - $2_1 | 0) + 8 | 0) >> 0] | 0 | 0);
    $3_1 = ($2_1 | 0) > (1 | 0);
    $2_1 = $2_1 + -1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $275($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   label$2 : {
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    if (($1_1 | 0) == (-1 | 0)) {
     break label$2
    }
    $265($0_1 | 0, $1_1 | 0);
    $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[$1_1 >> 2] = $3_1 + -1 | 0;
    label$3 : {
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
      $1_1 = HEAPU8[$3_1 >> 0] | 0;
      break label$3;
     }
     $1_1 = $474($1_1 | 0) | 0;
    }
    HEAP32[$0_1 >> 2] = $1_1;
   }
   $259($0_1 | 0, $2_1 | 0, 293 | 0);
   abort();
  }
 }
 
 function $276($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  $2_1 = 0;
  $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if ((HEAPU8[($1_1 + 1169 | 0) >> 0] | 0) & 2 | 0) {
      break label$3
     }
     $4_1 = $3_1;
     break label$1;
    }
    $265($0_1 | 0, $1_1 | 0);
    $4_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $5_1 + -1 | 0;
    $2_1 = Math_imul($2_1, 10) + $1_1 | 0;
    label$4 : {
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      HEAP32[($4_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
      $1_1 = HEAPU8[$1_1 >> 0] | 0;
      break label$4;
     }
     $1_1 = $474($4_1 | 0) | 0;
    }
    $2_1 = $2_1 + -48 | 0;
    HEAP32[$0_1 >> 2] = $1_1;
    $4_1 = 3;
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) != (3 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $275($0_1 | 0, ($2_1 | 0) < (256 | 0) | 0, 2868 | 0);
  $1_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - $4_1 | 0;
  return $2_1 | 0;
 }
 
 function $277($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (($2_1 | 0) == (HEAP8[$1_1 >> 0] | 0 | 0)) {
     break label$2
    }
    $3_1 = 0;
    if (($2_1 | 0) != (HEAP8[($1_1 + 1 | 0) >> 0] | 0 | 0)) {
     break label$1
    }
   }
   $265($0_1 | 0, $2_1 | 0);
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
   label$3 : {
    label$4 : {
     if (!$2_1) {
      break label$4
     }
     $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
     $1_1 = HEAPU8[$2_1 >> 0] | 0;
     break label$3;
    }
    $1_1 = $474($1_1 | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = $1_1;
   $3_1 = 1;
  }
  return $3_1 | 0;
 }
 
 function $278($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $265($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $1_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $1_1 = $474($1_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $1_1;
  $275($0_1 | 0, (HEAPU8[($1_1 + 1169 | 0) >> 0] | 0) & 16 | 0 | 0, 2795 | 0);
  return $291(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $279($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $265($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $1_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $1_1 = $474($1_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $1_1;
  $275($0_1 | 0, ($1_1 | 0) == (123 | 0) | 0, 2822 | 0);
  $2_1 = $278($0_1 | 0) | 0;
  $3_1 = 4;
  label$3 : while (1) {
   $265($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$1_1 >> 2] = $4_1 + -1 | 0;
   label$4 : {
    label$5 : {
     if (!$4_1) {
      break label$5
     }
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
     $1_1 = HEAPU8[$4_1 >> 0] | 0;
     break label$4;
    }
    $1_1 = $474($1_1 | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = $1_1;
   label$6 : {
    if (!((HEAPU8[($1_1 + 1169 | 0) >> 0] | 0) & 16 | 0)) {
     break label$6
    }
    $275($0_1 | 0, $2_1 >>> 0 < 134217728 >>> 0 | 0, 2834 | 0);
    $3_1 = $3_1 + 1 | 0;
    $2_1 = ($291(HEAP32[$0_1 >> 2] | 0 | 0) | 0) + ($2_1 << 4 | 0) | 0;
    continue label$3;
   }
   break label$3;
  };
  $275($0_1 | 0, ($1_1 | 0) == (125 | 0) | 0, 2856 | 0);
  $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $4_1 + -1 | 0;
  label$7 : {
   label$8 : {
    if (!$4_1) {
     break label$8
    }
    $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
    $1_1 = HEAPU8[$4_1 >> 0] | 0;
    break label$7;
   }
   $1_1 = $474($1_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $1_1;
  $0_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $3_1 | 0;
  return $2_1 | 0;
 }
 
 function $280($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $8_1 = 0, $7_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $8_1 = HEAP32[$3_1 >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$3
     }
     $8_1 = $1_1;
     break label$2;
    }
    label$4 : {
     label$5 : {
      if (($8_1 | 0) < (($5_1 | 0) / (2 | 0) | 0 | 0)) {
       break label$5
      }
      if (($8_1 | 0) < ($5_1 | 0)) {
       break label$4
      }
      HEAP32[($7_1 + 4 | 0) >> 2] = $5_1;
      HEAP32[$7_1 >> 2] = $6_1;
      $187($0_1 | 0, 2922 | 0, $7_1 | 0);
      abort();
     }
     $5_1 = $8_1 << 1 | 0;
     $5_1 = ($5_1 | 0) > (4 | 0) ? $5_1 : 4;
    }
    $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    $9_1 = Math_imul($8_1, $4_1);
    $4_1 = Math_imul($5_1, $4_1);
    $6_1 = FUNCTION_TABLE[HEAP32[$2_1 >> 2] | 0 | 0](HEAP32[($2_1 + 4 | 0) >> 2] | 0, $1_1, $9_1, $4_1) | 0;
    label$6 : {
     label$7 : {
      if (!$4_1) {
       break label$7
      }
      if ($6_1) {
       break label$7
      }
      $8_1 = 0;
      if ($4_1 >>> 0 <= $9_1 >>> 0) {
       break label$6
      }
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ((HEAPU8[($6_1 + 64 | 0) >> 0] | 0) & 15 | 0) {
       break label$6
      }
      $251($0_1 | 0, 1 | 0);
      $6_1 = FUNCTION_TABLE[HEAP32[$6_1 >> 2] | 0 | 0](HEAP32[($6_1 + 4 | 0) >> 2] | 0, $1_1, $9_1, $4_1) | 0;
      if (!$6_1) {
       break label$6
      }
     }
     HEAP32[($2_1 + 12 | 0) >> 2] = ($4_1 - $9_1 | 0) + (HEAP32[($2_1 + 12 | 0) >> 2] | 0) | 0;
     $8_1 = $6_1;
    }
    label$8 : {
     if (!$4_1) {
      break label$8
     }
     if (!$8_1) {
      break label$1
     }
    }
    HEAP32[$3_1 >> 2] = $5_1;
   }
   global$0 = $7_1 + 16 | 0;
   return $8_1 | 0;
  }
  $197($0_1 | 0, 4 | 0);
  abort();
 }
 
 function $281($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0;
  $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $5_1 = FUNCTION_TABLE[HEAP32[$4_1 >> 2] | 0 | 0](HEAP32[($4_1 + 4 | 0) >> 2] | 0, $1_1, $2_1, $3_1) | 0;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    if ($5_1) {
     break label$2
    }
    $6_1 = 0;
    if ($3_1 >>> 0 <= $2_1 >>> 0) {
     break label$1
    }
    $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ((HEAPU8[($5_1 + 64 | 0) >> 0] | 0) & 15 | 0) {
     break label$1
    }
    $251($0_1 | 0, 1 | 0);
    $5_1 = FUNCTION_TABLE[HEAP32[$5_1 >> 2] | 0 | 0](HEAP32[($5_1 + 4 | 0) >> 2] | 0, $1_1, $2_1, $3_1) | 0;
    if (!$5_1) {
     break label$1
    }
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = ($3_1 - $2_1 | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0;
   $6_1 = $5_1;
  }
  label$3 : {
   if (!$3_1) {
    break label$3
   }
   if ($6_1) {
    break label$3
   }
   $197($0_1 | 0, 4 | 0);
   abort();
  }
  return $6_1 | 0;
 }
 
 function $282($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0;
  $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $6_1 = Math_imul(HEAP32[$2_1 >> 2] | 0, $4_1);
  $4_1 = Math_imul($4_1, $3_1);
  $7_1 = FUNCTION_TABLE[HEAP32[$5_1 >> 2] | 0 | 0](HEAP32[($5_1 + 4 | 0) >> 2] | 0, $1_1, $6_1, $4_1) | 0;
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    if ($7_1) {
     break label$2
    }
    $8_1 = 0;
    if ($4_1 >>> 0 <= $6_1 >>> 0) {
     break label$1
    }
    $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ((HEAPU8[($7_1 + 64 | 0) >> 0] | 0) & 15 | 0) {
     break label$1
    }
    $251($0_1 | 0, 1 | 0);
    $7_1 = FUNCTION_TABLE[HEAP32[$7_1 >> 2] | 0 | 0](HEAP32[($7_1 + 4 | 0) >> 2] | 0, $1_1, $6_1, $4_1) | 0;
    if (!$7_1) {
     break label$1
    }
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = ($4_1 - $6_1 | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0;
   $8_1 = $7_1;
  }
  label$3 : {
   if (!$4_1) {
    break label$3
   }
   if ($8_1) {
    break label$3
   }
   $197($0_1 | 0, 4 | 0);
   abort();
  }
  HEAP32[$2_1 >> 2] = $3_1;
  return $8_1 | 0;
 }
 
 function $283($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0, 2948 | 0, 0 | 0);
  abort();
 }
 
 function $284($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[$0_1 >> 2] | 0 | 0](HEAP32[($0_1 + 4 | 0) >> 2] | 0, $1_1, $2_1, 0) | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) - $2_1 | 0;
 }
 
 function $285($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0;
  $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $5_1 = FUNCTION_TABLE[HEAP32[$4_1 >> 2] | 0 | 0](HEAP32[($4_1 + 4 | 0) >> 2] | 0, $1_1, $2_1, $3_1) | 0;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    if ($5_1) {
     break label$2
    }
    $6_1 = 0;
    if ($3_1 >>> 0 <= $2_1 >>> 0) {
     break label$1
    }
    $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ((HEAPU8[($5_1 + 64 | 0) >> 0] | 0) & 15 | 0) {
     break label$1
    }
    $251($0_1 | 0, 1 | 0);
    $5_1 = FUNCTION_TABLE[HEAP32[$5_1 >> 2] | 0 | 0](HEAP32[($5_1 + 4 | 0) >> 2] | 0, $1_1, $2_1, $3_1) | 0;
    if (!$5_1) {
     break label$1
    }
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = ($3_1 - $2_1 | 0) + (HEAP32[($4_1 + 12 | 0) >> 2] | 0) | 0;
   $6_1 = $5_1;
  }
  return $6_1 | 0;
 }
 
 function $286($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   label$3 : {
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    $4_1 = FUNCTION_TABLE[HEAP32[$3_1 >> 2] | 0 | 0](HEAP32[($3_1 + 4 | 0) >> 2] | 0, 0, $2_1, $1_1) | 0;
    if ($4_1) {
     break label$3
    }
    $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ((HEAPU8[($4_1 + 64 | 0) >> 0] | 0) & 15 | 0) {
     break label$2
    }
    $251($0_1 | 0, 1 | 0);
    $4_1 = FUNCTION_TABLE[HEAP32[$4_1 >> 2] | 0 | 0](HEAP32[($4_1 + 4 | 0) >> 2] | 0, 0, $2_1, $1_1) | 0;
    if (!$4_1) {
     break label$2
    }
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + $1_1 | 0;
   return $4_1 | 0;
  }
  $197($0_1 | 0, 4 | 0);
  abort();
 }
 
 function $287($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : {
    $0_1 = $0_1 + -1 | 0;
    if ($0_1 >>> 0 >= 256 >>> 0) {
     break label$2
    }
    $2_1 = $0_1;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + 8 | 0;
    $3_1 = $0_1 >>> 0 > 65535 >>> 0;
    $2_1 = $0_1 >>> 8 | 0;
    $0_1 = $2_1;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
  }
  return $1_1 + (HEAPU8[($2_1 + 2992 | 0) >> 0] | 0) | 0 | 0;
 }
 
 function $288($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $9_1 = 0.0, $11_1 = 0.0, $10_1 = 0.0, $8_1 = 0, $8$hi = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $32_1 = 0, $54$hi = 0, $20_1 = 0, $97_1 = 0, $97$hi = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 13 >>> 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $6_1 = 1 << $1_1 | 0;
         if ($6_1 & 12160 | 0) {
          break label$7
         }
         if (!($6_1 & 48 | 0)) {
          break label$3
         }
         $6_1 = 0;
         switch ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
         case 0:
          break label$5;
         case 16:
          break label$6;
         default:
          break label$1;
         };
        }
        label$8 : {
         label$9 : {
          if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
           break label$9
          }
          i64toi32_i32$2 = $2_1;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $32_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $5_1;
          HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $32_1;
          HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
          break label$8;
         }
         $6_1 = 0;
         if (!($459($2_1 | 0, $5_1 + 8 | 0 | 0, 0 | 0) | 0)) {
          break label$1
         }
        }
        label$10 : {
         label$11 : {
          if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
           break label$11
          }
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $8_1 = i64toi32_i32$1;
          $8$hi = i64toi32_i32$0;
          i64toi32_i32$1 = $5_1;
          HEAP32[i64toi32_i32$1 >> 2] = $8_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          break label$10;
         }
         $6_1 = 0;
         if (!($459($3_1 | 0, $5_1 | 0, 0 | 0) | 0)) {
          break label$1
         }
         i64toi32_i32$2 = $5_1;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $8_1 = i64toi32_i32$0;
         $8$hi = i64toi32_i32$1;
        }
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
        $54$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $8$hi;
        i64toi32_i32$0 = $54$hi;
        $20_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$1 = $289($0_1 | 0, $1_1 | 0, $20_1 | 0, i64toi32_i32$0 | 0, $8_1 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$1;
        $8$hi = i64toi32_i32$0;
        HEAP8[($4_1 + 8 | 0) >> 0] = 3;
        i64toi32_i32$1 = $4_1;
        HEAP32[i64toi32_i32$1 >> 2] = $8_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        break label$2;
       }
       $9_1 = +HEAPF64[$2_1 >> 3];
       break label$4;
      }
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = 0;
      $9_1 = +(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0);
     }
     label$12 : {
      label$13 : {
       switch ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
       case 16:
        $10_1 = +HEAPF64[$3_1 >> 3];
        break label$12;
       case 0:
        break label$13;
       default:
        break label$1;
       };
      }
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = 0;
      $10_1 = +(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0);
     }
     $11_1 = 0.0;
     label$15 : {
      label$16 : {
       switch ($1_1 + -4 | 0 | 0) {
       case 1:
        $11_1 = $9_1 / $10_1;
        break label$15;
       case 0:
        break label$16;
       default:
        break label$15;
       };
      }
      $11_1 = +$777(+$9_1, +$10_1);
     }
     HEAP8[($4_1 + 8 | 0) >> 0] = 19;
     HEAPF64[$4_1 >> 3] = $11_1;
     break label$2;
    }
    $6_1 = 0;
    label$18 : {
     label$19 : {
      label$20 : {
       switch ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
       case 0:
        i64toi32_i32$2 = $2_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        $7_1 = HEAPU8[($3_1 + 8 | 0) >> 0] | 0;
        if (($7_1 | 0) != (3 | 0)) {
         break label$19
        }
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $97_1 = i64toi32_i32$1;
        $97$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $8$hi;
        i64toi32_i32$1 = $97$hi;
        i64toi32_i32$1 = $289($0_1 | 0, $1_1 | 0, $8_1 | 0, i64toi32_i32$0 | 0, $97_1 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$1;
        $8$hi = i64toi32_i32$0;
        HEAP8[($4_1 + 8 | 0) >> 0] = 3;
        i64toi32_i32$1 = $4_1;
        HEAP32[i64toi32_i32$1 >> 2] = $8_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        break label$2;
       case 16:
        break label$20;
       default:
        break label$1;
       };
      }
      $7_1 = HEAPU8[($3_1 + 8 | 0) >> 0] | 0;
      $9_1 = +HEAPF64[$2_1 >> 3];
      break label$18;
     }
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$1 = $8_1;
     i64toi32_i32$2 = 0;
     $9_1 = +(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0);
    }
    label$22 : {
     label$23 : {
      switch (($7_1 & 255 | 0) + -3 | 0 | 0) {
      case 16:
       $10_1 = +HEAPF64[$3_1 >> 3];
       break label$22;
      case 0:
       break label$23;
      default:
       break label$1;
      };
     }
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     i64toi32_i32$2 = 0;
     $10_1 = +(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0);
    }
    $11_1 = 0.0;
    label$25 : {
     label$26 : {
      switch ($1_1 | 0) {
      case 0:
       $11_1 = $9_1 + $10_1;
       break label$25;
      case 1:
       $11_1 = $9_1 - $10_1;
       break label$25;
      case 2:
       $11_1 = $9_1 * $10_1;
       break label$25;
      case 5:
       $11_1 = $9_1 / $10_1;
       break label$25;
      case 4:
       $11_1 = +$777(+$9_1, +$10_1);
       break label$25;
      case 6:
       $11_1 = Math_floor($9_1 / $10_1);
       break label$25;
      case 12:
       $11_1 = -$9_1;
       break label$25;
      case 3:
       break label$26;
      default:
       break label$25;
      };
     }
     $11_1 = +$470($0_1 | 0, +$9_1, +$10_1);
    }
    HEAP8[($4_1 + 8 | 0) >> 0] = 19;
    HEAPF64[$4_1 >> 3] = $11_1;
   }
   $6_1 = 1;
  }
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $289($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$6 = 0, $4_1 = 0, $4$hi = 0, $37$hi = 0;
  i64toi32_i32$0 = 0;
  $4_1 = 0;
  $4$hi = i64toi32_i32$0;
  label$1 : {
   switch ($1_1 | 0) {
   case 0:
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$4 = $3_1 + $2_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + $2$hi | 0;
    if (i64toi32_i32$4 >>> 0 < $2_1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$4 | 0;
   case 1:
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0 - $3_1 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < $3_1 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + $3$hi | 0;
    i64toi32_i32$4 = $2$hi - i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
    return i64toi32_i32$0 | 0;
   case 2:
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, $2$hi | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$4 | 0;
   case 3:
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $469($0_1 | 0, $2_1 | 0, $2$hi | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
    return i64toi32_i32$0 | 0;
   case 6:
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $468($0_1 | 0, $2_1 | 0, $2$hi | 0, $3_1 | 0, $3$hi | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$4 | 0;
   case 7:
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $3$hi & $2$hi | 0;
    i64toi32_i32$2 = $3_1 & $2_1 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$2 | 0;
   case 8:
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $3$hi | $2$hi | 0;
    i64toi32_i32$4 = i64toi32_i32$4 | $2_1 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$4 | 0;
   case 9:
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $3$hi ^ $2$hi | 0;
    i64toi32_i32$2 = $3_1 ^ $2_1 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$2 | 0;
   case 10:
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $471($2_1 | 0, $2$hi | 0, $3_1 | 0, $3$hi | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
    return i64toi32_i32$0 | 0;
   case 11:
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = i64toi32_i32$4 - $3_1 | 0;
    i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < $3_1 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + $3$hi | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $37$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$4 = $37$hi;
    i64toi32_i32$4 = $471($2_1 | 0, $2$hi | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
    return i64toi32_i32$4 | 0;
   case 12:
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = i64toi32_i32$0 - $2_1 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < $2_1 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + $2$hi | 0;
    i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$0 | 0;
   case 13:
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$5 = -1;
    i64toi32_i32$5 = $2$hi ^ i64toi32_i32$5 | 0;
    $4_1 = $2_1 ^ -1 | 0;
    $4$hi = i64toi32_i32$5;
    break;
   default:
    break label$1;
   };
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$4 = $4_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$4 | 0;
 }
 
 function $290($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if ($288($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0) {
    break label$1
   }
   $445($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $1_1 + 6 | 0 | 0);
  }
 }
 
 function $291($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAPU8[($0_1 + 1169 | 0) >> 0] | 0) & 2 | 0 ? $0_1 + -48 | 0 : ($0_1 | 32 | 0) + -87 | 0) | 0;
 }
 
 function $292($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $2_1 = 0, $10$hi = 0, $10_1 = 0, $9_1 = 0, $8_1 = 0, $7_1 = 0, $27_1 = 0, $11_1 = 0.0, $47$hi = 0, $61_1 = 0, $61$hi = 0, $91_1 = 0, $91$hi = 0, $93$hi = 0, $125$hi = 0, $127_1 = 0;
  $2_1 = global$0 - 208 | 0;
  global$0 = $2_1;
  $3_1 = $0_1;
  label$1 : while (1) {
   $4_1 = $3_1;
   $3_1 = $3_1 + 1 | 0;
   $5_1 = HEAPU8[$4_1 >> 0] | 0;
   if ((HEAPU8[($5_1 + 1169 | 0) >> 0] | 0) & 8 | 0) {
    continue label$1
   }
   break label$1;
  };
  $6_1 = 7;
  $7_1 = 1;
  label$2 : {
   switch ($5_1 + -43 | 0 | 0) {
   case 2:
    $6_1 = 8;
    $7_1 = 0;
   case 0:
    $4_1 = $3_1;
    break;
   default:
    break label$2;
   };
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $3_1 = HEAPU8[$4_1 >> 0] | 0;
       if (($3_1 | 0) != (48 | 0)) {
        break label$9
       }
       if ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
        break label$9
       }
       $6_1 = $4_1 + 2 | 0;
       i64toi32_i32$0 = 0;
       $10_1 = 0;
       $10$hi = i64toi32_i32$0;
       $8_1 = 0;
       label$10 : {
        $3_1 = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
        $9_1 = HEAPU8[($3_1 + 1169 | 0) >> 0] | 0;
        if ($9_1 & 16 | 0) {
         break label$10
        }
        $5_1 = $6_1;
        break label$8;
       }
       label$11 : while (1) {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$2 = $10_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 4;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $27_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
         $27_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        $47$hi = i64toi32_i32$1;
        $4_1 = ($3_1 << 24 | 0) >> 24 | 0;
        i64toi32_i32$2 = (HEAPU8[($4_1 + 1169 | 0) >> 0] | 0) & 2 | 0 ? $4_1 + -48 | 0 : ($4_1 | 32 | 0) + -87 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
        $61_1 = i64toi32_i32$2;
        $61$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $47$hi;
        i64toi32_i32$0 = $27_1;
        i64toi32_i32$2 = $61$hi;
        i64toi32_i32$3 = $61_1;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $10_1 = i64toi32_i32$4;
        $10$hi = i64toi32_i32$5;
        $8_1 = 1;
        $3_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
        $5_1 = $6_1 + 1 | 0;
        $6_1 = $5_1;
        $9_1 = HEAPU8[($3_1 + 1169 | 0) >> 0] | 0;
        if ($9_1 & 16 | 0) {
         continue label$11
        }
        break label$8;
       };
      }
      i64toi32_i32$5 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$5;
      $8_1 = 0;
      label$12 : {
       $9_1 = HEAPU8[($3_1 + 1169 | 0) >> 0] | 0;
       if ($9_1 & 2 | 0) {
        break label$12
       }
       $5_1 = $4_1;
       break label$8;
      }
      label$13 : while (1) {
       $3_1 = (($3_1 << 24 | 0) >> 24 | 0) + -48 | 0;
       label$14 : {
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$1 = $10_1;
        i64toi32_i32$0 = 214748364;
        i64toi32_i32$3 = -858993460;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$14
        }
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$3 = $10_1;
        i64toi32_i32$5 = 214748364;
        i64toi32_i32$0 = -858993460;
        if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
         break label$7
        }
        if (($3_1 | 0) > ($6_1 | 0)) {
         break label$7
        }
       }
       $8_1 = 1;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$1 = 0;
       i64toi32_i32$1 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $91_1 = i64toi32_i32$1;
       $91$hi = i64toi32_i32$3;
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$3 = $3_1 >> 31 | 0;
       $93$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $91$hi;
       i64toi32_i32$0 = $91_1;
       i64toi32_i32$1 = $93$hi;
       i64toi32_i32$5 = $3_1;
       i64toi32_i32$2 = i64toi32_i32$0 + $3_1 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < $3_1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       $3_1 = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
       $5_1 = $4_1 + 1 | 0;
       $4_1 = $5_1;
       $9_1 = HEAPU8[($3_1 + 1169 | 0) >> 0] | 0;
       if ($9_1 & 2 | 0) {
        continue label$13
       }
       break label$13;
      };
     }
     label$15 : {
      label$16 : {
       if ($9_1 & 8 | 0) {
        break label$16
       }
       $4_1 = $5_1;
       break label$15;
      }
      label$17 : while (1) {
       $3_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
       $4_1 = $5_1 + 1 | 0;
       $5_1 = $4_1;
       if ((HEAPU8[($3_1 + 1169 | 0) >> 0] | 0) & 8 | 0) {
        continue label$17
       }
       break label$17;
      };
     }
     if ($8_1 ^ 1 | 0 | ($3_1 | 0) != (0 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     i64toi32_i32$2 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
     $125$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $125$hi;
     i64toi32_i32$5 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$3;
     $127_1 = i64toi32_i32$5;
     i64toi32_i32$5 = $1_1;
     HEAP32[i64toi32_i32$5 >> 2] = $127_1;
     HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$4;
     $3_1 = 3;
     break label$6;
    }
    label$18 : {
     $4_1 = $873($0_1 | 0, 3318 | 0) | 0;
     if (!$4_1) {
      break label$18
     }
     $5_1 = 0;
     if (((HEAPU8[$4_1 >> 0] | 0) & 223 | 0 | 0) == (78 | 0)) {
      break label$5
     }
    }
    $11_1 = +$863($0_1 | 0, $2_1 | 0);
    label$19 : {
     label$20 : {
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      if (($3_1 | 0) == ($0_1 | 0)) {
       break label$20
      }
      label$21 : {
       label$22 : {
        $5_1 = HEAPU8[$3_1 >> 0] | 0;
        if ((HEAPU8[($5_1 + 1169 | 0) >> 0] | 0) & 8 | 0) {
         break label$22
        }
        $4_1 = $3_1;
        break label$21;
       }
       label$23 : while (1) {
        $5_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
        $4_1 = $3_1 + 1 | 0;
        $3_1 = $4_1;
        if ((HEAPU8[($5_1 + 1169 | 0) >> 0] | 0) & 8 | 0) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$2_1 >> 2] = $4_1;
      }
      if (!$5_1) {
       break label$19
      }
     }
     $4_1 = $865($0_1 | 0, 46 | 0) | 0;
     $3_1 = $961($0_1 | 0) | 0;
     label$24 : {
      label$25 : {
       if (!$4_1) {
        break label$25
       }
       if ($3_1 >>> 0 < 201 >>> 0) {
        break label$24
       }
      }
      $5_1 = 0;
      break label$5;
     }
     $3_1 = $878($2_1 | 0, $0_1 | 0) | 0;
     HEAP8[($2_1 + ($4_1 - $0_1 | 0) | 0) >> 0] = HEAPU8[(HEAP32[($752() | 0) >> 2] | 0) >> 0] | 0;
     $11_1 = +$863($3_1 | 0, $2_1 + 204 | 0 | 0);
     $5_1 = 0;
     $6_1 = 0;
     label$26 : {
      $4_1 = HEAP32[($2_1 + 204 | 0) >> 2] | 0;
      if (($3_1 | 0) == ($4_1 | 0)) {
       break label$26
      }
      label$27 : {
       label$28 : {
        $3_1 = HEAPU8[$4_1 >> 0] | 0;
        if ((HEAPU8[($3_1 + 1169 | 0) >> 0] | 0) & 8 | 0) {
         break label$28
        }
        $6_1 = $4_1;
        break label$27;
       }
       label$29 : while (1) {
        $3_1 = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
        $6_1 = $4_1 + 1 | 0;
        $4_1 = $6_1;
        if ((HEAPU8[($3_1 + 1169 | 0) >> 0] | 0) & 8 | 0) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[($2_1 + 204 | 0) >> 2] = $6_1;
      }
      $6_1 = $3_1 ? 0 : $6_1;
     }
     if (!$0_1) {
      break label$5
     }
     if (!$6_1) {
      break label$5
     }
     $4_1 = $0_1 + ($6_1 - $2_1 | 0) | 0;
    }
    HEAPF64[$1_1 >> 3] = $11_1;
    $3_1 = 19;
   }
   HEAP8[($1_1 + 8 | 0) >> 0] = $3_1;
   $5_1 = ($4_1 - $0_1 | 0) + 1 | 0;
  }
  global$0 = $2_1 + 208 | 0;
  return $5_1 | 0;
 }
 
 function $293($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $2_1 = 1;
  $3_1 = 7;
  label$1 : {
   if ($1_1 >>> 0 < 128 >>> 0) {
    break label$1
   }
   $4_1 = 63;
   label$2 : while (1) {
    $3_1 = $2_1;
    HEAP8[(($0_1 - $3_1 | 0) + 8 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
    $2_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 >>> 6 | 0;
    $4_1 = $4_1 >>> 1 | 0;
    if ($1_1 >>> 0 > $4_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
   $3_1 = 7 - $3_1 | 0;
   $1_1 = ($4_1 ^ -1 | 0) << 1 | 0 | $1_1 | 0;
  }
  HEAP8[($0_1 + $3_1 | 0) >> 0] = $1_1;
  return $2_1 | 0;
 }
 
 function $294($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
     break label$2
    }
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $3_1 = $832($2_1 + 32 | 0 | 0, 50 | 0, 3324 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   HEAPF64[($2_1 + 16 | 0) >> 3] = +HEAPF64[$1_1 >> 3];
   $3_1 = $832($2_1 + 32 | 0 | 0, 50 | 0, 3329 | 0, $2_1 + 16 | 0 | 0) | 0;
   if (HEAPU8[(($2_1 + 32 | 0) + ($866($2_1 + 32 | 0 | 0, 3335 | 0) | 0) | 0) >> 0] | 0) {
    break label$1
   }
   $4_1 = HEAPU8[(HEAP32[($752() | 0) >> 2] | 0) >> 0] | 0;
   $5_1 = ($2_1 + 32 | 0) + $3_1 | 0;
   HEAP8[($5_1 + 1 | 0) >> 0] = 48;
   HEAP8[$5_1 >> 0] = $4_1;
   $3_1 = $3_1 + 2 | 0;
  }
  $3_1 = $417($0_1 | 0, $2_1 + 32 | 0 | 0, $3_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = $3_1;
  HEAP8[($1_1 + 8 | 0) >> 0] = HEAPU8[($3_1 + 4 | 0) >> 0] | 0 | 64 | 0;
  global$0 = $2_1 + 96 | 0;
 }
 
 function $295($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $11_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0.0;
  $3_1 = global$0 - 464 | 0;
  global$0 = $3_1;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 52 | 0) >> 2] = 0;
  HEAP32[($3_1 + 56 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 48 | 0) >> 2] = $0_1;
  label$1 : {
   $4_1 = $865($1_1 | 0, 37 | 0) | 0;
   if (!$4_1) {
    break label$1
   }
   $5_1 = ($3_1 + 32 | 0) + 8 | 0;
   $6_1 = ($3_1 + 48 | 0) + 12 | 0;
   label$2 : while (1) {
    $296($3_1 + 48 | 0 | 0, $1_1 | 0, $4_1 - $1_1 | 0 | 0);
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                label$15 : {
                 $1_1 = HEAP8[($4_1 + 1 | 0) >> 0] | 0;
                 switch ($1_1 + -37 | 0 | 0) {
                 case 48:
                  break label$10;
                 case 75:
                  break label$11;
                 case 65:
                  break label$12;
                 case 36:
                  break label$13;
                 case 63:
                  break label$14;
                 case 62:
                  break label$15;
                 case 78:
                  break label$7;
                 case 0:
                  break label$9;
                 default:
                  break label$8;
                 };
                }
                $7_1 = HEAP32[$2_1 >> 2] | 0;
                label$16 : {
                 $1_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
                 if (($1_1 | 0) < (400 | 0)) {
                  break label$16
                 }
                 $8_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
                 $9_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
                 $1_1 = $417($8_1 | 0, $6_1 | 0, $1_1 | 0) | 0;
                 HEAP32[$9_1 >> 2] = $1_1;
                 HEAP8[($9_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
                 $9_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
                 HEAP32[($8_1 + 12 | 0) >> 2] = $9_1 + 16 | 0;
                 $1_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
                 $10_1 = $1_1 + 1 | 0;
                 HEAP32[($3_1 + 52 | 0) >> 2] = $10_1;
                 label$17 : {
                  if (($1_1 | 0) < (1 | 0)) {
                   break label$17
                  }
                  if (($9_1 + 32 | 0) >>> 0 < (HEAP32[($8_1 + 28 | 0) >> 2] | 0) >>> 0) {
                   break label$17
                  }
                  $466($8_1 | 0, $10_1 | 0);
                  HEAP32[($3_1 + 52 | 0) >> 2] = 1;
                 }
                 $1_1 = 0;
                 HEAP32[($3_1 + 56 | 0) >> 2] = 0;
                }
                $2_1 = $2_1 + 4 | 0;
                HEAP8[((($3_1 + 48 | 0) + $1_1 | 0) + 12 | 0) >> 0] = $7_1;
                HEAP32[($3_1 + 56 | 0) >> 2] = (HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 1 | 0;
                break label$3;
               }
               i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
               i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
               $11_1 = i64toi32_i32$0;
               HEAP8[($3_1 + 40 | 0) >> 0] = 3;
               i64toi32_i32$0 = $3_1;
               HEAP32[($3_1 + 32 | 0) >> 2] = $11_1;
               HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$1;
               $2_1 = $2_1 + 4 | 0;
               $297($3_1 + 48 | 0 | 0, $3_1 + 32 | 0 | 0);
               break label$3;
              }
              $1_1 = ($2_1 + 7 | 0) & -8 | 0;
              i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
              $11_1 = i64toi32_i32$1;
              HEAP8[($3_1 + 40 | 0) >> 0] = 3;
              i64toi32_i32$1 = $3_1;
              HEAP32[($3_1 + 32 | 0) >> 2] = $11_1;
              HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$0;
              $2_1 = $1_1 + 8 | 0;
              $297($3_1 + 48 | 0 | 0, $3_1 + 32 | 0 | 0);
              break label$3;
             }
             $1_1 = ($2_1 + 7 | 0) & -8 | 0;
             $12_1 = +HEAPF64[$1_1 >> 3];
             HEAP8[($3_1 + 40 | 0) >> 0] = 19;
             HEAPF64[($3_1 + 32 | 0) >> 3] = $12_1;
             $2_1 = $1_1 + 8 | 0;
             $297($3_1 + 48 | 0 | 0, $3_1 + 32 | 0 | 0);
             break label$3;
            }
            label$18 : {
             $1_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
             if (($1_1 | 0) < (381 | 0)) {
              break label$18
             }
             $8_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
             $7_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
             $1_1 = $417($8_1 | 0, $6_1 | 0, $1_1 | 0) | 0;
             HEAP32[$7_1 >> 2] = $1_1;
             HEAP8[($7_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
             $7_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
             HEAP32[($8_1 + 12 | 0) >> 2] = $7_1 + 16 | 0;
             $1_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
             $9_1 = $1_1 + 1 | 0;
             HEAP32[($3_1 + 52 | 0) >> 2] = $9_1;
             label$19 : {
              if (($1_1 | 0) < (1 | 0)) {
               break label$19
              }
              if (($7_1 + 32 | 0) >>> 0 < (HEAP32[($8_1 + 28 | 0) >> 2] | 0) >>> 0) {
               break label$19
              }
              $466($8_1 | 0, $9_1 | 0);
              HEAP32[($3_1 + 52 | 0) >> 2] = 1;
             }
             $1_1 = 0;
             HEAP32[($3_1 + 56 | 0) >> 2] = 0;
            }
            HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
            HEAP32[($3_1 + 56 | 0) >> 2] = ($832((($3_1 + 48 | 0) + $1_1 | 0) + 12 | 0 | 0, 20 | 0, 3255 | 0, $3_1 + 16 | 0 | 0) | 0) + (HEAP32[($3_1 + 56 | 0) >> 2] | 0) | 0;
            break label$6;
           }
           $8_1 = HEAP32[$2_1 >> 2] | 0;
           if ($8_1 >>> 0 <= 127 >>> 0) {
            break label$5
           }
           $7_1 = 63;
           $1_1 = 1;
           label$20 : while (1) {
            $9_1 = ($3_1 + 32 | 0) - $1_1 | 0;
            HEAP8[($9_1 + 8 | 0) >> 0] = $8_1 & 63 | 0 | 128 | 0;
            $1_1 = $1_1 + 1 | 0;
            $8_1 = $8_1 >>> 6 | 0;
            $7_1 = $7_1 >>> 1 | 0;
            if ($8_1 >>> 0 > $7_1 >>> 0) {
             continue label$20
            }
            break label$20;
           };
           HEAP8[($9_1 + 7 | 0) >> 0] = ($7_1 ^ -1 | 0) << 1 | 0 | $8_1 | 0;
           break label$4;
          }
          label$21 : {
           $1_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
           if (($1_1 | 0) < (400 | 0)) {
            break label$21
           }
           $8_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
           $7_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
           $1_1 = $417($8_1 | 0, $6_1 | 0, $1_1 | 0) | 0;
           HEAP32[$7_1 >> 2] = $1_1;
           HEAP8[($7_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 64 | 0;
           $7_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
           HEAP32[($8_1 + 12 | 0) >> 2] = $7_1 + 16 | 0;
           $1_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
           $9_1 = $1_1 + 1 | 0;
           HEAP32[($3_1 + 52 | 0) >> 2] = $9_1;
           label$22 : {
            if (($1_1 | 0) < (1 | 0)) {
             break label$22
            }
            if (($7_1 + 32 | 0) >>> 0 < (HEAP32[($8_1 + 28 | 0) >> 2] | 0) >>> 0) {
             break label$22
            }
            $466($8_1 | 0, $9_1 | 0);
            HEAP32[($3_1 + 52 | 0) >> 2] = 1;
           }
           $1_1 = 0;
           HEAP32[($3_1 + 56 | 0) >> 2] = 0;
          }
          HEAP8[((($3_1 + 48 | 0) + $1_1 | 0) + 12 | 0) >> 0] = 37;
          HEAP32[($3_1 + 56 | 0) >> 2] = (HEAP32[($3_1 + 56 | 0) >> 2] | 0) + 1 | 0;
          break label$3;
         }
         HEAP32[$3_1 >> 2] = $1_1;
         $187($0_1 | 0, 3258 | 0, $3_1 | 0);
         abort();
        }
        $1_1 = HEAP32[$2_1 >> 2] | 0;
        $1_1 = $1_1 ? $1_1 : 3248;
        $296($3_1 + 48 | 0 | 0, $1_1 | 0, $961($1_1 | 0) | 0 | 0);
       }
       $2_1 = $2_1 + 4 | 0;
       break label$3;
      }
      HEAP8[($3_1 + 39 | 0) >> 0] = $8_1;
      $1_1 = 1;
     }
     $2_1 = $2_1 + 4 | 0;
     $296($3_1 + 48 | 0 | 0, $5_1 - $1_1 | 0 | 0, $1_1 | 0);
    }
    $1_1 = $4_1 + 2 | 0;
    $4_1 = $865($1_1 | 0, 37 | 0) | 0;
    if ($4_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $296($3_1 + 48 | 0 | 0, $1_1 | 0, $961($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
  $8_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $7_1 = $417($1_1 | 0, $3_1 + 60 | 0 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$8_1 >> 2] = $7_1;
  HEAP8[($8_1 + 8 | 0) >> 0] = HEAPU8[($7_1 + 4 | 0) >> 0] | 0 | 64 | 0;
  $7_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $7_1 + 16 | 0;
  $8_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
  $4_1 = $8_1 + 1 | 0;
  HEAP32[($3_1 + 52 | 0) >> 2] = $4_1;
  label$23 : {
   label$24 : {
    label$25 : {
     if (($8_1 | 0) < (1 | 0)) {
      break label$25
     }
     if (($7_1 + 32 | 0) >>> 0 < (HEAP32[($1_1 + 28 | 0) >> 2] | 0) >>> 0) {
      break label$24
     }
     $466($1_1 | 0, $4_1 | 0);
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = 0;
     HEAP32[($3_1 + 52 | 0) >> 2] = 1;
     HEAP32[($3_1 + 56 | 0) >> 2] = i64toi32_i32$0;
     break label$23;
    }
    HEAP32[($3_1 + 56 | 0) >> 2] = 0;
    break label$23;
   }
   HEAP32[($3_1 + 56 | 0) >> 2] = 0;
   $466($0_1 | 0, $4_1 | 0);
  }
  $1_1 = HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0) >> 2] | 0;
  global$0 = $3_1 + 464 | 0;
  return $1_1 + 16 | 0 | 0;
 }
 
 function $296($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 > 400 >>> 0) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if ((400 - $3_1 | 0 | 0) >= ($2_1 | 0)) {
     break label$2
    }
    $4_1 = HEAP32[$0_1 >> 2] | 0;
    $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    $3_1 = $417($4_1 | 0, $0_1 + 12 | 0 | 0, $3_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $3_1;
    HEAP8[($5_1 + 8 | 0) >> 0] = HEAPU8[($3_1 + 4 | 0) >> 0] | 0 | 64 | 0;
    $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $5_1 + 16 | 0;
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $6_1 = $3_1 + 1 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
    label$3 : {
     if (($3_1 | 0) < (1 | 0)) {
      break label$3
     }
     if (($5_1 + 32 | 0) >>> 0 < (HEAP32[($4_1 + 28 | 0) >> 2] | 0) >>> 0) {
      break label$3
     }
     $466($4_1 | 0, $6_1 | 0);
     HEAP32[($0_1 + 4 | 0) >> 2] = 1;
    }
    $3_1 = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = 0;
   }
   $951(($0_1 + $3_1 | 0) + 12 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $2_1 | 0;
   return;
  }
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $5_1 = $417($3_1 | 0, $0_1 + 12 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = $5_1;
  HEAP8[($4_1 + 8 | 0) >> 0] = HEAPU8[($5_1 + 4 | 0) >> 0] | 0 | 64 | 0;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $5_1 + 16 | 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $6_1 = $4_1 + 1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
  label$4 : {
   if (($4_1 | 0) < (1 | 0)) {
    break label$4
   }
   if (($5_1 + 32 | 0) >>> 0 < (HEAP32[($3_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$4
   }
   $466($3_1 | 0, $6_1 | 0);
   HEAP32[($0_1 + 4 | 0) >> 2] = 1;
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $2_1 = $417($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP8[($4_1 + 8 | 0) >> 0] = HEAPU8[($2_1 + 4 | 0) >> 0] | 0 | 64 | 0;
  $1_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1 + 16 | 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $4_1 = $2_1 + 1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
  label$5 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$5
   }
   if (($1_1 + 32 | 0) >>> 0 < (HEAP32[($3_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$5
   }
   $466($3_1 | 0, $4_1 | 0);
   HEAP32[($0_1 + 4 | 0) >> 2] = 1;
  }
 }
 
 function $297($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($3_1 | 0) < (351 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[$0_1 >> 2] | 0;
   $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   $3_1 = $417($4_1 | 0, $0_1 + 12 | 0 | 0, $3_1 | 0) | 0;
   HEAP32[$5_1 >> 2] = $3_1;
   HEAP8[($5_1 + 8 | 0) >> 0] = HEAPU8[($3_1 + 4 | 0) >> 0] | 0 | 64 | 0;
   $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = $5_1 + 16 | 0;
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $6_1 = $3_1 + 1 | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
   label$2 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$2
    }
    if (($5_1 + 32 | 0) >>> 0 < (HEAP32[($4_1 + 28 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    $466($4_1 | 0, $6_1 | 0);
    HEAP32[($0_1 + 4 | 0) >> 2] = 1;
   }
   $3_1 = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  }
  $3_1 = ($0_1 + $3_1 | 0) + 12 | 0;
  label$3 : {
   label$4 : {
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
     break label$4
    }
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1_1 = $832($3_1 | 0, 50 | 0, 3324 | 0, $2_1 | 0) | 0;
    break label$3;
   }
   HEAPF64[($2_1 + 16 | 0) >> 3] = +HEAPF64[$1_1 >> 3];
   $1_1 = $832($3_1 | 0, 50 | 0, 3329 | 0, $2_1 + 16 | 0 | 0) | 0;
   if (HEAPU8[($3_1 + ($866($3_1 | 0, 3335 | 0) | 0) | 0) >> 0] | 0) {
    break label$3
   }
   $4_1 = HEAPU8[(HEAP32[($752() | 0) >> 2] | 0) >> 0] | 0;
   $3_1 = $3_1 + $1_1 | 0;
   HEAP8[($3_1 + 1 | 0) >> 0] = 48;
   HEAP8[$3_1 >> 0] = $4_1;
   $1_1 = $1_1 + 2 | 0;
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $1_1 | 0;
  global$0 = $2_1 + 32 | 0;
 }
 
 function $298($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $295($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $299($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $43_1 = 0, $3_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $17_1 = 0, $27_1 = 0, $32_1 = 0, $37_1 = 0, $42_1 = 0, $47_1 = 0, $52_1 = 0, $73_1 = 0, $82_1 = 0, $87_1 = 0, $92_1 = 0, $97_1 = 0, $102_1 = 0, $107_1 = 0, $114_1 = 0;
  label$1 : {
   switch ((HEAPU8[$1_1 >> 0] | 0) + -61 | 0 | 0) {
   case 0:
    $1_1 = $1_1 + 1 | 0;
    label$4 : {
     if ($2_1 >>> 0 > 60 >>> 0) {
      break label$4
     }
     $951($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
     return;
    }
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $17_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    $22_1 = $17_1;
    HEAP8[i64toi32_i32$0 >> 0] = $22_1;
    HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $22_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $22_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $22_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
    HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
    $23_1 = i64toi32_i32$2 + 55 | 0;
    $24_1 = i64toi32_i32$0 + 55 | 0;
    $25_1 = HEAPU8[$23_1 >> 0] | 0 | ((HEAPU8[($23_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($23_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($23_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    HEAP8[$24_1 >> 0] = $25_1;
    HEAP8[($24_1 + 1 | 0) >> 0] = $25_1 >>> 8 | 0;
    HEAP8[($24_1 + 2 | 0) >> 0] = $25_1 >>> 16 | 0;
    HEAP8[($24_1 + 3 | 0) >> 0] = $25_1 >>> 24 | 0;
    i64toi32_i32$2 = i64toi32_i32$2 + 48 | 0;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $27_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 48 | 0;
    $26_1 = $27_1;
    HEAP8[i64toi32_i32$1 >> 0] = $26_1;
    HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $26_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $26_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $26_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
    HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
    i64toi32_i32$2 = $1_1 + 40 | 0;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $32_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 40 | 0;
    $28_1 = $32_1;
    HEAP8[i64toi32_i32$0 >> 0] = $28_1;
    HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $28_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $28_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $28_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
    HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
    i64toi32_i32$2 = $1_1 + 32 | 0;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $37_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 32 | 0;
    $29_1 = $37_1;
    HEAP8[i64toi32_i32$1 >> 0] = $29_1;
    HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $29_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $29_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $29_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
    HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
    i64toi32_i32$2 = $1_1 + 24 | 0;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $42_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 24 | 0;
    $30_1 = $42_1;
    HEAP8[i64toi32_i32$0 >> 0] = $30_1;
    HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $30_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $30_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $30_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
    HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
    i64toi32_i32$2 = $1_1 + 16 | 0;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $47_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 16 | 0;
    $31_1 = $47_1;
    HEAP8[i64toi32_i32$1 >> 0] = $31_1;
    HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $31_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $31_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $31_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
    HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
    i64toi32_i32$2 = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $52_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 8 | 0;
    $33_1 = $52_1;
    HEAP8[i64toi32_i32$0 >> 0] = $33_1;
    HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $33_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $33_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $33_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
    HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
    HEAP8[($0_1 + 59 | 0) >> 0] = 0;
    return;
   case 3:
    label$5 : {
     if ($2_1 >>> 0 > 60 >>> 0) {
      break label$5
     }
     $951($0_1 | 0, $1_1 + 1 | 0 | 0, $2_1 | 0) | 0;
     return;
    }
    HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[(0 + 3303 | 0) >> 0] | 0;
    $44_1 = 0;
    $45_1 = HEAPU8[($44_1 + 3301 | 0) >> 0] | 0 | ((HEAPU8[($44_1 + 3302 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP8[$0_1 >> 0] = $45_1;
    HEAP8[($0_1 + 1 | 0) >> 0] = $45_1 >>> 8 | 0;
    $2_1 = $1_1 + $2_1 | 0;
    $1_1 = $2_1 + -56 | 0;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $73_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    $34_1 = $73_1;
    HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $34_1;
    HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = $34_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = $34_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = $34_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0;
    HEAP8[(i64toi32_i32$1 + 8 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 9 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 10 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
    HEAP8[(i64toi32_i32$1 + 59 | 0) >> 0] = HEAPU8[$2_1 >> 0] | 0;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $82_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 11 | 0;
    $35_1 = $82_1;
    HEAP8[i64toi32_i32$0 >> 0] = $35_1;
    HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $35_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $35_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $35_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
    HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
    i64toi32_i32$2 = $1_1 + 16 | 0;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $87_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 19 | 0;
    $36_1 = $87_1;
    HEAP8[i64toi32_i32$1 >> 0] = $36_1;
    HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $36_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $36_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $36_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
    HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
    i64toi32_i32$2 = $1_1 + 24 | 0;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $92_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 27 | 0;
    $38_1 = $92_1;
    HEAP8[i64toi32_i32$0 >> 0] = $38_1;
    HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $38_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $38_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $38_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
    HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
    i64toi32_i32$2 = $1_1 + 32 | 0;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $97_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 35 | 0;
    $39_1 = $97_1;
    HEAP8[i64toi32_i32$1 >> 0] = $39_1;
    HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $39_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $39_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $39_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
    HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
    i64toi32_i32$2 = $1_1 + 40 | 0;
    i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $102_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 43 | 0;
    $40_1 = $102_1;
    HEAP8[i64toi32_i32$0 >> 0] = $40_1;
    HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $40_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $40_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $40_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
    HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
    i64toi32_i32$2 = $1_1 + 48 | 0;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $107_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 51 | 0;
    $41_1 = $107_1;
    HEAP8[i64toi32_i32$1 >> 0] = $41_1;
    HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $41_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $41_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $41_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
    HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
    return;
   default:
    break label$1;
   };
  }
  $3_1 = $865($1_1 | 0, 10 | 0) | 0;
  HEAP8[($0_1 + 8 | 0) >> 0] = HEAPU8[(0 + 3313 | 0) >> 0] | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 3305 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 3306 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 3307 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3308 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 3309 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 3310 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 3311 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3312 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  $43_1 = $114_1;
  HEAP8[i64toi32_i32$0 >> 0] = $43_1;
  HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $43_1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $43_1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $43_1 >>> 24 | 0;
  HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
  HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
  $0_1 = i64toi32_i32$0 + 9 | 0;
  label$6 : {
   label$7 : {
    if ($2_1 >>> 0 > 44 >>> 0) {
     break label$7
    }
    if ($3_1) {
     break label$7
    }
    $0_1 = ($951($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0) + $2_1 | 0;
    break label$6;
   }
   $2_1 = $3_1 ? $3_1 - $1_1 | 0 : $2_1;
   $2_1 = $2_1 >>> 0 < 45 >>> 0 ? $2_1 : 45;
   $0_1 = ($951($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0) + $2_1 | 0;
   HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[(0 + 3303 | 0) >> 0] | 0;
   $46_1 = 0;
   $48_1 = HEAPU8[($46_1 + 3301 | 0) >> 0] | 0 | ((HEAPU8[($46_1 + 3302 | 0) >> 0] | 0) << 8 | 0) | 0;
   HEAP8[$0_1 >> 0] = $48_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $48_1 >>> 8 | 0;
   $0_1 = $0_1 + 3 | 0;
  }
  HEAP8[($0_1 + 2 | 0) >> 0] = HEAPU8[(0 + 3317 | 0) >> 0] | 0;
  $49_1 = 0;
  $50_1 = HEAPU8[($49_1 + 3315 | 0) >> 0] | 0 | ((HEAPU8[($49_1 + 3316 | 0) >> 0] | 0) << 8 | 0) | 0;
  HEAP8[$0_1 >> 0] = $50_1;
  HEAP8[($0_1 + 1 | 0) >> 0] = $50_1 >>> 8 | 0;
 }
 
 function $300($0_1) {
  $0_1 = $0_1 | 0;
  return $301($0_1 | 0, HEAPU8[($0_1 + 50 | 0) >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $301($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) >= (1 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   $1_1 = $1_1 + -1 | 0;
   $2_1 = $302($0_1 | 0, $1_1 | 0) | 0;
   if ((HEAPU8[($2_1 + 9 | 0) >> 0] | 0 | 0) == (3 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return (HEAPU8[($2_1 + 10 | 0) >> 0] | 0) + 1 | 0 | 0;
 }
 
 function $302($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[(HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) >> 2] | 0) + Math_imul((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $1_1 | 0, 24) | 0 | 0;
 }
 
 function $303($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  $7_1 = $220($0_1 | 0, 1 | 0) | 0;
  $8_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($8_1 + 8 | 0) >> 0] = 70;
  HEAP32[$8_1 >> 2] = $7_1;
  $202($0_1 | 0);
  $8_1 = $431($0_1 | 0) | 0;
  HEAP32[($6_1 + 128 | 0) >> 2] = $8_1;
  $9_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($9_1 + 8 | 0) >> 0] = 69;
  HEAP32[$9_1 >> 2] = $8_1;
  $202($0_1 | 0);
  $8_1 = $230($0_1 | 0) | 0;
  HEAP32[($7_1 + 12 | 0) >> 2] = $8_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $8_1;
  $4_1 = $420($0_1 | 0, $4_1 | 0) | 0;
  HEAP32[($8_1 + 76 | 0) >> 2] = $4_1;
  label$1 : {
   if (!((HEAPU8[($8_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
    break label$1
   }
   if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$1
   }
   $233($0_1 | 0, $8_1 | 0, $4_1 | 0);
   $4_1 = HEAP32[($8_1 + 76 | 0) >> 2] | 0;
  }
  HEAP32[($6_1 + 132 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 124 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  $262($0_1 | 0, $6_1 + 64 | 0 | 0, $1_1 | 0, $4_1 | 0, $5_1 | 0);
  $304($6_1 + 64 | 0 | 0, $6_1 + 8 | 0 | 0);
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
  global$0 = $6_1 + 144 | 0;
  return $7_1 | 0;
 }
 
 function $304($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $305($0_1 | 0, $1_1 | 0, $2_1 | 0);
  $306($1_1 | 0, 0 | 0);
  $1_1 = $307($1_1 | 0) | 0;
  HEAP8[($1_1 + 6 | 0) >> 0] = 0;
  HEAP16[($1_1 + 4 | 0) >> 1] = 1;
  HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
  $263($0_1 | 0);
  $308($0_1 | 0);
  $309($0_1 | 0, 289 | 0);
  $310($0_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $305($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  HEAP32[($1_1 + 16 | 0) >> 2] = 0;
  $4_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
  HEAP32[($1_1 + 36 | 0) >> 2] = 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 0;
  HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
  HEAP32[($1_1 + 48 | 0) >> 2] = 0;
  HEAP32[($1_1 + 28 | 0) >> 2] = 0;
  HEAP32[($1_1 + 32 | 0) >> 2] = 0;
  $5_1 = $1_1 + 51 | 0;
  $6_1 = 0;
  HEAP8[$5_1 >> 0] = $6_1;
  HEAP8[($5_1 + 1 | 0) >> 0] = $6_1 >>> 8 | 0;
  HEAP8[($5_1 + 2 | 0) >> 0] = $6_1 >>> 16 | 0;
  HEAP8[($5_1 + 3 | 0) >> 0] = $6_1 >>> 24 | 0;
  $4_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $4_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAP32[($1_1 + 44 | 0) >> 2] = $4_1;
  $0_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP8[($3_1 + 8 | 0) >> 0] = 2;
  HEAP32[($3_1 + 76 | 0) >> 2] = $0_1;
  $311($1_1 | 0, $2_1 | 0, 0 | 0);
 }
 
 function $306($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[((HEAP32[$0_1 >> 2] | 0) + 7 | 0) >> 0] = 1;
  $83($0_1 | 0, 81 | 0, $1_1 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
 }
 
 function $307($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $312($0_1 | 0, (HEAPU8[($0_1 + 51 | 0) >> 0] | 0) + 1 | 0 | 0, 255 | 0, 3443 | 0);
  $3_1 = $280(HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 60 | 0) >> 2] | 0 | 0, HEAPU8[($0_1 + 51 | 0) >> 0] | 0 | 0, $1_1 + 12 | 0 | 0, 8 | 0, 255 | 0, 3443 | 0) | 0;
  HEAP32[($1_1 + 60 | 0) >> 2] = $3_1;
  label$1 : {
   $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   if (($2_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    HEAP32[($3_1 + ($2_1 << 3 | 0) | 0) >> 2] = 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < ($1_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $2_1 = HEAPU8[($0_1 + 51 | 0) >> 0] | 0;
  HEAP8[($0_1 + 51 | 0) >> 0] = $2_1 + 1 | 0;
  return $3_1 + ($2_1 << 3 | 0) | 0 | 0;
 }
 
 function $308($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ($313($0_1 | 0, 1 | 0) | 0) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    $314($0_1 | 0);
    if (($1_1 | 0) == (274 | 0)) {
     break label$1
    }
    if (!($313($0_1 | 0, 1 | 0) | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $309($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   $315($0_1 | 0, $1_1 | 0);
   abort();
  }
 }
 
 function $310($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $3_1 = HEAP32[$2_1 >> 2] | 0;
  $90($2_1 | 0, $300($2_1 | 0) | 0 | 0, 0 | 0);
  $316($2_1 | 0);
  $172($2_1 | 0);
  HEAP32[($3_1 + 52 | 0) >> 2] = $282($1_1 | 0, HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0, $3_1 + 20 | 0 | 0, HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0, 4 | 0) | 0;
  HEAP32[($3_1 + 64 | 0) >> 2] = $282($1_1 | 0, HEAP32[($3_1 + 64 | 0) >> 2] | 0 | 0, $3_1 + 24 | 0 | 0, HEAP32[($2_1 + 16 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  HEAP32[($3_1 + 68 | 0) >> 2] = $282($1_1 | 0, HEAP32[($3_1 + 68 | 0) >> 2] | 0 | 0, $3_1 + 36 | 0 | 0, HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0, 8 | 0) | 0;
  HEAP32[($3_1 + 48 | 0) >> 2] = $282($1_1 | 0, HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, HEAP32[($2_1 + 28 | 0) >> 2] | 0 | 0, 16 | 0) | 0;
  HEAP32[($3_1 + 56 | 0) >> 2] = $282($1_1 | 0, HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0, $3_1 + 28 | 0 | 0, HEAP32[($2_1 + 32 | 0) >> 2] | 0 | 0, 4 | 0) | 0;
  HEAP32[($3_1 + 72 | 0) >> 2] = $282($1_1 | 0, HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0, $3_1 + 32 | 0 | 0, HEAP16[($2_1 + 48 | 0) >> 1] | 0 | 0, 12 | 0) | 0;
  HEAP32[($3_1 + 60 | 0) >> 2] = $282($1_1 | 0, HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 12 | 0 | 0, HEAPU8[($2_1 + 51 | 0) >> 0] | 0 | 0, 8 | 0) | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[((HEAP32[($1_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $248($1_1 | 0);
  }
 }
 
 function $311($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  HEAP8[($1_1 + 14 | 0) >> 0] = $2_1;
  HEAP8[($1_1 + 12 | 0) >> 0] = HEAPU8[($0_1 + 50 | 0) >> 0] | 0;
  $2_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
  $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
  $2_1 = 0;
  HEAP8[($1_1 + 13 | 0) >> 0] = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $2_1 = (HEAPU8[($3_1 + 15 | 0) >> 0] | 0 | 0) != (0 | 0);
  }
  HEAP32[$1_1 >> 2] = $3_1;
  HEAP8[($1_1 + 15 | 0) >> 0] = $2_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
 }
 
 function $312($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (($1_1 | 0) <= ($2_1 | 0)) {
    break label$1
   }
   $317($0_1 | 0, $2_1 | 0, $3_1 | 0);
   abort();
  }
 }
 
 function $313($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 1;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (($0_1 + -260 | 0) >>> 0 < 3 >>> 0) {
    break label$1
   }
   if (($0_1 | 0) == (289 | 0)) {
    break label$1
   }
   $2_1 = $1_1;
   if (($0_1 | 0) == (277 | 0)) {
    break label$1
   }
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $314($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $399(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                switch ($2_1 + -258 | 0 | 0) {
                case 6:
                 break label$10;
                case 1:
                 break label$11;
                case 20:
                 break label$12;
                case 9:
                 break label$13;
                case 2:
                case 3:
                case 4:
                case 5:
                case 10:
                case 12:
                case 13:
                case 14:
                case 17:
                case 18:
                case 19:
                 break label$2;
                case 8:
                 break label$3;
                case 0:
                 break label$4;
                case 16:
                 break label$5;
                case 11:
                 break label$7;
                case 7:
                 break label$8;
                case 15:
                 break label$9;
                default:
                 break label$14;
                };
               }
               if (($2_1 | 0) == (288 | 0)) {
                break label$6
               }
               if (($2_1 | 0) != (59 | 0)) {
                break label$2
               }
               $263($0_1 | 0);
               break label$1;
              }
              $318($0_1 | 0, $1_1 | 0);
              break label$1;
             }
             $319($0_1 | 0, $1_1 | 0);
             break label$1;
            }
            $263($0_1 | 0);
            $320($0_1 | 0);
            $321($0_1 | 0, 262 | 0, 259 | 0, $1_1 | 0);
            break label$1;
           }
           $322($0_1 | 0, $1_1 | 0);
           break label$1;
          }
          $323($0_1 | 0, $1_1 | 0);
          break label$1;
         }
         $324($0_1 | 0, $1_1 | 0);
         break label$1;
        }
        $263($0_1 | 0);
        label$15 : {
         if (!($325($0_1 | 0, 265 | 0) | 0)) {
          break label$15
         }
         $326($0_1 | 0);
         break label$1;
        }
        $327($0_1 | 0);
        break label$1;
       }
       $263($0_1 | 0);
       $329($0_1 | 0, $328($0_1 | 0) | 0 | 0, $1_1 | 0);
       break label$1;
      }
      $263($0_1 | 0);
      $330($0_1 | 0);
      break label$1;
     }
     $331($0_1 | 0);
     break label$1;
    }
    $263($0_1 | 0);
    $332($0_1 | 0);
    break label$1;
   }
   $333($0_1 | 0);
  }
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = $300($1_1 | 0) | 0;
  $0_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function $315($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  HEAP32[$2_1 >> 2] = $257($0_1 | 0, $1_1 | 0) | 0;
  $258($0_1 | 0, $298($3_1 | 0, 3916 | 0, $2_1 | 0) | 0 | 0);
  abort();
 }
 
 function $316($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $3_1 = $301($0_1 | 0, HEAPU8[($2_1 + 12 | 0) >> 0] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($2_1 + 14 | 0) >> 0] | 0)) {
     break label$2
    }
    if ($349($1_1 | 0, $417(HEAP32[($1_1 + 52 | 0) >> 2] | 0 | 0, 3730 | 0, 5 | 0) | 0 | 0, 0 | 0, 0 | 0) | 0) {
     break label$1
    }
   }
   if (!(HEAP32[$2_1 >> 2] | 0)) {
    break label$1
   }
   if (!(HEAPU8[($2_1 + 13 | 0) >> 0] | 0)) {
    break label$1
   }
   $83($0_1 | 0, 54 | 0, $3_1 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  $358($0_1 | 0, HEAPU8[($2_1 + 12 | 0) >> 0] | 0 | 0);
  HEAP8[($0_1 + 52 | 0) >> 0] = $3_1;
  $3_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if (!(HEAP32[$2_1 >> 2] | 0)) {
     break label$4
    }
    $359($0_1 | 0, $2_1 | 0);
    break label$3;
   }
   $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   if (($2_1 | 0) >= (HEAP32[($3_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$3
   }
   $360($1_1 | 0, (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + ($2_1 << 4 | 0) | 0 | 0);
   abort();
  }
 }
 
 function $317($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0;
  $5_1 = 3452;
  label$1 : {
   $6_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0;
   if (!$6_1) {
    break label$1
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = $6_1;
   $5_1 = $298($4_1 | 0, 3466 | 0, $3_1 + 16 | 0 | 0) | 0;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$3_1 >> 2] = $2_1;
  $3_1 = $298($4_1 | 0, 3486 | 0, $3_1 | 0) | 0;
  $258(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $3_1 | 0);
  abort();
 }
 
 function $318($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = -1;
  $334($0_1 | 0, $2_1 + 12 | 0 | 0);
  label$1 : {
   if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) != (261 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $334($0_1 | 0, $2_1 + 12 | 0 | 0);
    if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) == (261 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   if (!($325($0_1 | 0, 260 | 0) | 0)) {
    break label$3
   }
   $320($0_1 | 0);
  }
  $321($0_1 | 0, 262 | 0, 267 | 0, $1_1 | 0);
  $95($3_1 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $319($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $263($0_1 | 0);
  $4_1 = $91($3_1 | 0) | 0;
  $5_1 = $335($0_1 | 0) | 0;
  $311($3_1 | 0, $2_1 | 0, 1 | 0);
  $336($0_1 | 0, 259 | 0);
  $320($0_1 | 0);
  $92($3_1 | 0, $88($3_1 | 0) | 0 | 0, $4_1 | 0);
  $321($0_1 | 0, 262 | 0, 278 | 0, $1_1 | 0);
  $316($3_1 | 0);
  $95($3_1 | 0, $5_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $320($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $311($2_1 | 0, $1_1 | 0, 0 | 0);
  $308($0_1 | 0);
  $316($2_1 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $321($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if ($325($0_1 | 0, $1_1 | 0) | 0) {
     break label$2
    }
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    $1_1 = $257($0_1 | 0, $1_1 | 0) | 0;
    $2_1 = $257($0_1 | 0, $2_1 | 0) | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = $2_1;
    HEAP32[$4_1 >> 2] = $1_1;
    $258($0_1 | 0, $298($5_1 | 0, 3879 | 0, $4_1 | 0) | 0 | 0);
    abort();
   }
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $315($0_1 | 0, $1_1 | 0);
  abort();
 }
 
 function $322($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $311($3_1 | 0, $2_1 | 0, 1 | 0);
  $263($0_1 | 0);
  $4_1 = $328($0_1 | 0) | 0;
  label$1 : {
   label$2 : {
    $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if (($5_1 | 0) == (44 | 0)) {
     break label$2
    }
    if (($5_1 | 0) == (268 | 0)) {
     break label$2
    }
    label$3 : {
     if (($5_1 | 0) != (61 | 0)) {
      break label$3
     }
     $337($0_1 | 0, $4_1 | 0, $1_1 | 0);
     break label$1;
    }
    $258($0_1 | 0, 3928 | 0);
    abort();
   }
   $338($0_1 | 0, $4_1 | 0);
  }
  $321($0_1 | 0, 262 | 0, 264 | 0, $1_1 | 0);
  $316($3_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $323($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $4_1 = $91($3_1 | 0) | 0;
  $311($3_1 | 0, $2_1 + 16 | 0 | 0, 1 | 0);
  $311($3_1 | 0, $2_1 | 0, 0 | 0);
  $263($0_1 | 0);
  $308($0_1 | 0);
  $321($0_1 | 0, 277 | 0, 273 | 0, $1_1 | 0);
  $0_1 = $335($0_1 | 0) | 0;
  $316($3_1 | 0);
  label$1 : {
   if (!(HEAPU8[($2_1 + 13 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = $88($3_1 | 0) | 0;
   $95($3_1 | 0, $0_1 | 0);
   $83($3_1 | 0, 54 | 0, $301($3_1 | 0, HEAPU8[($2_1 + 12 | 0) >> 0] | 0 | 0) | 0 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
   $0_1 = $88($3_1 | 0) | 0;
   $95($3_1 | 0, $1_1 | 0);
  }
  $92($3_1 | 0, $0_1 | 0, $4_1 | 0);
  $316($3_1 | 0);
  global$0 = $2_1 + 32 | 0;
 }
 
 function $324($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $263($0_1 | 0);
  $340($0_1 | 0, $2_1 | 0, $339($0_1 | 0, $2_1 + 24 | 0 | 0) | 0 | 0, $1_1 | 0);
  $129(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 | 0);
  $150(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0, $1_1 | 0);
  global$0 = $2_1 + 48 | 0;
 }
 
 function $325($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
    break label$1
   }
   $263($0_1 | 0);
   $2_1 = 1;
  }
  return $2_1 | 0;
 }
 
 function $326($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $3_1 = HEAPU8[($2_1 + 50 | 0) >> 0] | 0;
  $341($0_1 | 0, $328($0_1 | 0) | 0 | 0) | 0;
  $342($0_1 | 0, 1 | 0);
  $340($0_1 | 0, $1_1 + 8 | 0 | 0, 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  HEAP32[(($343($2_1 | 0, $3_1 | 0) | 0) + 4 | 0) >> 2] = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
  global$0 = $1_1 + 32 | 0;
 }
 
 function $327($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $6_1 = 0, $7_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $3_1 = 0;
  $4_1 = -1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      $5_1 = $3_1;
      $6_1 = $341($0_1 | 0, $328($0_1 | 0) | 0 | 0) | 0;
      $3_1 = $344($0_1 | 0) | 0;
      HEAP8[(($302($2_1 | 0, $6_1 | 0) | 0) + 9 | 0) >> 0] = $3_1;
      label$5 : {
       if (($3_1 | 0) != (2 | 0)) {
        break label$5
       }
       if (($4_1 | 0) != (-1 | 0)) {
        break label$3
       }
       $4_1 = ($300($2_1 | 0) | 0) + $5_1 | 0;
      }
      $3_1 = $5_1 + 1 | 0;
      if ($325($0_1 | 0, 44 | 0) | 0) {
       continue label$4
      }
      break label$4;
     };
     label$6 : {
      if ($325($0_1 | 0, 61 | 0) | 0) {
       break label$6
      }
      $7_1 = 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = 0;
      break label$2;
     }
     $7_1 = $345($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
     $6_1 = $302($2_1 | 0, $6_1 | 0) | 0;
     if (($3_1 | 0) != ($7_1 | 0)) {
      break label$2
     }
     $7_1 = $3_1;
     if ((HEAPU8[($6_1 + 9 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break label$2
     }
     $7_1 = $3_1;
     if (!($78($2_1 | 0, $1_1 + 8 | 0 | 0, $6_1 | 0) | 0)) {
      break label$2
     }
     HEAP8[($6_1 + 9 | 0) >> 0] = 3;
     $342($0_1 | 0, $5_1 | 0);
     HEAP8[($2_1 + 50 | 0) >> 0] = (HEAPU8[($2_1 + 50 | 0) >> 0] | 0) + 1 | 0;
     break label$1;
    }
    $77($0_1 | 0, 4007 | 0);
    abort();
   }
   $346($0_1 | 0, $3_1 | 0, $7_1 | 0, $1_1 + 8 | 0 | 0);
   $342($0_1 | 0, $3_1 | 0);
  }
  $347($0_1 | 0, $4_1 | 0);
  global$0 = $1_1 + 32 | 0;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $309($0_1 | 0, 292 | 0);
  $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $263($0_1 | 0);
  return $1_1 | 0;
 }
 
 function $329($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $336($0_1 | 0, 288 | 0);
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if (($3_1 | 0) == (288 | 0)) {
      break label$3
     }
     if (($3_1 | 0) != (59 | 0)) {
      break label$1
     }
    }
    $314($0_1 | 0);
    continue label$2;
   };
  }
  $348($0_1 | 0, $1_1 | 0);
  $349($0_1 | 0, $1_1 | 0, $2_1 | 0, $313($0_1 | 0, 0 | 0) | 0 | 0) | 0;
 }
 
 function $330($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $4_1 = $300($3_1 | 0) | 0;
  label$1 : {
   if ($313($0_1 | 0, 1 | 0) | 0) {
    break label$1
   }
   if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) == (59 | 0)) {
    break label$1
   }
   $5_1 = $345($0_1 | 0, $1_1 + 8 | 0 | 0) | 0;
   label$2 : {
    if (((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & -2 | 0 | 0) != (18 | 0)) {
     break label$2
    }
    $2_1 = -1;
    $107($3_1 | 0, $1_1 + 8 | 0 | 0, -1 | 0);
    if (($5_1 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != (18 | 0)) {
     break label$1
    }
    if (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 15 | 0) >> 0] | 0) {
     break label$1
    }
    $5_1 = (HEAP32[((HEAP32[$3_1 >> 2] | 0) + 52 | 0) >> 2] | 0) + ((HEAP32[($1_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) & -128 | 0 | 69 | 0;
    break label$1;
   }
   $2_1 = 1;
   label$3 : {
    if (($5_1 | 0) != (1 | 0)) {
     break label$3
    }
    $4_1 = $119($3_1 | 0, $1_1 + 8 | 0 | 0) | 0;
    break label$1;
   }
   $113($3_1 | 0, $1_1 + 8 | 0 | 0);
   $2_1 = $5_1;
  }
  $90($3_1 | 0, $4_1 | 0, $2_1 | 0);
  $325($0_1 | 0, 59 | 0) | 0;
  global$0 = $1_1 + 32 | 0;
 }
 
 function $331($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $263($0_1 | 0);
  $350($0_1 | 0, $417(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0, 3730 | 0, 5 | 0) | 0 | 0, $1_1 | 0, $88(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0 | 0);
 }
 
 function $332($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  label$1 : {
   $3_1 = $328($0_1 | 0) | 0;
   $4_1 = $351($0_1 | 0, $3_1 | 0) | 0;
   if ($4_1) {
    break label$1
   }
   $350($0_1 | 0, $3_1 | 0, $1_1 | 0, $88($2_1 | 0) | 0 | 0);
   return;
  }
  $0_1 = $301($2_1 | 0, HEAPU8[($4_1 + 12 | 0) >> 0] | 0 | 0) | 0;
  label$2 : {
   if (($300($2_1 | 0) | 0 | 0) <= ($0_1 | 0)) {
    break label$2
   }
   $83($2_1 | 0, 54 | 0, $0_1 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
  }
  $92($2_1 | 0, $88($2_1 | 0) | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $333($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $352($0_1 | 0, $1_1 + 8 | 0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if (($3_1 | 0) == (61 | 0)) {
       break label$4
      }
      if (($3_1 | 0) != (44 | 0)) {
       break label$3
      }
     }
     HEAP32[$1_1 >> 2] = 0;
     $353($0_1 | 0, $1_1 | 0, 1 | 0);
     break label$2;
    }
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != (18 | 0)) {
     break label$1
    }
    HEAP8[(((HEAP32[((HEAP32[$2_1 >> 2] | 0) + 52 | 0) >> 2] | 0) + ((HEAP32[($1_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = 1;
   }
   global$0 = $1_1 + 32 | 0;
   return;
  }
  $258($0_1 | 0, 4126 | 0);
  abort();
 }
 
 function $334($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = -1;
  $263($0_1 | 0);
  $354($0_1 | 0, $2_1 | 0);
  $336($0_1 | 0, 275 | 0);
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $5_1 = $355($0_1 | 0, $2_1 + 28 | 0 | 0, $2_1 + 24 | 0 | 0) | 0;
  $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$5_1) {
      break label$3
     }
     $139($6_1 | 0, $2_1 | 0);
     $311($3_1 | 0, $2_1 + 32 | 0 | 0, 0 | 0);
     $5_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
     label$4 : {
      label$5 : {
       $6_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
       if (!$6_1) {
        break label$5
       }
       $350($0_1 | 0, $6_1 | 0, $4_1 | 0, $5_1 | 0);
       break label$4;
      }
      $92($3_1 | 0, $5_1 | 0, HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0);
     }
     label$6 : while (1) {
      if ($325($0_1 | 0, 59 | 0) | 0) {
       continue label$6
      }
      break label$6;
     };
     label$7 : {
      if (!($313($0_1 | 0, 0 | 0) | 0)) {
       break label$7
      }
      $316($3_1 | 0);
      break label$1;
     }
     $5_1 = $88($3_1 | 0) | 0;
     break label$2;
    }
    $132($6_1 | 0, $2_1 | 0);
    $311($3_1 | 0, $2_1 + 32 | 0 | 0, 0 | 0);
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   }
   $308($0_1 | 0);
   $316($3_1 | 0);
   label$8 : {
    if (((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & -2 | 0 | 0) != (260 | 0)) {
     break label$8
    }
    $85($3_1 | 0, $1_1 | 0, $88($3_1 | 0) | 0 | 0);
   }
   $95($3_1 | 0, $5_1 | 0);
  }
  global$0 = $2_1 + 48 | 0;
 }
 
 function $335($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $354($0_1 | 0, $1_1 + 8 | 0 | 0);
  label$1 : {
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = 3;
  }
  $132(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0);
  $0_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
  global$0 = $1_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $336($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $309($0_1 | 0, $1_1 | 0);
  $263($0_1 | 0);
 }
 
 function $337($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $4_1 = HEAPU8[($3_1 + 52 | 0) >> 0] | 0;
  $341($0_1 | 0, $261($0_1 | 0, 3949 | 0, 11 | 0) | 0 | 0) | 0;
  $341($0_1 | 0, $261($0_1 | 0, 3949 | 0, 11 | 0) | 0 | 0) | 0;
  $341($0_1 | 0, $261($0_1 | 0, 3949 | 0, 11 | 0) | 0 | 0) | 0;
  $341($0_1 | 0, $1_1 | 0) | 0;
  $336($0_1 | 0, 61 | 0);
  $391($0_1 | 0);
  $336($0_1 | 0, 44 | 0);
  $391($0_1 | 0);
  label$1 : {
   label$2 : {
    if (!($325($0_1 | 0, 44 | 0) | 0)) {
     break label$2
    }
    $391($0_1 | 0);
    break label$1;
   }
   $101($3_1 | 0, HEAPU8[($3_1 + 52 | 0) >> 0] | 0 | 0, 1 | 0, 0 | 0);
   $100($3_1 | 0, 1 | 0);
  }
  $342($0_1 | 0, 3 | 0);
  $392($0_1 | 0, $4_1 | 0, $2_1 | 0, 1 | 0, 0 | 0);
 }
 
 function $338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $4_1 = HEAPU8[($3_1 + 52 | 0) >> 0] | 0;
  $341($0_1 | 0, $261($0_1 | 0, 3949 | 0, 11 | 0) | 0 | 0) | 0;
  $341($0_1 | 0, $261($0_1 | 0, 3949 | 0, 11 | 0) | 0 | 0) | 0;
  $341($0_1 | 0, $261($0_1 | 0, 3949 | 0, 11 | 0) | 0 | 0) | 0;
  $341($0_1 | 0, $261($0_1 | 0, 3949 | 0, 11 | 0) | 0 | 0) | 0;
  $341($0_1 | 0, $1_1 | 0) | 0;
  $1_1 = 1;
  label$1 : {
   if (!($325($0_1 | 0, 44 | 0) | 0)) {
    break label$1
   }
   $1_1 = 5;
   label$2 : while (1) {
    $341($0_1 | 0, $328($0_1 | 0) | 0 | 0) | 0;
    $5_1 = $1_1;
    $1_1 = $1_1 + 1 | 0;
    if ($325($0_1 | 0, 44 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
   $1_1 = $5_1 + -3 | 0;
  }
  $336($0_1 | 0, 268 | 0);
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $346($0_1 | 0, 4 | 0, $345($0_1 | 0, $2_1 + 8 | 0 | 0) | 0 | 0, $2_1 + 8 | 0 | 0);
  $342($0_1 | 0, 4 | 0);
  $384($3_1 | 0, $300($3_1 | 0) | 0 | 0);
  $99($3_1 | 0, 3 | 0);
  $392($0_1 | 0, $4_1 | 0, $5_1 | 0, $1_1 | 0, 1 | 0);
  global$0 = $2_1 + 32 | 0;
 }
 
 function $339($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $381($0_1 | 0, $1_1 | 0);
  $2_1 = 0;
  label$1 : while (1) {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if (($3_1 | 0) == (46 | 0)) {
     break label$2
    }
    label$3 : {
     if (($3_1 | 0) != (58 | 0)) {
      break label$3
     }
     $376($0_1 | 0, $1_1 | 0);
     $2_1 = 1;
    }
    return $2_1 | 0;
   }
   $376($0_1 | 0, $1_1 | 0);
   continue label$1;
  };
 }
 
 function $340($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $5_1 = $370($0_1 | 0) | 0;
  HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $3_1;
  $305($0_1 | 0, $4_1 + 24 | 0 | 0, $4_1 + 8 | 0 | 0);
  $336($0_1 | 0, 40 | 0);
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $341($0_1 | 0, $261($0_1 | 0, 3628 | 0, 4 | 0) | 0 | 0) | 0;
   $342($0_1 | 0, 1 | 0);
  }
  $371($0_1 | 0);
  $336($0_1 | 0, 41 | 0);
  $308($0_1 | 0);
  HEAP32[((HEAP32[($4_1 + 24 | 0) >> 2] | 0) + 44 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $321($0_1 | 0, 262 | 0, 265 | 0, $3_1 | 0);
  $372($0_1 | 0, $1_1 | 0);
  $310($0_1 | 0);
  global$0 = $4_1 + 80 | 0;
 }
 
 function $341($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  $312($3_1 | 0, ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($3_1 + 40 | 0) >> 2] | 0) | 0) + 1 | 0 | 0, 200 | 0, 3643 | 0);
  $2_1 = $280($2_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 1 | 0 | 0, $0_1 + 8 | 0 | 0, 24 | 0, 65535 | 0, 3643 | 0) | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
  $2_1 = $2_1 + Math_imul($4_1, 24) | 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
  HEAP8[($2_1 + 9 | 0) >> 0] = 0;
  return (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + ((HEAP32[($3_1 + 40 | 0) >> 2] | 0) ^ -1 | 0) | 0 | 0;
 }
 
 function $342($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0;
  label$1 : {
   if (($1_1 | 0) < (1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $4_1 = $300($3_1 | 0) | 0;
   label$2 : while (1) {
    $5_1 = HEAPU8[($3_1 + 50 | 0) >> 0] | 0;
    HEAP8[($3_1 + 50 | 0) >> 0] = $5_1 + 1 | 0;
    $5_1 = $302($3_1 | 0, $5_1 | 0) | 0;
    HEAP8[($5_1 + 10 | 0) >> 0] = $4_1;
    HEAP16[($5_1 + 12 | 0) >> 1] = $380($0_1 | 0, $3_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    $4_1 = $4_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $343($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   $1_1 = $302($0_1 | 0, $1_1 | 0) | 0;
   if ((HEAPU8[($1_1 + 9 | 0) >> 0] | 0 | 0) == (3 | 0)) {
    break label$1
   }
   $2_1 = (HEAP32[((HEAP32[$0_1 >> 2] | 0) + 72 | 0) >> 2] | 0) + Math_imul(HEAP16[($1_1 + 12 | 0) >> 1] | 0, 12) | 0;
  }
  return $2_1 | 0;
 }
 
 function $344($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if ($325($0_1 | 0, 60 | 0) | 0) {
     break label$2
    }
    $2_1 = 0;
    break label$1;
   }
   $2_1 = $328($0_1 | 0) | 0;
   $336($0_1 | 0, 62 | 0);
   label$3 : {
    $3_1 = $2_1 + 16 | 0;
    if ($876($3_1 | 0, 4053 | 0) | 0) {
     break label$3
    }
    $2_1 = 1;
    break label$1;
   }
   $2_1 = 2;
   if (!($876($3_1 | 0, 4059 | 0) | 0)) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   HEAP32[$1_1 >> 2] = $3_1;
   $77($0_1 | 0, $298($2_1 | 0, 4065 | 0, $1_1 | 0) | 0 | 0);
   abort();
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $345($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $354($0_1 | 0, $1_1 | 0);
  label$1 : {
   if ($325($0_1 | 0, 44 | 0) | 0) {
    break label$1
   }
   return 1 | 0;
  }
  $2_1 = 1;
  label$2 : while (1) {
   $113(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0, $1_1 | 0);
   $354($0_1 | 0, $1_1 | 0);
   $2_1 = $2_1 + 1 | 0;
   if ($325($0_1 | 0, 44 | 0) | 0) {
    continue label$2
   }
   break label$2;
  };
  return $2_1 | 0;
 }
 
 function $346($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1_1 = $1_1 - $2_1 | 0;
  $0_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[$3_1 >> 2] | 0;
     if (($2_1 + -18 | 0) >>> 0 < 2 >>> 0) {
      break label$3
     }
     label$4 : {
      if (!$2_1) {
       break label$4
      }
      $113($0_1 | 0, $3_1 | 0);
     }
     if (($1_1 | 0) < (1 | 0)) {
      break label$1
     }
     $81($0_1 | 0, HEAPU8[($0_1 + 52 | 0) >> 0] | 0 | 0, $1_1 | 0);
     break label$2;
    }
    $107($0_1 | 0, $3_1 | 0, (($1_1 | 0) < (0 | 0) ? 0 : $1_1 + 1 | 0) | 0);
    if (($1_1 | 0) < (1 | 0)) {
     break label$1
    }
   }
   $100($0_1 | 0, $1_1 | 0);
   return;
  }
  HEAP8[($0_1 + 52 | 0) >> 0] = (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) + $1_1 | 0;
 }
 
 function $347($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) == (-1 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $384($0_1 | 0, $1_1 + 1 | 0 | 0);
   HEAP8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 15 | 0) >> 0] = 1;
   $83($0_1 | 0, 55 | 0, $1_1 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
  }
 }
 
 function $348($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = $351($0_1 | 0, $1_1 | 0) | 0;
   if (!$3_1) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = $1_1 + 16 | 0;
   $77($0_1 | 0, $298($4_1 | 0, 4088 | 0, $2_1 | 0) | 0 | 0);
   abort();
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $349($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = (HEAP32[($0_1 + 68 | 0) >> 2] | 0) + 24 | 0;
  $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $1_1 = $357($0_1 | 0, $4_1 | 0, $1_1 | 0, $2_1 | 0, $91($5_1 | 0) | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($3_1) {
     break label$2
    }
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    break label$1;
   }
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   HEAP8[(($3_1 + ($1_1 << 4 | 0) | 0) + 12 | 0) >> 0] = HEAPU8[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 0] | 0;
  }
  label$3 : {
   if ($388($0_1 | 0, $3_1 + ($1_1 << 4 | 0) | 0 | 0) | 0) {
    break label$3
   }
   return 0 | 0;
  }
  $83($5_1 | 0, 54 | 0, $300($5_1 | 0) | 0 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
  return 1 | 0;
 }
 
 function $350($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $357($0_1 | 0, (HEAP32[($0_1 + 68 | 0) >> 2] | 0) + 12 | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $351($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = HEAP32[((HEAP32[($0_1 + 48 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   $0_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
   if (($2_1 | 0) >= ($0_1 | 0)) {
    break label$1
   }
   $3_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   label$2 : {
    label$3 : while (1) {
     $4_1 = $3_1 + ($2_1 << 4 | 0) | 0;
     if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$2
     }
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) >= ($0_1 | 0)) {
      break label$1
     }
     continue label$3;
    };
   }
   return $4_1 | 0;
  }
  return 0 | 0;
 }
 
 function $352($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $373($0_1 | 0, $1_1 | 0);
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        if (($5_1 | 0) > (90 | 0)) {
         break label$6
        }
        if (($5_1 | 0) == (40 | 0)) {
         break label$5
        }
        if (($5_1 | 0) == (46 | 0)) {
         break label$4
        }
        if (($5_1 | 0) != (58 | 0)) {
         break label$1
        }
        $263($0_1 | 0);
        $374($0_1 | 0, $2_1 + 8 | 0 | 0);
        $131($4_1 | 0, $1_1 | 0, $2_1 + 8 | 0 | 0);
        $375($0_1 | 0, $1_1 | 0, $3_1 | 0);
        continue label$2;
       }
       if (($5_1 | 0) == (91 | 0)) {
        break label$3
       }
       if (($5_1 | 0) == (123 | 0)) {
        break label$5
       }
       if (($5_1 | 0) != (293 | 0)) {
        break label$1
       }
      }
      $113($4_1 | 0, $1_1 | 0);
      $375($0_1 | 0, $1_1 | 0, $3_1 | 0);
      continue label$2;
     }
     $376($0_1 | 0, $1_1 | 0);
     continue label$2;
    }
    $120($4_1 | 0, $1_1 | 0);
    $377($0_1 | 0, $2_1 + 8 | 0 | 0);
    $141($4_1 | 0, $1_1 | 0, $2_1 + 8 | 0 | 0);
    continue label$2;
   };
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $353($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   if (((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + -9 | 0) >>> 0 >= 7 >>> 0) {
    break label$1
   }
   $4_1 = $1_1 + 8 | 0;
   $394($0_1 | 0, $4_1 | 0);
   label$2 : {
    label$3 : {
     label$4 : {
      if (!($325($0_1 | 0, 44 | 0) | 0)) {
       break label$4
      }
      HEAP32[$3_1 >> 2] = $1_1;
      $5_1 = $3_1 + 8 | 0;
      $352($0_1 | 0, $5_1 | 0);
      label$5 : {
       if (((HEAP32[($3_1 + 8 | 0) >> 2] | 0) & -4 | 0 | 0) == (12 | 0)) {
        break label$5
       }
       $395($0_1 | 0, $1_1 | 0, $5_1 | 0);
      }
      $399(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0);
      $353($0_1 | 0, $3_1 | 0, $2_1 + 1 | 0 | 0);
      $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
      HEAP32[($1_1 + 96 | 0) >> 2] = (HEAP32[($1_1 + 96 | 0) >> 2] | 0) + 1 | 0;
      break label$3;
     }
     $336($0_1 | 0, 61 | 0);
     label$6 : {
      $1_1 = $345($0_1 | 0, $3_1 | 0) | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       break label$6
      }
      $108(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0, $3_1 | 0);
      $0_1 = $0_1 + 48 | 0;
      break label$2;
     }
     $346($0_1 | 0, $2_1 | 0, $1_1 | 0, $3_1 | 0);
    }
    $364($3_1 | 0, 8 | 0, (HEAPU8[((HEAP32[($0_1 + 48 | 0) >> 2] | 0) + 52 | 0) >> 0] | 0) + -1 | 0 | 0);
    $0_1 = $0_1 + 48 | 0;
   }
   $129(HEAP32[$0_1 >> 2] | 0 | 0, $4_1 | 0, $3_1 | 0);
   global$0 = $3_1 + 32 | 0;
   return;
  }
  $258($0_1 | 0, 4126 | 0);
  abort();
 }
 
 function $354($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $356($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
 }
 
 function $355($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($325($0_1 | 0, 258 | 0) | 0)) {
      break label$3
     }
     HEAP32[$1_1 >> 2] = $417(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0, 3730 | 0, 5 | 0) | 0;
     break label$2;
    }
    $3_1 = 0;
    if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) != (266 | 0)) {
     break label$1
    }
    if (($272($0_1 | 0) | 0 | 0) != (292 | 0)) {
     break label$1
    }
    label$4 : {
     label$5 : {
      $4_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
      $5_1 = $351($0_1 | 0, $4_1 | 0) | 0;
      if (!$5_1) {
       break label$5
      }
      $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if (($300($1_1 | 0) | 0 | 0) > ($301($1_1 | 0, HEAPU8[($5_1 + 12 | 0) >> 0] | 0 | 0) | 0 | 0)) {
       break label$1
      }
      HEAP32[$2_1 >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      break label$4;
     }
     HEAP32[$1_1 >> 2] = $4_1;
    }
    $263($0_1 | 0);
    $263($0_1 | 0);
   }
   $3_1 = 1;
  }
  return $3_1 | 0;
 }
 
 function $356($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $399(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0);
  label$1 : {
   label$2 : {
    $4_1 = $361(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    if (($4_1 | 0) == (4 | 0)) {
     break label$2
    }
    $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $263($0_1 | 0);
    $356($0_1 | 0, $1_1 | 0, 12 | 0) | 0;
    $145(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0, $5_1 | 0);
    break label$1;
   }
   $362($0_1 | 0, $1_1 | 0);
  }
  $6_1 = 21;
  label$3 : {
   $4_1 = $363(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) | 0;
   if (($4_1 | 0) == (21 | 0)) {
    break label$3
   }
   label$4 : while (1) {
    label$5 : {
     $5_1 = $4_1 << 1 | 0;
     if ((HEAPU8[($5_1 + 3520 | 0) >> 0] | 0 | 0) > ($2_1 | 0)) {
      break label$5
     }
     $6_1 = $4_1;
     break label$3;
    }
    $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $263($0_1 | 0);
    $152(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0);
    $5_1 = $356($0_1 | 0, $3_1 + 8 | 0 | 0, HEAPU8[($5_1 + 3521 | 0) >> 0] | 0 | 0) | 0;
    $155(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0, $3_1 + 8 | 0 | 0, $6_1 | 0);
    $6_1 = 21;
    $4_1 = $5_1;
    if (($4_1 | 0) != (21 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  $0_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + 1 | 0;
  global$0 = $3_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $357($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0;
  $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $6_1 = $280(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $5_1 | 0, $1_1 + 8 | 0 | 0, 16 | 0, 32767 | 0, 3736 | 0) | 0;
  HEAP32[$1_1 >> 2] = $6_1;
  $6_1 = $6_1 + ($5_1 << 4 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[$6_1 >> 2] = $2_1;
  $0_1 = HEAPU8[((HEAP32[($0_1 + 48 | 0) >> 2] | 0) + 50 | 0) >> 0] | 0;
  HEAP8[($6_1 + 13 | 0) >> 0] = 0;
  HEAP8[($6_1 + 12 | 0) >> 0] = $0_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $4_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
  return $5_1 | 0;
 }
 
 function $358($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0;
  $3_1 = HEAPU8[($0_1 + 50 | 0) >> 0] | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = ($1_1 - $3_1 | 0) + (HEAP32[($2_1 + 4 | 0) >> 2] | 0) | 0;
  label$1 : {
   if (($1_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = $3_1 + -1 | 0;
    HEAP8[($0_1 + 50 | 0) >> 0] = $3_1;
    label$3 : {
     $2_1 = $3_1 & 255 | 0;
     $4_1 = $343($0_1 | 0, $2_1 | 0) | 0;
     if (!$4_1) {
      break label$3
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    }
    if (($2_1 | 0) > ($1_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $359($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $3_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0;
   $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   if (($2_1 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   $5_1 = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
   $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   label$2 : while (1) {
    $3_1 = $6_1 + ($2_1 << 4 | 0) | 0;
    $7_1 = $3_1 + 12 | 0;
    label$3 : {
     if (($301($0_1 | 0, HEAPU8[($3_1 + 12 | 0) >> 0] | 0 | 0) | 0 | 0) <= ($301($0_1 | 0, $5_1 | 0) | 0 | 0)) {
      break label$3
     }
     HEAP8[($3_1 + 13 | 0) >> 0] = HEAPU8[($3_1 + 13 | 0) >> 0] | 0 | (HEAPU8[($1_1 + 13 | 0) >> 0] | 0) | 0;
    }
    HEAP8[$7_1 >> 0] = $5_1;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < ($4_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $360($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = $417(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0, 3730 | 0, 5 | 0) | 0;
  $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) != ($4_1 | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $1_1 = $298($5_1 | 0, 3805 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   $3_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 + 16 | 0;
   $1_1 = $298($5_1 | 0, 3835 | 0, $2_1 + 16 | 0 | 0) | 0;
  }
  $77($0_1 | 0, $1_1 | 0);
  abort();
 }
 
 function $361($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($0_1 | 0) > (125 | 0)) {
        break label$5
       }
       if (($0_1 | 0) == (35 | 0)) {
        break label$2
       }
       if (($0_1 | 0) != (45 | 0)) {
        break label$4
       }
       return 0 | 0;
      }
      if (($0_1 | 0) == (126 | 0)) {
       break label$3
      }
      $1_1 = 2;
      if (($0_1 | 0) == (271 | 0)) {
       break label$1
      }
     }
     return 4 | 0;
    }
    return 1 | 0;
   }
   $1_1 = 3;
  }
  return $1_1 | 0;
 }
 
 function $362($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
              if (($2_1 | 0) > (275 | 0)) {
               break label$12
              }
              label$13 : {
               switch ($2_1 + -263 | 0 | 0) {
               case 1:
                break label$11;
               case 2:
                break label$4;
               case 0:
                break label$7;
               default:
                break label$13;
               };
              }
              if (($2_1 | 0) == (123 | 0)) {
               break label$5
              }
              if (($2_1 | 0) != (270 | 0)) {
               break label$11
              }
              $364($1_1 | 0, 1 | 0, 0 | 0);
              break label$2;
             }
             label$14 : {
              switch ($2_1 + -290 | 0 | 0) {
              case 1:
               break label$10;
              case 2:
               break label$11;
              case 0:
               break label$3;
              case 3:
               break label$9;
              default:
               break label$14;
              };
             }
             if (($2_1 | 0) == (276 | 0)) {
              break label$8
             }
             if (($2_1 | 0) == (281 | 0)) {
              break label$6
             }
            }
            $352($0_1 | 0, $1_1 | 0);
            return;
           }
           $364($1_1 | 0, 6 | 0, 0 | 0);
           i64toi32_i32$2 = $0_1 + 24 | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
           HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
           break label$2;
          }
          $365($1_1 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
          break label$2;
         }
         $364($1_1 | 0, 2 | 0, 0 | 0);
         break label$2;
        }
        $364($1_1 | 0, 3 | 0, 0 | 0);
        break label$2;
       }
       $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       if (!(HEAPU8[((HEAP32[$2_1 >> 2] | 0) + 7 | 0) >> 0] | 0)) {
        break label$1
       }
       $364($1_1 | 0, 19 | 0, $83($2_1 | 0, 80 | 0, 0 | 0, 0 | 0, 1 | 0, 0 | 0) | 0 | 0);
       break label$2;
      }
      $366($0_1 | 0, $1_1 | 0);
      return;
     }
     $263($0_1 | 0);
     $340($0_1 | 0, $1_1 | 0, 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
     return;
    }
    $364($1_1 | 0, 5 | 0, 0 | 0);
    HEAPF64[($1_1 + 8 | 0) >> 3] = +HEAPF64[($0_1 + 24 | 0) >> 3];
   }
   $263($0_1 | 0);
   return;
  }
  $258($0_1 | 0, 3562 | 0);
  abort();
 }
 
 function $363($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                label$15 : {
                 label$16 : {
                  label$17 : {
                   label$18 : {
                    label$19 : {
                     label$20 : {
                      label$21 : {
                       label$22 : {
                        label$23 : {
                         label$24 : {
                          if (($0_1 | 0) > (123 | 0)) {
                           break label$24
                          }
                          $1_1 = 0;
                          label$25 : {
                           switch ($0_1 + -37 | 0 | 0) {
                           case 1:
                            break label$18;
                           case 6:
                            break label$2;
                           case 10:
                            break label$20;
                           case 0:
                            break label$21;
                           case 5:
                            break label$22;
                           case 8:
                            break label$23;
                           case 2:
                           case 3:
                           case 4:
                           case 7:
                           case 9:
                            break label$3;
                           default:
                            break label$25;
                           };
                          }
                          switch ($0_1 + -60 | 0 | 0) {
                          case 0:
                           break label$10;
                          case 1:
                           break label$3;
                          case 2:
                           break label$8;
                          default:
                           break label$4;
                          };
                         }
                         label$26 : {
                          switch ($0_1 + -272 | 0 | 0) {
                          case 10:
                           break label$11;
                          case 13:
                           break label$12;
                          case 8:
                           break label$13;
                          case 15:
                           break label$14;
                          case 14:
                           break label$15;
                          case 7:
                           break label$19;
                          case 1:
                          case 2:
                          case 3:
                          case 4:
                          case 5:
                          case 6:
                          case 9:
                           break label$3;
                          case 0:
                           break label$5;
                          case 11:
                           break label$7;
                          case 12:
                           break label$9;
                          default:
                           break label$26;
                          };
                         }
                         switch ($0_1 + -124 | 0 | 0) {
                         case 2:
                          break label$16;
                         case 0:
                          break label$17;
                         case 1:
                          break label$3;
                         default:
                          break label$6;
                         };
                        }
                        return 1 | 0;
                       }
                       return 2 | 0;
                      }
                      return 3 | 0;
                     }
                     return 5 | 0;
                    }
                    return 6 | 0;
                   }
                   return 7 | 0;
                  }
                  return 8 | 0;
                 }
                 return 9 | 0;
                }
                return 10 | 0;
               }
               return 11 | 0;
              }
              return 12 | 0;
             }
             return 16 | 0;
            }
            return 13 | 0;
           }
           return 14 | 0;
          }
          return 15 | 0;
         }
         return 17 | 0;
        }
        return 18 | 0;
       }
       if (($0_1 | 0) != (257 | 0)) {
        break label$3
       }
       return 19 | 0;
      }
      return 20 | 0;
     }
     if (($0_1 | 0) == (94 | 0)) {
      break label$1
     }
    }
    $1_1 = 21;
   }
   return $1_1 | 0;
  }
  return 4 | 0;
 }
 
 function $364($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = -1;
  HEAP32[($0_1 + 20 | 0) >> 2] = -1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $365($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = -1;
  HEAP32[($0_1 + 20 | 0) >> 2] = -1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 7;
 }
 
 function $366($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $5_1 = $83($4_1 | 0, 19 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0) | 0;
  $84($4_1 | 0, 0 | 0) | 0;
  HEAP32[($2_1 + 36 | 0) >> 2] = 0;
  HEAP32[($2_1 + 40 | 0) >> 2] = 0;
  HEAP32[($2_1 + 44 | 0) >> 2] = 0;
  HEAP32[($2_1 + 32 | 0) >> 2] = $1_1;
  $364($1_1 | 0, 8 | 0, HEAPU8[($4_1 + 52 | 0) >> 0] | 0 | 0);
  $100($4_1 | 0, 1 | 0);
  $364($2_1 + 8 | 0 | 0, 0 | 0, 0 | 0);
  $336($0_1 | 0, 123 | 0);
  label$1 : {
   if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) == (125 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $367($4_1 | 0, $2_1 + 8 | 0 | 0);
    $368($0_1 | 0, $2_1 + 8 | 0 | 0);
    label$3 : {
     if ($325($0_1 | 0, 44 | 0) | 0) {
      break label$3
     }
     if (!($325($0_1 | 0, 59 | 0) | 0)) {
      break label$1
     }
    }
    if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) != (125 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $321($0_1 | 0, 125 | 0, 123 | 0, $3_1 | 0);
  $369($4_1 | 0, $2_1 + 8 | 0 | 0);
  $170($4_1 | 0, $5_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0);
  global$0 = $2_1 + 48 | 0;
 }
 
 function $367($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!(HEAP32[$1_1 >> 2] | 0)) {
    break label$1
   }
   $113($0_1 | 0, $1_1 | 0);
   HEAP32[$1_1 >> 2] = 0;
   if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (50 | 0)) {
    break label$1
   }
   $171($0_1 | 0, HEAP32[((HEAP32[($1_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 32 | 0) >> 2] | 0 | 0, 50 | 0);
   $0_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   HEAP32[($1_1 + 36 | 0) >> 2] = 0;
   HEAP32[($1_1 + 32 | 0) >> 2] = $0_1 + (HEAP32[($1_1 + 32 | 0) >> 2] | 0) | 0;
  }
 }
 
 function $368($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if (($2_1 | 0) == (91 | 0)) {
     break label$2
    }
    if (($2_1 | 0) != (292 | 0)) {
     break label$1
    }
    if (($272($0_1 | 0) | 0 | 0) != (61 | 0)) {
     break label$1
    }
   }
   $378($0_1 | 0, $1_1 | 0);
   return;
  }
  $379($0_1 | 0, $1_1 | 0);
 }
 
 function $369($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if (($3_1 + -18 | 0) >>> 0 < 2 >>> 0) {
      break label$3
     }
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      $113($0_1 | 0, $1_1 | 0);
      $2_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
     }
     $171($0_1 | 0, HEAP32[((HEAP32[($1_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 32 | 0) >> 2] | 0 | 0, $2_1 | 0);
     $0_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     break label$2;
    }
    $107($0_1 | 0, $1_1 | 0, -1 | 0);
    $171($0_1 | 0, HEAP32[((HEAP32[($1_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 32 | 0) >> 2] | 0 | 0, -1 | 0);
    $0_1 = (HEAP32[($1_1 + 32 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($1_1 + 32 | 0) >> 2] = $0_1;
   }
   HEAP32[($1_1 + 32 | 0) >> 2] = $0_1 + (HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
  }
 }
 
 function $370($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $3_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
   $4_1 = HEAP32[$2_1 >> 2] | 0;
   $0_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
   if (($3_1 | 0) < ($0_1 | 0)) {
    break label$1
   }
   $5_1 = $280($1_1 | 0, HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 + 28 | 0 | 0, 4 | 0, 131071 | 0, 3633 | 0) | 0;
   HEAP32[($4_1 + 56 | 0) >> 2] = $5_1;
   $3_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
   if (($0_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + ($0_1 << 2 | 0) | 0) >> 2] = 0;
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    HEAP32[((HEAP32[($4_1 + 56 | 0) >> 2] | 0) + ($0_1 << 2 | 0) | 0) >> 2] = 0;
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) < ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $0_1 = $230($1_1 | 0) | 0;
  $3_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
  $5_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
  HEAP32[($2_1 + 32 | 0) >> 2] = $5_1 + 1 | 0;
  HEAP32[($3_1 + ($5_1 << 2 | 0) | 0) >> 2] = $0_1;
  label$3 : {
   if (!((HEAPU8[($4_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
    break label$3
   }
   if (!((HEAPU8[($0_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$3
   }
   $233($1_1 | 0, $4_1 | 0, $0_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $371($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  $3_1 = 1;
  $4_1 = 0;
  label$1 : {
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (($5_1 | 0) == (41 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($5_1 | 0) == (281 | 0)) {
       break label$4
      }
      if (($5_1 | 0) == (292 | 0)) {
       break label$3
      }
      $258($0_1 | 0, 3659 | 0);
      abort();
     }
     $263($0_1 | 0);
     $3_1 = 0;
     break label$1;
    }
    $341($0_1 | 0, $328($0_1 | 0) | 0 | 0) | 0;
    $3_1 = 1;
    $4_1 = $4_1 + 1 | 0;
    if (!($325($0_1 | 0, 44 | 0) | 0)) {
     break label$1
    }
    $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  $342($0_1 | 0, $4_1 | 0);
  $0_1 = HEAPU8[($1_1 + 50 | 0) >> 0] | 0;
  HEAP8[($2_1 + 6 | 0) >> 0] = $0_1;
  label$5 : {
   if ($3_1) {
    break label$5
   }
   $306($1_1 | 0, $0_1 | 0);
   $0_1 = HEAPU8[($1_1 + 50 | 0) >> 0] | 0;
  }
  $100($1_1 | 0, $0_1 & 255 | 0 | 0);
 }
 
 function $372($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[((HEAP32[($0_1 + 48 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $364($1_1 | 0, 17 | 0, $97($0_1 | 0, 79 | 0, 0 | 0, (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + -1 | 0 | 0) | 0 | 0);
  $113($0_1 | 0, $1_1 | 0);
 }
 
 function $373($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (($2_1 | 0) == (292 | 0)) {
    break label$1
   }
   label$2 : {
    if (($2_1 | 0) != (40 | 0)) {
     break label$2
    }
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $263($0_1 | 0);
    $354($0_1 | 0, $1_1 | 0);
    $321($0_1 | 0, 41 | 0, 40 | 0, $2_1 | 0);
    $109(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0, $1_1 | 0);
    return;
   }
   $258($0_1 | 0, 3684 | 0);
   abort();
  }
  $381($0_1 | 0, $1_1 | 0);
 }
 
 function $374($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $365($1_1 | 0, $328($0_1 | 0) | 0 | 0);
 }
 
 function $375($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if (($5_1 | 0) == (293 | 0)) {
       break label$4
      }
      if (($5_1 | 0) == (123 | 0)) {
       break label$2
      }
      if (($5_1 | 0) != (40 | 0)) {
       break label$3
      }
      $263($0_1 | 0);
      label$5 : {
       label$6 : {
        if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) != (41 | 0)) {
         break label$6
        }
        HEAP32[($3_1 + 8 | 0) >> 2] = 0;
        break label$5;
       }
       $345($0_1 | 0, $3_1 + 8 | 0 | 0) | 0;
       if (((HEAP32[($3_1 + 8 | 0) >> 2] | 0) & -2 | 0 | 0) != (18 | 0)) {
        break label$5
       }
       $107($4_1 | 0, $3_1 + 8 | 0 | 0, -1 | 0);
      }
      $321($0_1 | 0, 41 | 0, 40 | 0, $2_1 | 0);
      break label$1;
     }
     $365($3_1 + 8 | 0 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
     $263($0_1 | 0);
     break label$1;
    }
    $258($0_1 | 0, 3702 | 0);
    abort();
   }
   $366($0_1 | 0, $3_1 + 8 | 0 | 0);
  }
  $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  $5_1 = 0;
  label$7 : {
   $6_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   if (($6_1 + -18 | 0) >>> 0 < 2 >>> 0) {
    break label$7
   }
   label$8 : {
    if (!$6_1) {
     break label$8
    }
    $113($4_1 | 0, $3_1 + 8 | 0 | 0);
   }
   $5_1 = (HEAPU8[($4_1 + 52 | 0) >> 0] | 0) - $0_1 | 0;
  }
  $364($1_1 | 0, 18 | 0, $83($4_1 | 0, 68 | 0, $0_1 | 0, $5_1 | 0, 2 | 0, 0 | 0) | 0 | 0);
  $150($4_1 | 0, $2_1 | 0);
  HEAP8[($4_1 + 52 | 0) >> 0] = $0_1 + 1 | 0;
  global$0 = $3_1 + 32 | 0;
 }
 
 function $376($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $120($3_1 | 0, $1_1 | 0);
  $263($0_1 | 0);
  $374($0_1 | 0, $2_1 + 8 | 0 | 0);
  $141($3_1 | 0, $1_1 | 0, $2_1 + 8 | 0 | 0);
  global$0 = $2_1 + 32 | 0;
 }
 
 function $377($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $263($0_1 | 0);
  $354($0_1 | 0, $1_1 | 0);
  $121(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0, $1_1 | 0);
  $336($0_1 | 0, 93 | 0);
 }
 
 function $378($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $4_1 = 0, $36_1 = 0, $42_1 = 0, $45_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $4_1 = HEAPU8[($3_1 + 52 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) != (292 | 0)) {
     break label$2
    }
    $312($3_1 | 0, HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0, 2147483647 | 0, 3605 | 0);
    $374($0_1 | 0, $2_1 + 32 | 0 | 0);
    break label$1;
   }
   $377($0_1 | 0, $2_1 + 32 | 0 | 0);
  }
  HEAP32[($1_1 + 28 | 0) >> 2] = (HEAP32[($1_1 + 28 | 0) >> 2] | 0) + 1 | 0;
  $336($0_1 | 0, 61 | 0);
  $1_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $36_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2_1 + 56 | 0) + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $36_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $42_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($2_1 + 56 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $42_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $45_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 56 | 0) >> 2] = $45_1;
  HEAP32[($2_1 + 60 | 0) >> 2] = i64toi32_i32$1;
  $141($3_1 | 0, $2_1 + 56 | 0 | 0, $2_1 + 32 | 0 | 0);
  $354($0_1 | 0, $2_1 + 8 | 0 | 0);
  $129($3_1 | 0, $2_1 + 56 | 0 | 0, $2_1 + 8 | 0 | 0);
  HEAP8[($3_1 + 52 | 0) >> 0] = $4_1;
  global$0 = $2_1 + 80 | 0;
 }
 
 function $379($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $354($0_1 | 0, $1_1 | 0);
  HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function $380($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
  $5_1 = $280(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 72 | 0) >> 2] | 0 | 0, HEAP16[($1_1 + 48 | 0) >> 1] | 0 | 0, $3_1 + 32 | 0 | 0, 12 | 0, 32767 | 0, 3643 | 0) | 0;
  HEAP32[($3_1 + 72 | 0) >> 2] = $5_1;
  label$1 : {
   $6_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
   if (($4_1 | 0) >= ($6_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    HEAP32[($5_1 + Math_imul($4_1, 12) | 0) >> 2] = 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < ($6_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $4_1 = HEAP16[($1_1 + 48 | 0) >> 1] | 0;
  $5_1 = $5_1 + Math_imul($4_1, 12) | 0;
  HEAP32[$5_1 >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  label$3 : {
   if (!((HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
    break label$3
   }
   if (!((HEAPU8[($2_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$3
   }
   $233(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 | 0);
   $4_1 = HEAP16[($1_1 + 48 | 0) >> 1] | 0;
  }
  HEAP16[($1_1 + 48 | 0) >> 1] = $4_1 + 1 | 0;
  return $4_1 | 0;
 }
 
 function $381($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $328($0_1 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $382($4_1 | 0, $3_1 | 0, $1_1 | 0, 1 | 0);
  label$1 : {
   if (HEAP32[$1_1 >> 2] | 0) {
    break label$1
   }
   $382($4_1 | 0, HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0, $1_1 | 0, 1 | 0);
   $365($2_1 + 8 | 0 | 0, $3_1 | 0);
   $141($4_1 | 0, $1_1 | 0, $2_1 + 8 | 0 | 0);
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $382($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $4_1 = $383($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
     if (($4_1 | 0) < (0 | 0)) {
      break label$3
     }
     if ($3_1) {
      break label$2
     }
     if (($4_1 | 0) != (9 | 0)) {
      break label$2
     }
     $384($0_1 | 0, HEAPU16[($2_1 + 10 | 0) >> 1] | 0 | 0);
     return;
    }
    label$4 : {
     $3_1 = $385($0_1 | 0, $1_1 | 0) | 0;
     if (($3_1 | 0) > (-1 | 0)) {
      break label$4
     }
     $382(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, 0 | 0);
     if (((HEAP32[$2_1 >> 2] | 0) + -9 | 0) >>> 0 > 1 >>> 0) {
      break label$2
     }
     $3_1 = $386($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    }
    $364($2_1 | 0, 10 | 0, $3_1 | 0);
   }
   return;
  }
  $364($2_1 | 0, 0 | 0, 0 | 0);
 }
 
 function $383($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = HEAPU8[($0_1 + 50 | 0) >> 0] | 0;
  label$1 : {
   label$2 : while (1) {
    $4_1 = -1;
    if (($3_1 | 0) < (1 | 0)) {
     break label$1
    }
    $3_1 = $3_1 + -1 | 0;
    $4_1 = $302($0_1 | 0, $3_1 | 0) | 0;
    if ((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   label$3 : {
    label$4 : {
     if ((HEAPU8[($4_1 + 9 | 0) >> 0] | 0 | 0) != (3 | 0)) {
      break label$4
     }
     $364($2_1 | 0, 11 | 0, (HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $3_1 | 0 | 0);
     break label$3;
    }
    $387($0_1 | 0, $2_1 | 0, $3_1 | 0);
   }
   $4_1 = HEAP32[$2_1 >> 2] | 0;
  }
  return $4_1 | 0;
 }
 
 function $384($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $0_1 + 12 | 0;
  label$1 : while (1) {
   $2_1 = HEAP32[$2_1 >> 2] | 0;
   if ((HEAPU8[($2_1 + 12 | 0) >> 0] | 0 | 0) > ($1_1 | 0)) {
    continue label$1
   }
   break label$1;
  };
  HEAP8[($2_1 + 13 | 0) >> 0] = 1;
  HEAP8[($0_1 + 54 | 0) >> 0] = 1;
 }
 
 function $385($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAPU8[($0_1 + 51 | 0) >> 0] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 60 | 0) >> 2] | 0;
   $0_1 = 0;
   label$2 : while (1) {
    label$3 : {
     if ((HEAP32[($3_1 + ($0_1 << 3 | 0) | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    if ($0_1 >>> 0 < $2_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return -1 | 0;
 }
 
 function $386($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = $307($0_1 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[$2_1 >> 2] | 0 | 0) != (9 | 0)) {
     break label$2
    }
    HEAP8[($3_1 + 4 | 0) >> 0] = 1;
    HEAP8[($3_1 + 5 | 0) >> 0] = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
    $2_1 = ($302($4_1 | 0, HEAPU16[($2_1 + 10 | 0) >> 1] | 0 | 0) | 0) + 9 | 0;
    break label$1;
   }
   HEAP8[($3_1 + 4 | 0) >> 0] = 0;
   HEAP8[($3_1 + 5 | 0) >> 0] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   $2_1 = ((HEAP32[((HEAP32[$4_1 >> 2] | 0) + 60 | 0) >> 2] | 0) + ((HEAP32[($2_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) + 6 | 0;
  }
  $2_1 = HEAPU8[$2_1 >> 0] | 0;
  HEAP32[$3_1 >> 2] = $1_1;
  HEAP8[($3_1 + 6 | 0) >> 0] = $2_1;
  label$3 : {
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   if (!((HEAPU8[($3_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
    break label$3
   }
   if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
    break label$3
   }
   $233(HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 | 0, $3_1 | 0, $1_1 | 0);
  }
  return (HEAPU8[($0_1 + 51 | 0) >> 0] | 0) + -1 | 0 | 0;
 }
 
 function $387($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = -1;
  HEAP32[($1_1 + 20 | 0) >> 2] = -1;
  HEAP32[$1_1 >> 2] = 9;
  HEAP16[($1_1 + 10 | 0) >> 1] = $2_1;
  HEAP8[($1_1 + 8 | 0) >> 0] = HEAPU8[(($302($0_1 | 0, $2_1 | 0) | 0) + 10 | 0) >> 0] | 0;
 }
 
 function $388($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = HEAP32[((HEAP32[((HEAP32[($0_1 + 48 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   $5_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
   if (($3_1 | 0) >= ($5_1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $6_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + ($3_1 << 4 | 0) | 0;
      if ((HEAP32[$6_1 >> 2] | 0 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
       break label$4
      }
      $5_1 = HEAPU8[($6_1 + 13 | 0) >> 0] | 0;
      $389($0_1 | 0, $3_1 | 0, $1_1 | 0);
      $2_1 = $2_1 | $5_1 | 0;
      $5_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      break label$3;
     }
     $3_1 = $3_1 + 1 | 0;
    }
    if (($3_1 | 0) < ($5_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $389($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $44_1 = 0, $49_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   $4_1 = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
   if ((HEAPU8[($4_1 + 12 | 0) >> 0] | 0) >>> 0 < (HEAPU8[($2_1 + 12 | 0) >> 0] | 0) >>> 0) {
    break label$1
   }
   $92(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0);
   label$2 : {
    $2_1 = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + -1 | 0;
    if (($2_1 | 0) <= ($1_1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     $0_1 = $2_1 + ($1_1 << 4 | 0) | 0;
     $1_1 = $1_1 + 1 | 0;
     $2_1 = $2_1 + ($1_1 << 4 | 0) | 0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $44_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[$0_1 >> 2] = $44_1;
     HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $2_1 = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + -1 | 0;
     if (($1_1 | 0) < ($2_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   HEAP32[($3_1 + 16 | 0) >> 2] = $2_1;
   return;
  }
  $390($0_1 | 0, $4_1 | 0);
  abort();
 }
 
 function $390($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[(($302(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0, HEAPU8[($1_1 + 12 | 0) >> 0] | 0 | 0) | 0) + 16 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $3_1 + 16 | 0;
  HEAP32[$2_1 >> 2] = $5_1 + 16 | 0;
  $77($0_1 | 0, $298($4_1 | 0, 3749 | 0, $2_1 | 0) | 0 | 0);
  abort();
 }
 
 function $391($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $354($0_1 | 0, $1_1 + 8 | 0 | 0);
  $113(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0);
  global$0 = $1_1 + 32 | 0;
 }
 
 function $392($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $336($0_1 | 0, 259 | 0);
  $7_1 = $4_1 << 2 | 0;
  $8_1 = $97($6_1 | 0, HEAP32[($7_1 + 3964 | 0) >> 2] | 0 | 0, $1_1 | 0, 0 | 0) | 0;
  $311($6_1 | 0, $5_1 | 0, 0 | 0);
  $342($0_1 | 0, $3_1 | 0);
  $100($6_1 | 0, $3_1 | 0);
  $320($0_1 | 0);
  $316($6_1 | 0);
  $393($6_1 | 0, $8_1 | 0, $91($6_1 | 0) | 0 | 0, 0 | 0);
  label$1 : {
   if (!$4_1) {
    break label$1
   }
   $83($6_1 | 0, 76 | 0, $1_1 | 0, 0 | 0, $3_1 | 0, 0 | 0) | 0;
   $150($6_1 | 0, $2_1 | 0);
  }
  $393($6_1 | 0, $97($6_1 | 0, HEAP32[($7_1 + 3972 | 0) >> 2] | 0 | 0, $1_1 | 0, 0 | 0) | 0 | 0, $8_1 + 1 | 0 | 0, 1 | 0);
  $150($6_1 | 0, $2_1 | 0);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $393($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   $2_1 = ($1_1 ^ -1 | 0) + $2_1 | 0;
   $3_1 = $3_1 ? 0 - $2_1 | 0 : $2_1;
   if (($3_1 | 0) < (131072 | 0)) {
    break label$1
   }
   $258(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, 3980 | 0);
   abort();
  }
  $1_1 = (HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & 32767 | 0 | ($3_1 << 15 | 0) | 0;
 }
 
 function $394($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch ((HEAP32[$1_1 >> 2] | 0) + -9 | 0 | 0) {
     case 2:
      $1_1 = ((HEAP32[(HEAP32[($0_1 + 68 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($1_1 + 8 | 0) >> 2] | 0, 24) | 0) + 16 | 0;
      break label$2;
     case 0:
      $1_1 = $302($3_1 | 0, HEAPU16[($1_1 + 10 | 0) >> 1] | 0 | 0) | 0;
      if (!(HEAPU8[($1_1 + 9 | 0) >> 0] | 0)) {
       break label$1
      }
      $1_1 = $1_1 + 16 | 0;
      break label$2;
     case 1:
      break label$3;
     default:
      break label$1;
     };
    }
    $1_1 = (HEAP32[((HEAP32[$3_1 >> 2] | 0) + 60 | 0) >> 2] | 0) + ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) << 3 | 0) | 0;
    if (!(HEAPU8[($1_1 + 6 | 0) >> 0] | 0)) {
     break label$1
    }
   }
   $1_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = $1_1 + 16 | 0;
   $77($0_1 | 0, $298($3_1 | 0, 4139 | 0, $2_1 | 0) | 0 | 0);
   abort();
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $395($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $4_1 = HEAPU8[($3_1 + 52 | 0) >> 0] | 0;
   $5_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $0_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     if (($0_1 & -4 | 0 | 0) != (12 | 0)) {
      break label$3
     }
     $6_1 = HEAP32[$2_1 >> 2] | 0;
     label$4 : {
      label$5 : {
       if (($0_1 | 0) != (13 | 0)) {
        break label$5
       }
       if (($6_1 | 0) != (10 | 0)) {
        break label$3
       }
       if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != (HEAPU8[($1_1 + 18 | 0) >> 0] | 0 | 0)) {
        break label$3
       }
       HEAP8[($1_1 + 18 | 0) >> 0] = $4_1;
       HEAP32[($1_1 + 8 | 0) >> 2] = 15;
       break label$4;
      }
      label$6 : {
       if (($6_1 | 0) != (9 | 0)) {
        break label$6
       }
       if ((HEAPU8[($1_1 + 18 | 0) >> 0] | 0 | 0) != (HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0)) {
        break label$6
       }
       HEAP8[($1_1 + 18 | 0) >> 0] = $4_1;
       $5_1 = 1;
      }
      if (($0_1 | 0) != (12 | 0)) {
       break label$3
      }
      if ((HEAP32[$2_1 >> 2] | 0 | 0) != (9 | 0)) {
       break label$3
      }
      if ((HEAP16[($1_1 + 16 | 0) >> 1] | 0 | 0) != (HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0)) {
       break label$3
      }
      HEAP16[($1_1 + 16 | 0) >> 1] = $4_1;
     }
     $5_1 = 1;
    }
    $1_1 = HEAP32[$1_1 >> 2] | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   if (!$5_1) {
    break label$1
   }
   label$7 : {
    label$8 : {
     if ((HEAP32[$2_1 >> 2] | 0 | 0) != (9 | 0)) {
      break label$8
     }
     $83($3_1 | 0, 0 | 0, $4_1 | 0, HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0, 0 | 0, 0 | 0) | 0;
     break label$7;
    }
    $83($3_1 | 0, 9 | 0, $4_1 | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0, 0 | 0) | 0;
   }
   $100($3_1 | 0, 1 | 0);
  }
 }
 
 function $396($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
  $3_1 = $2_1 + -2147483647 | 0;
  $1_1 = ($3_1 | 0) > ($1_1 | 0) ? $3_1 : $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1 - $1_1 | 0;
 }
 
 function $397($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $7_1 = 0;
  $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $5_1 = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  $3_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
  $6_1 = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + $3_1 | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = $6_1;
  label$1 : {
   if (!$4_1) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    $284($0_1 | 0, $4_1 | 0, 36 | 0);
    $6_1 = (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) + -1 | 0;
    HEAP16[($0_1 + 8 | 0) >> 1] = $6_1;
    $4_1 = $3_1;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
   $3_1 = $6_1 & 65535 | 0;
   $6_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
  }
  $4_1 = $6_1 - $3_1 | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = $4_1;
  label$3 : {
   if ($1_1 >>> 0 > 39999 >>> 0) {
    break label$3
   }
   $3_1 = $4_1 & 65535 | 0;
   if ($3_1 >>> 0 < 81 >>> 0) {
    break label$3
   }
   if ((HEAP32[($2_1 + 160 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
    break label$3
   }
   $6_1 = $1_1 + 80 | 0;
   $1_1 = HEAP32[($2_1 + 736 | 0) >> 2] | 0;
   $7_1 = $6_1 - $1_1 | 0;
   if (($7_1 + $3_1 | 0 | 0) < (81 | 0)) {
    break label$3
   }
   HEAP32[($2_1 + 736 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 96 | 0) >> 2] = $7_1 + $4_1 | 0;
   $5_1 = $1_1 + -80 | 0;
  }
  return $5_1 | 0;
 }
 
 function $398($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  $1_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
  $3_1 = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + $1_1 | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = $3_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    $284($0_1 | 0, $2_1 | 0, 36 | 0);
    $3_1 = (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) + -1 | 0;
    HEAP16[($0_1 + 8 | 0) >> 1] = $3_1;
    $2_1 = $1_1;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
   $1_1 = $3_1 & 65535 | 0;
   $3_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
  }
  HEAP32[($0_1 + 96 | 0) >> 2] = $3_1 - $1_1 | 0;
 }
 
 function $399($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
  $2_1 = $1_1 + -1 | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 & 65535 | 0) >>> 0 > 80 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     $1_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = 0;
     $3_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
     $2_1 = $2_1 + $3_1 | 0;
     HEAP32[($0_1 + 96 | 0) >> 2] = $2_1;
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      label$5 : while (1) {
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       $284($0_1 | 0, $1_1 | 0, 36 | 0);
       $3_1 = (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) + -1 | 0;
       HEAP16[($0_1 + 8 | 0) >> 1] = $3_1;
       $1_1 = $2_1;
       if ($1_1) {
        continue label$5
       }
       break label$5;
      };
      $3_1 = $3_1 & 65535 | 0;
      $2_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
     }
     $1_1 = $2_1 - $3_1 | 0;
     HEAP32[($0_1 + 96 | 0) >> 2] = $1_1;
     $1_1 = $1_1 & 65535 | 0;
     if ($1_1 >>> 0 > 80 >>> 0) {
      break label$3
     }
     if ($1_1 >>> 0 <= 12 >>> 0) {
      break label$2
     }
     if ($1_1 >>> 0 >= 68 >>> 0) {
      break label$1
     }
    }
    return;
   }
   $197($0_1 | 0, 5 | 0);
   abort();
  }
  HEAP32[($0_1 + 96 | 0) >> 2] = 67;
  $187($0_1 | 0, 4180 | 0, 0 | 0);
  abort();
 }
 
 function $400($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $399($0_1 | 0);
  $1_1 = $286($0_1 | 0, 36 | 0, 0 | 0) | 0;
  $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($1_1 + 20 | 0) >> 2] = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
  HEAP16[($0_1 + 8 | 0) >> 1] = (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) + 1 | 0;
  return $1_1 | 0;
 }
 
 function $401($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0;
  $1_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
  $2_1 = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + $1_1 | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = $2_1;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : while (1) {
     $284($0_1 | 0, $4_1 | 0, 36 | 0);
     $1_1 = (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) + -1 | 0;
     HEAP16[($0_1 + 8 | 0) >> 1] = $1_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
     $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$2
     }
     $3_1 = $2_1;
     $2_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$3
     }
     break label$3;
    };
   }
   $1_1 = $1_1 & 65535 | 0;
   $2_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
  }
  HEAP32[($0_1 + 96 | 0) >> 2] = $2_1 - $1_1 | 0;
 }
 
 function $402($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $5_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $248($0_1 | 0);
  }
  $2_1 = $286($0_1 | 0, 120 | 0, 8 | 0) | 0;
  $3_1 = HEAPU8[($1_1 + 76 | 0) >> 0] | 0;
  HEAP8[($2_1 + 8 | 0) >> 0] = 8;
  HEAP8[($2_1 + 9 | 0) >> 0] = $3_1 & 24 | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
  $3_1 = $2_1 + 4 | 0;
  HEAP32[($1_1 + 88 | 0) >> 2] = $3_1;
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($4_1 + 8 | 0) >> 0] = 72;
  HEAP32[$4_1 >> 2] = $3_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 16 | 0;
  HEAP32[($2_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($2_1 + 24 | 0) >> 2] = 0;
  HEAP32[($2_1 + 92 | 0) >> 2] = 0;
  HEAP32[($2_1 + 52 | 0) >> 2] = 0;
  HEAP32[($2_1 + 48 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 116 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 104 | 0) >> 2] = 0;
  HEAP32[($2_1 + 108 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 36 | 0) >> 2] = 0;
  HEAP32[($2_1 + 40 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 96 | 0) >> 2] = 0;
  $9_1 = 256;
  HEAP16[($2_1 + 10 | 0) >> 1] = $9_1;
  HEAP16[($2_1 + 12 | 0) >> 1] = $9_1 >>> 16 | 0;
  HEAP32[($2_1 + 100 | 0) >> 2] = HEAPU16[($0_1 + 96 | 0) >> 1] | 0;
  HEAP32[($2_1 + 116 | 0) >> 2] = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
  HEAP32[($2_1 + 108 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
  HEAP32[($2_1 + 112 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 92 | 0) >> 2] = $5_1;
  $7_1 = (HEAP32[($1_1 + 160 | 0) >> 2] | 0) + -4 | 0;
  $8_1 = HEAPU8[$7_1 >> 0] | 0 | ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  HEAP8[$2_1 >> 0] = $8_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $8_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $8_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $8_1 >>> 24 | 0;
  $0_1 = $286($0_1 | 0, 640 | 0, 0 | 0) | 0;
  HEAP32[($2_1 + 104 | 0) >> 2] = 40;
  HEAP32[($2_1 + 36 | 0) >> 2] = $0_1;
  HEAP8[($0_1 + 8 | 0) >> 0] = 0;
  $0_1 = 1;
  label$2 : while (1) {
   HEAP8[(((HEAP32[($2_1 + 36 | 0) >> 2] | 0) + ($0_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 0;
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != (40 | 0)) {
    continue label$2
   }
   break label$2;
  };
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 64 | 0) >> 2] = 0;
  HEAP32[($2_1 + 68 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 88 | 0) >> 2] = 131072;
  HEAP32[($2_1 + 72 | 0) >> 2] = 0;
  $0_1 = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = $0_1;
  HEAP32[($2_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($2_1 + 32 | 0) >> 2] = ($0_1 + ((HEAP32[($2_1 + 104 | 0) >> 2] | 0) << 4 | 0) | 0) + -80 | 0;
  HEAP8[($0_1 + 8 | 0) >> 0] = 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = $2_1 + 56 | 0;
  $0_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
  HEAP32[($2_1 + 60 | 0) >> 2] = $0_1 + 336 | 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = $0_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $403($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $229($1_1 | 0, HEAP32[($1_1 + 32 | 0) >> 2] | 0 | 0, -1 | 0) | 0;
  label$1 : {
   $2_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $1_1 + 52 | 0;
   $3_1 = $1_1 + 64 | 0;
   $4_1 = HEAP32[$3_1 >> 2] | 0;
   HEAP32[$3_1 >> 2] = 0;
   $3_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
   $5_1 = (HEAP32[($1_1 + 96 | 0) >> 2] | 0) + $3_1 | 0;
   HEAP32[($1_1 + 96 | 0) >> 2] = $5_1;
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    label$3 : while (1) {
     $2_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     $284($1_1 | 0, $4_1 | 0, 36 | 0);
     $3_1 = (HEAPU16[($1_1 + 8 | 0) >> 1] | 0) + -1 | 0;
     HEAP16[($1_1 + 8 | 0) >> 1] = $3_1;
     $4_1 = $2_1;
     if ($2_1) {
      continue label$3
     }
     break label$3;
    };
    $3_1 = $3_1 & 65535 | 0;
    $2_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
    $5_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
   }
   HEAP32[($1_1 + 96 | 0) >> 2] = $5_1 - $3_1 | 0;
   $284($1_1 | 0, $2_1 | 0, (HEAP32[($1_1 + 100 | 0) >> 2] | 0) << 4 | 0 | 0);
  }
  $284($0_1 | 0, $1_1 + -4 | 0 | 0, 120 | 0);
 }
 
 function $404($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = $229($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, -2 | 0) | 0;
  HEAP8[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + 8 | 0) >> 0] = 0;
  $2_1 = $0_1 + 52 | 0;
  $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  $4_1 = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) == (-2 | 0)) {
     break label$2
    }
    $196($0_1 | 0, $1_1 | 0, $4_1 | 0);
    $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
   $1_1 = 0;
  }
  HEAP32[($0_1 + 52 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $2_1;
  HEAP8[($0_1 + 6 | 0) >> 0] = $1_1;
  HEAP32[($0_1 + 56 | 0) >> 2] = $4_1 + 320 | 0;
  HEAP16[($0_1 + 86 | 0) >> 1] = 2;
  return $1_1 | 0;
 }
 
 function $405($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $7_1 = 0, $3_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   $4_1 = FUNCTION_TABLE[$0_1 | 0]($1_1, 0, 8, 864) | 0;
   if (!$4_1) {
    break label$1
   }
   HEAP8[($4_1 + 196 | 0) >> 0] = 8;
   HEAP16[($4_1 + 8 | 0) >> 1] = 2056;
   $3_1 = 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = 0;
   HEAP32[($4_1 + 104 | 0) >> 2] = 0;
   HEAP32[($4_1 + 92 | 0) >> 2] = 0;
   HEAP32[($4_1 + 52 | 0) >> 2] = 0;
   HEAP32[($4_1 + 116 | 0) >> 2] = 0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 108 | 0) >> 2] = 0;
   HEAP32[($4_1 + 112 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 36 | 0) >> 2] = 0;
   HEAP32[($4_1 + 40 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 2080;
   HEAP32[($4_1 + 96 | 0) >> 2] = 0;
   HEAP32[($4_1 + 100 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = 256;
   HEAP16[($4_1 + 10 | 0) >> 1] = $8_1;
   HEAP16[($4_1 + 12 | 0) >> 1] = $8_1 >>> 16 | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
   HEAP32[($4_1 + 856 | 0) >> 2] = 2080;
   HEAP32[($4_1 + 120 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 124 | 0) >> 2] = $1_1;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 848 | 0) >> 2] = 0;
   HEAP32[($4_1 + 852 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 20 | 0) >> 2] = $4_1 + 120 | 0;
   $0_1 = $4_1 + 4 | 0;
   HEAP32[($4_1 + 48 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 208 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 280 | 0) >> 2] = $0_1;
   $1_1 = fimport$11(0 | 0) | 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = 10;
   HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
   HEAP32[$2_1 >> 2] = $1_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + 192 | 0) >> 2] = $412($2_1 + 4 | 0 | 0, 12 | 0, $1_1 | 0) | 0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 148 | 0) >> 2] = 0;
   HEAP32[($4_1 + 152 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 276 | 0) >> 2] = 0;
   HEAP8[($4_1 + 168 | 0) >> 0] = 0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 212 | 0) >> 2] = 0;
   HEAP32[($4_1 + 216 | 0) >> 2] = i64toi32_i32$0;
   $9_1 = 8;
   HEAP8[($4_1 + 197 | 0) >> 0] = $9_1;
   HEAP8[($4_1 + 198 | 0) >> 0] = $9_1 >>> 8 | 0;
   i64toi32_i32$1 = $4_1 + 220 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 228 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 236 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 244 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 252 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 260 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 268 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($4_1 + 205 | 0) >> 0] = 13;
   $7_1 = 422707200;
   HEAP8[($4_1 + 201 | 0) >> 0] = $7_1;
   HEAP8[($4_1 + 202 | 0) >> 0] = $7_1 >>> 8 | 0;
   HEAP8[($4_1 + 203 | 0) >> 0] = $7_1 >>> 16 | 0;
   HEAP8[($4_1 + 204 | 0) >> 0] = $7_1 >>> 24 | 0;
   HEAP8[($4_1 + 184 | 0) >> 0] = 3;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 176 | 0) >> 2] = 0;
   HEAP32[($4_1 + 180 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 140 | 0) >> 2] = 0;
   HEAP32[($4_1 + 144 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 128 | 0) >> 2] = 864;
   HEAP32[($4_1 + 132 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 388 | 0) >> 2] = 0;
   HEAP32[($4_1 + 392 | 0) >> 2] = i64toi32_i32$0;
   $10_1 = 6420;
   HEAP8[($4_1 + 199 | 0) >> 0] = $10_1;
   HEAP8[($4_1 + 200 | 0) >> 0] = $10_1 >>> 8 | 0;
   i64toi32_i32$1 = $4_1 + 396 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 404 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 412 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 420 | 0) >> 2] = 0;
   label$2 : {
    if ($198($0_1 | 0, 11 | 0, 0 | 0) | 0) {
     break label$2
    }
    $3_1 = $0_1;
    break label$1;
   }
   $407($0_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $406($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $4_1 = $286($0_1 | 0, 640 | 0, 0 | 0) | 0;
  HEAP32[($0_1 + 100 | 0) >> 2] = 40;
  HEAP32[($0_1 + 32 | 0) >> 2] = $4_1;
  HEAP8[($4_1 + 8 | 0) >> 0] = 0;
  $4_1 = 1;
  label$1 : while (1) {
   HEAP8[(((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($4_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 0;
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != (40 | 0)) {
    continue label$1
   }
   break label$1;
  };
  $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
  i64toi32_i32$1 = $0_1 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 84 | 0) >> 2] = 131072;
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 28 | 0) >> 2] = ($4_1 + ((HEAP32[($0_1 + 100 | 0) >> 2] | 0) << 4 | 0) | 0) + -80 | 0;
  HEAP8[($4_1 + 8 | 0) >> 0] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = $0_1 + 52 | 0;
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = $4_1 + 336 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $4_1 + 16 | 0;
  $4_1 = $431($0_1 | 0) | 0;
  HEAP8[($3_1 + 48 | 0) >> 0] = 69;
  HEAP32[($3_1 + 40 | 0) >> 2] = $4_1;
  $425($0_1 | 0, $4_1 | 0, 2 | 0, 0 | 0);
  HEAP8[($2_1 + 8 | 0) >> 0] = 72;
  HEAP32[$2_1 >> 2] = $0_1;
  i64toi32_i32$0 = 0;
  $426($0_1 | 0, $4_1 | 0, 1 | 0, i64toi32_i32$0 | 0, $2_1 | 0);
  $5_1 = $431($0_1 | 0) | 0;
  HEAP8[($2_1 + 8 | 0) >> 0] = 69;
  HEAP32[$2_1 >> 2] = $5_1;
  i64toi32_i32$0 = 0;
  $426($0_1 | 0, $4_1 | 0, 2 | 0, i64toi32_i32$0 | 0, $2_1 | 0);
  $416($0_1 | 0);
  $439($0_1 | 0);
  $256($0_1 | 0);
  HEAP8[($3_1 + 64 | 0) >> 0] = 0;
  HEAP8[($3_1 + 81 | 0) >> 0] = 1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $407($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $229($0_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, -2 | 0) | 0;
  $244($0_1 | 0);
  $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $284($0_1 | 0, HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($2_1 + 32 | 0) >> 2] | 0) << 2 | 0 | 0);
  label$1 : {
   $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   HEAP32[($0_1 + 20 | 0) >> 2] = $0_1 + 52 | 0;
   $4_1 = $0_1 + 64 | 0;
   $2_1 = HEAP32[$4_1 >> 2] | 0;
   HEAP32[$4_1 >> 2] = 0;
   $4_1 = HEAPU16[($0_1 + 8 | 0) >> 1] | 0;
   $5_1 = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + $4_1 | 0;
   HEAP32[($0_1 + 96 | 0) >> 2] = $5_1;
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    label$3 : while (1) {
     $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
     $284($0_1 | 0, $2_1 | 0, 36 | 0);
     $4_1 = (HEAPU16[($0_1 + 8 | 0) >> 1] | 0) + -1 | 0;
     HEAP16[($0_1 + 8 | 0) >> 1] = $4_1;
     $2_1 = $3_1;
     if ($2_1) {
      continue label$3
     }
     break label$3;
    };
    $4_1 = $4_1 & 65535 | 0;
    $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    $5_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   }
   HEAP32[($0_1 + 96 | 0) >> 2] = $5_1 - $4_1 | 0;
   $284($0_1 | 0, $3_1 | 0, (HEAP32[($0_1 + 100 | 0) >> 2] | 0) << 4 | 0 | 0);
  }
  FUNCTION_TABLE[HEAP32[$1_1 >> 2] | 0 | 0](HEAP32[($1_1 + 4 | 0) >> 2] | 0, $0_1 + -4 | 0, 864, 0) | 0;
 }
 
 function $408($0_1) {
  $0_1 = $0_1 | 0;
  $407(HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 160 | 0) >> 2] | 0 | 0);
 }
 
 function $409($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 728 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   FUNCTION_TABLE[$3_1 | 0](HEAP32[($0_1 + 732 | 0) >> 2] | 0, $1_1, $2_1);
  }
 }
 
 function $410($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $2_1 = 4197;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (((HEAPU8[($3_1 + -8 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
    break label$1
   }
   $2_1 = (HEAP32[($3_1 + -16 | 0) >> 2] | 0) + 16 | 0;
  }
  label$2 : {
   $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $4_1 = HEAP32[($3_1 + 728 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$2
   }
   FUNCTION_TABLE[$4_1 | 0](HEAP32[($3_1 + 732 | 0) >> 2] | 0, 4226, 1);
   $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $4_1 = HEAP32[($3_1 + 728 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$2
   }
   FUNCTION_TABLE[$4_1 | 0](HEAP32[($3_1 + 732 | 0) >> 2] | 0, $1_1, 1);
   $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $4_1 = HEAP32[($3_1 + 728 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$2
   }
   FUNCTION_TABLE[$4_1 | 0](HEAP32[($3_1 + 732 | 0) >> 2] | 0, 4236, 1);
   $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $4_1 = HEAP32[($3_1 + 728 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$2
   }
   FUNCTION_TABLE[$4_1 | 0](HEAP32[($3_1 + 732 | 0) >> 2] | 0, $2_1, 1);
   $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 728 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$2
   }
   FUNCTION_TABLE[$2_1 | 0](HEAP32[($0_1 + 732 | 0) >> 2] | 0, 4239, 0);
  }
 }
 
 function $411($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$1
   }
   return 1 | 0;
  }
  $2_1 = 0;
  label$2 : {
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($3_1 | 0) != (HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0)) {
    break label$2
   }
   $2_1 = !($874($0_1 + 16 | 0 | 0, $1_1 + 16 | 0 | 0, $3_1 | 0) | 0);
  }
  return $2_1 | 0;
 }
 
 function $412($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $2_1 = $2_1 ^ $1_1 | 0;
  label$1 : {
   $3_1 = $1_1 >>> 5 | 0;
   if ($3_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $4_1 = $3_1 ^ -1 | 0;
   label$2 : while (1) {
    $2_1 = ((($2_1 << 5 | 0) + ($2_1 >>> 2 | 0) | 0) + (HEAPU8[(($1_1 + $0_1 | 0) + -1 | 0) >> 0] | 0) | 0) ^ $2_1 | 0;
    $1_1 = $1_1 + $4_1 | 0;
    if ($1_1 >>> 0 > $3_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $413($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 6 | 0) >> 0] | 0)) {
    break label$1
   }
   return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $2_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ $1_1 | 0;
  label$2 : {
   $3_1 = $1_1 >>> 5 | 0;
   if ($3_1 >>> 0 >= $1_1 >>> 0) {
    break label$2
   }
   $4_1 = $0_1 + 16 | 0;
   $5_1 = $3_1 ^ -1 | 0;
   label$3 : while (1) {
    $2_1 = ((($2_1 << 5 | 0) + ($2_1 >>> 2 | 0) | 0) + (HEAPU8[(($1_1 + $4_1 | 0) + -1 | 0) >> 0] | 0) | 0) ^ $2_1 | 0;
    $1_1 = $1_1 + $5_1 | 0;
    if ($1_1 >>> 0 > $3_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP8[($0_1 + 6 | 0) >> 0] = 1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  return $2_1 | 0;
 }
 
 function $414($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $9_1 = 0, $8_1 = 0, $7_1 = 0, $5_1 = 0, $3_1 = 0, $10_1 = 0, $2_1 = 0, $6_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $3_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
   $4_1 = ($3_1 | 0) <= ($1_1 | 0);
   if ($4_1) {
    break label$1
   }
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
   $6_1 = $1_1 + -1 | 0;
   $7_1 = 0;
   label$2 : while (1) {
    $8_1 = $5_1 + ($7_1 << 2 | 0) | 0;
    $9_1 = HEAP32[$8_1 >> 2] | 0;
    HEAP32[$8_1 >> 2] = 0;
    label$3 : {
     if (!$9_1) {
      break label$3
     }
     label$4 : while (1) {
      $8_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
      $10_1 = $5_1 + (((HEAP32[($9_1 + 8 | 0) >> 2] | 0) & $6_1 | 0) << 2 | 0) | 0;
      HEAP32[($9_1 + 12 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$10_1 >> 2] = $9_1;
      $9_1 = $8_1;
      if ($9_1) {
       continue label$4
      }
      break label$4;
     };
    }
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$5 : {
   label$6 : {
    $8_1 = $3_1 << 2 | 0;
    $9_1 = $1_1 << 2 | 0;
    $5_1 = $285($0_1 | 0, HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, $8_1 | 0, $9_1 | 0) | 0;
    if ($5_1) {
     break label$6
    }
    if ($4_1) {
     break label$5
    }
    $5_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
    $9_1 = $1_1 << 2 | 0;
    $952($5_1 + $9_1 | 0 | 0, 0 | 0, $8_1 - $9_1 | 0 | 0) | 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$5
    }
    $6_1 = $3_1 + -1 | 0;
    $7_1 = 0;
    label$7 : while (1) {
     $8_1 = $5_1 + ($7_1 << 2 | 0) | 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = 0;
     label$8 : {
      if (!$9_1) {
       break label$8
      }
      label$9 : while (1) {
       $8_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
       $10_1 = $5_1 + (((HEAP32[($9_1 + 8 | 0) >> 2] | 0) & $6_1 | 0) << 2 | 0) | 0;
       HEAP32[($9_1 + 12 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
       HEAP32[$10_1 >> 2] = $9_1;
       $9_1 = $8_1;
       if ($9_1) {
        continue label$9
       }
       break label$9;
      };
     }
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) != ($1_1 | 0)) {
      continue label$7
     }
     break label$5;
    };
   }
   HEAP32[($2_1 + 32 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
   if (($3_1 | 0) >= ($1_1 | 0)) {
    break label$5
   }
   $8_1 = $3_1 << 2 | 0;
   $952($5_1 + $8_1 | 0 | 0, 0 | 0, $9_1 - $8_1 | 0 | 0) | 0;
   if (($3_1 | 0) < (1 | 0)) {
    break label$5
   }
   $6_1 = $1_1 + -1 | 0;
   $7_1 = 0;
   label$10 : while (1) {
    $8_1 = $5_1 + ($7_1 << 2 | 0) | 0;
    $9_1 = HEAP32[$8_1 >> 2] | 0;
    HEAP32[$8_1 >> 2] = 0;
    label$11 : {
     if (!$9_1) {
      break label$11
     }
     label$12 : while (1) {
      $8_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
      $10_1 = $5_1 + (((HEAP32[($9_1 + 8 | 0) >> 2] | 0) & $6_1 | 0) << 2 | 0) | 0;
      HEAP32[($9_1 + 12 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$10_1 >> 2] = $9_1;
      $9_1 = $8_1;
      if ($9_1) {
       continue label$12
      }
      break label$12;
     };
    }
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) != ($3_1 | 0)) {
     continue label$10
    }
    break label$10;
   };
  }
 }
 
 function $415($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   label$2 : {
    $2_1 = $0_1 + ($1_1 << 3 | 0) | 0;
    $3_1 = $2_1 + 304 | 0;
    if (!((HEAPU8[((HEAP32[$3_1 >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
     break label$2
    }
    HEAP32[$3_1 >> 2] = HEAP32[($0_1 + 164 | 0) >> 2] | 0;
   }
   label$3 : {
    $2_1 = $2_1 + 308 | 0;
    if (!((HEAPU8[((HEAP32[$2_1 >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
     break label$3
    }
    HEAP32[$2_1 >> 2] = HEAP32[($0_1 + 164 | 0) >> 2] | 0;
   }
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (53 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $416($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $1_1 = 0;
  $1_1 = 0;
  $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $3_1 = $286($0_1 | 0, 512 | 0, 0 | 0) | 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = $3_1;
  $952($3_1 | 0, 0 | 0, 512 | 0) | 0;
  HEAP32[($2_1 + 32 | 0) >> 2] = 128;
  $3_1 = $417($0_1 | 0, 4241 | 0, 17 | 0) | 0;
  HEAP32[($2_1 + 164 | 0) >> 2] = $3_1;
  $236($0_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($2_1 + 164 | 0) >> 2] | 0;
  label$1 : while (1) {
   $3_1 = $2_1 + ($1_1 << 3 | 0) | 0;
   HEAP32[($3_1 + 308 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 304 | 0) >> 2] = $0_1;
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (53 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $417($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($2_1 >>> 0 > 40 >>> 0) {
       break label$4
      }
      $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      $4_1 = (HEAP32[($3_1 + 72 | 0) >> 2] | 0) ^ $2_1 | 0;
      label$5 : {
       $5_1 = $2_1 >>> 5 | 0;
       if ($5_1 >>> 0 >= $2_1 >>> 0) {
        break label$5
       }
       $6_1 = $5_1 ^ -1 | 0;
       $7_1 = $2_1;
       label$6 : while (1) {
        $4_1 = ((($4_1 << 5 | 0) + ($4_1 >>> 2 | 0) | 0) + (HEAPU8[(($7_1 + $1_1 | 0) + -1 | 0) >> 0] | 0) | 0) ^ $4_1 | 0;
        $7_1 = $7_1 + $6_1 | 0;
        if ($7_1 >>> 0 > $5_1 >>> 0) {
         continue label$6
        }
        break label$6;
       };
      }
      label$7 : {
       $5_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
       $6_1 = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + ((($5_1 + -1 | 0) & $4_1 | 0) << 2 | 0) | 0;
       $7_1 = HEAP32[$6_1 >> 2] | 0;
       if (!$7_1) {
        break label$7
       }
       label$8 : while (1) {
        label$9 : {
         if ((HEAPU8[($7_1 + 7 | 0) >> 0] | 0 | 0) != ($2_1 | 0)) {
          break label$9
         }
         if ($874($1_1 | 0, $7_1 + 16 | 0 | 0, $2_1 | 0) | 0) {
          break label$9
         }
         $4_1 = HEAPU8[($7_1 + 5 | 0) >> 0] | 0;
         if (!((((HEAPU8[($3_1 + 76 | 0) >> 0] | 0) ^ 24 | 0) & $4_1 | 0) & 255 | 0)) {
          break label$3
         }
         HEAP8[($7_1 + 5 | 0) >> 0] = $4_1 ^ 24 | 0;
         return $7_1 | 0;
        }
        $7_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
        if ($7_1) {
         continue label$8
        }
        break label$8;
       };
      }
      label$10 : {
       $7_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
       if (($7_1 | 0) < ($5_1 | 0)) {
        break label$10
       }
       label$11 : {
        if (($7_1 | 0) != (2147483647 | 0)) {
         break label$11
        }
        $251($0_1 | 0, 1 | 0);
        if ((HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) == (2147483647 | 0)) {
         break label$2
        }
        $5_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
       }
       label$12 : {
        if (($5_1 | 0) > (536870911 | 0)) {
         break label$12
        }
        $414($0_1 | 0, $5_1 << 1 | 0 | 0);
        $5_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
       }
       $6_1 = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + ((($5_1 + -1 | 0) & $4_1 | 0) << 2 | 0) | 0;
      }
      $7_1 = $237($0_1 | 0, 4 | 0, $2_1 + 17 | 0 | 0) | 0;
      HEAP8[($7_1 + 6 | 0) >> 0] = 0;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      $4_1 = $7_1 + 16 | 0;
      HEAP8[($4_1 + $2_1 | 0) >> 0] = 0;
      $951($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
      HEAP8[($7_1 + 7 | 0) >> 0] = $2_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
      HEAP32[$6_1 >> 2] = $7_1;
      HEAP32[($3_1 + 28 | 0) >> 2] = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
      return $7_1 | 0;
     }
     if ($2_1 >>> 0 >= -17 >>> 0) {
      break label$1
     }
     $4_1 = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
     $7_1 = $237($0_1 | 0, 20 | 0, $2_1 + 17 | 0 | 0) | 0;
     HEAP8[($7_1 + 6 | 0) >> 0] = 0;
     HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
     $4_1 = $7_1 + 16 | 0;
     HEAP8[($4_1 + $2_1 | 0) >> 0] = 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $2_1;
     $951($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    }
    return $7_1 | 0;
   }
   $197($0_1 | 0, 4 | 0);
   abort();
  }
  $283($0_1 | 0);
  abort();
 }
 
 function $418($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
  $0_1 = $237($0_1 | 0, 20 | 0, $1_1 + 17 | 0 | 0) | 0;
  HEAP8[($0_1 + 6 | 0) >> 0] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP8[(($0_1 + $1_1 | 0) + 16 | 0) >> 0] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $419($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $3_1 = (HEAP32[($2_1 + 24 | 0) >> 2] | 0) + ((((HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0) & (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) << 2 | 0) | 0;
   $0_1 = HEAP32[$3_1 >> 2] | 0;
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = $0_1;
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (($0_1 | 0) != ($1_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $3_1 = $3_1 + 12 | 0;
  }
  HEAP32[$3_1 >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $0_1 = $2_1 + 28 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
 }
 
 function $420($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ((($1_1 >>> 0) % (53 >>> 0) | 0) << 3 | 0) | 0;
   $3_1 = $2_1 + 304 | 0;
   $4_1 = HEAP32[$3_1 >> 2] | 0;
   if ($876($1_1 | 0, $4_1 + 16 | 0 | 0) | 0) {
    break label$1
   }
   return $4_1 | 0;
  }
  label$2 : {
   $5_1 = $2_1 + 308 | 0;
   $2_1 = HEAP32[$5_1 >> 2] | 0;
   if (!($876($1_1 | 0, $2_1 + 16 | 0 | 0) | 0)) {
    break label$2
   }
   HEAP32[$5_1 >> 2] = $4_1;
   $2_1 = $417($0_1 | 0, $1_1 | 0, $961($1_1 | 0) | 0 | 0) | 0;
   HEAP32[$3_1 >> 2] = $2_1;
  }
  return $2_1 | 0;
 }
 
 function $421($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = $2_1 ? ($2_1 << 4 | 0) + 24 | 0 : 16;
   if (($3_1 ^ -1 | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   $3_1 = $237($0_1 | 0, 7 | 0, $3_1 + $1_1 | 0 | 0) | 0;
   HEAP16[($3_1 + 6 | 0) >> 1] = $2_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   label$2 : {
    if (($2_1 | 0) < (1 | 0)) {
     break label$2
    }
    $0_1 = $3_1 + 24 | 0;
    $1_1 = 0;
    label$3 : while (1) {
     HEAP8[(($0_1 + ($1_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 0;
     $1_1 = $1_1 + 1 | 0;
     if (($1_1 | 0) != ($2_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   return $3_1 | 0;
  }
  $283($0_1 | 0);
  abort();
 }
 
 function $422($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP8[($0_1 + 5 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   if ((__wasm_popcnt_i32($1_1 | 0) | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $1_1 = $1_1 >>> 1 | 0 | $1_1 | 0;
   $1_1 = $1_1 >>> 2 | 0 | $1_1 | 0;
   $1_1 = $1_1 >>> 4 | 0 | $1_1 | 0;
   $1_1 = $1_1 >>> 8 | 0 | $1_1 | 0;
   $1_1 = ($1_1 >>> 16 | 0 | $1_1 | 0) + 1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $423($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$5 = 0, $5_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $45_1 = 0, $93_1 = 0, $128_1 = 0, $134_1 = 0;
  $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP8[($1_1 + 5 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   if ((__wasm_popcnt_i32($3_1 | 0) | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $4_1 = $3_1 >>> 1 | 0 | $3_1 | 0;
   $4_1 = $4_1 >>> 2 | 0 | $4_1 | 0;
   $4_1 = $4_1 >>> 4 | 0 | $4_1 | 0;
   $4_1 = $4_1 >>> 8 | 0 | $4_1 | 0;
   $3_1 = ($4_1 >>> 16 | 0 | $4_1 | 0) + 1 | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     $5_1 = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
     if ($5_1 & 15 | 0) {
      break label$4
     }
     $4_1 = 0;
     break label$3;
    }
    $4_1 = 0;
    label$5 : {
     if (($5_1 | 0) != (3 | 0)) {
      break label$5
     }
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $45_1 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 268435455;
     $4_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0 ? $45_1 : 0;
    }
    if (($4_1 + -1 | 0) >>> 0 < $3_1 >>> 0) {
     break label$3
    }
    $4_1 = $424($1_1 | 0, $2_1 | 0) | 0;
    if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0 | 0) == (32 | 0)) {
     break label$2
    }
    $4_1 = ($3_1 + (($4_1 - (HEAP32[($1_1 + 16 | 0) >> 2] | 0) | 0 | 0) / (24 | 0) | 0) | 0) + 1 | 0;
   }
   label$6 : {
    if ($4_1 >>> 0 >= $3_1 >>> 0) {
     break label$6
    }
    $0_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    label$7 : while (1) {
     $5_1 = $4_1 + 1 | 0;
     label$8 : {
      if (!((HEAPU8[(($0_1 + ($4_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) & 15 | 0)) {
       break label$8
      }
      HEAP8[($2_1 + 8 | 0) >> 0] = 3;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = $2_1;
      HEAP32[$2_1 >> 2] = $5_1;
      HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      $4_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($4_1 << 4 | 0) | 0;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      $93_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $2_1;
      HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $93_1;
      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$5;
      HEAP8[(i64toi32_i32$1 + 24 | 0) >> 0] = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
      return 1 | 0;
     }
     $4_1 = $5_1;
     if (($4_1 | 0) != ($3_1 | 0)) {
      continue label$7
     }
     break label$7;
    };
    $4_1 = $3_1;
   }
   label$9 : {
    $4_1 = $4_1 - $3_1 | 0;
    $3_1 = 1 << (HEAPU8[($1_1 + 7 | 0) >> 0] | 0) | 0;
    if (($4_1 | 0) >= ($3_1 | 0)) {
     break label$9
    }
    $5_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    label$10 : while (1) {
     label$11 : {
      $0_1 = $5_1 + Math_imul($4_1, 24) | 0;
      if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
       break label$11
      }
      $4_1 = $5_1 + Math_imul($4_1, 24) | 0;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$5 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      $128_1 = i64toi32_i32$5;
      i64toi32_i32$5 = $2_1;
      HEAP32[$2_1 >> 2] = $128_1;
      HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP8[($2_1 + 8 | 0) >> 0] = HEAPU8[($4_1 + 9 | 0) >> 0] | 0;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      $134_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $2_1;
      HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $134_1;
      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$5;
      HEAP8[(i64toi32_i32$1 + 24 | 0) >> 0] = HEAPU8[($0_1 + 8 | 0) >> 0] | 0;
      return 1 | 0;
     }
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) < ($3_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
   }
   return 0 | 0;
  }
  $187($0_1 | 0, 4297 | 0, 0 | 0);
  abort();
 }
 
 function $424($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $17_1 = 0, $17$hi = 0, $19_1 = 0, $19$hi = 0;
  $0_1 = $433($0_1 | 0, HEAPU8[($1_1 + 8 | 0) >> 0] | 0 | 0, $1_1 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     $2_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
     if (($2_1 | 0) != (HEAPU8[($0_1 + 9 | 0) >> 0] | 0 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : {
       switch ($2_1 & 63 | 0 | 0) {
       case 3:
        i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$0;
        $17$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        $19_1 = i64toi32_i32$1;
        $19$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$1 = $19$hi;
        $2_1 = ($17_1 | 0) == ($19_1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0;
        break label$4;
       case 19:
        $2_1 = +HEAPF64[$1_1 >> 3] == +HEAPF64[($0_1 + 16 | 0) >> 3];
        break label$4;
       case 2:
        $2_1 = (HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
        break label$4;
       case 22:
        $2_1 = (HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
        break label$4;
       case 20:
        $2_1 = $411(HEAP32[$1_1 >> 2] | 0 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) | 0;
        break label$4;
       case 0:
       case 1:
       case 17:
        break label$1;
       default:
        break label$5;
       };
      }
      $2_1 = (HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
     }
     if ($2_1) {
      break label$1
     }
    }
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $0_1 = $0_1 + Math_imul($2_1, 24) | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
   $0_1 = 4360;
  }
  return $0_1 | 0;
 }
 
 function $425($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$5 = 0, $13_1 = 0, $13$hi = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0, $12$hi = 0, $12_1 = 0, $132_1 = 0, $133_1 = 0, $227_1 = 0, $245_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  label$1 : {
   $6_1 = HEAP8[($1_1 + 5 | 0) >> 0] | 0;
   if (($6_1 | 0) > (-1 | 0)) {
    break label$1
   }
   if ((__wasm_popcnt_i32($5_1 | 0) | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $5_1 = $5_1 >>> 1 | 0 | $5_1 | 0;
   $5_1 = $5_1 >>> 2 | 0 | $5_1 | 0;
   $5_1 = $5_1 >>> 4 | 0 | $5_1 | 0;
   $5_1 = $5_1 >>> 8 | 0 | $5_1 | 0;
   $5_1 = ($5_1 >>> 16 | 0 | $5_1 | 0) + 1 | 0;
  }
  HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
  HEAP8[($1_1 + 5 | 0) >> 0] = $6_1 & 127 | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if ($3_1) {
       break label$5
      }
      $6_1 = 0;
      HEAP8[($4_1 + 7 | 0) >> 0] = 0;
      $7_1 = 4336;
      HEAP32[($4_1 + 16 | 0) >> 2] = 4336;
      $8_1 = 0;
      break label$4;
     }
     $8_1 = $287($3_1 | 0) | 0;
     if (($8_1 | 0) > (30 | 0)) {
      break label$3
     }
     if ($8_1 >>> 0 >= 28 >>> 0) {
      break label$3
     }
     $3_1 = 1;
     $7_1 = $286($0_1 | 0, 24 << $8_1 | 0 | 0, 0 | 0) | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $7_1;
     HEAP32[($7_1 + 12 | 0) >> 2] = 0;
     HEAP16[($7_1 + 8 | 0) >> 1] = 16;
     label$6 : {
      $9_1 = 1 << $8_1 | 0;
      if (($9_1 | 0) < (2 | 0)) {
       break label$6
      }
      if (!$8_1) {
       break label$6
      }
      label$7 : while (1) {
       $6_1 = $7_1 + Math_imul($3_1, 24) | 0;
       HEAP32[($6_1 + 12 | 0) >> 2] = 0;
       HEAP16[($6_1 + 8 | 0) >> 1] = 16;
       $3_1 = $3_1 + 1 | 0;
       if (($3_1 | 0) != ($9_1 | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     HEAP8[($4_1 + 7 | 0) >> 0] = $8_1;
     $6_1 = $7_1 + Math_imul($9_1, 24) | 0;
    }
    HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
    label$8 : {
     if ($5_1 >>> 0 <= $2_1 >>> 0) {
      break label$8
     }
     HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
     $9_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
     HEAP8[($1_1 + 7 | 0) >> 0] = $8_1;
     $10_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     HEAP32[($1_1 + 16 | 0) >> 2] = $7_1;
     $11_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     HEAP32[($1_1 + 20 | 0) >> 2] = $6_1;
     HEAP32[($4_1 + 16 | 0) >> 2] = $10_1;
     HEAP32[($4_1 + 20 | 0) >> 2] = $11_1;
     HEAP8[($4_1 + 7 | 0) >> 0] = $9_1;
     i64toi32_i32$0 = 0;
     $12_1 = $5_1;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $13_1 = $2_1;
     $13$hi = i64toi32_i32$0;
     label$9 : while (1) {
      label$10 : {
       label$11 : {
        i64toi32_i32$0 = $13$hi;
        $3_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($13_1 << 4 | 0) | 0;
        if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
         break label$11
        }
        i64toi32_i32$0 = $13$hi;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 1;
        i64toi32_i32$4 = $13_1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = $13$hi + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $13_1 = i64toi32_i32$4;
        $13$hi = i64toi32_i32$5;
        break label$10;
       }
       $132_1 = $0_1;
       $133_1 = $1_1;
       i64toi32_i32$5 = $13$hi;
       i64toi32_i32$0 = $13_1;
       i64toi32_i32$3 = 1;
       i64toi32_i32$1 = $13_1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = $13$hi + 0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $13_1 = i64toi32_i32$1;
       $13$hi = i64toi32_i32$4;
       $426($132_1 | 0, $133_1 | 0, $13_1 | 0, i64toi32_i32$4 | 0, $3_1 | 0);
      }
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = $12$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$5 = $13_1;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$3 = $12_1;
      if (($13_1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | 0) {
       continue label$9
      }
      break label$9;
     };
     HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
     $8_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
     HEAP8[($1_1 + 7 | 0) >> 0] = $9_1;
     $7_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     HEAP32[($1_1 + 16 | 0) >> 2] = $10_1;
     $6_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     HEAP32[($1_1 + 20 | 0) >> 2] = $11_1;
     HEAP32[($4_1 + 16 | 0) >> 2] = $7_1;
     HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
     HEAP8[($4_1 + 7 | 0) >> 0] = $8_1;
    }
    $3_1 = $285($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, $5_1 << 4 | 0 | 0, $2_1 << 4 | 0 | 0) | 0;
    label$12 : {
     if (!$2_1) {
      break label$12
     }
     if (!$3_1) {
      break label$2
     }
    }
    $11_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    HEAP32[($1_1 + 20 | 0) >> 2] = $6_1;
    $9_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    HEAP32[($1_1 + 16 | 0) >> 2] = $7_1;
    $10_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
    HEAP8[($1_1 + 7 | 0) >> 0] = $8_1;
    HEAP32[($4_1 + 16 | 0) >> 2] = $9_1;
    HEAP32[($4_1 + 20 | 0) >> 2] = $11_1;
    HEAP8[($4_1 + 7 | 0) >> 0] = $10_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $3_1;
    label$13 : {
     if ($5_1 >>> 0 >= $2_1 >>> 0) {
      break label$13
     }
     label$14 : while (1) {
      HEAP8[(($3_1 + ($5_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 16;
      $5_1 = $5_1 + 1 | 0;
      if (($5_1 | 0) != ($2_1 | 0)) {
       continue label$14
      }
      break label$14;
     };
    }
    label$15 : {
     if (($10_1 | 0) == (31 | 0)) {
      break label$15
     }
     $5_1 = 1 << $10_1 | 0;
     $7_1 = ($5_1 | 0) > (1 | 0) ? $5_1 : 1;
     $3_1 = 0;
     label$16 : while (1) {
      label$17 : {
       $5_1 = $9_1 + Math_imul($3_1, 24) | 0;
       if (!((HEAPU8[($5_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
        break label$17
       }
       $6_1 = $5_1 + 8 | 0;
       i64toi32_i32$3 = $5_1;
       i64toi32_i32$5 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
       $227_1 = i64toi32_i32$5;
       i64toi32_i32$5 = $4_1;
       HEAP32[($4_1 + 32 | 0) >> 2] = $227_1;
       HEAP32[($4_1 + 36 | 0) >> 2] = i64toi32_i32$4;
       HEAP8[($4_1 + 40 | 0) >> 0] = HEAPU8[($5_1 + 9 | 0) >> 0] | 0;
       label$18 : {
        $2_1 = $427($1_1 | 0, $4_1 + 32 | 0 | 0) | 0;
        if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (32 | 0)) {
         break label$18
        }
        $2_1 = $428($0_1 | 0, $1_1 | 0, $4_1 + 32 | 0 | 0) | 0;
       }
       i64toi32_i32$3 = $5_1;
       i64toi32_i32$4 = HEAP32[$5_1 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
       $245_1 = i64toi32_i32$4;
       i64toi32_i32$4 = $2_1;
       HEAP32[i64toi32_i32$4 >> 2] = $245_1;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
       HEAP8[(i64toi32_i32$4 + 8 | 0) >> 0] = HEAPU8[$6_1 >> 0] | 0;
      }
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != ($7_1 | 0)) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if (!$11_1) {
      break label$19
     }
     $284($0_1 | 0, $9_1 | 0, 24 << $10_1 | 0 | 0);
    }
    global$0 = $4_1 + 48 | 0;
    return;
   }
   $187($0_1 | 0, 4319 | 0, 0 | 0);
   abort();
  }
  $429($0_1 | 0, $4_1 | 0);
  $197($0_1 | 0, 4 | 0);
  abort();
 }
 
 function $426($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7$hi = 0, $4_1 = 0, $7_1 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $17$hi = 0, $35$hi = 0, $60$hi = 0, $85$hi = 0, $107_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + -1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $7_1 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$5;
    $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$5 = 0;
    $17$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$3 = $5_1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= $5_1 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$0 = $7$hi;
    $5_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($7_1 << 4 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (!($5_1 & ($5_1 + -1 | 0) | 0)) {
     break label$3
    }
    if ((HEAP8[($1_1 + 5 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
     break label$3
    }
    label$4 : {
     i64toi32_i32$0 = 0;
     $35$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $35$hi;
     i64toi32_i32$3 = $5_1 + 1 | 0;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$2 = $2_1;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0) {
      break label$4
     }
     i64toi32_i32$3 = $7$hi;
     $5_1 = $5_1 >>> 1 | 0 | $5_1 | 0;
     $5_1 = $5_1 >>> 2 | 0 | $5_1 | 0;
     $5_1 = $5_1 >>> 4 | 0 | $5_1 | 0;
     $5_1 = $5_1 >>> 8 | 0 | $5_1 | 0;
     i64toi32_i32$3 = 0;
     $60$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = $60$hi;
     i64toi32_i32$5 = ($5_1 >>> 16 | 0 | $5_1 | 0) + 1 | 0;
     if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$3
     }
    }
    i64toi32_i32$2 = $2$hi;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    i64toi32_i32$2 = $7$hi;
    $5_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($7_1 << 4 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$2 = $2$hi;
   $5_1 = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) + Math_imul(((-1 << (HEAPU8[($1_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) & $2_1 | 0, 24) | 0;
   label$5 : while (1) {
    label$6 : {
     if ((HEAPU8[($5_1 + 9 | 0) >> 0] | 0 | 0) != (3 | 0)) {
      break label$6
     }
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$2 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     $85$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $85$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) | 0) {
      break label$1
     }
    }
    $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $5_1 = $5_1 + Math_imul($6_1, 24) | 0;
    if ($6_1) {
     continue label$5
    }
    break label$5;
   };
   $5_1 = 4360;
  }
  label$7 : {
   if ((HEAPU8[($5_1 + 8 | 0) >> 0] | 0 | 0) != (32 | 0)) {
    break label$7
   }
   HEAP8[($4_1 + 8 | 0) >> 0] = 3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$3 = $4_1;
   HEAP32[i64toi32_i32$3 >> 2] = $2_1;
   HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
   $5_1 = $428($0_1 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
  }
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $107_1 = i64toi32_i32$5;
  i64toi32_i32$5 = $5_1;
  HEAP32[$5_1 >> 2] = $107_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$3;
  HEAP8[($5_1 + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$0 + 8 | 0) >> 0] | 0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $427($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $3_1 = 0, $5$hi = 0, $5_1 = 0, $6$hi = 0, $6_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $4_1 = 0, $49$hi = 0, $68$hi = 0, $92$hi = 0, $117$hi = 0, $142$hi = 0, $155$hi = 0, $179$hi = 0, $204$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 4360;
  label$1 : {
   label$2 : {
    label$3 : {
     switch ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 63 | 0 | 0) {
     case 4:
      $4_1 = HEAP32[$1_1 >> 2] | 0;
      $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul((HEAP32[($4_1 + 8 | 0) >> 2] | 0) & ((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) | 0, 24) | 0;
      label$6 : while (1) {
       label$7 : {
        if ((HEAPU8[($1_1 + 9 | 0) >> 0] | 0 | 0) != (68 | 0)) {
         break label$7
        }
        if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
         break label$7
        }
        $3_1 = $1_1;
        break label$1;
       }
       $0_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       $1_1 = $1_1 + Math_imul($0_1, 24) | 0;
       if ($0_1) {
        continue label$6
       }
       break label$1;
      };
     case 3:
      label$8 : {
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $5_1 = i64toi32_i32$0;
       $5$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $6_1 = i64toi32_i32$4;
       $6$hi = i64toi32_i32$5;
       $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       i64toi32_i32$5 = 0;
       $49$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $6$hi;
       i64toi32_i32$1 = i64toi32_i32$4;
       i64toi32_i32$2 = $49$hi;
       i64toi32_i32$3 = $1_1;
       if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 >= $1_1 >>> 0 | 0) | 0) {
        break label$8
       }
       i64toi32_i32$1 = $6$hi;
       $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0;
       break label$1;
      }
      label$9 : {
       if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
        break label$9
       }
       if ((HEAP8[($0_1 + 5 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
        break label$9
       }
       label$10 : {
        i64toi32_i32$1 = $5$hi;
        i64toi32_i32$1 = 0;
        $68$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $5$hi;
        i64toi32_i32$3 = $5_1;
        i64toi32_i32$5 = $68$hi;
        i64toi32_i32$2 = $1_1 + 1 | 0;
        if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0) {
         break label$10
        }
        i64toi32_i32$3 = $6$hi;
        $1_1 = $1_1 >>> 1 | 0 | $1_1 | 0;
        $1_1 = $1_1 >>> 2 | 0 | $1_1 | 0;
        $1_1 = $1_1 >>> 4 | 0 | $1_1 | 0;
        $1_1 = $1_1 >>> 8 | 0 | $1_1 | 0;
        i64toi32_i32$3 = 0;
        $92$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $6$hi;
        i64toi32_i32$2 = $6_1;
        i64toi32_i32$1 = $92$hi;
        i64toi32_i32$5 = ($1_1 >>> 16 | 0 | $1_1 | 0) + 1 | 0;
        if (i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
         break label$9
        }
       }
       i64toi32_i32$2 = $5$hi;
       HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
       i64toi32_i32$2 = $6$hi;
       $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0;
       break label$1;
      }
      i64toi32_i32$2 = $5$hi;
      $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul(((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) & $5_1 | 0, 24) | 0;
      label$11 : while (1) {
       label$12 : {
        if ((HEAPU8[($1_1 + 9 | 0) >> 0] | 0 | 0) != (3 | 0)) {
         break label$12
        }
        i64toi32_i32$5 = $1_1;
        i64toi32_i32$2 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
        $117$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $5$hi;
        i64toi32_i32$3 = $117$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = $5$hi;
        i64toi32_i32$1 = $5_1;
        if ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
         break label$12
        }
        $3_1 = $1_1;
        break label$1;
       }
       $0_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       $1_1 = $1_1 + Math_imul($0_1, 24) | 0;
       if ($0_1) {
        continue label$11
       }
       break label$1;
      };
     case 0:
      break label$1;
     case 19:
      break label$3;
     default:
      break label$2;
     };
    }
    if (!($458(+(+HEAPF64[$1_1 >> 3]), $2_1 + 8 | 0 | 0, 0 | 0) | 0)) {
     break label$2
    }
    label$13 : {
     label$14 : {
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      $5_1 = i64toi32_i32$5;
      $5$hi = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$5 = -1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$0;
      $6$hi = i64toi32_i32$4;
      $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$4 = 0;
      $142$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$1 = $142$hi;
      i64toi32_i32$2 = $1_1;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < $1_1 >>> 0 | 0) | 0) {
       break label$14
      }
      if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
       break label$13
      }
      if ((HEAP8[($0_1 + 5 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
       break label$13
      }
      label$15 : {
       i64toi32_i32$3 = $5$hi;
       i64toi32_i32$3 = 0;
       $155$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $5$hi;
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$4 = $155$hi;
       i64toi32_i32$1 = $1_1 + 1 | 0;
       if ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0) {
        break label$15
       }
       i64toi32_i32$2 = $6$hi;
       $1_1 = $1_1 >>> 1 | 0 | $1_1 | 0;
       $1_1 = $1_1 >>> 2 | 0 | $1_1 | 0;
       $1_1 = $1_1 >>> 4 | 0 | $1_1 | 0;
       $1_1 = $1_1 >>> 8 | 0 | $1_1 | 0;
       i64toi32_i32$2 = 0;
       $179$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $6$hi;
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$3 = $179$hi;
       i64toi32_i32$4 = ($1_1 >>> 16 | 0 | $1_1 | 0) + 1 | 0;
       if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$4 >>> 0 | 0) | 0) {
        break label$13
       }
      }
      i64toi32_i32$1 = $5$hi;
      HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
     }
     i64toi32_i32$1 = $6$hi;
     $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0;
     break label$1;
    }
    i64toi32_i32$1 = $5$hi;
    $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul(((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) & $5_1 | 0, 24) | 0;
    label$16 : while (1) {
     label$17 : {
      if ((HEAPU8[($3_1 + 9 | 0) >> 0] | 0 | 0) != (3 | 0)) {
       break label$17
      }
      i64toi32_i32$4 = $3_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
      $204$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$2 = $204$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$1 = $5$hi;
      i64toi32_i32$3 = $5_1;
      if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0) {
       break label$1
      }
     }
     $1_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     $3_1 = $3_1 + Math_imul($1_1, 24) | 0;
     if ($1_1) {
      continue label$16
     }
     break label$16;
    };
    $3_1 = 4360;
    break label$1;
   }
   $3_1 = $424($0_1 | 0, $1_1 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $428($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0, $3_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $10_1 = 0, i64toi32_i32$4 = 0, $11_1 = 0, $14_1 = 0.0, $13_1 = 0, $13$hi = 0, $12_1 = 0, $35_1 = 0, $94_1 = 0, $99_1 = 0, $102_1 = 0, $139_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $4_1 = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
      if (!($4_1 & 15 | 0)) {
       break label$4
      }
      label$5 : {
       if (($4_1 | 0) != (19 | 0)) {
        break label$5
       }
       label$6 : {
        $14_1 = +HEAPF64[$2_1 >> 3];
        if (!($458(+$14_1, $3_1 + 16 | 0 | 0, 0 | 0) | 0)) {
         break label$6
        }
        $4_1 = 3;
        HEAP8[($3_1 + 8 | 0) >> 0] = 3;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
        $35_1 = i64toi32_i32$0;
        i64toi32_i32$0 = i64toi32_i32$2;
        HEAP32[i64toi32_i32$0 >> 2] = $35_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $2_1 = i64toi32_i32$0;
        break label$5;
       }
       if ($14_1 != $14_1) {
        break label$3
       }
       $4_1 = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
      }
      $5_1 = $433($1_1 | 0, $4_1 & 255 | 0 | 0, $2_1 | 0) | 0;
      $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      label$7 : {
       label$8 : {
        if ((HEAPU8[($5_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
         break label$8
        }
        if ($4_1) {
         break label$7
        }
        break label$2;
       }
       if (!$4_1) {
        break label$2
       }
       $6_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
       label$9 : while (1) {
        $7_1 = $4_1;
        if ($7_1 >>> 0 <= $6_1 >>> 0) {
         break label$2
        }
        $4_1 = $7_1 + -24 | 0;
        HEAP32[($1_1 + 20 | 0) >> 2] = $4_1;
        if (HEAPU8[($4_1 + 9 | 0) >> 0] | 0) {
         continue label$9
        }
        break label$9;
       };
       label$10 : {
        $8_1 = $433($1_1 | 0, HEAPU8[($5_1 + 9 | 0) >> 0] | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
        if (($8_1 | 0) == ($5_1 | 0)) {
         break label$10
        }
        label$11 : while (1) {
         $6_1 = $8_1;
         $8_1 = $8_1 + Math_imul(HEAP32[($8_1 + 12 | 0) >> 2] | 0, 24) | 0;
         if (($8_1 | 0) != ($5_1 | 0)) {
          continue label$11
         }
         break label$11;
        };
        HEAP32[($6_1 + 12 | 0) >> 2] = ($4_1 - $6_1 | 0 | 0) / (24 | 0) | 0;
        i64toi32_i32$2 = $5_1 + 16 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $94_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $4_1 + 16 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $94_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $5_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $99_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $4_1 + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $99_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
        $102_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $4_1;
        HEAP32[$4_1 >> 2] = $102_1;
        HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
        label$12 : {
         if (!(HEAP32[($5_1 + 12 | 0) >> 2] | 0)) {
          break label$12
         }
         $7_1 = $7_1 + -12 | 0;
         HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + (($5_1 - $4_1 | 0 | 0) / (24 | 0) | 0) | 0;
         HEAP32[($5_1 + 12 | 0) >> 2] = 0;
        }
        HEAP8[($5_1 + 8 | 0) >> 0] = 16;
        break label$7;
       }
       label$13 : {
        $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
        if (!$6_1) {
         break label$13
        }
        HEAP32[($7_1 + -12 | 0) >> 2] = (($5_1 + Math_imul($6_1, 24) | 0) - $4_1 | 0 | 0) / (24 | 0) | 0;
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = ($4_1 - $5_1 | 0 | 0) / (24 | 0) | 0;
       $5_1 = $4_1;
      }
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $139_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1;
      HEAP32[($5_1 + 16 | 0) >> 2] = $139_1;
      HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$1;
      HEAP8[($5_1 + 9 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
      if (!((HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0) & 64 | 0)) {
       break label$1
      }
      if (!((HEAPU8[($1_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
       break label$1
      }
      if (!((HEAPU8[((HEAP32[$2_1 >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
       break label$1
      }
      $235($0_1 | 0, $1_1 | 0);
      break label$1;
     }
     $187($0_1 | 0, 4259 | 0, 0 | 0);
     abort();
    }
    $187($0_1 | 0, 4278 | 0, 0 | 0);
    abort();
   }
   $952($3_1 + 16 | 0 | 0, 0 | 0, 128 | 0) | 0;
   $9_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   label$14 : {
    $4_1 = HEAP8[($1_1 + 5 | 0) >> 0] | 0;
    if (($4_1 | 0) > (-1 | 0)) {
     break label$14
    }
    if ((__wasm_popcnt_i32($9_1 | 0) | 0) >>> 0 < 2 >>> 0) {
     break label$14
    }
    $7_1 = $9_1 >>> 1 | 0 | $9_1 | 0;
    $7_1 = $7_1 >>> 2 | 0 | $7_1 | 0;
    $7_1 = $7_1 >>> 4 | 0 | $7_1 | 0;
    $7_1 = $7_1 >>> 8 | 0 | $7_1 | 0;
    $9_1 = ($7_1 >>> 16 | 0 | $7_1 | 0) + 1 | 0;
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $9_1;
   HEAP8[($1_1 + 5 | 0) >> 0] = $4_1 & 127 | 0;
   $10_1 = 0;
   $4_1 = 1;
   $11_1 = 0;
   $8_1 = 1;
   label$15 : {
    label$16 : while (1) {
     $5_1 = $8_1;
     label$17 : {
      if ($5_1 >>> 0 <= $9_1 >>> 0) {
       break label$17
      }
      $5_1 = $9_1;
      if ($4_1 >>> 0 > $5_1 >>> 0) {
       break label$15
      }
     }
     $7_1 = 0;
     label$18 : {
      if ($4_1 >>> 0 > $5_1 >>> 0) {
       break label$18
      }
      $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $7_1 = 0;
      label$19 : while (1) {
       $7_1 = $7_1 + (((HEAPU8[((($4_1 << 4 | 0) + $6_1 | 0) + -8 | 0) >> 0] | 0) & 15 | 0 | 0) != (0 | 0)) | 0;
       $4_1 = $4_1 + 1 | 0;
       if ($4_1 >>> 0 <= $5_1 >>> 0) {
        continue label$19
       }
       break label$19;
      };
     }
     $5_1 = ($3_1 + 16 | 0) + ($10_1 << 2 | 0) | 0;
     HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + $7_1 | 0;
     $8_1 = $8_1 << 1 | 0;
     $11_1 = $7_1 + $11_1 | 0;
     $10_1 = $10_1 + 1 | 0;
     if (($10_1 | 0) != (32 | 0)) {
      continue label$16
     }
     break label$16;
    };
   }
   $7_1 = (-1 << (HEAPU8[($1_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0;
   $6_1 = 0;
   $8_1 = 0;
   label$20 : while (1) {
    label$21 : {
     $4_1 = $7_1;
     $7_1 = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) + Math_imul($7_1, 24) | 0;
     if (!((HEAPU8[($7_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
      break label$21
     }
     label$22 : {
      if ((HEAPU8[($7_1 + 9 | 0) >> 0] | 0 | 0) != (3 | 0)) {
       break label$22
      }
      $5_1 = 0;
      label$23 : {
       i64toi32_i32$2 = $7_1;
       i64toi32_i32$1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
       $13_1 = i64toi32_i32$1;
       $13$hi = i64toi32_i32$0;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = -1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 268435454;
       if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
        break label$23
       }
       i64toi32_i32$0 = $13$hi;
       $7_1 = $13_1;
       if (!$7_1) {
        break label$23
       }
       $5_1 = 1;
       $7_1 = ($3_1 + 16 | 0) + (($287($7_1 | 0) | 0) << 2 | 0) | 0;
       HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 1 | 0;
      }
      $8_1 = $5_1 + $8_1 | 0;
     }
     $6_1 = $6_1 + 1 | 0;
    }
    $7_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$20
    }
    break label$20;
   };
   $12_1 = $8_1 + $11_1 | 0;
   label$24 : {
    if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
     break label$24
    }
    $4_1 = 0;
    label$25 : {
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $13_1 = i64toi32_i32$0;
     $13$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 268435454;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$25
     }
     i64toi32_i32$5 = $13$hi;
     $7_1 = $13_1;
     if (!$7_1) {
      break label$25
     }
     $4_1 = 1;
     $7_1 = ($3_1 + 16 | 0) + (($287($7_1 | 0) | 0) << 2 | 0) | 0;
     HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 1 | 0;
    }
    $12_1 = $4_1 + $12_1 | 0;
   }
   $8_1 = 0;
   $10_1 = 0;
   $7_1 = 0;
   $4_1 = 1;
   $5_1 = 0;
   label$26 : {
    label$27 : while (1) {
     $9_1 = $4_1 >>> 1 | 0;
     if ($12_1 >>> 0 <= $9_1 >>> 0) {
      break label$26
     }
     $7_1 = (HEAP32[(($3_1 + 16 | 0) + ($5_1 << 2 | 0) | 0) >> 2] | 0) + $7_1 | 0;
     $9_1 = $7_1 >>> 0 > $9_1 >>> 0;
     $10_1 = $9_1 ? $7_1 : $10_1;
     $8_1 = $9_1 ? $4_1 : $8_1;
     $4_1 = $4_1 << 1 | 0;
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) != (32 | 0)) {
      continue label$27
     }
     break label$27;
    };
   }
   $425($0_1 | 0, $1_1 | 0, $8_1 | 0, (($11_1 + $6_1 | 0) - $10_1 | 0) + 1 | 0 | 0);
   $5_1 = $427($1_1 | 0, $2_1 | 0) | 0;
   if ((HEAPU8[($5_1 + 8 | 0) >> 0] | 0 | 0) != (32 | 0)) {
    break label$1
   }
   $5_1 = $428($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  global$0 = $3_1 + 144 | 0;
  return $5_1 | 0;
 }
 
 function $429($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!(HEAP32[($1_1 + 20 | 0) >> 2] | 0)) {
    break label$1
   }
   $284($0_1 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0, 24 << (HEAPU8[($1_1 + 7 | 0) >> 0] | 0) | 0 | 0);
  }
 }
 
 function $430($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (HEAP32[($1_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   $425($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0);
   return;
  }
  $425($0_1 | 0, $1_1 | 0, $2_1 | 0, 1 << (HEAPU8[($1_1 + 7 | 0) >> 0] | 0) | 0 | 0);
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $0_1 = $237($0_1 | 0, 5 | 0, 32 | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 4336;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 6 | 0) >> 1] = 255;
  i64toi32_i32$1 = $0_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $432($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   if (!(HEAP32[($1_1 + 20 | 0) >> 2] | 0)) {
    break label$1
   }
   $284($0_1 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0, 24 << (HEAPU8[($1_1 + 7 | 0) >> 0] | 0) | 0 | 0);
  }
  $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  label$2 : {
   if ((HEAP8[($1_1 + 5 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$2
   }
   if ((__wasm_popcnt_i32($3_1 | 0) | 0) >>> 0 < 2 >>> 0) {
    break label$2
   }
   $3_1 = $3_1 >>> 1 | 0 | $3_1 | 0;
   $3_1 = $3_1 >>> 2 | 0 | $3_1 | 0;
   $3_1 = $3_1 >>> 4 | 0 | $3_1 | 0;
   $3_1 = $3_1 >>> 8 | 0 | $3_1 | 0;
   $3_1 = ($3_1 >>> 16 | 0 | $3_1 | 0) + 1 | 0;
  }
  $284($0_1 | 0, $2_1 | 0, $3_1 << 4 | 0 | 0);
  $284($0_1 | 0, $1_1 | 0, 32 | 0);
 }
 
 function $433($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0.0, $3_1 = 0, $6_1 = 0.0, i64toi32_i32$1 = 0, $10_1 = 0, $11_1 = 0, $5_1 = 0, $5$hi = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    switch (($1_1 & 63 | 0) + -1 | 0 | 0) {
    case 2:
     $0_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul(((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) & (HEAP32[$2_1 >> 2] | 0) | 0, 24) | 0;
     break label$1;
    case 18:
     $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $1_1 = 0;
     label$11 : {
      $6_1 = +$766(+(+HEAPF64[$2_1 >> 3]), $3_1 + 12 | 0 | 0) * 2147483648.0;
      if ($6_1 >= -9223372036854775808.0 ^ 1 | 0) {
       break label$11
      }
      if ($6_1 < 9223372036854775808.0 ^ 1 | 0) {
       break label$11
      }
      label$12 : {
       label$13 : {
        if (!(Math_abs($6_1) < 9223372036854775808.0)) {
         break label$13
        }
        i64toi32_i32$0 = $6_1;
        if (Math_abs(i64toi32_i32$0) >= 1.0) {
         if (i64toi32_i32$0 > 0.0) {
          $10_1 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
         } else {
          $10_1 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
         }
         $11_1 = $10_1;
        } else {
         $11_1 = 0
        }
        i64toi32_i32$1 = $11_1;
        $5_1 = ~~i64toi32_i32$0 >>> 0;
        $5$hi = i64toi32_i32$1;
        break label$12;
       }
       i64toi32_i32$1 = -2147483648;
       $5_1 = 0;
       $5$hi = i64toi32_i32$1;
      }
      i64toi32_i32$1 = $5$hi;
      $1_1 = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + $5_1 | 0;
      $1_1 = ($1_1 >> 31 | 0) ^ $1_1 | 0;
     }
     $0_1 = $4_1 + Math_imul(($1_1 | 0) % ((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0 | 1 | 0 | 0) | 0, 24) | 0;
     break label$1;
    case 3:
     $0_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul((HEAP32[((HEAP32[$2_1 >> 2] | 0) + 8 | 0) >> 2] | 0) & ((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) | 0, 24) | 0;
     break label$1;
    case 19:
     $0_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul(($413(HEAP32[$2_1 >> 2] | 0 | 0) | 0) & ((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) | 0, 24) | 0;
     break label$1;
    case 0:
     $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     break label$1;
    case 16:
     $0_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul(((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) & 1 | 0, 24) | 0;
     break label$1;
    case 1:
     $0_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul(((HEAP32[$2_1 >> 2] | 0) >>> 0) % (((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0 | 1 | 0) >>> 0) | 0, 24) | 0;
     break label$1;
    case 21:
     $0_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul(((HEAP32[$2_1 >> 2] | 0) >>> 0) % (((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0 | 1 | 0) >>> 0) | 0, 24) | 0;
     break label$1;
    default:
     break label$2;
    };
   }
   $0_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul(((HEAP32[$2_1 >> 2] | 0) >>> 0) % (((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0 | 1 | 0) >>> 0) | 0, 24) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $434($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = $427($1_1 | 0, $2_1 | 0) | 0;
   if ((HEAPU8[($3_1 + 8 | 0) >> 0] | 0 | 0) != (32 | 0)) {
    break label$1
   }
   $3_1 = $428($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $435($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var $2_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3$hi = 0, $3_1 = 0, i64toi32_i32$4 = 0, $10$hi = 0, $28$hi = 0, $53$hi = 0, $78$hi = 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + -1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3_1 = i64toi32_i32$4;
   $3$hi = i64toi32_i32$5;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$5 = 0;
   $10$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $2_1;
   if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= $2_1 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = $3$hi;
   return (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($3_1 << 4 | 0) | 0 | 0;
  }
  label$2 : {
   if (!($2_1 & ($2_1 + -1 | 0) | 0)) {
    break label$2
   }
   if ((HEAP8[($0_1 + 5 | 0) >> 0] | 0 | 0) > (-1 | 0)) {
    break label$2
   }
   label$3 : {
    i64toi32_i32$0 = 0;
    $28$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $28$hi;
    i64toi32_i32$3 = $2_1 + 1 | 0;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $3$hi;
    $2_1 = $2_1 >>> 1 | 0 | $2_1 | 0;
    $2_1 = $2_1 >>> 2 | 0 | $2_1 | 0;
    $2_1 = $2_1 >>> 4 | 0 | $2_1 | 0;
    $2_1 = $2_1 >>> 8 | 0 | $2_1 | 0;
    i64toi32_i32$3 = 0;
    $53$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = $53$hi;
    i64toi32_i32$5 = ($2_1 >>> 16 | 0 | $2_1 | 0) + 1 | 0;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
     break label$2
    }
   }
   i64toi32_i32$2 = $1$hi;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
   i64toi32_i32$2 = $3$hi;
   return (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($3_1 << 4 | 0) | 0 | 0;
  }
  i64toi32_i32$2 = $1$hi;
  $0_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul(((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) & $1_1 | 0, 24) | 0;
  label$4 : {
   label$5 : while (1) {
    label$6 : {
     if ((HEAPU8[($0_1 + 9 | 0) >> 0] | 0 | 0) != (3 | 0)) {
      break label$6
     }
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
     $78$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $78$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) | 0) {
      break label$4
     }
    }
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $0_1 = $0_1 + Math_imul($2_1, 24) | 0;
    if ($2_1) {
     continue label$5
    }
    break label$5;
   };
   $0_1 = 4360;
  }
  return $0_1 | 0;
 }
 
 function $436($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $0_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) | 0, 24) | 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if ((HEAPU8[($0_1 + 9 | 0) >> 0] | 0 | 0) != (68 | 0)) {
      break label$3
     }
     if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$1
     }
    }
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $0_1 = $0_1 + Math_imul($2_1, 24) | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
   $0_1 = 4360;
  }
  return $0_1 | 0;
 }
 
 function $437($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
    if (($3_1 | 0) != (4 | 0)) {
     break label$2
    }
    $0_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) | 0, 24) | 0;
    label$3 : while (1) {
     label$4 : {
      if ((HEAPU8[($0_1 + 9 | 0) >> 0] | 0 | 0) != (68 | 0)) {
       break label$4
      }
      if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$1
      }
     }
     $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     $0_1 = $0_1 + Math_imul($3_1, 24) | 0;
     if ($3_1) {
      continue label$3
     }
     break label$3;
    };
    $0_1 = 4360;
    break label$1;
   }
   HEAP32[$2_1 >> 2] = $1_1;
   HEAP8[($2_1 + 8 | 0) >> 0] = $3_1 | 64 | 0;
   $0_1 = $424($0_1 | 0, $2_1 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $438($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $7$hi = 0, $8$hi = 0, $7_1 = 0, $8_1 = 0, $9$hi = 0, $9_1 = 0, $2_1 = 0, $6_1 = 0, $10$hi = 0, i64toi32_i32$6 = 0, $10_1 = 0, $34_1 = 0, $35_1 = 0, $75_1 = 0, $214$hi = 0, $248$hi = 0, $272$hi = 0, $303$hi = 0, $318$hi = 0, $342$hi = 0, $369$hi = 0, $423$hi = 0, $438$hi = 0, $462$hi = 0, $489$hi = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $3_1 = $1_1 + -1 | 0;
   if ((HEAPU8[(($2_1 + ($3_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) & 15 | 0) {
    break label$1
   }
   $4_1 = 0;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if ($1_1 >>> 0 < 2 >>> 0) {
         break label$6
        }
        $4_1 = $1_1 + -2 | 0;
        if ((HEAPU8[(($2_1 + ($4_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) & 15 | 0) {
         break label$5
        }
        $4_1 = 0;
        $3_1 = $1_1;
        label$7 : while (1) {
         $5_1 = ($3_1 + $4_1 | 0) >>> 1 | 0;
         $6_1 = (HEAPU8[((($5_1 << 4 | 0) + $2_1 | 0) + -8 | 0) >> 0] | 0) & 15 | 0;
         $3_1 = $6_1 ? $3_1 : $5_1;
         $4_1 = $6_1 ? $5_1 : $4_1;
         if (($3_1 - $4_1 | 0) >>> 0 > 1 >>> 0) {
          continue label$7
         }
         break label$7;
        };
       }
       $3_1 = __wasm_popcnt_i32($1_1 | 0) | 0;
       $5_1 = HEAP8[($0_1 + 5 | 0) >> 0] | 0;
       if (($5_1 | 0) < (0 | 0)) {
        break label$4
       }
       if ($3_1 >>> 0 <= 1 >>> 0) {
        break label$3
       }
       break label$2;
      }
      label$8 : {
       if (!($3_1 & $4_1 | 0)) {
        break label$8
       }
       $75_1 = ($1_1 & ($1_1 + -1 | 0) | 0 | 0) != (0 | 0);
       $1_1 = HEAP8[($0_1 + 5 | 0) >> 0] | 0;
       if ($75_1 & ($1_1 | 0) > (-1 | 0) | 0) {
        break label$8
       }
       HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
       HEAP8[($0_1 + 5 | 0) >> 0] = $1_1 | 128 | 0;
      }
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
      return $3_1 | 0;
     }
     if ($3_1 >>> 0 < 2 >>> 0) {
      break label$3
     }
     $1_1 = $1_1 >>> 1 | 0 | $1_1 | 0;
     $1_1 = $1_1 >>> 2 | 0 | $1_1 | 0;
     $1_1 = $1_1 >>> 4 | 0 | $1_1 | 0;
     $1_1 = $1_1 >>> 8 | 0 | $1_1 | 0;
     $1_1 = ($1_1 >>> 16 | 0 | $1_1 | 0) + 1 | 0;
    }
    if ($4_1 >>> 0 <= ($1_1 >>> 1 | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
    HEAP8[($0_1 + 5 | 0) >> 0] = $5_1 | 128 | 0;
   }
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$0 | 0;
  }
  $5_1 = $1_1;
  label$9 : {
   $2_1 = HEAP8[($0_1 + 5 | 0) >> 0] | 0;
   $4_1 = !($1_1 & ($1_1 + -1 | 0) | 0) | ($2_1 | 0) > (-1 | 0) | 0;
   if ($4_1) {
    break label$9
   }
   label$10 : {
    $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if ((HEAPU8[(($6_1 + ($1_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) & 15 | 0) {
     break label$10
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return $1_1 | 0;
   }
   $3_1 = $1_1 >>> 1 | 0 | $1_1 | 0;
   $3_1 = $3_1 >>> 2 | 0 | $3_1 | 0;
   $3_1 = $3_1 >>> 4 | 0 | $3_1 | 0;
   $3_1 = $3_1 >>> 8 | 0 | $3_1 | 0;
   $3_1 = $3_1 >>> 16 | 0 | $3_1 | 0;
   $5_1 = $3_1 + 1 | 0;
   if ((HEAPU8[(($6_1 + ($3_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) & 15 | 0) {
    break label$9
   }
   label$11 : {
    if (($5_1 - $1_1 | 0) >>> 0 < 2 >>> 0) {
     break label$11
    }
    label$12 : while (1) {
     $4_1 = ($5_1 + $1_1 | 0) >>> 1 | 0;
     $3_1 = (HEAPU8[((($4_1 << 4 | 0) + $6_1 | 0) + -8 | 0) >> 0] | 0) & 15 | 0;
     $5_1 = $3_1 ? $5_1 : $4_1;
     $1_1 = $3_1 ? $4_1 : $1_1;
     if (($5_1 - $1_1 | 0) >>> 0 > 1 >>> 0) {
      continue label$12
     }
     break label$12;
    };
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return $1_1 | 0;
  }
  label$13 : {
   label$14 : {
    if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
     break label$14
    }
    label$15 : {
     label$16 : {
      label$17 : {
       $3_1 = $5_1 + 1 | 0;
       i64toi32_i32$0 = 0;
       $7_1 = $3_1;
       $7$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$1 = -1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $8_1 = i64toi32_i32$4;
       $8$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       $214$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$2 = $214$hi;
       i64toi32_i32$3 = $1_1;
       if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= $1_1 >>> 0 | 0) | 0) {
        break label$17
       }
       i64toi32_i32$0 = $8$hi;
       $4_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($8_1 << 4 | 0) | 0;
       break label$16;
      }
      label$18 : {
       if ($4_1) {
        break label$18
       }
       label$19 : {
        if (($1_1 | 0) == ($5_1 | 0)) {
         break label$19
        }
        i64toi32_i32$0 = $8$hi;
        $4_1 = $1_1 >>> 1 | 0 | $1_1 | 0;
        $4_1 = $4_1 >>> 2 | 0 | $4_1 | 0;
        $4_1 = $4_1 >>> 4 | 0 | $4_1 | 0;
        $4_1 = $4_1 >>> 8 | 0 | $4_1 | 0;
        i64toi32_i32$0 = 0;
        $248$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $8$hi;
        i64toi32_i32$3 = $8_1;
        i64toi32_i32$5 = $248$hi;
        i64toi32_i32$2 = ($4_1 >>> 16 | 0 | $4_1 | 0) + 1 | 0;
        if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
         break label$18
        }
       }
       HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
       i64toi32_i32$3 = $8$hi;
       $4_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($8_1 << 4 | 0) | 0;
       break label$15;
      }
      $4_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul($3_1 & ((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) | 0, 24) | 0;
      label$20 : while (1) {
       label$21 : {
        if ((HEAPU8[($4_1 + 9 | 0) >> 0] | 0 | 0) != (3 | 0)) {
         break label$21
        }
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
        $272$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $7$hi;
        i64toi32_i32$0 = $272$hi;
        i64toi32_i32$2 = i64toi32_i32$3;
        i64toi32_i32$3 = $7$hi;
        i64toi32_i32$5 = $7_1;
        if ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) | 0) {
         break label$16
        }
       }
       $3_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
       $4_1 = $4_1 + Math_imul($3_1, 24) | 0;
       if ($3_1) {
        continue label$20
       }
       break label$20;
      };
      $4_1 = 4360;
     }
     $3_1 = $1_1;
    }
    if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
     break label$13
    }
   }
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = 0;
  $7_1 = $5_1 ? $5_1 : 1;
  $7$hi = i64toi32_i32$0;
  $5_1 = ($2_1 | 0) > (-1 | 0);
  label$22 : {
   label$23 : {
    label$24 : {
     label$25 : while (1) {
      i64toi32_i32$0 = $7$hi;
      $8_1 = $7_1;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$5 = $8_1;
      i64toi32_i32$2 = 1073741823;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$24
      }
      label$26 : {
       label$27 : {
        i64toi32_i32$5 = $8$hi;
        i64toi32_i32$3 = $8_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = 1;
        i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
         $34_1 = 0;
        } else {
         i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
         $34_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
        }
        $7_1 = $34_1;
        $7$hi = i64toi32_i32$0;
        i64toi32_i32$5 = $7_1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $9_1 = i64toi32_i32$1;
        $9$hi = i64toi32_i32$4;
        i64toi32_i32$4 = 0;
        $303$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $9$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = $303$hi;
        i64toi32_i32$2 = $3_1;
        if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
         break label$27
        }
        i64toi32_i32$0 = $9$hi;
        $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($9_1 << 4 | 0) | 0;
        break label$26;
       }
       label$28 : {
        if ($5_1) {
         break label$28
        }
        if ((__wasm_popcnt_i32($3_1 | 0) | 0) >>> 0 < 2 >>> 0) {
         break label$28
        }
        label$29 : {
         i64toi32_i32$0 = $7$hi;
         i64toi32_i32$0 = 0;
         $318$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $7$hi;
         i64toi32_i32$2 = $7_1;
         i64toi32_i32$4 = $318$hi;
         i64toi32_i32$5 = $3_1 + 1 | 0;
         if ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0) {
          break label$29
         }
         i64toi32_i32$2 = $9$hi;
         $1_1 = $3_1 >>> 1 | 0 | $3_1 | 0;
         $1_1 = $1_1 >>> 2 | 0 | $1_1 | 0;
         $1_1 = $1_1 >>> 4 | 0 | $1_1 | 0;
         $1_1 = $1_1 >>> 8 | 0 | $1_1 | 0;
         i64toi32_i32$2 = 0;
         $342$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $9$hi;
         i64toi32_i32$5 = $9_1;
         i64toi32_i32$0 = $342$hi;
         i64toi32_i32$4 = ($1_1 >>> 16 | 0 | $1_1 | 0) + 1 | 0;
         if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$4 >>> 0 | 0) | 0) {
          break label$28
         }
        }
        i64toi32_i32$5 = $7$hi;
        $3_1 = $7_1;
        HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
        i64toi32_i32$5 = $9$hi;
        $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($9_1 << 4 | 0) | 0;
        break label$26;
       }
       i64toi32_i32$5 = $7$hi;
       $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul(((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) & $7_1 | 0, 24) | 0;
       label$30 : while (1) {
        label$31 : {
         if ((HEAPU8[($1_1 + 9 | 0) >> 0] | 0 | 0) != (3 | 0)) {
          break label$31
         }
         i64toi32_i32$4 = $1_1;
         i64toi32_i32$5 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
         $369$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $7$hi;
         i64toi32_i32$2 = $369$hi;
         i64toi32_i32$4 = i64toi32_i32$5;
         i64toi32_i32$5 = $7$hi;
         i64toi32_i32$0 = $7_1;
         if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0) {
          break label$26
         }
        }
        $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        $1_1 = $1_1 + Math_imul($4_1, 24) | 0;
        if ($4_1) {
         continue label$30
        }
        break label$30;
       };
       $1_1 = 4360;
      }
      if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
       continue label$25
      }
      break label$23;
     };
    }
    $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0, 24) | 0;
    label$32 : {
     label$33 : while (1) {
      label$34 : {
       if ((HEAPU8[($1_1 + 9 | 0) >> 0] | 0 | 0) != (3 | 0)) {
        break label$34
       }
       i64toi32_i32$0 = $1_1;
       i64toi32_i32$4 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$4 = 2147483647;
       i64toi32_i32$5 = -1;
       if ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) | 0) {
        break label$32
       }
      }
      $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $1_1 = $1_1 + Math_imul($4_1, 24) | 0;
      if ($4_1) {
       continue label$33
      }
      break label$33;
     };
     $1_1 = 4360;
    }
    i64toi32_i32$0 = 2147483647;
    $7_1 = -1;
    $7$hi = i64toi32_i32$0;
    if ((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
     break label$22
    }
   }
   label$35 : {
    i64toi32_i32$0 = $7$hi;
    $9_1 = $7_1;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$4 = $8_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 2;
    if (i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$4 >>> 0 | 0) | 0) {
     break label$35
    }
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
    return i64toi32_i32$1 | 0;
   }
   $5_1 = ($2_1 | 0) > (-1 | 0);
   i64toi32_i32$1 = $8$hi;
   $7_1 = $8_1;
   $7$hi = i64toi32_i32$1;
   label$36 : while (1) {
    label$37 : {
     label$38 : {
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$4 = $9_1;
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $35_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
       $35_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
      }
      $8_1 = $35_1;
      $8$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $8_1;
      i64toi32_i32$1 = -1;
      i64toi32_i32$5 = -1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $10_1 = i64toi32_i32$0;
      $10$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $423$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$3 = $423$hi;
      i64toi32_i32$5 = $3_1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
       break label$38
      }
      i64toi32_i32$4 = $10$hi;
      $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($10_1 << 4 | 0) | 0;
      break label$37;
     }
     label$39 : {
      if ($5_1) {
       break label$39
      }
      if ((__wasm_popcnt_i32($3_1 | 0) | 0) >>> 0 < 2 >>> 0) {
       break label$39
      }
      label$40 : {
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$4 = 0;
       $438$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $8$hi;
       i64toi32_i32$5 = $8_1;
       i64toi32_i32$2 = $438$hi;
       i64toi32_i32$3 = $3_1 + 1 | 0;
       if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0) {
        break label$40
       }
       i64toi32_i32$5 = $10$hi;
       $1_1 = $3_1 >>> 1 | 0 | $3_1 | 0;
       $1_1 = $1_1 >>> 2 | 0 | $1_1 | 0;
       $1_1 = $1_1 >>> 4 | 0 | $1_1 | 0;
       $1_1 = $1_1 >>> 8 | 0 | $1_1 | 0;
       i64toi32_i32$5 = 0;
       $462$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$3 = $10_1;
       i64toi32_i32$4 = $462$hi;
       i64toi32_i32$2 = ($1_1 >>> 16 | 0 | $1_1 | 0) + 1 | 0;
       if (i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$39
       }
      }
      i64toi32_i32$3 = $8$hi;
      $3_1 = $8_1;
      HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
      i64toi32_i32$3 = $10$hi;
      $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($10_1 << 4 | 0) | 0;
      break label$37;
     }
     i64toi32_i32$3 = $8$hi;
     $1_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + Math_imul(((-1 << (HEAPU8[($0_1 + 7 | 0) >> 0] | 0) | 0) ^ -1 | 0) & $8_1 | 0, 24) | 0;
     label$41 : while (1) {
      label$42 : {
       if ((HEAPU8[($1_1 + 9 | 0) >> 0] | 0 | 0) != (3 | 0)) {
        break label$42
       }
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$3 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
       $489$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$5 = $489$hi;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = $8$hi;
       i64toi32_i32$4 = $8_1;
       if ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) | 0) {
        break label$37
       }
      }
      $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $1_1 = $1_1 + Math_imul($4_1, 24) | 0;
      if ($4_1) {
       continue label$41
      }
      break label$41;
     };
     $1_1 = 4360;
    }
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$2 = $8$hi;
    $1_1 = (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$3 = $1_1 ? $9_1 : $8_1;
    i64toi32_i32$4 = $1_1 ? i64toi32_i32$2 : i64toi32_i32$5;
    $9_1 = i64toi32_i32$3;
    $9$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$4 = $8$hi;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$2 = $1_1 ? $8_1 : $7_1;
    i64toi32_i32$1 = $1_1 ? i64toi32_i32$4 : i64toi32_i32$3;
    $7_1 = i64toi32_i32$2;
    $7$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$5 = $9_1;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 1;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
     continue label$36
    }
    break label$36;
   };
  }
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$0 = $7_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $439($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : while (1) {
   $2_1 = $1_1 << 2 | 0;
   $3_1 = $420($0_1 | 0, HEAP32[($2_1 + 4512 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[(((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $2_1 | 0) + 168 | 0) >> 2] = $3_1;
   $236($0_1 | 0, HEAP32[(((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $2_1 | 0) + 168 | 0) >> 2] | 0 | 0);
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != (25 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $440($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $2_1 = $436($0_1 | 0, $2_1 | 0) | 0;
   if ((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
    break label$1
   }
   HEAP8[($0_1 + 6 | 0) >> 0] = HEAPU8[($0_1 + 6 | 0) >> 0] | 0 | (1 << $1_1 | 0) | 0;
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $441($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $3_1 = (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0;
      switch ($3_1 + -5 | 0 | 0) {
      case 2:
       break label$3;
      case 0:
       break label$4;
      default:
       break label$2;
      };
     }
     $1_1 = (HEAP32[$1_1 >> 2] | 0) + 24 | 0;
     break label$1;
    }
    $1_1 = (HEAP32[$1_1 >> 2] | 0) + 12 | 0;
    break label$1;
   }
   $1_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) + 268 | 0;
  }
  $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  label$5 : {
   $1_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   return $436($1_1 | 0, HEAP32[(($0_1 + ($2_1 << 2 | 0) | 0) + 168 | 0) >> 2] | 0 | 0) | 0 | 0;
  }
  return $0_1 + 56 | 0 | 0;
 }
 
 function $442($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $2_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
       switch ($2_1 + -69 | 0 | 0) {
       case 2:
        break label$4;
       case 0:
        break label$5;
       default:
        break label$2;
       };
      }
      $2_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0;
      if ($2_1) {
       break label$3
      }
      $2_1 = 69;
      break label$2;
     }
     $2_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0;
     if ($2_1) {
      break label$3
     }
     $2_1 = 71;
     break label$2;
    }
    $2_1 = $436($2_1 | 0, $420($0_1 | 0, 4776 | 0) | 0 | 0) | 0;
    if (((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) == (4 | 0)) {
     break label$1
    }
    $2_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
   }
   return HEAP32[((($2_1 & 15 | 0) << 2 | 0) + 4468 | 0) >> 2] | 0 | 0;
  }
  return (HEAP32[$2_1 >> 2] | 0) + 16 | 0 | 0;
 }
 
 function $443($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $10_1 = 0, $16_1 = 0, $23_1 = 0, $30_1 = 0;
  $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[$5_1 >> 2] = $10_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($5_1 + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $16_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($5_1 + 24 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $23_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($5_1 + 40 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $30_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 48 | 0) >> 2] = $30_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($5_1 + 56 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $5_1 + 64 | 0;
  label$1 : {
   if ((HEAPU8[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 34 | 0) >> 0] | 0) & 6 | 0) {
    break label$1
   }
   $208($0_1 | 0, $5_1 | 0, 0 | 0);
   return;
  }
  $209($0_1 | 0, $5_1 | 0, 0 | 0);
 }
 
 function $444($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $13_1 = 0, $19_1 = 0, $26_1 = 0, $56_1 = 0;
  $5_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[$6_1 >> 2] = $13_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($6_1 + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $19_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($6_1 + 24 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $26_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($6_1 + 40 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 48 | 0;
  label$1 : {
   label$2 : {
    if ((HEAPU8[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 34 | 0) >> 0] | 0) & 6 | 0) {
     break label$2
    }
    $208($0_1 | 0, $6_1 | 0, 1 | 0);
    break label$1;
   }
   $209($0_1 | 0, $6_1 | 0, 1 | 0);
  }
  $6_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
  $0_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($4_1 - $5_1 | 0) | 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $56_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[$0_1 >> 2] = $56_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 8 | 0) >> 0] = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
 }
 
 function $445($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $86_1 = 0, $92_1 = 0, $99_1 = 0, $148_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $5_1 = (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0;
      switch ($5_1 + -5 | 0 | 0) {
      case 2:
       break label$3;
      case 0:
       break label$4;
      default:
       break label$2;
      };
     }
     $5_1 = (HEAP32[$1_1 >> 2] | 0) + 24 | 0;
     break label$1;
    }
    $5_1 = (HEAP32[$1_1 >> 2] | 0) + 12 | 0;
    break label$1;
   }
   $5_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($5_1 << 2 | 0) | 0) + 268 | 0;
  }
  $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  label$5 : {
   label$6 : {
    $5_1 = HEAP32[$5_1 >> 2] | 0;
    if (!$5_1) {
     break label$6
    }
    $6_1 = $436($5_1 | 0, HEAP32[(($6_1 + ($4_1 << 2 | 0) | 0) + 168 | 0) >> 2] | 0 | 0) | 0;
    break label$5;
   }
   $6_1 = $6_1 + 56 | 0;
  }
  label$7 : {
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       if ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
        break label$11
       }
       label$12 : {
        label$13 : {
         label$14 : {
          label$15 : {
           $5_1 = (HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 15 | 0;
           switch ($5_1 + -5 | 0 | 0) {
           case 2:
            break label$14;
           case 0:
            break label$15;
           default:
            break label$13;
           };
          }
          $5_1 = (HEAP32[$2_1 >> 2] | 0) + 24 | 0;
          break label$12;
         }
         $5_1 = (HEAP32[$2_1 >> 2] | 0) + 12 | 0;
         break label$12;
        }
        $5_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($5_1 << 2 | 0) | 0) + 268 | 0;
       }
       $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       label$16 : {
        label$17 : {
         $5_1 = HEAP32[$5_1 >> 2] | 0;
         if (!$5_1) {
          break label$17
         }
         $6_1 = $436($5_1 | 0, HEAP32[(($6_1 + ($4_1 << 2 | 0) | 0) + 168 | 0) >> 2] | 0 | 0) | 0;
         break label$16;
        }
        $6_1 = $6_1 + 56 | 0;
       }
       if (!((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
        break label$10
       }
      }
      $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      $86_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1;
      HEAP32[$5_1 >> 2] = $86_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP8[($5_1 + 8 | 0) >> 0] = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
      i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $92_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $5_1;
      HEAP32[($5_1 + 16 | 0) >> 2] = $92_1;
      HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
      HEAP8[($5_1 + 24 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
      i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      $99_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1;
      HEAP32[($5_1 + 32 | 0) >> 2] = $99_1;
      HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$1;
      HEAP8[($5_1 + 40 | 0) >> 0] = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
      HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 48 | 0;
      if ((HEAPU8[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 34 | 0) >> 0] | 0) & 6 | 0) {
       break label$9
      }
      $208($0_1 | 0, $5_1 | 0, 1 | 0);
      break label$8;
     }
     label$18 : {
      label$19 : {
       if (($4_1 + -13 | 0) >>> 0 < 5 >>> 0) {
        break label$19
       }
       if (($4_1 | 0) != (19 | 0)) {
        break label$18
       }
      }
      label$20 : {
       if (((HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) != (3 | 0)) {
        break label$20
       }
       if (((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) == (3 | 0)) {
        break label$7
       }
      }
      $191($0_1 | 0, $1_1 | 0, $2_1 | 0, 4783 | 0);
      abort();
     }
     $191($0_1 | 0, $1_1 | 0, $2_1 | 0, 4812 | 0);
     abort();
    }
    $209($0_1 | 0, $5_1 | 0, 1 | 0);
   }
   $5_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
   $0_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($3_1 - $4_1 | 0) | 0;
   i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   $148_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[$0_1 >> 2] = $148_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($0_1 + 8 | 0) >> 0] = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
   return;
  }
  $192($0_1 | 0, $1_1 | 0, $2_1 | 0);
  abort();
 }
 
 function $446($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $2_1 = 0, $6_1 = 0, $3_1 = 0, $7_1 = 0, $90_1 = 0, $96_1 = 0, $103_1 = 0, $137_1 = 0;
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $2_1 = $1_1 + -32 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $3_1 = $1_1 + -24 | 0;
      $4_1 = (HEAPU8[$3_1 >> 0] | 0) & 15 | 0;
      switch ($4_1 + -5 | 0 | 0) {
      case 2:
       break label$3;
      case 0:
       break label$4;
      default:
       break label$2;
      };
     }
     $4_1 = (HEAP32[$2_1 >> 2] | 0) + 24 | 0;
     break label$1;
    }
    $4_1 = (HEAP32[$2_1 >> 2] | 0) + 12 | 0;
    break label$1;
   }
   $4_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0) + 268 | 0;
  }
  $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  label$5 : {
   label$6 : {
    $4_1 = HEAP32[$4_1 >> 2] | 0;
    if (!$4_1) {
     break label$6
    }
    $5_1 = $436($4_1 | 0, HEAP32[($5_1 + 256 | 0) >> 2] | 0 | 0) | 0;
    break label$5;
   }
   $5_1 = $5_1 + 56 | 0;
  }
  $6_1 = $1_1 + -16 | 0;
  label$7 : {
   label$8 : {
    label$9 : {
     label$10 : {
      if ((HEAPU8[($5_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
       break label$10
      }
      label$11 : {
       label$12 : {
        label$13 : {
         label$14 : {
          $4_1 = (HEAPU8[($1_1 + -8 | 0) >> 0] | 0) & 15 | 0;
          switch ($4_1 + -5 | 0 | 0) {
          case 2:
           break label$13;
          case 0:
           break label$14;
          default:
           break label$12;
          };
         }
         $4_1 = (HEAP32[$6_1 >> 2] | 0) + 24 | 0;
         break label$11;
        }
        $4_1 = (HEAP32[$6_1 >> 2] | 0) + 12 | 0;
        break label$11;
       }
       $4_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0) + 268 | 0;
      }
      $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      label$15 : {
       label$16 : {
        $4_1 = HEAP32[$4_1 >> 2] | 0;
        if (!$4_1) {
         break label$16
        }
        $5_1 = $436($4_1 | 0, HEAP32[($5_1 + 256 | 0) >> 2] | 0 | 0) | 0;
        break label$15;
       }
       $5_1 = $5_1 + 56 | 0;
      }
      if (!((HEAPU8[($5_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
       break label$9
      }
     }
     $7_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
     $90_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $4_1;
     HEAP32[$4_1 >> 2] = $90_1;
     HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP8[($4_1 + 8 | 0) >> 0] = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $96_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $4_1;
     HEAP32[($4_1 + 16 | 0) >> 2] = $96_1;
     HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($4_1 + 24 | 0) >> 0] = HEAPU8[$3_1 >> 0] | 0;
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $103_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $4_1;
     HEAP32[($4_1 + 32 | 0) >> 2] = $103_1;
     HEAP32[($4_1 + 36 | 0) >> 2] = i64toi32_i32$1;
     HEAP8[($4_1 + 40 | 0) >> 0] = HEAPU8[($1_1 + -8 | 0) >> 0] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 48 | 0;
     if ((HEAPU8[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 34 | 0) >> 0] | 0) & 6 | 0) {
      break label$8
     }
     $208($0_1 | 0, $4_1 | 0, 1 | 0);
     break label$7;
    }
    $190($0_1 | 0, $2_1 | 0, $6_1 | 0);
    abort();
   }
   $209($0_1 | 0, $4_1 | 0, 1 | 0);
  }
  $4_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
  $0_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($2_1 - $7_1 | 0) | 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $137_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[$0_1 >> 2] = $137_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 8 | 0) >> 0] = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
 }
 
 function $447($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $445($0_1 | 0, $2_1 | 0, $1_1 | 0, $4_1 | 0, $5_1 | 0);
   return;
  }
  $445($0_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0, $5_1 | 0);
 }
 
 function $448($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP8[($6_1 + 8 | 0) >> 0] = 3;
  i64toi32_i32$0 = $2$hi;
  HEAP32[$6_1 >> 2] = $2_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    $445($0_1 | 0, $6_1 | 0, $1_1 | 0, $4_1 | 0, $5_1 | 0);
    break label$1;
   }
   $445($0_1 | 0, $1_1 | 0, $6_1 | 0, $4_1 | 0, $5_1 | 0);
  }
  global$0 = $6_1 + 16 | 0;
 }
 
 function $449($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $88_1 = 0, $94_1 = 0, $101_1 = 0, $131_1 = 0;
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $5_1 = (HEAPU8[($1_1 + 8 | 0) >> 0] | 0) & 15 | 0;
      switch ($5_1 + -5 | 0 | 0) {
      case 2:
       break label$3;
      case 0:
       break label$4;
      default:
       break label$2;
      };
     }
     $5_1 = (HEAP32[$1_1 >> 2] | 0) + 24 | 0;
     break label$1;
    }
    $5_1 = (HEAP32[$1_1 >> 2] | 0) + 12 | 0;
    break label$1;
   }
   $5_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($5_1 << 2 | 0) | 0) + 268 | 0;
  }
  $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  label$5 : {
   label$6 : {
    $5_1 = HEAP32[$5_1 >> 2] | 0;
    if (!$5_1) {
     break label$6
    }
    $6_1 = $436($5_1 | 0, HEAP32[(($6_1 + ($3_1 << 2 | 0) | 0) + 168 | 0) >> 2] | 0 | 0) | 0;
    break label$5;
   }
   $6_1 = $6_1 + 56 | 0;
  }
  label$7 : {
   label$8 : {
    if ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
     break label$8
    }
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : {
        $5_1 = (HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 15 | 0;
        switch ($5_1 + -5 | 0 | 0) {
        case 2:
         break label$11;
        case 0:
         break label$12;
        default:
         break label$10;
        };
       }
       $5_1 = (HEAP32[$2_1 >> 2] | 0) + 24 | 0;
       break label$9;
      }
      $5_1 = (HEAP32[$2_1 >> 2] | 0) + 12 | 0;
      break label$9;
     }
     $5_1 = ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($5_1 << 2 | 0) | 0) + 268 | 0;
    }
    $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    label$13 : {
     label$14 : {
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      if (!$5_1) {
       break label$14
      }
      $6_1 = $436($5_1 | 0, HEAP32[(($6_1 + ($3_1 << 2 | 0) | 0) + 168 | 0) >> 2] | 0 | 0) | 0;
      break label$13;
     }
     $6_1 = $6_1 + 56 | 0;
    }
    if (!((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
     break label$7
    }
   }
   $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
   $88_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1;
   HEAP32[$5_1 >> 2] = $88_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($5_1 + 8 | 0) >> 0] = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
   i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $94_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $94_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($5_1 + 24 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
   i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $101_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1;
   HEAP32[($5_1 + 32 | 0) >> 2] = $101_1;
   HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($5_1 + 40 | 0) >> 0] = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 48 | 0;
   label$15 : {
    label$16 : {
     if ((HEAPU8[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 34 | 0) >> 0] | 0) & 6 | 0) {
      break label$16
     }
     $208($0_1 | 0, $5_1 | 0, 1 | 0);
     break label$15;
    }
    $209($0_1 | 0, $5_1 | 0, 1 | 0);
   }
   $5_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
   $1_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($4_1 - $3_1 | 0) | 0;
   i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   $131_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1;
   HEAP32[$1_1 >> 2] = $131_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($1_1 + 8 | 0) >> 0] = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
   $0_1 = HEAPU8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0;
   return ($0_1 | 0) != (1 | 0) & ($0_1 & 15 | 0 | 0) != (0 | 0) | 0 | 0;
  }
  $193($0_1 | 0, $1_1 | 0, $2_1 | 0);
  abort();
 }
 
 function $450($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    HEAPF64[$6_1 >> 3] = +($2_1 | 0);
    $4_1 = 19;
    break label$1;
   }
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$1 = $6_1;
   HEAP32[$6_1 >> 2] = $2_1;
   HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $4_1 = 3;
  }
  HEAP8[($6_1 + 8 | 0) >> 0] = $4_1;
  $1_1 = $449($0_1 | 0, ($3_1 ? $6_1 : $1_1) | 0, ($3_1 ? $1_1 : $6_1) | 0, $5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $451($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $4_1 = 0, $48_1 = 0, $67_1 = 0;
  $4_1 = ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - (HEAP32[$2_1 >> 2] | 0) | 0) >> 4 | 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = $4_1 + ($1_1 ^ -1 | 0) | 0;
  $5_1 = 1;
  label$1 : {
   $3_1 = (HEAPU8[($3_1 + 8 | 0) >> 0] | 0) + 1 | 0;
   if ((((HEAP32[($0_1 + 28 | 0) >> 2] | 0) - (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0) >> 4 | 0 | 0) > ($3_1 | 0)) {
    break label$1
   }
   $200($0_1 | 0, $3_1 | 0, 1 | 0) | 0;
   if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $248($0_1 | 0);
  }
  $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $3_1 + 16 | 0;
  $6_1 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $48_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[$3_1 >> 2] = $48_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
  label$2 : {
   if (($1_1 | 0) < (1 | 0)) {
    break label$2
   }
   label$3 : while (1) {
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $3_1 + 16 | 0;
    $6_1 = $5_1 << 4 | 0;
    $7_1 = (HEAP32[$2_1 >> 2] | 0) + $6_1 | 0;
    i64toi32_i32$1 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $67_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $3_1;
    HEAP32[$3_1 >> 2] = $67_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($7_1 + 8 | 0) >> 0] | 0;
    HEAP8[(((HEAP32[$2_1 >> 2] | 0) + $6_1 | 0) + 8 | 0) >> 0] = 0;
    $3_1 = ($5_1 | 0) != ($1_1 | 0);
    $5_1 = $5_1 + 1 | 0;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
  }
  $5_1 = $4_1 << 4 | 0;
  HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + $5_1 | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) + $5_1 | 0;
 }
 
 function $452($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $71_1 = 0;
  $4_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  label$1 : {
   if (($3_1 | 0) > (-1 | 0)) {
    break label$1
   }
   label$2 : {
    if ((((HEAP32[($0_1 + 28 | 0) >> 2] | 0) - (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0) >> 4 | 0 | 0) > ($4_1 | 0)) {
     break label$2
    }
    $5_1 = $2_1 - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
    label$3 : {
     if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$3
     }
     $248($0_1 | 0);
    }
    $200($0_1 | 0, $4_1 | 0, 1 | 0) | 0;
    $2_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $5_1 | 0;
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = $2_1 + ($4_1 << 4 | 0) | 0;
   $3_1 = $4_1;
  }
  $0_1 = 0;
  label$4 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$4
   }
   if (($4_1 | 0) < (1 | 0)) {
    break label$4
   }
   $0_1 = ($3_1 + -1 | 0) >>> 0 < ($4_1 + -1 | 0) >>> 0 ? $3_1 : $4_1;
   $5_1 = 0;
   $6_1 = (0 - $4_1 | 0) << 4 | 0;
   label$5 : while (1) {
    $4_1 = $5_1 << 4 | 0;
    $7_1 = $2_1 + $4_1 | 0;
    $4_1 = ((HEAP32[$1_1 >> 2] | 0) + $6_1 | 0) + $4_1 | 0;
    i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    $71_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $7_1;
    HEAP32[i64toi32_i32$0 >> 2] = $71_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP8[(i64toi32_i32$0 + 8 | 0) >> 0] = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != ($0_1 | 0)) {
     continue label$5
    }
    break label$5;
   };
  }
  label$6 : {
   if (($0_1 | 0) >= ($3_1 | 0)) {
    break label$6
   }
   label$7 : while (1) {
    HEAP8[(($2_1 + ($0_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 0;
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) != ($3_1 | 0)) {
     continue label$7
    }
    break label$7;
   };
  }
 }
 
 function $453($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $4_1 = HEAPU8[$2_1 >> 0] | 0;
      switch ($4_1 + -61 | 0 | 0) {
      case 1:
      case 2:
       break label$2;
      case 0:
      case 3:
       break label$4;
      default:
       break label$3;
      };
     }
     $5_1 = $2_1 + 1 | 0;
     break label$1;
    }
    $5_1 = 4839;
    if (($4_1 | 0) == (27 | 0)) {
     break label$1
    }
   }
   $5_1 = $2_1;
  }
  HEAP32[($3_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 48 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 56 | 0) >> 2] = $5_1;
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               label$18 : {
                label$19 : {
                 label$20 : {
                  label$21 : {
                   label$22 : {
                    label$23 : {
                     label$24 : {
                      if ($476($1_1 | 0, $3_1 + 64 | 0 | 0, 3 | 0) | 0) {
                       break label$24
                      }
                      if ($874(4835 | 0, $3_1 + 64 | 0 | 0, 3 | 0) | 0) {
                       break label$23
                      }
                      $2_1 = 0;
                      label$25 : while (1) {
                       $1_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
                       $5_1 = HEAP32[$1_1 >> 2] | 0;
                       HEAP32[$1_1 >> 2] = $5_1 + -1 | 0;
                       label$26 : {
                        label$27 : {
                         if (!$5_1) {
                          break label$27
                         }
                         $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                         HEAP32[($1_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                         $1_1 = HEAPU8[$5_1 >> 0] | 0;
                         break label$26;
                        }
                        $1_1 = $474($1_1 | 0) | 0;
                        if (($1_1 | 0) == (-1 | 0)) {
                         break label$22
                        }
                       }
                       if ($2_1 >>> 0 >= 16777215 >>> 0) {
                        break label$21
                       }
                       $2_1 = $1_1 & 127 | 0 | ($2_1 << 7 | 0) | 0;
                       if (!($1_1 & 128 | 0)) {
                        continue label$25
                       }
                       break label$25;
                      };
                      if (($2_1 | 0) != (504 | 0)) {
                       break label$20
                      }
                      $1_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
                      $2_1 = HEAP32[$1_1 >> 2] | 0;
                      HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
                      label$28 : {
                       label$29 : {
                        if (!$2_1) {
                         break label$29
                        }
                        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                        HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                        $1_1 = HEAPU8[$2_1 >> 0] | 0;
                        break label$28;
                       }
                       $1_1 = $474($1_1 | 0) | 0;
                       if (($1_1 | 0) == (-1 | 0)) {
                        break label$19
                       }
                      }
                      if ($1_1 & 255 | 0) {
                       break label$18
                      }
                      if ($476(HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0, $3_1 + 64 | 0 | 0, 6 | 0) | 0) {
                       break label$17
                      }
                      if ($874(4905 | 0, $3_1 + 64 | 0 | 0, 6 | 0) | 0) {
                       break label$16
                      }
                      $1_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
                      $2_1 = HEAP32[$1_1 >> 2] | 0;
                      HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
                      label$30 : {
                       label$31 : {
                        if (!$2_1) {
                         break label$31
                        }
                        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                        HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                        $1_1 = HEAPU8[$2_1 >> 0] | 0;
                        break label$30;
                       }
                       $1_1 = $474($1_1 | 0) | 0;
                       if (($1_1 | 0) == (-1 | 0)) {
                        break label$15
                       }
                      }
                      if (($1_1 & 255 | 0 | 0) != (4 | 0)) {
                       break label$14
                      }
                      $1_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
                      $2_1 = HEAP32[$1_1 >> 2] | 0;
                      HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
                      label$32 : {
                       label$33 : {
                        if (!$2_1) {
                         break label$33
                        }
                        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                        HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                        $1_1 = HEAPU8[$2_1 >> 0] | 0;
                        break label$32;
                       }
                       $1_1 = $474($1_1 | 0) | 0;
                       if (($1_1 | 0) == (-1 | 0)) {
                        break label$13
                       }
                      }
                      if (($1_1 & 255 | 0 | 0) != (8 | 0)) {
                       break label$12
                      }
                      $1_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
                      $2_1 = HEAP32[$1_1 >> 2] | 0;
                      HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
                      label$34 : {
                       label$35 : {
                        if (!$2_1) {
                         break label$35
                        }
                        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                        HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                        $1_1 = HEAPU8[$2_1 >> 0] | 0;
                        break label$34;
                       }
                       $1_1 = $474($1_1 | 0) | 0;
                       if (($1_1 | 0) == (-1 | 0)) {
                        break label$11
                       }
                      }
                      if (($1_1 & 255 | 0 | 0) != (8 | 0)) {
                       break label$10
                      }
                      if ($476(HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0, $3_1 + 64 | 0 | 0, 8 | 0) | 0) {
                       break label$9
                      }
                      i64toi32_i32$0 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
                      i64toi32_i32$2 = i64toi32_i32$0;
                      i64toi32_i32$0 = 0;
                      if ((i64toi32_i32$2 | 0) != (22136 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
                       break label$8
                      }
                      if ($476(HEAP32[($3_1 + 52 | 0) >> 2] | 0 | 0, $3_1 + 64 | 0 | 0, 8 | 0) | 0) {
                       break label$7
                      }
                      if (+HEAPF64[($3_1 + 64 | 0) >> 3] != 370.5) {
                       break label$6
                      }
                      $1_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
                      $2_1 = HEAP32[$1_1 >> 2] | 0;
                      HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
                      label$36 : {
                       label$37 : {
                        if (!$2_1) {
                         break label$37
                        }
                        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                        HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
                        $1_1 = HEAPU8[$2_1 >> 0] | 0;
                        break label$36;
                       }
                       $1_1 = $474($1_1 | 0) | 0;
                       if (($1_1 | 0) == (-1 | 0)) {
                        break label$5
                       }
                      }
                      $1_1 = $220($0_1 | 0, $1_1 & 255 | 0 | 0) | 0;
                      $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
                      HEAP8[($2_1 + 8 | 0) >> 0] = 70;
                      HEAP32[$2_1 >> 2] = $1_1;
                      $202($0_1 | 0);
                      $2_1 = $230($0_1 | 0) | 0;
                      HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
                      $454($3_1 + 48 | 0 | 0, $2_1 | 0, 0 | 0);
                      global$0 = $3_1 + 80 | 0;
                      return $1_1 | 0;
                     }
                     $455($3_1 + 48 | 0 | 0, 5009 | 0);
                     abort();
                    }
                    $455($3_1 + 48 | 0 | 0, 4853 | 0);
                    abort();
                   }
                   $455($3_1 + 48 | 0 | 0, 5009 | 0);
                   abort();
                  }
                  $455($3_1 + 48 | 0 | 0, 5025 | 0);
                  abort();
                 }
                 $455($3_1 + 48 | 0 | 0, 4872 | 0);
                 abort();
                }
                $455($3_1 + 48 | 0 | 0, 5009 | 0);
                abort();
               }
               $455($3_1 + 48 | 0 | 0, 4889 | 0);
               abort();
              }
              $455($3_1 + 48 | 0 | 0, 5009 | 0);
              abort();
             }
             $455($3_1 + 48 | 0 | 0, 4912 | 0);
             abort();
            }
            $455($3_1 + 48 | 0 | 0, 5009 | 0);
            abort();
           }
           HEAP32[($3_1 + 32 | 0) >> 2] = 4928;
           $455($3_1 + 48 | 0 | 0, $298(HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0, 5069 | 0, $3_1 + 32 | 0 | 0) | 0 | 0);
           abort();
          }
          $455($3_1 + 48 | 0 | 0, 5009 | 0);
          abort();
         }
         HEAP32[($3_1 + 16 | 0) >> 2] = 4940;
         $455($3_1 + 48 | 0 | 0, $298(HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0, 5069 | 0, $3_1 + 16 | 0 | 0) | 0 | 0);
         abort();
        }
        $455($3_1 + 48 | 0 | 0, 5009 | 0);
        abort();
       }
       HEAP32[$3_1 >> 2] = 4952;
       $455($3_1 + 48 | 0 | 0, $298(HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0, 5069 | 0, $3_1 | 0) | 0 | 0);
       abort();
      }
      $455($3_1 + 48 | 0 | 0, 5009 | 0);
      abort();
     }
     $455($3_1 + 48 | 0 | 0, 4963 | 0);
     abort();
    }
    $455($3_1 + 48 | 0 | 0, 5009 | 0);
    abort();
   }
   $455($3_1 + 48 | 0 | 0, 4987 | 0);
   abort();
  }
  $455($3_1 + 48 | 0 | 0, 5009 | 0);
  abort();
 }
 
 function $454($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $11_1 = 0, $10_1 = 0, $3_1 = 0, $9_1 = 0, i64toi32_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $456($0_1 | 0) | 0;
  HEAP32[($1_1 + 76 | 0) >> 2] = $4_1 ? $4_1 : $2_1;
  $2_1 = $0_1 + 4 | 0;
  $5_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                label$15 : {
                 label$16 : {
                  label$17 : {
                   label$18 : {
                    label$19 : {
                     label$20 : {
                      label$21 : {
                       label$22 : {
                        label$23 : {
                         label$24 : {
                          label$25 : {
                           label$26 : {
                            label$27 : {
                             label$28 : {
                              label$29 : {
                               label$30 : {
                                label$31 : {
                                 label$32 : {
                                  label$33 : {
                                   label$34 : {
                                    label$35 : {
                                     label$36 : {
                                      label$37 : {
                                       label$38 : {
                                        label$39 : {
                                         label$40 : {
                                          label$41 : {
                                           label$42 : {
                                            label$43 : {
                                             label$44 : {
                                              label$45 : {
                                               label$46 : {
                                                label$47 : while (1) {
                                                 $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                 $6_1 = HEAP32[$4_1 >> 2] | 0;
                                                 HEAP32[$4_1 >> 2] = $6_1 + -1 | 0;
                                                 label$48 : {
                                                  label$49 : {
                                                   if (!$6_1) {
                                                    break label$49
                                                   }
                                                   $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                   HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                                                   $4_1 = HEAPU8[$6_1 >> 0] | 0;
                                                   break label$48;
                                                  }
                                                  $4_1 = $474($4_1 | 0) | 0;
                                                  if (($4_1 | 0) == (-1 | 0)) {
                                                   break label$46
                                                  }
                                                 }
                                                 if ($5_1 >>> 0 >= 16777215 >>> 0) {
                                                  break label$45
                                                 }
                                                 $5_1 = $4_1 & 127 | 0 | ($5_1 << 7 | 0) | 0;
                                                 if (!($4_1 & 128 | 0)) {
                                                  continue label$47
                                                 }
                                                 break label$47;
                                                };
                                                HEAP32[($1_1 + 40 | 0) >> 2] = $5_1;
                                                $5_1 = 0;
                                                label$50 : while (1) {
                                                 $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                 $6_1 = HEAP32[$4_1 >> 2] | 0;
                                                 HEAP32[$4_1 >> 2] = $6_1 + -1 | 0;
                                                 label$51 : {
                                                  label$52 : {
                                                   if (!$6_1) {
                                                    break label$52
                                                   }
                                                   $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                   HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                                                   $4_1 = HEAPU8[$6_1 >> 0] | 0;
                                                   break label$51;
                                                  }
                                                  $4_1 = $474($4_1 | 0) | 0;
                                                  if (($4_1 | 0) == (-1 | 0)) {
                                                   break label$44
                                                  }
                                                 }
                                                 if ($5_1 >>> 0 >= 16777215 >>> 0) {
                                                  break label$43
                                                 }
                                                 $5_1 = $4_1 & 127 | 0 | ($5_1 << 7 | 0) | 0;
                                                 if (!($4_1 & 128 | 0)) {
                                                  continue label$50
                                                 }
                                                 break label$50;
                                                };
                                                HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
                                                $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                $6_1 = HEAP32[$4_1 >> 2] | 0;
                                                $5_1 = $6_1 + -1 | 0;
                                                HEAP32[$4_1 >> 2] = $5_1;
                                                label$53 : {
                                                 label$54 : {
                                                  if (!$6_1) {
                                                   break label$54
                                                  }
                                                  $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                  HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                                                  $6_1 = HEAPU8[$6_1 >> 0] | 0;
                                                  break label$53;
                                                 }
                                                 $6_1 = $474($4_1 | 0) | 0;
                                                 if (($6_1 | 0) == (-1 | 0)) {
                                                  break label$42
                                                 }
                                                 $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                 $5_1 = HEAP32[$4_1 >> 2] | 0;
                                                }
                                                HEAP8[($1_1 + 6 | 0) >> 0] = $6_1;
                                                $6_1 = $5_1 + -1 | 0;
                                                HEAP32[$4_1 >> 2] = $6_1;
                                                label$55 : {
                                                 label$56 : {
                                                  if (!$5_1) {
                                                   break label$56
                                                  }
                                                  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                  HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                                  $5_1 = HEAPU8[$5_1 >> 0] | 0;
                                                  break label$55;
                                                 }
                                                 $5_1 = $474($4_1 | 0) | 0;
                                                 if (($5_1 | 0) == (-1 | 0)) {
                                                  break label$41
                                                 }
                                                 $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                 $6_1 = HEAP32[$4_1 >> 2] | 0;
                                                }
                                                HEAP8[($1_1 + 7 | 0) >> 0] = $5_1;
                                                HEAP32[$4_1 >> 2] = $6_1 + -1 | 0;
                                                label$57 : {
                                                 label$58 : {
                                                  if (!$6_1) {
                                                   break label$58
                                                  }
                                                  $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                  HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                                  $4_1 = HEAPU8[$5_1 >> 0] | 0;
                                                  break label$57;
                                                 }
                                                 $4_1 = $474($4_1 | 0) | 0;
                                                 if (($4_1 | 0) == (-1 | 0)) {
                                                  break label$40
                                                 }
                                                }
                                                HEAP8[($1_1 + 8 | 0) >> 0] = $4_1;
                                                $5_1 = 0;
                                                label$59 : while (1) {
                                                 $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                 $6_1 = HEAP32[$4_1 >> 2] | 0;
                                                 HEAP32[$4_1 >> 2] = $6_1 + -1 | 0;
                                                 label$60 : {
                                                  label$61 : {
                                                   if (!$6_1) {
                                                    break label$61
                                                   }
                                                   $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                   HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                                                   $4_1 = HEAPU8[$6_1 >> 0] | 0;
                                                   break label$60;
                                                  }
                                                  $4_1 = $474($4_1 | 0) | 0;
                                                  if (($4_1 | 0) == (-1 | 0)) {
                                                   break label$39
                                                  }
                                                 }
                                                 if ($5_1 >>> 0 >= 16777215 >>> 0) {
                                                  break label$38
                                                 }
                                                 $5_1 = $4_1 & 127 | 0 | ($5_1 << 7 | 0) | 0;
                                                 if (!($4_1 & 128 | 0)) {
                                                  continue label$59
                                                 }
                                                 break label$59;
                                                };
                                                $6_1 = HEAP32[$0_1 >> 2] | 0;
                                                if (($5_1 + 1 | 0) >>> 0 >= 1073741824 >>> 0) {
                                                 break label$37
                                                }
                                                $4_1 = 0;
                                                $7_1 = $5_1 << 2 | 0;
                                                $6_1 = $286($6_1 | 0, $7_1 | 0, 0 | 0) | 0;
                                                HEAP32[($1_1 + 20 | 0) >> 2] = $5_1;
                                                HEAP32[($1_1 + 52 | 0) >> 2] = $6_1;
                                                if ($476(HEAP32[$2_1 >> 2] | 0 | 0, $6_1 | 0, $7_1 | 0) | 0) {
                                                 break label$36
                                                }
                                                label$62 : while (1) {
                                                 $5_1 = HEAP32[$2_1 >> 2] | 0;
                                                 $6_1 = HEAP32[$5_1 >> 2] | 0;
                                                 HEAP32[$5_1 >> 2] = $6_1 + -1 | 0;
                                                 label$63 : {
                                                  label$64 : {
                                                   if (!$6_1) {
                                                    break label$64
                                                   }
                                                   $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
                                                   HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                                                   $5_1 = HEAPU8[$6_1 >> 0] | 0;
                                                   break label$63;
                                                  }
                                                  $5_1 = $474($5_1 | 0) | 0;
                                                  if (($5_1 | 0) == (-1 | 0)) {
                                                   break label$35
                                                  }
                                                 }
                                                 if ($4_1 >>> 0 >= 16777215 >>> 0) {
                                                  break label$34
                                                 }
                                                 $4_1 = $5_1 & 127 | 0 | ($4_1 << 7 | 0) | 0;
                                                 if (!($5_1 & 128 | 0)) {
                                                  continue label$62
                                                 }
                                                 break label$62;
                                                };
                                                $6_1 = HEAP32[$0_1 >> 2] | 0;
                                                if (($4_1 + 1 | 0) >>> 0 >= 268435456 >>> 0) {
                                                 break label$33
                                                }
                                                $5_1 = 0;
                                                $6_1 = $286($6_1 | 0, $4_1 << 4 | 0 | 0, 0 | 0) | 0;
                                                HEAP32[($1_1 + 16 | 0) >> 2] = $4_1;
                                                HEAP32[($1_1 + 48 | 0) >> 2] = $6_1;
                                                label$65 : {
                                                 if (($4_1 | 0) <= (0 | 0)) {
                                                  break label$65
                                                 }
                                                 label$66 : while (1) {
                                                  HEAP8[(($6_1 + ($5_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 0;
                                                  $5_1 = $5_1 + 1 | 0;
                                                  if (($5_1 | 0) != ($4_1 | 0)) {
                                                   continue label$66
                                                  }
                                                  break label$66;
                                                 };
                                                 $7_1 = 0;
                                                 label$67 : while (1) {
                                                  $5_1 = HEAP32[$2_1 >> 2] | 0;
                                                  $8_1 = HEAP32[$5_1 >> 2] | 0;
                                                  HEAP32[$5_1 >> 2] = $8_1 + -1 | 0;
                                                  label$68 : {
                                                   label$69 : {
                                                    if (!$8_1) {
                                                     break label$69
                                                    }
                                                    $8_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
                                                    HEAP32[($5_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
                                                    $5_1 = HEAPU8[$8_1 >> 0] | 0;
                                                    break label$68;
                                                   }
                                                   $5_1 = $474($5_1 | 0) | 0;
                                                   if (($5_1 | 0) == (-1 | 0)) {
                                                    break label$32
                                                   }
                                                  }
                                                  $6_1 = $6_1 + ($7_1 << 4 | 0) | 0;
                                                  label$70 : {
                                                   label$71 : {
                                                    label$72 : {
                                                     switch ($5_1 & 255 | 0 | 0) {
                                                     case 19:
                                                      if ($476(HEAP32[$2_1 >> 2] | 0 | 0, $3_1 + 8 | 0 | 0, 8 | 0) | 0) {
                                                       break label$31
                                                      }
                                                      HEAPF64[$6_1 >> 3] = +HEAPF64[($3_1 + 8 | 0) >> 3];
                                                      $5_1 = 19;
                                                      break label$71;
                                                     case 3:
                                                      if ($476(HEAP32[$2_1 >> 2] | 0 | 0, $3_1 + 8 | 0 | 0, 8 | 0) | 0) {
                                                       break label$30
                                                      }
                                                      i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
                                                      HEAP32[$6_1 >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                                                      HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
                                                      $5_1 = 3;
                                                      break label$71;
                                                     case 0:
                                                     case 1:
                                                     case 17:
                                                      break label$71;
                                                     case 4:
                                                     case 20:
                                                      break label$72;
                                                     default:
                                                      break label$70;
                                                     };
                                                    }
                                                    $5_1 = $456($0_1 | 0) | 0;
                                                    if (!$5_1) {
                                                     break label$29
                                                    }
                                                    HEAP32[$6_1 >> 2] = $5_1;
                                                    $5_1 = HEAPU8[($5_1 + 4 | 0) >> 0] | 0 | 64 | 0;
                                                   }
                                                   HEAP8[($6_1 + 8 | 0) >> 0] = $5_1;
                                                  }
                                                  $7_1 = $7_1 + 1 | 0;
                                                  if (($7_1 | 0) == ($4_1 | 0)) {
                                                   break label$65
                                                  }
                                                  $6_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
                                                  continue label$67;
                                                 };
                                                }
                                                $6_1 = 0;
                                                label$75 : while (1) {
                                                 $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                 $5_1 = HEAP32[$4_1 >> 2] | 0;
                                                 HEAP32[$4_1 >> 2] = $5_1 + -1 | 0;
                                                 label$76 : {
                                                  label$77 : {
                                                   if (!$5_1) {
                                                    break label$77
                                                   }
                                                   $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                   HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                                   $4_1 = HEAPU8[$5_1 >> 0] | 0;
                                                   break label$76;
                                                  }
                                                  $4_1 = $474($4_1 | 0) | 0;
                                                  if (($4_1 | 0) == (-1 | 0)) {
                                                   break label$28
                                                  }
                                                 }
                                                 if ($6_1 >>> 0 >= 16777215 >>> 0) {
                                                  break label$27
                                                 }
                                                 $6_1 = $4_1 & 127 | 0 | ($6_1 << 7 | 0) | 0;
                                                 if (!($4_1 & 128 | 0)) {
                                                  continue label$75
                                                 }
                                                 break label$75;
                                                };
                                                $4_1 = HEAP32[$0_1 >> 2] | 0;
                                                if (($6_1 + 1 | 0) >>> 0 >= 536870912 >>> 0) {
                                                 break label$26
                                                }
                                                $5_1 = 0;
                                                $7_1 = $286($4_1 | 0, $6_1 << 3 | 0 | 0, 0 | 0) | 0;
                                                HEAP32[($1_1 + 12 | 0) >> 2] = $6_1;
                                                HEAP32[($1_1 + 60 | 0) >> 2] = $7_1;
                                                label$78 : {
                                                 if (($6_1 | 0) < (1 | 0)) {
                                                  break label$78
                                                 }
                                                 $9_1 = 0;
                                                 label$79 : while (1) {
                                                  $8_1 = $9_1 << 3 | 0;
                                                  HEAP32[($7_1 + $8_1 | 0) >> 2] = 0;
                                                  $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                  $10_1 = HEAP32[$4_1 >> 2] | 0;
                                                  $11_1 = $10_1 + -1 | 0;
                                                  HEAP32[$4_1 >> 2] = $11_1;
                                                  label$80 : {
                                                   label$81 : {
                                                    if (!$10_1) {
                                                     break label$81
                                                    }
                                                    $10_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                    HEAP32[($4_1 + 4 | 0) >> 2] = $10_1 + 1 | 0;
                                                    $10_1 = HEAPU8[$10_1 >> 0] | 0;
                                                    break label$80;
                                                   }
                                                   $10_1 = $474($4_1 | 0) | 0;
                                                   if (($10_1 | 0) == (-1 | 0)) {
                                                    break label$25
                                                   }
                                                   $7_1 = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
                                                   $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                   $11_1 = HEAP32[$4_1 >> 2] | 0;
                                                  }
                                                  HEAP8[(($7_1 + $8_1 | 0) + 4 | 0) >> 0] = $10_1;
                                                  $10_1 = $11_1 + -1 | 0;
                                                  HEAP32[$4_1 >> 2] = $10_1;
                                                  label$82 : {
                                                   label$83 : {
                                                    if (!$11_1) {
                                                     break label$83
                                                    }
                                                    $11_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                    HEAP32[($4_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
                                                    $11_1 = HEAPU8[$11_1 >> 0] | 0;
                                                    break label$82;
                                                   }
                                                   $11_1 = $474($4_1 | 0) | 0;
                                                   if (($11_1 | 0) == (-1 | 0)) {
                                                    break label$24
                                                   }
                                                   $7_1 = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
                                                   $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                   $10_1 = HEAP32[$4_1 >> 2] | 0;
                                                  }
                                                  HEAP8[(($7_1 + $8_1 | 0) + 5 | 0) >> 0] = $11_1;
                                                  HEAP32[$4_1 >> 2] = $10_1 + -1 | 0;
                                                  label$84 : {
                                                   label$85 : {
                                                    if (!$10_1) {
                                                     break label$85
                                                    }
                                                    $11_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                    HEAP32[($4_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
                                                    $4_1 = HEAPU8[$11_1 >> 0] | 0;
                                                    break label$84;
                                                   }
                                                   $4_1 = $474($4_1 | 0) | 0;
                                                   if (($4_1 | 0) == (-1 | 0)) {
                                                    break label$23
                                                   }
                                                   $7_1 = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
                                                  }
                                                  HEAP8[(($7_1 + $8_1 | 0) + 6 | 0) >> 0] = $4_1;
                                                  $9_1 = $9_1 + 1 | 0;
                                                  if (($9_1 | 0) != ($6_1 | 0)) {
                                                   continue label$79
                                                  }
                                                  break label$79;
                                                 };
                                                }
                                                label$86 : while (1) {
                                                 $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                 $6_1 = HEAP32[$4_1 >> 2] | 0;
                                                 HEAP32[$4_1 >> 2] = $6_1 + -1 | 0;
                                                 label$87 : {
                                                  label$88 : {
                                                   if (!$6_1) {
                                                    break label$88
                                                   }
                                                   $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                   HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                                                   $4_1 = HEAPU8[$6_1 >> 0] | 0;
                                                   break label$87;
                                                  }
                                                  $4_1 = $474($4_1 | 0) | 0;
                                                  if (($4_1 | 0) == (-1 | 0)) {
                                                   break label$22
                                                  }
                                                 }
                                                 if ($5_1 >>> 0 >= 16777215 >>> 0) {
                                                  break label$21
                                                 }
                                                 $5_1 = $4_1 & 127 | 0 | ($5_1 << 7 | 0) | 0;
                                                 if (!($4_1 & 128 | 0)) {
                                                  continue label$86
                                                 }
                                                 break label$86;
                                                };
                                                $4_1 = HEAP32[$0_1 >> 2] | 0;
                                                if (($5_1 + 1 | 0) >>> 0 >= 1073741824 >>> 0) {
                                                 break label$20
                                                }
                                                $6_1 = 0;
                                                $7_1 = $286($4_1 | 0, $5_1 << 2 | 0 | 0, 0 | 0) | 0;
                                                HEAP32[($1_1 + 28 | 0) >> 2] = $5_1;
                                                HEAP32[($1_1 + 56 | 0) >> 2] = $7_1;
                                                label$89 : {
                                                 if (($5_1 | 0) < (1 | 0)) {
                                                  break label$89
                                                 }
                                                 $4_1 = 0;
                                                 HEAP32[$7_1 >> 2] = 0;
                                                 $7_1 = 1;
                                                 label$90 : {
                                                  if (($5_1 | 0) == (1 | 0)) {
                                                   break label$90
                                                  }
                                                  label$91 : while (1) {
                                                   HEAP32[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0) >> 2] = 0;
                                                   $7_1 = $7_1 + 1 | 0;
                                                   if (($7_1 | 0) != ($5_1 | 0)) {
                                                    continue label$91
                                                   }
                                                   break label$91;
                                                  };
                                                 }
                                                 if (($5_1 | 0) <= (0 | 0)) {
                                                  break label$89
                                                 }
                                                 label$92 : while (1) {
                                                  $7_1 = $230(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
                                                  $8_1 = $4_1 << 2 | 0;
                                                  HEAP32[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + $8_1 | 0) >> 2] = $7_1;
                                                  $454($0_1 | 0, HEAP32[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + $8_1 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0);
                                                  $4_1 = $4_1 + 1 | 0;
                                                  if (($4_1 | 0) != ($5_1 | 0)) {
                                                   continue label$92
                                                  }
                                                  break label$92;
                                                 };
                                                }
                                                label$93 : while (1) {
                                                 $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                 $5_1 = HEAP32[$4_1 >> 2] | 0;
                                                 HEAP32[$4_1 >> 2] = $5_1 + -1 | 0;
                                                 label$94 : {
                                                  label$95 : {
                                                   if (!$5_1) {
                                                    break label$95
                                                   }
                                                   $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                   HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                                   $4_1 = HEAPU8[$5_1 >> 0] | 0;
                                                   break label$94;
                                                  }
                                                  $4_1 = $474($4_1 | 0) | 0;
                                                  if (($4_1 | 0) == (-1 | 0)) {
                                                   break label$19
                                                  }
                                                 }
                                                 if ($6_1 >>> 0 >= 16777215 >>> 0) {
                                                  break label$18
                                                 }
                                                 $6_1 = $4_1 & 127 | 0 | ($6_1 << 7 | 0) | 0;
                                                 if (!($4_1 & 128 | 0)) {
                                                  continue label$93
                                                 }
                                                 break label$93;
                                                };
                                                $7_1 = 0;
                                                $4_1 = $286(HEAP32[$0_1 >> 2] | 0 | 0, $6_1 | 0, 0 | 0) | 0;
                                                HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
                                                HEAP32[($1_1 + 64 | 0) >> 2] = $4_1;
                                                if ($476(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $4_1 | 0, $6_1 | 0) | 0) {
                                                 break label$17
                                                }
                                                label$96 : while (1) {
                                                 $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                 $5_1 = HEAP32[$4_1 >> 2] | 0;
                                                 HEAP32[$4_1 >> 2] = $5_1 + -1 | 0;
                                                 label$97 : {
                                                  label$98 : {
                                                   if (!$5_1) {
                                                    break label$98
                                                   }
                                                   $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                   HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                                   $4_1 = HEAPU8[$5_1 >> 0] | 0;
                                                   break label$97;
                                                  }
                                                  $4_1 = $474($4_1 | 0) | 0;
                                                  if (($4_1 | 0) == (-1 | 0)) {
                                                   break label$16
                                                  }
                                                 }
                                                 if ($7_1 >>> 0 >= 16777215 >>> 0) {
                                                  break label$15
                                                 }
                                                 $7_1 = $4_1 & 127 | 0 | ($7_1 << 7 | 0) | 0;
                                                 if (!($4_1 & 128 | 0)) {
                                                  continue label$96
                                                 }
                                                 break label$96;
                                                };
                                                $4_1 = HEAP32[$0_1 >> 2] | 0;
                                                if (($7_1 + 1 | 0) >>> 0 >= 536870912 >>> 0) {
                                                 break label$14
                                                }
                                                $8_1 = 0;
                                                $4_1 = $286($4_1 | 0, $7_1 << 3 | 0 | 0, 0 | 0) | 0;
                                                HEAP32[($1_1 + 36 | 0) >> 2] = $7_1;
                                                HEAP32[($1_1 + 68 | 0) >> 2] = $4_1;
                                                label$99 : {
                                                 if (($7_1 | 0) < (1 | 0)) {
                                                  break label$99
                                                 }
                                                 label$100 : while (1) {
                                                  $5_1 = 0;
                                                  label$101 : while (1) {
                                                   $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                   $6_1 = HEAP32[$4_1 >> 2] | 0;
                                                   HEAP32[$4_1 >> 2] = $6_1 + -1 | 0;
                                                   label$102 : {
                                                    label$103 : {
                                                     if (!$6_1) {
                                                      break label$103
                                                     }
                                                     $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                     HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                                                     $4_1 = HEAPU8[$6_1 >> 0] | 0;
                                                     break label$102;
                                                    }
                                                    $4_1 = $474($4_1 | 0) | 0;
                                                    if (($4_1 | 0) == (-1 | 0)) {
                                                     break label$13
                                                    }
                                                   }
                                                   if ($5_1 >>> 0 >= 16777215 >>> 0) {
                                                    break label$12
                                                   }
                                                   $5_1 = $4_1 & 127 | 0 | ($5_1 << 7 | 0) | 0;
                                                   if (!($4_1 & 128 | 0)) {
                                                    continue label$101
                                                   }
                                                   break label$101;
                                                  };
                                                  $11_1 = $8_1 << 3 | 0;
                                                  HEAP32[((HEAP32[($1_1 + 68 | 0) >> 2] | 0) + $11_1 | 0) >> 2] = $5_1;
                                                  $5_1 = 0;
                                                  label$104 : while (1) {
                                                   $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                   $6_1 = HEAP32[$4_1 >> 2] | 0;
                                                   HEAP32[$4_1 >> 2] = $6_1 + -1 | 0;
                                                   label$105 : {
                                                    label$106 : {
                                                     if (!$6_1) {
                                                      break label$106
                                                     }
                                                     $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                     HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                                                     $4_1 = HEAPU8[$6_1 >> 0] | 0;
                                                     break label$105;
                                                    }
                                                    $4_1 = $474($4_1 | 0) | 0;
                                                    if (($4_1 | 0) == (-1 | 0)) {
                                                     break label$11
                                                    }
                                                   }
                                                   if ($5_1 >>> 0 >= 16777215 >>> 0) {
                                                    break label$10
                                                   }
                                                   $5_1 = $4_1 & 127 | 0 | ($5_1 << 7 | 0) | 0;
                                                   if (!($4_1 & 128 | 0)) {
                                                    continue label$104
                                                   }
                                                   break label$104;
                                                  };
                                                  HEAP32[(((HEAP32[($1_1 + 68 | 0) >> 2] | 0) + $11_1 | 0) + 4 | 0) >> 2] = $5_1;
                                                  $8_1 = $8_1 + 1 | 0;
                                                  if (($8_1 | 0) != ($7_1 | 0)) {
                                                   continue label$100
                                                  }
                                                  break label$100;
                                                 };
                                                }
                                                $7_1 = 0;
                                                label$107 : while (1) {
                                                 $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                 $5_1 = HEAP32[$4_1 >> 2] | 0;
                                                 HEAP32[$4_1 >> 2] = $5_1 + -1 | 0;
                                                 label$108 : {
                                                  label$109 : {
                                                   if (!$5_1) {
                                                    break label$109
                                                   }
                                                   $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                   HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                                                   $4_1 = HEAPU8[$5_1 >> 0] | 0;
                                                   break label$108;
                                                  }
                                                  $4_1 = $474($4_1 | 0) | 0;
                                                  if (($4_1 | 0) == (-1 | 0)) {
                                                   break label$9
                                                  }
                                                 }
                                                 if ($7_1 >>> 0 >= 16777215 >>> 0) {
                                                  break label$8
                                                 }
                                                 $7_1 = $4_1 & 127 | 0 | ($7_1 << 7 | 0) | 0;
                                                 if (!($4_1 & 128 | 0)) {
                                                  continue label$107
                                                 }
                                                 break label$107;
                                                };
                                                $5_1 = HEAP32[$0_1 >> 2] | 0;
                                                if (($7_1 + 1 | 0) >>> 0 >= 357913942 >>> 0) {
                                                 break label$7
                                                }
                                                $4_1 = 0;
                                                $5_1 = $286($5_1 | 0, Math_imul($7_1, 12) | 0, 0 | 0) | 0;
                                                HEAP32[($1_1 + 32 | 0) >> 2] = $7_1;
                                                HEAP32[($1_1 + 72 | 0) >> 2] = $5_1;
                                                label$110 : {
                                                 if (($7_1 | 0) < (1 | 0)) {
                                                  break label$110
                                                 }
                                                 label$111 : while (1) {
                                                  $8_1 = 0;
                                                  HEAP32[($5_1 + Math_imul($4_1, 12) | 0) >> 2] = 0;
                                                  $4_1 = $4_1 + 1 | 0;
                                                  if (($4_1 | 0) != ($7_1 | 0)) {
                                                   continue label$111
                                                  }
                                                  break label$111;
                                                 };
                                                 label$112 : while (1) {
                                                  $4_1 = $456($0_1 | 0) | 0;
                                                  $11_1 = Math_imul($8_1, 12);
                                                  HEAP32[((HEAP32[($1_1 + 72 | 0) >> 2] | 0) + $11_1 | 0) >> 2] = $4_1;
                                                  $5_1 = 0;
                                                  label$113 : while (1) {
                                                   $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                   $6_1 = HEAP32[$4_1 >> 2] | 0;
                                                   HEAP32[$4_1 >> 2] = $6_1 + -1 | 0;
                                                   label$114 : {
                                                    label$115 : {
                                                     if (!$6_1) {
                                                      break label$115
                                                     }
                                                     $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                     HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                                                     $4_1 = HEAPU8[$6_1 >> 0] | 0;
                                                     break label$114;
                                                    }
                                                    $4_1 = $474($4_1 | 0) | 0;
                                                    if (($4_1 | 0) == (-1 | 0)) {
                                                     break label$6
                                                    }
                                                   }
                                                   if ($5_1 >>> 0 >= 16777215 >>> 0) {
                                                    break label$5
                                                   }
                                                   $5_1 = $4_1 & 127 | 0 | ($5_1 << 7 | 0) | 0;
                                                   if (!($4_1 & 128 | 0)) {
                                                    continue label$113
                                                   }
                                                   break label$113;
                                                  };
                                                  HEAP32[(((HEAP32[($1_1 + 72 | 0) >> 2] | 0) + $11_1 | 0) + 4 | 0) >> 2] = $5_1;
                                                  $5_1 = 0;
                                                  label$116 : while (1) {
                                                   $4_1 = HEAP32[$2_1 >> 2] | 0;
                                                   $6_1 = HEAP32[$4_1 >> 2] | 0;
                                                   HEAP32[$4_1 >> 2] = $6_1 + -1 | 0;
                                                   label$117 : {
                                                    label$118 : {
                                                     if (!$6_1) {
                                                      break label$118
                                                     }
                                                     $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
                                                     HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                                                     $4_1 = HEAPU8[$6_1 >> 0] | 0;
                                                     break label$117;
                                                    }
                                                    $4_1 = $474($4_1 | 0) | 0;
                                                    if (($4_1 | 0) == (-1 | 0)) {
                                                     break label$4
                                                    }
                                                   }
                                                   if ($5_1 >>> 0 >= 16777215 >>> 0) {
                                                    break label$3
                                                   }
                                                   $5_1 = $4_1 & 127 | 0 | ($5_1 << 7 | 0) | 0;
                                                   if (!($4_1 & 128 | 0)) {
                                                    continue label$116
                                                   }
                                                   break label$116;
                                                  };
                                                  HEAP32[(((HEAP32[($1_1 + 72 | 0) >> 2] | 0) + $11_1 | 0) + 8 | 0) >> 2] = $5_1;
                                                  $8_1 = $8_1 + 1 | 0;
                                                  if (($8_1 | 0) != ($7_1 | 0)) {
                                                   continue label$112
                                                  }
                                                  break label$112;
                                                 };
                                                }
                                                $4_1 = 0;
                                                label$119 : while (1) {
                                                 $5_1 = HEAP32[$2_1 >> 2] | 0;
                                                 $6_1 = HEAP32[$5_1 >> 2] | 0;
                                                 HEAP32[$5_1 >> 2] = $6_1 + -1 | 0;
                                                 label$120 : {
                                                  label$121 : {
                                                   if (!$6_1) {
                                                    break label$121
                                                   }
                                                   $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
                                                   HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 + 1 | 0;
                                                   $5_1 = HEAPU8[$6_1 >> 0] | 0;
                                                   break label$120;
                                                  }
                                                  $5_1 = $474($5_1 | 0) | 0;
                                                  if (($5_1 | 0) == (-1 | 0)) {
                                                   break label$2
                                                  }
                                                 }
                                                 if ($4_1 >>> 0 >= 16777215 >>> 0) {
                                                  break label$1
                                                 }
                                                 $4_1 = $5_1 & 127 | 0 | ($4_1 << 7 | 0) | 0;
                                                 if (!($5_1 & 128 | 0)) {
                                                  continue label$119
                                                 }
                                                 break label$119;
                                                };
                                                label$122 : {
                                                 if (($4_1 | 0) < (1 | 0)) {
                                                  break label$122
                                                 }
                                                 $2_1 = 0;
                                                 label$123 : while (1) {
                                                  $5_1 = $456($0_1 | 0) | 0;
                                                  HEAP32[((HEAP32[($1_1 + 60 | 0) >> 2] | 0) + ($2_1 << 3 | 0) | 0) >> 2] = $5_1;
                                                  $2_1 = $2_1 + 1 | 0;
                                                  if (($2_1 | 0) != ($4_1 | 0)) {
                                                   continue label$123
                                                  }
                                                  break label$123;
                                                 };
                                                }
                                                global$0 = $3_1 + 16 | 0;
                                                return;
                                               }
                                               $455($0_1 | 0, 5009 | 0);
                                               abort();
                                              }
                                              $455($0_1 | 0, 5025 | 0);
                                              abort();
                                             }
                                             $455($0_1 | 0, 5009 | 0);
                                             abort();
                                            }
                                            $455($0_1 | 0, 5025 | 0);
                                            abort();
                                           }
                                           $455($0_1 | 0, 5009 | 0);
                                           abort();
                                          }
                                          $455($0_1 | 0, 5009 | 0);
                                          abort();
                                         }
                                         $455($0_1 | 0, 5009 | 0);
                                         abort();
                                        }
                                        $455($0_1 | 0, 5009 | 0);
                                        abort();
                                       }
                                       $455($0_1 | 0, 5025 | 0);
                                       abort();
                                      }
                                      $283($6_1 | 0);
                                      abort();
                                     }
                                     $455($0_1 | 0, 5009 | 0);
                                     abort();
                                    }
                                    $455($0_1 | 0, 5009 | 0);
                                    abort();
                                   }
                                   $455($0_1 | 0, 5025 | 0);
                                   abort();
                                  }
                                  $283($6_1 | 0);
                                  abort();
                                 }
                                 $455($0_1 | 0, 5009 | 0);
                                 abort();
                                }
                                $455($0_1 | 0, 5009 | 0);
                                abort();
                               }
                               $455($0_1 | 0, 5009 | 0);
                               abort();
                              }
                              $455($0_1 | 0, 5086 | 0);
                              abort();
                             }
                             $455($0_1 | 0, 5009 | 0);
                             abort();
                            }
                            $455($0_1 | 0, 5025 | 0);
                            abort();
                           }
                           $283($4_1 | 0);
                           abort();
                          }
                          $455($0_1 | 0, 5009 | 0);
                          abort();
                         }
                         $455($0_1 | 0, 5009 | 0);
                         abort();
                        }
                        $455($0_1 | 0, 5009 | 0);
                        abort();
                       }
                       $455($0_1 | 0, 5009 | 0);
                       abort();
                      }
                      $455($0_1 | 0, 5025 | 0);
                      abort();
                     }
                     $283($4_1 | 0);
                     abort();
                    }
                    $455($0_1 | 0, 5009 | 0);
                    abort();
                   }
                   $455($0_1 | 0, 5025 | 0);
                   abort();
                  }
                  $455($0_1 | 0, 5009 | 0);
                  abort();
                 }
                 $455($0_1 | 0, 5009 | 0);
                 abort();
                }
                $455($0_1 | 0, 5025 | 0);
                abort();
               }
               $283($4_1 | 0);
               abort();
              }
              $455($0_1 | 0, 5009 | 0);
              abort();
             }
             $455($0_1 | 0, 5025 | 0);
             abort();
            }
            $455($0_1 | 0, 5009 | 0);
            abort();
           }
           $455($0_1 | 0, 5025 | 0);
           abort();
          }
          $455($0_1 | 0, 5009 | 0);
          abort();
         }
         $455($0_1 | 0, 5025 | 0);
         abort();
        }
        $283($5_1 | 0);
        abort();
       }
       $455($0_1 | 0, 5009 | 0);
       abort();
      }
      $455($0_1 | 0, 5025 | 0);
      abort();
     }
     $455($0_1 | 0, 5009 | 0);
     abort();
    }
    $455($0_1 | 0, 5025 | 0);
    abort();
   }
   $455($0_1 | 0, 5009 | 0);
   abort();
  }
  $455($0_1 | 0, 5025 | 0);
  abort();
 }
 
 function $455($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$2_1 >> 2] = $4_1;
  $298($3_1 | 0, 5042 | 0, $2_1 | 0) | 0;
  $197(HEAP32[$0_1 >> 2] | 0 | 0, 3 | 0);
  abort();
 }
 
 function $456($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $1_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       HEAP32[$3_1 >> 2] = $4_1 + -1 | 0;
       label$6 : {
        label$7 : {
         if (!$4_1) {
          break label$7
         }
         $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
         HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
         $3_1 = HEAPU8[$4_1 >> 0] | 0;
         break label$6;
        }
        $3_1 = $474($3_1 | 0) | 0;
        if (($3_1 | 0) == (-1 | 0)) {
         break label$4
        }
       }
       if ($2_1 >>> 0 >= 33554431 >>> 0) {
        break label$3
       }
       $2_1 = $3_1 & 127 | 0 | ($2_1 << 7 | 0) | 0;
       if (!($3_1 & 128 | 0)) {
        continue label$5
       }
       break label$5;
      };
      label$8 : {
       label$9 : {
        if ($2_1) {
         break label$9
        }
        $3_1 = 0;
        break label$8;
       }
       label$10 : {
        $2_1 = $2_1 + -1 | 0;
        if ($2_1 >>> 0 > 40 >>> 0) {
         break label$10
        }
        if ($476(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0) | 0) {
         break label$2
        }
        $3_1 = $417(HEAP32[$0_1 >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
        break label$8;
       }
       $3_1 = $418(HEAP32[$0_1 >> 2] | 0 | 0, $2_1 | 0) | 0;
       if ($476(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, $2_1 | 0) | 0) {
        break label$1
       }
      }
      global$0 = $1_1 + 48 | 0;
      return $3_1 | 0;
     }
     $455($0_1 | 0, 5009 | 0);
     abort();
    }
    $455($0_1 | 0, 5025 | 0);
    abort();
   }
   $455($0_1 | 0, 5009 | 0);
   abort();
  }
  $455($0_1 | 0, 5009 | 0);
  abort();
 }
 
 function $457($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, wasm2js_f64$0 = 0.0, wasm2js_f64$1 = 0.0, wasm2js_i32$0 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAPU8[($0_1 + 8 | 0) >> 0] | 0;
     if (($3_1 | 0) != (3 | 0)) {
      break label$3
     }
     i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     HEAPF64[$1_1 >> 3] = +(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0);
     break label$2;
    }
    $4_1 = 0;
    if (($3_1 & 15 | 0 | 0) != (4 | 0)) {
     break label$1
    }
    $3_1 = $292((HEAP32[$0_1 >> 2] | 0) + 16 | 0 | 0, $2_1 | 0) | 0;
    label$4 : {
     label$5 : {
      $0_1 = HEAP32[$0_1 >> 2] | 0;
      if ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
       break label$5
      }
      $0_1 = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
      break label$4;
     }
     $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    }
    if (($3_1 | 0) != ($0_1 + 1 | 0 | 0)) {
     break label$1
    }
    i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    HEAPF64[$1_1 >> 3] = (wasm2js_f64$0 = +(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0), wasm2js_f64$1 = +wasm2js_scratch_load_f64(), wasm2js_i32$0 = (HEAPU8[($2_1 + 8 | 0) >> 0] | 0 | 0) == (3 | 0), wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
   }
   $4_1 = 1;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $458($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0.0, i64toi32_i32$0 = 0.0, i64toi32_i32$1 = 0, $9_1 = 0, $10_1 = 0, $3_1 = 0, $3$hi = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    $4_1 = Math_floor($0_1);
    if ($4_1 == $0_1) {
     break label$2
    }
    label$3 : {
     switch ($2_1 | 0) {
     case 0:
      break label$1;
     case 2:
      break label$3;
     default:
      break label$2;
     };
    }
    $4_1 = $4_1 + 1.0;
   }
   $2_1 = $4_1 >= -9223372036854775808.0 & $4_1 < 9223372036854775808.0 | 0;
   if (($2_1 | 0) != (1 | 0)) {
    break label$1
   }
   label$4 : {
    label$5 : {
     if (!(Math_abs($4_1) < 9223372036854775808.0)) {
      break label$5
     }
     i64toi32_i32$0 = $4_1;
     if (Math_abs($4_1) >= 1.0) {
      if (i64toi32_i32$0 > 0.0) {
       $9_1 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
      } else {
       $9_1 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
      }
      $10_1 = $9_1;
     } else {
      $10_1 = 0
     }
     i64toi32_i32$1 = $10_1;
     $3_1 = ~~i64toi32_i32$0 >>> 0;
     $3$hi = i64toi32_i32$1;
     break label$4;
    }
    i64toi32_i32$1 = -2147483648;
    $3_1 = 0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $1_1;
   HEAP32[i64toi32_i32$2 >> 2] = $3_1;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  return $2_1 | 0;
 }
 
 function $459($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0.0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0.0, $4_1 = 0.0, $11_1 = 0, $12_1 = 0, $31_1 = 0, $39_1 = 0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    switch ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
    case 16:
     label$4 : {
      $4_1 = +HEAPF64[$0_1 >> 3];
      $5_1 = Math_floor($4_1);
      if ($5_1 == $4_1) {
       break label$4
      }
      $3_1 = $2_1;
      label$5 : {
       switch ($3_1 | 0) {
       case 0:
        break label$1;
       case 2:
        break label$5;
       default:
        break label$4;
       };
      }
      $5_1 = $5_1 + 1.0;
     }
     $3_1 = $5_1 >= -9223372036854775808.0 & $5_1 < 9223372036854775808.0 | 0;
     if (($3_1 | 0) != (1 | 0)) {
      break label$1
     }
     label$6 : {
      if (!(Math_abs($5_1) < 9223372036854775808.0)) {
       break label$6
      }
      $31_1 = $1_1;
      i64toi32_i32$0 = $5_1;
      if (Math_abs($5_1) >= 1.0) {
       if (i64toi32_i32$0 > 0.0) {
        $11_1 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
       } else {
        $11_1 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
       }
       $12_1 = $11_1;
      } else {
       $12_1 = 0
      }
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$2 = $31_1;
      HEAP32[i64toi32_i32$2 >> 2] = ~~i64toi32_i32$0 >>> 0;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
      return $3_1 | 0;
     }
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = -2147483648;
     HEAP32[i64toi32_i32$2 >> 2] = 0;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
     return $3_1 | 0;
    case 0:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $39_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1;
   HEAP32[i64toi32_i32$1 >> 2] = $39_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
   $3_1 = 1;
  }
  return $3_1 | 0;
 }
 
 function $460($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $8_1 = 0.0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$0 = 0.0, $6_1 = 0, $7_1 = 0.0, $15_1 = 0, $16_1 = 0, i64toi32_i32$3 = 0, $66_1 = 0, $75_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
     break label$2
    }
    $4_1 = $292((HEAP32[$0_1 >> 2] | 0) + 16 | 0 | 0, $3_1 | 0) | 0;
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[$0_1 >> 2] | 0;
      if ((HEAPU8[($5_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
       break label$4
      }
      $5_1 = HEAPU8[($5_1 + 7 | 0) >> 0] | 0;
      break label$3;
     }
     $5_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    }
    if (($4_1 | 0) != ($5_1 + 1 | 0 | 0)) {
     break label$2
    }
    $5_1 = $3_1 + 8 | 0;
    $6_1 = 0;
    break label$1;
   }
   $5_1 = $0_1 + 8 | 0;
   $6_1 = 1;
  }
  $4_1 = 0;
  label$5 : {
   label$6 : {
    switch ((HEAPU8[$5_1 >> 0] | 0) + -3 | 0 | 0) {
    case 16:
     label$8 : {
      $7_1 = +HEAPF64[($6_1 ? $0_1 : $3_1) >> 3];
      $8_1 = Math_floor($7_1);
      if ($8_1 == $7_1) {
       break label$8
      }
      $4_1 = $2_1;
      label$9 : {
       switch ($4_1 | 0) {
       case 0:
        break label$5;
       case 2:
        break label$9;
       default:
        break label$8;
       };
      }
      $8_1 = $8_1 + 1.0;
     }
     $4_1 = $8_1 >= -9223372036854775808.0 & $8_1 < 9223372036854775808.0 | 0;
     if (($4_1 | 0) != (1 | 0)) {
      break label$5
     }
     label$10 : {
      if (!(Math_abs($8_1) < 9223372036854775808.0)) {
       break label$10
      }
      $66_1 = $1_1;
      i64toi32_i32$0 = $8_1;
      if (Math_abs($8_1) >= 1.0) {
       if (i64toi32_i32$0 > 0.0) {
        $15_1 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
       } else {
        $15_1 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
       }
       $16_1 = $15_1;
      } else {
       $16_1 = 0
      }
      i64toi32_i32$1 = $16_1;
      i64toi32_i32$2 = $66_1;
      HEAP32[i64toi32_i32$2 >> 2] = ~~i64toi32_i32$0 >>> 0;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
      break label$5;
     }
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = -2147483648;
     HEAP32[i64toi32_i32$2 >> 2] = 0;
     HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
     break label$5;
    case 0:
     break label$6;
    default:
     break label$5;
    };
   }
   i64toi32_i32$3 = $6_1 ? $0_1 : $3_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $75_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1;
   HEAP32[i64toi32_i32$1 >> 2] = $75_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
   $4_1 = 1;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $461($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $7_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0;
  $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $6_1 = $441($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
      $7_1 = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
      if ($7_1 & 15 | 0) {
       break label$3
      }
      $185($0_1 | 0, $1_1 | 0, 5117 | 0);
      abort();
     }
     $6_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$1
     }
     if ((HEAPU8[($6_1 + 6 | 0) >> 0] | 0) & 1 | 0) {
      break label$1
     }
     $6_1 = $440($6_1 | 0, 0 | 0, HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 168 | 0) >> 2] | 0 | 0) | 0;
     if (!$6_1) {
      break label$1
     }
     $7_1 = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
    }
    label$5 : {
     if (($7_1 & 15 | 0 | 0) != (6 | 0)) {
      break label$5
     }
     $444($0_1 | 0, $6_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
     return;
    }
    $4_1 = 0;
    label$6 : {
     if (($7_1 & 255 | 0 | 0) != (69 | 0)) {
      break label$6
     }
     $4_1 = $427(HEAP32[$6_1 >> 2] | 0 | 0, $2_1 | 0) | 0;
     if (!((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
      break label$6
     }
     i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
     return;
    }
    $1_1 = $6_1;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != (2e3 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $187($0_1 | 0, 5123 | 0, 0 | 0);
   abort();
  }
  HEAP8[($3_1 + 8 | 0) >> 0] = 0;
 }
 
 function $462($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $38_1 = 0, $87_1 = 0;
  $5_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       if (!$4_1) {
        break label$5
       }
       label$6 : {
        $6_1 = HEAP32[$1_1 >> 2] | 0;
        $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
        if (!$7_1) {
         break label$6
        }
        if ((HEAPU8[($7_1 + 6 | 0) >> 0] | 0) & 2 | 0) {
         break label$6
        }
        $7_1 = $440($7_1 | 0, 1 | 0, HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 172 | 0) >> 2] | 0 | 0) | 0;
        if (!$7_1) {
         break label$6
        }
        $6_1 = HEAPU8[($7_1 + 8 | 0) >> 0] | 0;
        break label$4;
       }
       label$7 : {
        if ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0 | 0) != (32 | 0)) {
         break label$7
        }
        $4_1 = $428($0_1 | 0, $6_1 | 0, $2_1 | 0) | 0;
       }
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $38_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $4_1;
       HEAP32[$4_1 >> 2] = $38_1;
       HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP8[($4_1 + 8 | 0) >> 0] = HEAPU8[($3_1 + 8 | 0) >> 0] | 0;
       HEAP8[($6_1 + 6 | 0) >> 0] = 0;
       if (!((HEAPU8[($3_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
        break label$1
       }
       if (!((HEAPU8[($6_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
        break label$1
       }
       if (!((HEAPU8[((HEAP32[$3_1 >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
        break label$1
       }
       $235($0_1 | 0, $6_1 | 0);
       break label$1;
      }
      $7_1 = $441($0_1 | 0, $1_1 | 0, 1 | 0) | 0;
      $6_1 = HEAPU8[($7_1 + 8 | 0) >> 0] | 0;
      if (!($6_1 & 15 | 0)) {
       break label$2
      }
     }
     label$8 : {
      if (($6_1 & 15 | 0 | 0) != (6 | 0)) {
       break label$8
      }
      $443($0_1 | 0, $7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
      return;
     }
     $4_1 = 0;
     label$9 : {
      if (($6_1 & 255 | 0 | 0) != (69 | 0)) {
       break label$9
      }
      $4_1 = $427(HEAP32[$7_1 >> 2] | 0 | 0, $2_1 | 0) | 0;
      if (!((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
       break label$9
      }
      i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      $87_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $4_1;
      HEAP32[$4_1 >> 2] = $87_1;
      HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP8[($4_1 + 8 | 0) >> 0] = HEAPU8[($3_1 + 8 | 0) >> 0] | 0;
      if (!((HEAPU8[($3_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
       break label$1
      }
      $7_1 = HEAP32[$7_1 >> 2] | 0;
      if (!((HEAPU8[($7_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
       break label$1
      }
      if (!((HEAPU8[((HEAP32[$3_1 >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
       break label$1
      }
      $235($0_1 | 0, $7_1 | 0);
      return;
     }
     $1_1 = $7_1;
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) != (2e3 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $187($0_1 | 0, 5163 | 0, 0 | 0);
    abort();
   }
   $185($0_1 | 0, $1_1 | 0, 5117 | 0);
   abort();
  }
 }
 
 function $463($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $7_1 = 0.0, $5$hi = 0, i64toi32_i32$6 = 0.0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $8_1 = 0.0, $3_1 = 0, $5_1 = 0, $6$hi = 0, $6_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $27_1 = 0, $27$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
     switch (($3_1 & 15 | 0) + -3 | 0 | 0) {
     case 1:
      break label$2;
     case 0:
      break label$3;
     default:
      break label$1;
     };
    }
    $4_1 = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
    if (($4_1 & 15 | 0 | 0) != (3 | 0)) {
     break label$1
    }
    label$4 : {
     if (($3_1 | 0) != (3 | 0)) {
      break label$4
     }
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$1;
     label$5 : {
      if (($4_1 | 0) != (3 | 0)) {
       break label$5
      }
      i64toi32_i32$1 = $5$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $27_1 = i64toi32_i32$1;
      $27$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$3 = $27_1;
      if (($5$hi | 0) < (i64toi32_i32$1 | 0)) {
       $20_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $21_1 = 0
        } else {
         $21_1 = 1
        }
        $22_1 = $21_1;
       } else {
        $22_1 = 0
       }
       $20_1 = $22_1;
      }
      return $20_1 | 0;
     }
     $7_1 = +HEAPF64[$2_1 >> 3];
     label$6 : {
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$0 = 2097152;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$3 = 4194304;
      i64toi32_i32$1 = 0;
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
       break label$6
      }
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$1 = 0;
      return $7_1 > +(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0) | 0;
     }
     $8_1 = Math_floor($7_1);
     $8_1 = $8_1 != $7_1 ? $8_1 + 1.0 : $8_1;
     $1_1 = $8_1 < 9223372036854775808.0;
     label$7 : {
      label$8 : {
       if (!(Math_abs($8_1) < 9223372036854775808.0)) {
        break label$8
       }
       i64toi32_i32$6 = $8_1;
       if (Math_abs(i64toi32_i32$6) >= 1.0) {
        if (i64toi32_i32$6 > 0.0) {
         $23_1 = ~~Math_min(Math_floor(i64toi32_i32$6 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
        } else {
         $23_1 = ~~Math_ceil((i64toi32_i32$6 - +(~~i64toi32_i32$6 >>> 0 >>> 0)) / 4294967296.0) >>> 0
        }
        $24_1 = $23_1;
       } else {
        $24_1 = 0
       }
       i64toi32_i32$2 = $24_1;
       $6_1 = ~~i64toi32_i32$6 >>> 0;
       $6$hi = i64toi32_i32$2;
       break label$7;
      }
      i64toi32_i32$2 = -2147483648;
      $6_1 = 0;
      $6$hi = i64toi32_i32$2;
     }
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $25_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $26_1 = 0
       } else {
        $26_1 = 1
       }
       $28_1 = $26_1;
      } else {
       $28_1 = 0
      }
      $25_1 = $28_1;
     }
     $2_1 = $7_1 > 0.0;
     return ($8_1 >= -9223372036854775808.0 ? ($1_1 ? $25_1 : $2_1) : $2_1) | 0;
    }
    $7_1 = +HEAPF64[$1_1 >> 3];
    label$9 : {
     if (($4_1 | 0) != (19 | 0)) {
      break label$9
     }
     return $7_1 < +HEAPF64[$2_1 >> 3] | 0;
    }
    label$10 : {
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$1;
     $5$hi = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$1 = 2097152;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = 4194304;
     i64toi32_i32$5 = 0;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 0;
     return $7_1 < +(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0) | 0;
    }
    $1_1 = $7_1 < 0.0;
    $7_1 = Math_floor($7_1);
    $2_1 = $7_1 < 9223372036854775808.0;
    label$11 : {
     label$12 : {
      if (!(Math_abs($7_1) < 9223372036854775808.0)) {
       break label$12
      }
      i64toi32_i32$6 = $7_1;
      if (Math_abs($7_1) >= 1.0) {
       if (i64toi32_i32$6 > 0.0) {
        $29_1 = ~~Math_min(Math_floor(i64toi32_i32$6 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
       } else {
        $29_1 = ~~Math_ceil((i64toi32_i32$6 - +(~~i64toi32_i32$6 >>> 0 >>> 0)) / 4294967296.0) >>> 0
       }
       $30_1 = $29_1;
      } else {
       $30_1 = 0
      }
      i64toi32_i32$2 = $30_1;
      $6_1 = ~~i64toi32_i32$6 >>> 0;
      $6$hi = i64toi32_i32$2;
      break label$11;
     }
     i64toi32_i32$2 = -2147483648;
     $6_1 = 0;
     $6$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    if ((i64toi32_i32$2 | 0) < ($5$hi | 0)) {
     $31_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $32_1 = 0
      } else {
       $32_1 = 1
      }
      $33_1 = $32_1;
     } else {
      $33_1 = 0
     }
     $31_1 = $33_1;
    }
    return ($7_1 >= -9223372036854775808.0 ? ($2_1 ? $31_1 : $1_1) : $1_1) | 0;
   }
   if (((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[$2_1 >> 2] | 0;
   label$13 : {
    label$14 : {
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     if ((HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
      break label$14
     }
     $3_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
     break label$13;
    }
    $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   }
   $2_1 = $1_1 + 16 | 0;
   $4_1 = $0_1 + 16 | 0;
   label$15 : {
    label$16 : {
     if ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
      break label$16
     }
     $0_1 = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
     break label$15;
    }
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   }
   label$17 : {
    $1_1 = $754($2_1 | 0, $4_1 | 0) | 0;
    if ($1_1) {
     break label$17
    }
    label$18 : while (1) {
     label$19 : {
      $1_1 = $961($2_1 | 0) | 0;
      if (($1_1 | 0) != ($0_1 | 0)) {
       break label$19
      }
      $1_1 = 0;
      break label$17;
     }
     label$20 : {
      if (($1_1 | 0) != ($3_1 | 0)) {
       break label$20
      }
      $1_1 = -1;
      break label$17;
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 - $1_1 | 0;
     $3_1 = $3_1 - $1_1 | 0;
     $2_1 = $2_1 + $1_1 | 0;
     $4_1 = $4_1 + $1_1 | 0;
     $1_1 = $754($2_1 | 0, $4_1 | 0) | 0;
     if (!$1_1) {
      continue label$18
     }
     break label$18;
    };
   }
   return $1_1 >>> 31 | 0 | 0;
  }
  return $449($0_1 | 0, $1_1 | 0, $2_1 | 0, 20 | 0) | 0 | 0;
 }
 
 function $464($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $7_1 = 0.0, $5$hi = 0, i64toi32_i32$6 = 0.0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0.0, $5_1 = 0, $6$hi = 0, $6_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $27_1 = 0, $27$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
     switch (($3_1 & 15 | 0) + -3 | 0 | 0) {
     case 1:
      break label$2;
     case 0:
      break label$3;
     default:
      break label$1;
     };
    }
    $4_1 = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
    if (($4_1 & 15 | 0 | 0) != (3 | 0)) {
     break label$1
    }
    label$4 : {
     if (($3_1 | 0) != (3 | 0)) {
      break label$4
     }
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$1;
     label$5 : {
      if (($4_1 | 0) != (3 | 0)) {
       break label$5
      }
      i64toi32_i32$1 = $5$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $27_1 = i64toi32_i32$1;
      $27$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$3 = $27_1;
      if (($5$hi | 0) < (i64toi32_i32$1 | 0)) {
       $20_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
         $21_1 = 0
        } else {
         $21_1 = 1
        }
        $22_1 = $21_1;
       } else {
        $22_1 = 0
       }
       $20_1 = $22_1;
      }
      return $20_1 | 0;
     }
     $7_1 = +HEAPF64[$2_1 >> 3];
     label$6 : {
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$0 = 2097152;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$3 = 4194304;
      i64toi32_i32$1 = 0;
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
       break label$6
      }
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$1 = 0;
      return $7_1 >= +(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0) | 0;
     }
     $1_1 = $7_1 > 0.0;
     $7_1 = Math_floor($7_1);
     $2_1 = $7_1 < 9223372036854775808.0;
     label$7 : {
      label$8 : {
       if (!(Math_abs($7_1) < 9223372036854775808.0)) {
        break label$8
       }
       i64toi32_i32$6 = $7_1;
       if (Math_abs($7_1) >= 1.0) {
        if (i64toi32_i32$6 > 0.0) {
         $23_1 = ~~Math_min(Math_floor(i64toi32_i32$6 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
        } else {
         $23_1 = ~~Math_ceil((i64toi32_i32$6 - +(~~i64toi32_i32$6 >>> 0 >>> 0)) / 4294967296.0) >>> 0
        }
        $24_1 = $23_1;
       } else {
        $24_1 = 0
       }
       i64toi32_i32$2 = $24_1;
       $6_1 = ~~i64toi32_i32$6 >>> 0;
       $6$hi = i64toi32_i32$2;
       break label$7;
      }
      i64toi32_i32$2 = -2147483648;
      $6_1 = 0;
      $6$hi = i64toi32_i32$2;
     }
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $25_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        $26_1 = 0
       } else {
        $26_1 = 1
       }
       $28_1 = $26_1;
      } else {
       $28_1 = 0
      }
      $25_1 = $28_1;
     }
     return ($7_1 >= -9223372036854775808.0 ? ($2_1 ? $25_1 : $1_1) : $1_1) | 0;
    }
    $7_1 = +HEAPF64[$1_1 >> 3];
    label$9 : {
     if (($4_1 | 0) != (19 | 0)) {
      break label$9
     }
     return $7_1 <= +HEAPF64[$2_1 >> 3] | 0;
    }
    label$10 : {
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$1;
     $5$hi = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$1 = 2097152;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = 4194304;
     i64toi32_i32$5 = 0;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 0;
     return $7_1 <= +(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0) | 0;
    }
    $8_1 = Math_floor($7_1);
    $8_1 = $8_1 != $7_1 ? $8_1 + 1.0 : $8_1;
    $1_1 = $8_1 < 9223372036854775808.0;
    label$11 : {
     label$12 : {
      if (!(Math_abs($8_1) < 9223372036854775808.0)) {
       break label$12
      }
      i64toi32_i32$6 = $8_1;
      if (Math_abs(i64toi32_i32$6) >= 1.0) {
       if (i64toi32_i32$6 > 0.0) {
        $29_1 = ~~Math_min(Math_floor(i64toi32_i32$6 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
       } else {
        $29_1 = ~~Math_ceil((i64toi32_i32$6 - +(~~i64toi32_i32$6 >>> 0 >>> 0)) / 4294967296.0) >>> 0
       }
       $30_1 = $29_1;
      } else {
       $30_1 = 0
      }
      i64toi32_i32$2 = $30_1;
      $6_1 = ~~i64toi32_i32$6 >>> 0;
      $6$hi = i64toi32_i32$2;
      break label$11;
     }
     i64toi32_i32$2 = -2147483648;
     $6_1 = 0;
     $6$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    if ((i64toi32_i32$2 | 0) < ($5$hi | 0)) {
     $31_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0) {
       $32_1 = 0
      } else {
       $32_1 = 1
      }
      $33_1 = $32_1;
     } else {
      $33_1 = 0
     }
     $31_1 = $33_1;
    }
    $2_1 = $7_1 < 0.0;
    return ($8_1 >= -9223372036854775808.0 ? ($1_1 ? $31_1 : $2_1) : $2_1) | 0;
   }
   if (((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[$2_1 >> 2] | 0;
   label$13 : {
    label$14 : {
     $1_1 = HEAP32[$1_1 >> 2] | 0;
     if ((HEAPU8[($1_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
      break label$14
     }
     $3_1 = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
     break label$13;
    }
    $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   }
   $2_1 = $1_1 + 16 | 0;
   $4_1 = $0_1 + 16 | 0;
   label$15 : {
    label$16 : {
     if ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
      break label$16
     }
     $0_1 = HEAPU8[($0_1 + 7 | 0) >> 0] | 0;
     break label$15;
    }
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   }
   label$17 : {
    $1_1 = $754($2_1 | 0, $4_1 | 0) | 0;
    if ($1_1) {
     break label$17
    }
    label$18 : while (1) {
     label$19 : {
      $1_1 = $961($2_1 | 0) | 0;
      if (($1_1 | 0) != ($0_1 | 0)) {
       break label$19
      }
      $1_1 = ($0_1 | 0) != ($3_1 | 0);
      break label$17;
     }
     label$20 : {
      if (($1_1 | 0) != ($3_1 | 0)) {
       break label$20
      }
      $1_1 = -1;
      break label$17;
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 - $1_1 | 0;
     $3_1 = $3_1 - $1_1 | 0;
     $2_1 = $2_1 + $1_1 | 0;
     $4_1 = $4_1 + $1_1 | 0;
     $1_1 = $754($2_1 | 0, $4_1 | 0) | 0;
     if (!$1_1) {
      continue label$18
     }
     break label$18;
    };
   }
   return ($1_1 | 0) < (1 | 0) | 0;
  }
  return $449($0_1 | 0, $1_1 | 0, $2_1 | 0, 21 | 0) | 0 | 0;
 }
 
 function $465($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0.0, i64toi32_i32$2 = 0, $9_1 = 0.0, i64toi32_i32$4 = 0, $4_1 = 0, $7$hi = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0.0, $5_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $53_1 = 0, $53$hi = 0, $72_1 = 0, $72$hi = 0, $80_1 = 0, $80$hi = 0, $82_1 = 0, $82$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
     $4_1 = $3_1 & 63 | 0;
     $5_1 = HEAPU8[($2_1 + 8 | 0) >> 0] | 0;
     if (($4_1 | 0) == ($5_1 & 63 | 0 | 0)) {
      break label$3
     }
     $6_1 = 0;
     if (($3_1 & 15 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     if (($5_1 & 15 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       switch ($3_1 + -3 | 0 | 0) {
       case 0:
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        break label$4;
       case 16:
        break label$5;
       default:
        break label$2;
       };
      }
      $8_1 = +HEAPF64[$1_1 >> 3];
      $9_1 = Math_floor($8_1);
      if ($9_1 != $8_1) {
       break label$2
      }
      if ($9_1 >= -9223372036854775808.0 ^ 1 | 0) {
       break label$2
      }
      if ($9_1 < 9223372036854775808.0 ^ 1 | 0) {
       break label$2
      }
      label$7 : {
       if (!(Math_abs($9_1) < 9223372036854775808.0)) {
        break label$7
       }
       i64toi32_i32$3 = $9_1;
       if (Math_abs(i64toi32_i32$3) >= 1.0) {
        if (i64toi32_i32$3 > 0.0) {
         $25_1 = ~~Math_min(Math_floor(i64toi32_i32$3 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
        } else {
         $25_1 = ~~Math_ceil((i64toi32_i32$3 - +(~~i64toi32_i32$3 >>> 0 >>> 0)) / 4294967296.0) >>> 0
        }
        $26_1 = $25_1;
       } else {
        $26_1 = 0
       }
       i64toi32_i32$1 = $26_1;
       $7_1 = ~~i64toi32_i32$3 >>> 0;
       $7$hi = i64toi32_i32$1;
       break label$4;
      }
      i64toi32_i32$1 = -2147483648;
      $7_1 = 0;
      $7$hi = i64toi32_i32$1;
     }
     label$8 : {
      switch ($5_1 + -3 | 0 | 0) {
      case 0:
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       $53_1 = i64toi32_i32$1;
       $53$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$2 = $7_1;
       i64toi32_i32$1 = $53$hi;
       i64toi32_i32$4 = $53_1;
       return (i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 | 0;
      case 16:
       break label$8;
      default:
       break label$2;
      };
     }
     $8_1 = +HEAPF64[$2_1 >> 3];
     $9_1 = Math_floor($8_1);
     if ($9_1 != $8_1) {
      break label$2
     }
     if ($9_1 >= -9223372036854775808.0 ^ 1 | 0) {
      break label$2
     }
     if ($9_1 < 9223372036854775808.0 ^ 1 | 0) {
      break label$2
     }
     label$10 : {
      if (!(Math_abs($9_1) < 9223372036854775808.0)) {
       break label$10
      }
      i64toi32_i32$2 = $7$hi;
      $72_1 = $7_1;
      $72$hi = i64toi32_i32$2;
      i64toi32_i32$3 = $9_1;
      if (Math_abs(i64toi32_i32$3) >= 1.0) {
       if (i64toi32_i32$3 > 0.0) {
        $27_1 = ~~Math_min(Math_floor(i64toi32_i32$3 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
       } else {
        $27_1 = ~~Math_ceil((i64toi32_i32$3 - +(~~i64toi32_i32$3 >>> 0 >>> 0)) / 4294967296.0) >>> 0
       }
       $24_1 = $27_1;
      } else {
       $24_1 = 0
      }
      i64toi32_i32$2 = $24_1;
      i64toi32_i32$2 = $72$hi;
      i64toi32_i32$4 = $72_1;
      i64toi32_i32$0 = $24_1;
      i64toi32_i32$1 = ~~i64toi32_i32$3 >>> 0;
      return (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 | 0;
     }
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$2 = -2147483648;
     i64toi32_i32$0 = 0;
     return (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 | 0;
    }
    $6_1 = 1;
    label$11 : {
     label$12 : {
      label$13 : {
       switch ($4_1 | 0) {
       case 3:
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
        i64toi32_i32$4 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        $80_1 = i64toi32_i32$1;
        $80$hi = i64toi32_i32$4;
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$4 = HEAP32[$2_1 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        $82_1 = i64toi32_i32$4;
        $82$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $80$hi;
        i64toi32_i32$0 = $80_1;
        i64toi32_i32$4 = $82$hi;
        i64toi32_i32$2 = $82_1;
        return (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0 | 0;
       case 19:
        return +HEAPF64[$1_1 >> 3] == +HEAPF64[$2_1 >> 3] | 0;
       case 2:
        return (HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
       case 22:
        return (HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
       case 4:
        return (HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
       case 20:
        return $411(HEAP32[$1_1 >> 2] | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0;
       case 7:
        $3_1 = HEAP32[$1_1 >> 2] | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if (($3_1 | 0) == ($4_1 | 0)) {
         break label$2
        }
        $6_1 = 0;
        if (!$0_1) {
         break label$2
        }
        label$21 : {
         $3_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
         if (!$3_1) {
          break label$21
         }
         if ((HEAPU8[($3_1 + 6 | 0) >> 0] | 0) & 32 | 0) {
          break label$21
         }
         $3_1 = $440($3_1 | 0, 5 | 0, HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 188 | 0) >> 2] | 0 | 0) | 0;
         if ($3_1) {
          break label$11
         }
         $4_1 = HEAP32[$2_1 >> 2] | 0;
        }
        $3_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
        if (!$3_1) {
         break label$2
        }
        if (!((HEAPU8[($3_1 + 6 | 0) >> 0] | 0) & 32 | 0)) {
         break label$12
        }
        break label$2;
       case 5:
        break label$13;
       case 0:
       case 1:
       case 17:
        break label$2;
       default:
        break label$1;
       };
      }
      $3_1 = HEAP32[$1_1 >> 2] | 0;
      $4_1 = HEAP32[$2_1 >> 2] | 0;
      if (($3_1 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $6_1 = 0;
      if (!$0_1) {
       break label$2
      }
      label$22 : {
       $3_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$22
       }
       if ((HEAPU8[($3_1 + 6 | 0) >> 0] | 0) & 32 | 0) {
        break label$22
       }
       $3_1 = $440($3_1 | 0, 5 | 0, HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 188 | 0) >> 2] | 0 | 0) | 0;
       if ($3_1) {
        break label$11
       }
       $4_1 = HEAP32[$2_1 >> 2] | 0;
      }
      $3_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$2
      }
      if ((HEAPU8[($3_1 + 6 | 0) >> 0] | 0) & 32 | 0) {
       break label$2
      }
     }
     $3_1 = $440($3_1 | 0, 5 | 0, HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 188 | 0) >> 2] | 0 | 0) | 0;
     if ($3_1) {
      break label$11
     }
     return 0 | 0;
    }
    $444($0_1 | 0, $3_1 | 0, $1_1 | 0, $2_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0);
    $1_1 = HEAPU8[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0;
    $6_1 = ($1_1 | 0) != (1 | 0) & ($1_1 & 15 | 0 | 0) != (0 | 0) | 0;
   }
   return $6_1 | 0;
  }
  return (HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $466($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $3_1 = 0, $9_1 = 0, $2_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $4_1 = $3_1 + -24 | 0;
        if (((((HEAPU8[$4_1 >> 0] | 0) & 15 | 0) + -3 | 0) & 255 | 0) >>> 0 > 1 >>> 0) {
         break label$6
        }
        $5_1 = $3_1 + -16 | 0;
        $6_1 = $3_1 + -8 | 0;
        $7_1 = HEAPU8[$6_1 >> 0] | 0;
        switch (($7_1 & 15 | 0) + -3 | 0 | 0) {
        case 1:
         break label$4;
        case 0:
         break label$5;
        default:
         break label$6;
        };
       }
       $446($0_1 | 0);
       $8_1 = 2;
       break label$3;
      }
      $294($0_1 | 0, $5_1 | 0);
      $7_1 = HEAPU8[$6_1 >> 0] | 0;
     }
     $6_1 = $3_1 + -32 | 0;
     label$7 : {
      if (($7_1 & 255 | 0 | 0) != (68 | 0)) {
       break label$7
      }
      if (HEAPU8[((HEAP32[$5_1 >> 2] | 0) + 7 | 0) >> 0] | 0) {
       break label$7
      }
      $8_1 = 2;
      if (((HEAPU8[$4_1 >> 0] | 0) & 15 | 0 | 0) != (3 | 0)) {
       break label$3
      }
      $294($0_1 | 0, $6_1 | 0);
      break label$3;
     }
     label$8 : {
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) != (68 | 0)) {
       break label$8
      }
      if (HEAPU8[((HEAP32[$6_1 >> 2] | 0) + 7 | 0) >> 0] | 0) {
       break label$8
      }
      i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
      HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP8[$4_1 >> 0] = $7_1;
      $8_1 = 2;
      break label$3;
     }
     label$9 : {
      label$10 : {
       $4_1 = HEAP32[$5_1 >> 2] | 0;
       if ((HEAPU8[($4_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
        break label$10
       }
       $9_1 = HEAPU8[($4_1 + 7 | 0) >> 0] | 0;
       break label$9;
      }
      $9_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     }
     $8_1 = 1;
     label$11 : {
      if (($1_1 | 0) < (2 | 0)) {
       break label$11
      }
      $8_1 = 1;
      label$12 : while (1) {
       label$13 : {
        label$14 : {
         $4_1 = $5_1 - ($8_1 << 4 | 0) | 0;
         switch (((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 15 | 0) + -3 | 0 | 0) {
         case 1:
          break label$13;
         case 0:
          break label$14;
         default:
          break label$11;
         };
        }
        $294($0_1 | 0, $4_1 | 0);
       }
       label$15 : {
        label$16 : {
         $4_1 = HEAP32[$4_1 >> 2] | 0;
         if ((HEAPU8[($4_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
          break label$16
         }
         $4_1 = HEAPU8[($4_1 + 7 | 0) >> 0] | 0;
         break label$15;
        }
        $4_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
       }
       if ($4_1 >>> 0 >= ($9_1 ^ -1 | 0) >>> 0) {
        break label$1
       }
       $9_1 = $4_1 + $9_1 | 0;
       $8_1 = $8_1 + 1 | 0;
       if (($8_1 | 0) != ($1_1 | 0)) {
        continue label$12
       }
       break label$12;
      };
      $8_1 = $1_1;
     }
     label$17 : {
      label$18 : {
       if ($9_1 >>> 0 > 40 >>> 0) {
        break label$18
       }
       $5_1 = 0;
       $4_1 = $8_1;
       label$19 : while (1) {
        label$20 : {
         label$21 : {
          $7_1 = HEAP32[($3_1 - ($4_1 << 4 | 0) | 0) >> 2] | 0;
          if ((HEAPU8[($7_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
           break label$21
          }
          $6_1 = HEAPU8[($7_1 + 7 | 0) >> 0] | 0;
          break label$20;
         }
         $6_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
        }
        $951($2_1 + $5_1 | 0 | 0, $7_1 + 16 | 0 | 0, $6_1 | 0) | 0;
        $5_1 = $6_1 + $5_1 | 0;
        $7_1 = ($4_1 | 0) > (1 | 0);
        $4_1 = $4_1 + -1 | 0;
        if ($7_1) {
         continue label$19
        }
        break label$19;
       };
       $10_1 = $417($0_1 | 0, $2_1 | 0, $9_1 | 0) | 0;
       break label$17;
      }
      $10_1 = $418($0_1 | 0, $9_1 | 0) | 0;
      $9_1 = $10_1 + 16 | 0;
      $5_1 = 0;
      $4_1 = $8_1;
      label$22 : while (1) {
       label$23 : {
        label$24 : {
         $7_1 = HEAP32[($3_1 - ($4_1 << 4 | 0) | 0) >> 2] | 0;
         if ((HEAPU8[($7_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
          break label$24
         }
         $6_1 = HEAPU8[($7_1 + 7 | 0) >> 0] | 0;
         break label$23;
        }
        $6_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
       }
       $951($9_1 + $5_1 | 0 | 0, $7_1 + 16 | 0 | 0, $6_1 | 0) | 0;
       $5_1 = $6_1 + $5_1 | 0;
       $7_1 = ($4_1 | 0) > (1 | 0);
       $4_1 = $4_1 + -1 | 0;
       if ($7_1) {
        continue label$22
       }
       break label$22;
      };
     }
     $4_1 = $3_1 - ($8_1 << 4 | 0) | 0;
     HEAP32[$4_1 >> 2] = $10_1;
     HEAP8[($4_1 + 8 | 0) >> 0] = HEAPU8[($10_1 + 4 | 0) >> 0] | 0 | 64 | 0;
    }
    $4_1 = $8_1 + -1 | 0;
    $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) - ($4_1 << 4 | 0) | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
    $1_1 = $1_1 - $4_1 | 0;
    if (($1_1 | 0) > (1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   global$0 = $2_1 + 48 | 0;
   return;
  }
  $187($0_1 | 0, 5206 | 0, 0 | 0);
  abort();
 }
 
 function $467($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch (((HEAPU8[($2_1 + 8 | 0) >> 0] | 0) & 63 | 0) + -4 | 0 | 0) {
     case 1:
      label$7 : {
       $3_1 = HEAP32[$2_1 >> 2] | 0;
       $4_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$7
       }
       if ((HEAPU8[($4_1 + 6 | 0) >> 0] | 0) & 16 | 0) {
        break label$7
       }
       $4_1 = $440($4_1 | 0, 4 | 0, HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 184 | 0) >> 2] | 0 | 0) | 0;
       if ($4_1) {
        break label$2
       }
      }
      i64toi32_i32$0 = $438($3_1 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $5_1 = i64toi32_i32$0;
      HEAP8[($1_1 + 8 | 0) >> 0] = 3;
      i64toi32_i32$0 = $1_1;
      HEAP32[i64toi32_i32$0 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      return;
     case 0:
      i64toi32_i32$2 = HEAP32[$2_1 >> 2] | 0;
      i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0;
      i64toi32_i32$0 = 0;
      $5_1 = i64toi32_i32$1;
      HEAP8[($1_1 + 8 | 0) >> 0] = 3;
      i64toi32_i32$1 = $1_1;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      return;
     case 16:
      i64toi32_i32$2 = HEAP32[$2_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = 0;
      $5_1 = i64toi32_i32$0;
      HEAP8[($1_1 + 8 | 0) >> 0] = 3;
      i64toi32_i32$0 = $1_1;
      HEAP32[i64toi32_i32$0 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      return;
     default:
      break label$3;
     };
    }
    $4_1 = $441($0_1 | 0, $2_1 | 0, 4 | 0) | 0;
    if (!((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
     break label$1
    }
   }
   $444($0_1 | 0, $4_1 | 0, $2_1 | 0, $2_1 | 0, $1_1 | 0);
   return;
  }
  $185($0_1 | 0, $2_1 | 0, 5229 | 0);
  abort();
 }
 
 function $468($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$6 = 0, $3$hi = 0, $3_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $24_1 = 0, $24$hi = 0, $26_1 = 0, $27$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0) {
      break label$2
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
     return i64toi32_i32$2 | 0;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = __wasm_i64_sdiv($1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$5 = -1;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
     $18_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $19_1 = 0
      } else {
       $19_1 = 1
      }
      $20_1 = $19_1;
     } else {
      $20_1 = 0
     }
     $18_1 = $20_1;
    }
    if ($18_1) {
     break label$1
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
    return i64toi32_i32$4 | 0;
   }
   $187($0_1 | 0, 5243 | 0, 0 | 0);
   abort();
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $24_1 = i64toi32_i32$2;
  $24$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$2 = $24$hi;
  i64toi32_i32$3 = $24_1;
  i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$0;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 0;
  $26_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$4 = 0;
  $27$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$1 = $27$hi;
  i64toi32_i32$5 = $26_1;
  i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
  i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
  i64toi32_i32$3 = i64toi32_i32$2;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$2 | 0;
 }
 
 function $469($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $13_1 = 0, $17$hi = 0, $19$hi = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$1
    }
    $187($0_1 | 0, 5269 | 0, 0 | 0);
    abort();
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = __wasm_i64_srem($1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$3;
   if (!(i64toi32_i32$0 | i64toi32_i32$3 | 0)) {
    break label$1
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 63;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
    $13_1 = i64toi32_i32$0 >> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >> i64toi32_i32$1 | 0;
    $13_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
   }
   $17$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$0 = $13_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$2 | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$4 | 0;
 }
 
 function $470($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = +$2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $1_1 = +$945(+$1_1, +$2_1);
     if ($1_1 > 0.0 ^ 1 | 0) {
      break label$3
     }
     if ($2_1 < 0.0) {
      break label$2
     }
     break label$1;
    }
    if ($2_1 > 0.0 ^ 1 | 0) {
     break label$1
    }
    if ($1_1 < 0.0 ^ 1 | 0) {
     break label$1
    }
   }
   $1_1 = $1_1 + $2_1;
  }
  return +$1_1;
 }
 
 function $471($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, $13_1 = 0, $13$hi = 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $15_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $16_1 = 0
     } else {
      $16_1 = 1
     }
     $17_1 = $16_1;
    } else {
     $17_1 = 0
    }
    $15_1 = $17_1;
   }
   if ($15_1) {
    break label$1
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $6_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
   $6$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $18_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    $18_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
   }
   $7_1 = $18_1;
   $7$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = -63;
   if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
    $19_1 = 1
   } else {
    if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$1 >>> 0) {
      $20_1 = 0
     } else {
      $20_1 = 1
     }
     $21_1 = $20_1;
    } else {
     $21_1 = 0
    }
    $19_1 = $21_1;
   }
   i64toi32_i32$0 = $19_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$2 = i64toi32_i32$0 ? 0 : $7_1;
   i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$3;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$2 | 0;
  }
  i64toi32_i32$2 = $0$hi;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$2 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   $22_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
   $22_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
  }
  $13_1 = $22_1;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$5 = 63;
  if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
   $23_1 = 1
  } else {
   if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
     $24_1 = 0
    } else {
     $24_1 = 1
    }
    $25_1 = $24_1;
   } else {
    $25_1 = 0
   }
   $23_1 = $25_1;
  }
  i64toi32_i32$3 = $23_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$0 = i64toi32_i32$3 ? 0 : $13_1;
  i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$0 | 0;
 }
 
 function $472($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $34_1 = 0, $50_1 = 0, $83_1 = 0;
  $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $2_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
       $4_1 = HEAP32[($3_1 + -4 | 0) >> 2] | 0;
       switch (($4_1 & 127 | 0) + -11 | 0 | 0) {
       case 42:
        break label$2;
       case 46:
       case 47:
       case 48:
       case 51:
       case 52:
       case 53:
       case 54:
        break label$3;
       case 0:
       case 1:
       case 2:
       case 3:
       case 9:
       case 38:
       case 39:
       case 41:
        break label$4;
       case 35:
       case 36:
       case 37:
        break label$5;
       default:
        break label$1;
       };
      }
      $4_1 = HEAP32[($3_1 + -8 | 0) >> 2] | 0;
      $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
      HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
      $0_1 = $2_1 + (($4_1 >>> 3 | 0) & 4080 | 0) | 0;
      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $34_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[$0_1 >> 2] = $34_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP8[($0_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
      return;
     }
     $1_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
     $0_1 = $2_1 + (($4_1 >>> 3 | 0) & 4080 | 0) | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $50_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[$0_1 >> 2] = $50_1;
     HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($0_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
     return;
    }
    $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -16 | 0;
    $2_1 = HEAPU8[($3_1 + 8 | 0) >> 0] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
    if (!($4_1 & 32768 | 0) ^ (($2_1 | 0) != (1 | 0) & ($2_1 & 15 | 0 | 0) != (0 | 0) | 0) | 0) {
     break label$1
    }
    HEAP32[($1_1 + 16 | 0) >> 2] = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) + 4 | 0;
    return;
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $3_1 = $1_1 + -48 | 0;
   $5_1 = $1_1 + -16 | 0;
   i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   $83_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[$3_1 >> 2] = $83_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($5_1 + 8 | 0) >> 0] | 0;
   $1_1 = $1_1 + -32 | 0;
   $4_1 = $1_1 - ($2_1 + (($4_1 >>> 3 | 0) & 4080 | 0) | 0) | 0;
   if (($4_1 | 0) < (17 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
   $466($0_1 | 0, $4_1 >>> 4 | 0 | 0);
  }
 }
 
 function $473($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $6_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $11_1 = 0, $14_1 = 0, i64toi32_i32$4 = 0, $12_1 = 0, $9_1 = 0, $22_1 = 0.0, $18$hi = 0, $13_1 = 0, $18_1 = 0, $21_1 = 0.0, $19$hi = 0, $15_1 = 0, i64toi32_i32$7 = 0.0, $19_1 = 0, $4_1 = 0, $16_1 = 0, $5_1 = 0, i64toi32_i32$6 = 0, $3_1 = 0, $10_1 = 0, $20$hi = 0, $2_1 = 0, $20_1 = 0, $8_1 = 0, $23_1 = 0.0, $17_1 = 0, $165_1 = 0, $166_1 = 0, $167_1 = 0, $168_1 = 0, $169_1 = 0, $170_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $176_1 = 0, $177_1 = 0, $178_1 = 0, $179_1 = 0, $180_1 = 0, $181_1 = 0, $182_1 = 0, $183_1 = 0, $184_1 = 0, $185_1 = 0, $186_1 = 0, $187_1 = 0, $188_1 = 0, $189_1 = 0, $190_1 = 0, $191_1 = 0, $192_1 = 0, $193_1 = 0, $194_1 = 0, $195_1 = 0, $196_1 = 0, $197_1 = 0, $198_1 = 0, $199_1 = 0, $200_1 = 0, $201_1 = 0, $202_1 = 0, $203_1 = 0, $204_1 = 0, $205_1 = 0, $206_1 = 0, $207_1 = 0, $208_1 = 0, $209_1 = 0, $210_1 = 0, $211_1 = 0, $212_1 = 0, $213_1 = 0, $214_1 = 0, $215_1 = 0, $216_1 = 0, $217_1 = 0, $218_1 = 0, $219_1 = 0, $220_1 = 0, $221_1 = 0, $222_1 = 0, $223_1 = 0, $224_1 = 0, $225_1 = 0, $226_1 = 0, $227_1 = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $233_1 = 0, $234_1 = 0, $235_1 = 0, $236_1 = 0, $237_1 = 0, $238_1 = 0, $239_1 = 0, $240_1 = 0, $241_1 = 0, $242_1 = 0, $243_1 = 0, $244_1 = 0, $245_1 = 0, $246_1 = 0, $247_1 = 0, $248_1 = 0, $249_1 = 0, $250_1 = 0, $251_1 = 0, $252_1 = 0, $253_1 = 0, $254_1 = 0, $255_1 = 0, $256_1 = 0, $257_1 = 0, $258_1 = 0, $259_1 = 0, $260_1 = 0, $261_1 = 0, $262_1 = 0, $263_1 = 0, $264_1 = 0, $265_1 = 0, $266_1 = 0, $267_1 = 0, $269_1 = 0, $270_1 = 0, $271_1 = 0, $272_1 = 0, $273_1 = 0, $274_1 = 0, $275_1 = 0, $276_1 = 0, $277_1 = 0, $278_1 = 0, $279_1 = 0, $280_1 = 0, $281_1 = 0, $282_1 = 0, $283_1 = 0, $284_1 = 0, $285_1 = 0, $286_1 = 0, $287_1 = 0, $288_1 = 0, $289_1 = 0, $290_1 = 0, $291_1 = 0, $292_1 = 0, $293_1 = 0, $294_1 = 0, $295_1 = 0, $297_1 = 0, $298_1 = 0, $299_1 = 0, $300_1 = 0, $301_1 = 0, $88_1 = 0, $109_1 = 0, $150_1 = 0, $175_1 = 0, $268_1 = 0, $296_1 = 0, $358_1 = 0, $413_1 = 0, $413$hi = 0, $451_1 = 0, $482$hi = 0, $486_1 = 0, $486$hi = 0, $503_1 = 0, $562_1 = 0, $632_1 = 0, $711_1 = 0, $711$hi = 0, $752_1 = 0, $809$hi = 0, $813_1 = 0, $813$hi = 0, $830_1 = 0, $913_1 = 0, $1039 = 0, $1057 = 0, $1099 = 0, $1101 = 0, $1101$hi = 0, $1103$hi = 0, $1148 = 0, $1150$hi = 0, $1216 = 0, $1216$hi = 0, $1280$hi = 0, $302_1 = 0, $1282 = 0, $1350$hi = 0, $303_1 = 0, $1359$hi = 0, $1361$hi = 0, $1564 = 0, $1564$hi = 0, $1566 = 0, $1567$hi = 0, $1651 = 0, $1707 = 0, $1763 = 0, $1818$hi = 0, $1819$hi = 0, $1825$hi = 0, $1885$hi = 0, $1886 = 0, $1886$hi = 0, $1892 = 0, $1892$hi = 0, $1934 = 0, $1936$hi = 0, $2002 = 0, $2002$hi = 0, $2066$hi = 0, $304_1 = 0, $2068 = 0, $2136$hi = 0, $305_1 = 0, $2145$hi = 0, $2147$hi = 0, $2348 = 0, $2348$hi = 0, $2350 = 0, $2351$hi = 0, $2461 = 0, $2543 = 0, $2625 = 0, $2708 = 0, $2708$hi = 0, $2714$hi = 0, $2715 = 0, $2715$hi = 0, $2803$hi = 0, $2804 = 0, $2804$hi = 0, $2810 = 0, $2810$hi = 0, $2947 = 0, $2947$hi = 0, $3015 = 0, $3228 = 0, $3228$hi = 0, $3230 = 0, $3230$hi = 0, $3596 = 0, $3647 = 0, $3652 = 0, $3657 = 0, $3662 = 0, $3667 = 0, $3672 = 0, $3711 = 0, $3754 = 0, $3756 = 0, $3819 = 0, $3822 = 0, $3839 = 0, $3839$hi = 0, $3841$hi = 0, $4044 = 0, $4049 = 0, $4051 = 0, $4051$hi = 0, $4053 = 0, $4053$hi = 0, $4130 = 0, $4398 = 0, $4419 = 0, $4492 = 0, $4492$hi = 0, $4494$hi = 0, $4552 = 0, $4552$hi = 0, $4554$hi = 0, $4612 = 0, $4612$hi = 0, $4614$hi = 0, $4672 = 0, $4672$hi = 0, $4674$hi = 0, $4732 = 0, $4732$hi = 0, $4734$hi = 0, $4821 = 0, $4821$hi = 0, $4823 = 0, $4823$hi = 0, wasm2js_f64$0 = 0.0, wasm2js_f64$1 = 0.0, wasm2js_i32$0 = 0;
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  $3_1 = $1_1 + 4 | 0;
  $4_1 = $1_1 + 20 | 0;
  $5_1 = $1_1 + 16 | 0;
  label$1 : while (1) {
   $6_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   $7_1 = HEAP32[$1_1 >> 2] | 0;
   $8_1 = HEAP32[$7_1 >> 2] | 0;
   $9_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
   $10_1 = HEAP32[($9_1 + 48 | 0) >> 2] | 0;
   $11_1 = 0;
   label$2 : {
    if (!(HEAP32[($0_1 + 112 | 0) >> 2] | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[($9_1 + 7 | 0) >> 0] | 0) {
      break label$3
     }
     label$4 : {
      if (($6_1 | 0) != (HEAP32[($9_1 + 52 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $204($0_1 | 0, $1_1 | 0);
     }
     HEAP32[($1_1 + 20 | 0) >> 2] = 1;
     $11_1 = $195($0_1 | 0, $6_1 | 0) | 0;
     $7_1 = HEAP32[$1_1 >> 2] | 0;
     break label$2;
    }
    HEAP32[$4_1 >> 2] = 1;
   }
   $9_1 = $7_1 + 16 | 0;
   $12_1 = $11_1;
   $11_1 = $6_1 + 4 | 0;
   label$5 : while (1) {
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $13_1 = ($6_1 >>> 7 | 0) & 255 | 0;
    $7_1 = $9_1 + ($13_1 << 4 | 0) | 0;
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            label$14 : {
             label$15 : {
              label$16 : {
               label$17 : {
                label$18 : {
                 label$19 : {
                  label$20 : {
                   label$21 : {
                    label$22 : {
                     label$23 : {
                      label$24 : {
                       label$25 : {
                        label$26 : {
                         label$27 : {
                          label$28 : {
                           label$29 : {
                            label$30 : {
                             label$31 : {
                              label$32 : {
                               label$33 : {
                                label$34 : {
                                 label$35 : {
                                  label$36 : {
                                   switch ((HEAP32[((($6_1 & 127 | 0) << 2 | 0) + 5296 | 0) >> 2] | 0) + -2 | 0 | 0) {
                                   default:
                                    $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                    i64toi32_i32$2 = $6_1;
                                    i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
                                    i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                    $88_1 = i64toi32_i32$0;
                                    i64toi32_i32$0 = $7_1;
                                    HEAP32[i64toi32_i32$0 >> 2] = $88_1;
                                    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                                    HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
                                    label$95 : {
                                     label$96 : {
                                      if ($12_1) {
                                       break label$96
                                      }
                                      $12_1 = 0;
                                      break label$95;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 0:
                                    i64toi32_i32$0 = ($6_1 >>> 15 | 0) + -65535 | 0;
                                    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
                                    $109_1 = i64toi32_i32$0;
                                    i64toi32_i32$0 = $7_1;
                                    HEAP32[i64toi32_i32$0 >> 2] = $109_1;
                                    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                                    HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                    label$97 : {
                                     label$98 : {
                                      if ($12_1) {
                                       break label$98
                                      }
                                      $12_1 = 0;
                                      break label$97;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 1:
                                    HEAPF64[$7_1 >> 3] = +(($6_1 >>> 15 | 0) + -65535 | 0 | 0);
                                    HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                    label$99 : {
                                     label$100 : {
                                      if ($12_1) {
                                       break label$100
                                      }
                                      $12_1 = 0;
                                      break label$99;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 2:
                                    $6_1 = $10_1 + (($6_1 >>> 11 | 0) & 2097136 | 0) | 0;
                                    i64toi32_i32$2 = $6_1;
                                    i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
                                    i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                    $150_1 = i64toi32_i32$1;
                                    i64toi32_i32$1 = $7_1;
                                    HEAP32[$7_1 >> 2] = $150_1;
                                    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                    HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
                                    label$101 : {
                                     label$102 : {
                                      if ($12_1) {
                                       break label$102
                                      }
                                      $12_1 = 0;
                                      break label$101;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 3:
                                    $6_1 = $10_1 + (((HEAP32[$11_1 >> 2] | 0) >>> 3 | 0) & 536870896 | 0) | 0;
                                    i64toi32_i32$2 = $6_1;
                                    i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
                                    i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                    $175_1 = i64toi32_i32$0;
                                    i64toi32_i32$0 = $7_1;
                                    HEAP32[i64toi32_i32$0 >> 2] = $175_1;
                                    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                                    HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
                                    $6_1 = $11_1 + 4 | 0;
                                    label$103 : {
                                     label$104 : {
                                      if ($12_1) {
                                       break label$104
                                      }
                                      $12_1 = 0;
                                      break label$103;
                                     }
                                     $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $11_1 = $11_1 + 8 | 0;
                                    continue label$5;
                                   case 4:
                                    HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 1;
                                    label$105 : {
                                     label$106 : {
                                      if ($12_1) {
                                       break label$106
                                      }
                                      $12_1 = 0;
                                      break label$105;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 5:
                                    HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 1;
                                    $6_1 = $11_1 + 4 | 0;
                                    label$107 : {
                                     label$108 : {
                                      if ($12_1) {
                                       break label$108
                                      }
                                      $12_1 = 0;
                                      break label$107;
                                     }
                                     $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $11_1 = $11_1 + 8 | 0;
                                    continue label$5;
                                   case 6:
                                    HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 17;
                                    label$109 : {
                                     label$110 : {
                                      if ($12_1) {
                                       break label$110
                                      }
                                      $12_1 = 0;
                                      break label$109;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 7:
                                    $6_1 = ($6_1 >>> 16 | 0) & 255 | 0;
                                    label$111 : while (1) {
                                     $14_1 = 0;
                                     HEAP8[($7_1 + 8 | 0) >> 0] = 0;
                                     $13_1 = $6_1;
                                     $6_1 = $6_1 + -1 | 0;
                                     $7_1 = $7_1 + 16 | 0;
                                     if ($13_1) {
                                      continue label$111
                                     }
                                     break label$111;
                                    };
                                    label$112 : {
                                     if (!$12_1) {
                                      break label$112
                                     }
                                     $14_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $12_1 = $14_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 8:
                                    $6_1 = HEAP32[((HEAP32[(($8_1 + (($6_1 >>> 14 | 0) & 1020 | 0) | 0) + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
                                    i64toi32_i32$2 = $6_1;
                                    i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
                                    i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                    $268_1 = i64toi32_i32$1;
                                    i64toi32_i32$1 = $7_1;
                                    HEAP32[$7_1 >> 2] = $268_1;
                                    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                    HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
                                    label$113 : {
                                     label$114 : {
                                      if ($12_1) {
                                       break label$114
                                      }
                                      $12_1 = 0;
                                      break label$113;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 9:
                                    $14_1 = HEAP32[(($8_1 + (($6_1 >>> 14 | 0) & 1020 | 0) | 0) + 16 | 0) >> 2] | 0;
                                    $6_1 = HEAP32[($14_1 + 8 | 0) >> 2] | 0;
                                    i64toi32_i32$2 = $7_1;
                                    i64toi32_i32$0 = HEAP32[$7_1 >> 2] | 0;
                                    i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
                                    $296_1 = i64toi32_i32$0;
                                    i64toi32_i32$0 = $6_1;
                                    HEAP32[$6_1 >> 2] = $296_1;
                                    HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
                                    $13_1 = $9_1 + ($13_1 << 4 | 0) | 0;
                                    HEAP8[($6_1 + 8 | 0) >> 0] = HEAPU8[($13_1 + 8 | 0) >> 0] | 0;
                                    label$115 : {
                                     if (!((HEAPU8[($13_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
                                      break label$115
                                     }
                                     if (!((HEAPU8[($14_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
                                      break label$115
                                     }
                                     $7_1 = HEAP32[$7_1 >> 2] | 0;
                                     if (!((HEAPU8[($7_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
                                      break label$115
                                     }
                                     $233($0_1 | 0, $14_1 | 0, $7_1 | 0);
                                    }
                                    label$116 : {
                                     label$117 : {
                                      if ($12_1) {
                                       break label$117
                                      }
                                      $12_1 = 0;
                                      break label$116;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 10:
                                    $15_1 = $10_1 + (($6_1 >>> 20 | 0) & 4080 | 0) | 0;
                                    $14_1 = 0;
                                    label$118 : {
                                     label$119 : {
                                      $6_1 = HEAP32[((HEAP32[(($8_1 + (($6_1 >>> 14 | 0) & 1020 | 0) | 0) + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
                                      if ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
                                       break label$119
                                      }
                                      $14_1 = $436(HEAP32[$6_1 >> 2] | 0 | 0, HEAP32[$15_1 >> 2] | 0 | 0) | 0;
                                      if (!((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
                                       break label$119
                                      }
                                      i64toi32_i32$2 = $14_1;
                                      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                                      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                                      $358_1 = i64toi32_i32$1;
                                      i64toi32_i32$1 = $7_1;
                                      HEAP32[$7_1 >> 2] = $358_1;
                                      HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                      HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 8 | 0) >> 0] | 0;
                                      break label$118;
                                     }
                                     HEAP32[$5_1 >> 2] = $11_1;
                                     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                     $461($0_1 | 0, $6_1 | 0, $15_1 | 0, $7_1 | 0, $14_1 | 0);
                                     $12_1 = HEAP32[$4_1 >> 2] | 0;
                                    }
                                    label$120 : {
                                     label$121 : {
                                      if ($12_1) {
                                       break label$121
                                      }
                                      $12_1 = 0;
                                      break label$120;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 11:
                                    $14_1 = $9_1 + ((($6_1 >>> 16 | 0) & 255 | 0) << 4 | 0) | 0;
                                    label$122 : {
                                     label$123 : {
                                      label$124 : {
                                       label$125 : {
                                        $15_1 = $9_1 + (($6_1 >>> 20 | 0) & 4080 | 0) | 0;
                                        if ((HEAPU8[($15_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
                                         break label$125
                                        }
                                        $6_1 = 0;
                                        if ((HEAPU8[($14_1 + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
                                         break label$124
                                        }
                                        label$126 : {
                                         label$127 : {
                                          i64toi32_i32$2 = $15_1;
                                          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                                          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                                          $18_1 = i64toi32_i32$0;
                                          $18$hi = i64toi32_i32$1;
                                          i64toi32_i32$2 = i64toi32_i32$0;
                                          i64toi32_i32$0 = -1;
                                          i64toi32_i32$3 = -1;
                                          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
                                          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                                          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                                           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                                          }
                                          $19_1 = i64toi32_i32$4;
                                          $19$hi = i64toi32_i32$5;
                                          $6_1 = HEAP32[$14_1 >> 2] | 0;
                                          i64toi32_i32$1 = $6_1;
                                          i64toi32_i32$5 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
                                          i64toi32_i32$2 = 0;
                                          $413_1 = i64toi32_i32$5;
                                          $413$hi = i64toi32_i32$2;
                                          i64toi32_i32$2 = $19$hi;
                                          i64toi32_i32$1 = i64toi32_i32$4;
                                          i64toi32_i32$5 = $413$hi;
                                          i64toi32_i32$3 = $413_1;
                                          if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
                                           break label$127
                                          }
                                          i64toi32_i32$1 = $19$hi;
                                          $6_1 = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ($19_1 << 4 | 0) | 0;
                                          break label$126;
                                         }
                                         i64toi32_i32$1 = $18$hi;
                                         $6_1 = $435($6_1 | 0, $18_1 | 0, i64toi32_i32$1 | 0) | 0;
                                        }
                                        if ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
                                         break label$123
                                        }
                                        break label$124;
                                       }
                                       $6_1 = 0;
                                       if ((HEAPU8[($14_1 + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
                                        break label$124
                                       }
                                       $6_1 = $427(HEAP32[$14_1 >> 2] | 0 | 0, $15_1 | 0) | 0;
                                       if ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
                                        break label$123
                                       }
                                      }
                                      HEAP32[$5_1 >> 2] = $11_1;
                                      HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                      $461($0_1 | 0, $14_1 | 0, $15_1 | 0, $7_1 | 0, $6_1 | 0);
                                      $12_1 = HEAP32[$4_1 >> 2] | 0;
                                      break label$122;
                                     }
                                     i64toi32_i32$3 = $6_1;
                                     i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
                                     i64toi32_i32$2 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                     $451_1 = i64toi32_i32$1;
                                     i64toi32_i32$1 = $7_1;
                                     HEAP32[$7_1 >> 2] = $451_1;
                                     HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$2;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
                                    }
                                    label$128 : {
                                     label$129 : {
                                      if ($12_1) {
                                       break label$129
                                      }
                                      $12_1 = 0;
                                      break label$128;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 12:
                                    $15_1 = $6_1 >>> 24 | 0;
                                    i64toi32_i32$2 = 0;
                                    $18_1 = $15_1;
                                    $18$hi = i64toi32_i32$2;
                                    $14_1 = 0;
                                    label$130 : {
                                     label$131 : {
                                      $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                      if ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
                                       break label$131
                                      }
                                      label$132 : {
                                       label$133 : {
                                        i64toi32_i32$2 = $18$hi;
                                        i64toi32_i32$3 = $18_1;
                                        i64toi32_i32$1 = -1;
                                        i64toi32_i32$5 = -1;
                                        i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
                                        i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
                                        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                                         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
                                        }
                                        $482$hi = i64toi32_i32$4;
                                        $14_1 = HEAP32[$6_1 >> 2] | 0;
                                        i64toi32_i32$2 = $14_1;
                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
                                        i64toi32_i32$3 = 0;
                                        $486_1 = i64toi32_i32$4;
                                        $486$hi = i64toi32_i32$3;
                                        i64toi32_i32$3 = $482$hi;
                                        i64toi32_i32$2 = i64toi32_i32$0;
                                        i64toi32_i32$4 = $486$hi;
                                        i64toi32_i32$5 = $486_1;
                                        if (i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
                                         break label$133
                                        }
                                        $14_1 = (($15_1 << 4 | 0) + (HEAP32[($14_1 + 12 | 0) >> 2] | 0) | 0) + -16 | 0;
                                        break label$132;
                                       }
                                       i64toi32_i32$2 = $18$hi;
                                       $14_1 = $435($14_1 | 0, $18_1 | 0, i64toi32_i32$2 | 0) | 0;
                                      }
                                      if (!((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
                                       break label$131
                                      }
                                      i64toi32_i32$5 = $14_1;
                                      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                                      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                                      $503_1 = i64toi32_i32$2;
                                      i64toi32_i32$2 = $7_1;
                                      HEAP32[$7_1 >> 2] = $503_1;
                                      HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$3;
                                      HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$5 + 8 | 0) >> 0] | 0;
                                      $7_1 = $12_1;
                                      break label$130;
                                     }
                                     HEAP8[($2_1 + 32 | 0) >> 0] = 3;
                                     i64toi32_i32$3 = $18$hi;
                                     i64toi32_i32$2 = $2_1;
                                     HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $18_1;
                                     HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$3;
                                     HEAP32[$5_1 >> 2] = $11_1;
                                     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                     $461($0_1 | 0, $6_1 | 0, i64toi32_i32$2 + 24 | 0 | 0, $7_1 | 0, $14_1 | 0);
                                     $7_1 = HEAP32[$4_1 >> 2] | 0;
                                    }
                                    label$134 : {
                                     label$135 : {
                                      if ($7_1) {
                                       break label$135
                                      }
                                      $12_1 = 0;
                                      break label$134;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 13:
                                    $15_1 = $10_1 + (($6_1 >>> 20 | 0) & 4080 | 0) | 0;
                                    $14_1 = 0;
                                    label$136 : {
                                     label$137 : {
                                      $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                      if ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
                                       break label$137
                                      }
                                      $14_1 = $436(HEAP32[$6_1 >> 2] | 0 | 0, HEAP32[$15_1 >> 2] | 0 | 0) | 0;
                                      if (!((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
                                       break label$137
                                      }
                                      i64toi32_i32$5 = $14_1;
                                      i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                                      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                                      $562_1 = i64toi32_i32$3;
                                      i64toi32_i32$3 = $7_1;
                                      HEAP32[$7_1 >> 2] = $562_1;
                                      HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$2;
                                      HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$5 + 8 | 0) >> 0] | 0;
                                      $7_1 = $12_1;
                                      break label$136;
                                     }
                                     HEAP32[$5_1 >> 2] = $11_1;
                                     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                     $461($0_1 | 0, $6_1 | 0, $15_1 | 0, $7_1 | 0, $14_1 | 0);
                                     $7_1 = HEAP32[$4_1 >> 2] | 0;
                                    }
                                    label$138 : {
                                     label$139 : {
                                      if ($7_1) {
                                       break label$139
                                      }
                                      $12_1 = 0;
                                      break label$138;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 14:
                                    $7_1 = ($6_1 >>> 20 | 0) & 4080 | 0;
                                    $13_1 = $6_1 & 32768 | 0 ? $10_1 + $7_1 | 0 : $9_1 + $7_1 | 0;
                                    $14_1 = $10_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                    $7_1 = 0;
                                    label$140 : {
                                     label$141 : {
                                      $6_1 = HEAP32[((HEAP32[(($8_1 + (($6_1 >>> 5 | 0) & 1020 | 0) | 0) + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
                                      if ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
                                       break label$141
                                      }
                                      $7_1 = $436(HEAP32[$6_1 >> 2] | 0 | 0, HEAP32[$14_1 >> 2] | 0 | 0) | 0;
                                      if (!((HEAPU8[($7_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
                                       break label$141
                                      }
                                      i64toi32_i32$5 = $13_1;
                                      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                                      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                                      $632_1 = i64toi32_i32$2;
                                      i64toi32_i32$2 = $7_1;
                                      HEAP32[$7_1 >> 2] = $632_1;
                                      HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$3;
                                      HEAP8[($7_1 + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$5 + 8 | 0) >> 0] | 0;
                                      label$142 : {
                                       if ((HEAPU8[(i64toi32_i32$5 + 8 | 0) >> 0] | 0) & 64 | 0) {
                                        break label$142
                                       }
                                       $7_1 = $12_1;
                                       break label$140;
                                      }
                                      label$143 : {
                                       $7_1 = HEAP32[$6_1 >> 2] | 0;
                                       if ((HEAPU8[($7_1 + 5 | 0) >> 0] | 0) & 32 | 0) {
                                        break label$143
                                       }
                                       $7_1 = $12_1;
                                       break label$140;
                                      }
                                      label$144 : {
                                       if ((HEAPU8[((HEAP32[$13_1 >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0) {
                                        break label$144
                                       }
                                       $7_1 = $12_1;
                                       break label$140;
                                      }
                                      $235($0_1 | 0, $7_1 | 0);
                                      $7_1 = $12_1;
                                      break label$140;
                                     }
                                     HEAP32[$5_1 >> 2] = $11_1;
                                     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                     $462($0_1 | 0, $6_1 | 0, $14_1 | 0, $13_1 | 0, $7_1 | 0);
                                     $7_1 = HEAP32[$4_1 >> 2] | 0;
                                    }
                                    label$145 : {
                                     label$146 : {
                                      if ($7_1) {
                                       break label$146
                                      }
                                      $12_1 = 0;
                                      break label$145;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 15:
                                    $14_1 = ($6_1 >>> 20 | 0) & 4080 | 0;
                                    $14_1 = $6_1 & 32768 | 0 ? $10_1 + $14_1 | 0 : $9_1 + $14_1 | 0;
                                    label$147 : {
                                     label$148 : {
                                      label$149 : {
                                       label$150 : {
                                        $15_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        if ((HEAPU8[($15_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
                                         break label$150
                                        }
                                        $6_1 = 0;
                                        if ((HEAPU8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
                                         break label$149
                                        }
                                        label$151 : {
                                         label$152 : {
                                          i64toi32_i32$5 = $15_1;
                                          i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
                                          i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
                                          $18_1 = i64toi32_i32$3;
                                          $18$hi = i64toi32_i32$2;
                                          i64toi32_i32$5 = i64toi32_i32$3;
                                          i64toi32_i32$3 = -1;
                                          i64toi32_i32$4 = -1;
                                          i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
                                          i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
                                          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
                                           i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
                                          }
                                          $19_1 = i64toi32_i32$1;
                                          $19$hi = i64toi32_i32$0;
                                          $6_1 = HEAP32[$7_1 >> 2] | 0;
                                          i64toi32_i32$2 = $6_1;
                                          i64toi32_i32$0 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
                                          i64toi32_i32$5 = 0;
                                          $711_1 = i64toi32_i32$0;
                                          $711$hi = i64toi32_i32$5;
                                          i64toi32_i32$5 = $19$hi;
                                          i64toi32_i32$2 = i64toi32_i32$1;
                                          i64toi32_i32$0 = $711$hi;
                                          i64toi32_i32$4 = $711_1;
                                          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0 | 0) | 0) {
                                           break label$152
                                          }
                                          i64toi32_i32$2 = $19$hi;
                                          $6_1 = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + ($19_1 << 4 | 0) | 0;
                                          break label$151;
                                         }
                                         i64toi32_i32$2 = $18$hi;
                                         $6_1 = $435($6_1 | 0, $18_1 | 0, i64toi32_i32$2 | 0) | 0;
                                        }
                                        if ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
                                         break label$148
                                        }
                                        break label$149;
                                       }
                                       $6_1 = 0;
                                       if ((HEAPU8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
                                        break label$149
                                       }
                                       $6_1 = $427(HEAP32[$7_1 >> 2] | 0 | 0, $15_1 | 0) | 0;
                                       if ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 15 | 0) {
                                        break label$148
                                       }
                                      }
                                      HEAP32[$5_1 >> 2] = $11_1;
                                      HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                      $462($0_1 | 0, $7_1 | 0, $15_1 | 0, $14_1 | 0, $6_1 | 0);
                                      $7_1 = HEAP32[$4_1 >> 2] | 0;
                                      break label$147;
                                     }
                                     i64toi32_i32$4 = $14_1;
                                     i64toi32_i32$2 = HEAP32[$14_1 >> 2] | 0;
                                     i64toi32_i32$5 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                     $752_1 = i64toi32_i32$2;
                                     i64toi32_i32$2 = $6_1;
                                     HEAP32[$6_1 >> 2] = $752_1;
                                     HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$5;
                                     HEAP8[($6_1 + 8 | 0) >> 0] = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                     label$153 : {
                                      if (!((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) & 64 | 0)) {
                                       break label$153
                                      }
                                      $7_1 = HEAP32[$7_1 >> 2] | 0;
                                      if (!((HEAPU8[($7_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
                                       break label$153
                                      }
                                      if (!((HEAPU8[((HEAP32[$14_1 >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
                                       break label$153
                                      }
                                      $235($0_1 | 0, $7_1 | 0);
                                     }
                                     $7_1 = $12_1;
                                    }
                                    label$154 : {
                                     label$155 : {
                                      if ($7_1) {
                                       break label$155
                                      }
                                      $12_1 = 0;
                                      break label$154;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 16:
                                    $14_1 = ($6_1 >>> 20 | 0) & 4080 | 0;
                                    $14_1 = $6_1 & 32768 | 0 ? $10_1 + $14_1 | 0 : $9_1 + $14_1 | 0;
                                    $15_1 = ($6_1 >>> 16 | 0) & 255 | 0;
                                    i64toi32_i32$5 = 0;
                                    $18_1 = $15_1;
                                    $18$hi = i64toi32_i32$5;
                                    $6_1 = 0;
                                    label$156 : {
                                     label$157 : {
                                      if ((HEAPU8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
                                       break label$157
                                      }
                                      label$158 : {
                                       label$159 : {
                                        i64toi32_i32$5 = $18$hi;
                                        i64toi32_i32$4 = $18_1;
                                        i64toi32_i32$2 = -1;
                                        i64toi32_i32$0 = -1;
                                        i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
                                        i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
                                        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
                                         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
                                        }
                                        $809$hi = i64toi32_i32$1;
                                        $6_1 = HEAP32[$7_1 >> 2] | 0;
                                        i64toi32_i32$5 = $6_1;
                                        i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
                                        i64toi32_i32$4 = 0;
                                        $813_1 = i64toi32_i32$1;
                                        $813$hi = i64toi32_i32$4;
                                        i64toi32_i32$4 = $809$hi;
                                        i64toi32_i32$5 = i64toi32_i32$3;
                                        i64toi32_i32$1 = $813$hi;
                                        i64toi32_i32$0 = $813_1;
                                        if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0 | 0) | 0) {
                                         break label$159
                                        }
                                        $6_1 = (($15_1 << 4 | 0) + (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) + -16 | 0;
                                        break label$158;
                                       }
                                       i64toi32_i32$5 = $18$hi;
                                       $6_1 = $435($6_1 | 0, $18_1 | 0, i64toi32_i32$5 | 0) | 0;
                                      }
                                      if (!((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
                                       break label$157
                                      }
                                      i64toi32_i32$0 = $14_1;
                                      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                                      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                                      $830_1 = i64toi32_i32$5;
                                      i64toi32_i32$5 = $6_1;
                                      HEAP32[$6_1 >> 2] = $830_1;
                                      HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$4;
                                      HEAP8[($6_1 + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$0 + 8 | 0) >> 0] | 0;
                                      label$160 : {
                                       if ((HEAPU8[(i64toi32_i32$0 + 8 | 0) >> 0] | 0) & 64 | 0) {
                                        break label$160
                                       }
                                       $7_1 = $12_1;
                                       break label$156;
                                      }
                                      label$161 : {
                                       $7_1 = HEAP32[$7_1 >> 2] | 0;
                                       if ((HEAPU8[($7_1 + 5 | 0) >> 0] | 0) & 32 | 0) {
                                        break label$161
                                       }
                                       $7_1 = $12_1;
                                       break label$156;
                                      }
                                      label$162 : {
                                       if ((HEAPU8[((HEAP32[$14_1 >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0) {
                                        break label$162
                                       }
                                       $7_1 = $12_1;
                                       break label$156;
                                      }
                                      $235($0_1 | 0, $7_1 | 0);
                                      $7_1 = $12_1;
                                      break label$156;
                                     }
                                     HEAP8[($2_1 + 16 | 0) >> 0] = 3;
                                     i64toi32_i32$4 = $18$hi;
                                     i64toi32_i32$5 = $2_1;
                                     HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $18_1;
                                     HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$4;
                                     HEAP32[$5_1 >> 2] = $11_1;
                                     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                     $462($0_1 | 0, $7_1 | 0, i64toi32_i32$5 + 8 | 0 | 0, $14_1 | 0, $6_1 | 0);
                                     $7_1 = HEAP32[$4_1 >> 2] | 0;
                                    }
                                    label$163 : {
                                     label$164 : {
                                      if ($7_1) {
                                       break label$164
                                      }
                                      $12_1 = 0;
                                      break label$163;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 17:
                                    $14_1 = ($6_1 >>> 20 | 0) & 4080 | 0;
                                    $14_1 = $6_1 & 32768 | 0 ? $10_1 + $14_1 | 0 : $9_1 + $14_1 | 0;
                                    $15_1 = $10_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                    $6_1 = 0;
                                    label$165 : {
                                     label$166 : {
                                      if ((HEAPU8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
                                       break label$166
                                      }
                                      $6_1 = $436(HEAP32[$7_1 >> 2] | 0 | 0, HEAP32[$15_1 >> 2] | 0 | 0) | 0;
                                      if (!((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
                                       break label$166
                                      }
                                      i64toi32_i32$0 = $14_1;
                                      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                                      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                                      $913_1 = i64toi32_i32$4;
                                      i64toi32_i32$4 = $6_1;
                                      HEAP32[$6_1 >> 2] = $913_1;
                                      HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$5;
                                      HEAP8[($6_1 + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$0 + 8 | 0) >> 0] | 0;
                                      label$167 : {
                                       if ((HEAPU8[(i64toi32_i32$0 + 8 | 0) >> 0] | 0) & 64 | 0) {
                                        break label$167
                                       }
                                       $7_1 = $12_1;
                                       break label$165;
                                      }
                                      label$168 : {
                                       $7_1 = HEAP32[$7_1 >> 2] | 0;
                                       if ((HEAPU8[($7_1 + 5 | 0) >> 0] | 0) & 32 | 0) {
                                        break label$168
                                       }
                                       $7_1 = $12_1;
                                       break label$165;
                                      }
                                      label$169 : {
                                       if ((HEAPU8[((HEAP32[$14_1 >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0) {
                                        break label$169
                                       }
                                       $7_1 = $12_1;
                                       break label$165;
                                      }
                                      $235($0_1 | 0, $7_1 | 0);
                                      $7_1 = $12_1;
                                      break label$165;
                                     }
                                     HEAP32[$5_1 >> 2] = $11_1;
                                     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                     $462($0_1 | 0, $7_1 | 0, $15_1 | 0, $14_1 | 0, $6_1 | 0);
                                     $7_1 = HEAP32[$4_1 >> 2] | 0;
                                    }
                                    label$170 : {
                                     label$171 : {
                                      if ($7_1) {
                                       break label$171
                                      }
                                      $12_1 = 0;
                                      break label$170;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 18:
                                    $14_1 = ($6_1 >>> 16 | 0) & 255 | 0;
                                    $15_1 = $14_1 ? 1 << ($14_1 + -1 | 0) | 0 : 0;
                                    $14_1 = $6_1 >>> 24 | 0;
                                    label$172 : {
                                     if (!($6_1 & 32768 | 0)) {
                                      break label$172
                                     }
                                     $14_1 = ((HEAP32[$11_1 >> 2] | 0) << 1 | 0) & -256 | 0 | $14_1 | 0;
                                    }
                                    $6_1 = $7_1 + 16 | 0;
                                    HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
                                    $16_1 = $431($0_1 | 0) | 0;
                                    HEAP32[$7_1 >> 2] = $16_1;
                                    HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 69;
                                    label$173 : {
                                     if (!($14_1 | $15_1 | 0)) {
                                      break label$173
                                     }
                                     $425($0_1 | 0, $16_1 | 0, $14_1 | 0, $15_1 | 0);
                                    }
                                    label$174 : {
                                     if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
                                      break label$174
                                     }
                                     HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
                                     $248($0_1 | 0);
                                     $12_1 = HEAP32[$4_1 >> 2] | 0;
                                    }
                                    $6_1 = $11_1 + 4 | 0;
                                    label$175 : {
                                     label$176 : {
                                      if ($12_1) {
                                       break label$176
                                      }
                                      $12_1 = 0;
                                      break label$175;
                                     }
                                     $7_1 = $195($0_1 | 0, $6_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $11_1 = $11_1 + 8 | 0;
                                    continue label$5;
                                   case 19:
                                    $14_1 = ($6_1 >>> 20 | 0) & 4080 | 0;
                                    $15_1 = $6_1 & 32768 | 0 ? $10_1 + $14_1 | 0 : $9_1 + $14_1 | 0;
                                    $16_1 = HEAP32[$15_1 >> 2] | 0;
                                    $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                    i64toi32_i32$0 = $6_1;
                                    i64toi32_i32$5 = HEAP32[$6_1 >> 2] | 0;
                                    i64toi32_i32$4 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                    $1039 = i64toi32_i32$5;
                                    i64toi32_i32$5 = $7_1;
                                    HEAP32[($7_1 + 16 | 0) >> 2] = $1039;
                                    HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$4;
                                    HEAP8[($7_1 + 24 | 0) >> 0] = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
                                    $14_1 = 0;
                                    label$177 : {
                                     label$178 : {
                                      if ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0 | 0) != (69 | 0)) {
                                       break label$178
                                      }
                                      $14_1 = $437(HEAP32[$6_1 >> 2] | 0 | 0, $16_1 | 0) | 0;
                                      if (!((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) & 15 | 0)) {
                                       break label$178
                                      }
                                      i64toi32_i32$0 = $14_1;
                                      i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                                      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                                      $1057 = i64toi32_i32$4;
                                      i64toi32_i32$4 = $7_1;
                                      HEAP32[$7_1 >> 2] = $1057;
                                      HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$5;
                                      HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$0 + 8 | 0) >> 0] | 0;
                                      $7_1 = $12_1;
                                      break label$177;
                                     }
                                     HEAP32[$5_1 >> 2] = $11_1;
                                     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                     $461($0_1 | 0, $6_1 | 0, $15_1 | 0, $7_1 | 0, $14_1 | 0);
                                     $7_1 = HEAP32[$4_1 >> 2] | 0;
                                    }
                                    label$179 : {
                                     label$180 : {
                                      if ($7_1) {
                                       break label$180
                                      }
                                      $12_1 = 0;
                                      break label$179;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 20:
                                    $14_1 = ($6_1 >>> 24 | 0) + -127 | 0;
                                    label$181 : {
                                     label$182 : {
                                      label$183 : {
                                       label$184 : {
                                        $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 16:
                                         break label$183;
                                        case 0:
                                         break label$184;
                                        default:
                                         break label$181;
                                        };
                                       }
                                       $1099 = $7_1;
                                       i64toi32_i32$0 = $6_1;
                                       i64toi32_i32$5 = HEAP32[$6_1 >> 2] | 0;
                                       i64toi32_i32$4 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                       $1101 = i64toi32_i32$5;
                                       $1101$hi = i64toi32_i32$4;
                                       i64toi32_i32$5 = $14_1;
                                       i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
                                       $1103$hi = i64toi32_i32$4;
                                       i64toi32_i32$4 = $1101$hi;
                                       i64toi32_i32$0 = $1101;
                                       i64toi32_i32$5 = $1103$hi;
                                       i64toi32_i32$1 = $14_1;
                                       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
                                       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
                                       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                                        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
                                       }
                                       i64toi32_i32$0 = $1099;
                                       HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$2;
                                       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
                                       $7_1 = 3;
                                       break label$182;
                                      }
                                      HEAPF64[$7_1 >> 3] = +HEAPF64[$6_1 >> 3] + +($14_1 | 0);
                                      $7_1 = 19;
                                     }
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = $7_1;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$185 : {
                                     label$186 : {
                                      if ($12_1) {
                                       break label$186
                                      }
                                      $12_1 = 0;
                                      break label$185;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 21:
                                    $14_1 = $10_1 + (($6_1 >>> 24 | 0) << 4 | 0) | 0;
                                    label$187 : {
                                     label$188 : {
                                      label$189 : {
                                       label$190 : {
                                        label$191 : {
                                         $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                         switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                         case 16:
                                          break label$190;
                                         case 0:
                                          break label$191;
                                         default:
                                          break label$187;
                                         };
                                        }
                                        i64toi32_i32$4 = $6_1;
                                        i64toi32_i32$3 = HEAP32[$6_1 >> 2] | 0;
                                        i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                        $18_1 = i64toi32_i32$3;
                                        $18$hi = i64toi32_i32$0;
                                        $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                        if (($15_1 | 0) != (3 | 0)) {
                                         break label$189
                                        }
                                        $1148 = $7_1;
                                        i64toi32_i32$4 = $14_1;
                                        i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
                                        i64toi32_i32$3 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                        $1150$hi = i64toi32_i32$3;
                                        i64toi32_i32$3 = $18$hi;
                                        i64toi32_i32$3 = $1150$hi;
                                        i64toi32_i32$4 = i64toi32_i32$0;
                                        i64toi32_i32$0 = $18$hi;
                                        i64toi32_i32$1 = $18_1;
                                        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                                        i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
                                        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
                                         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
                                        }
                                        i64toi32_i32$4 = $1148;
                                        HEAP32[i64toi32_i32$4 >> 2] = i64toi32_i32$5;
                                        HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$2;
                                        HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                        $11_1 = $11_1 + 4 | 0;
                                        break label$187;
                                       }
                                       $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                       $21_1 = +HEAPF64[$6_1 >> 3];
                                       break label$188;
                                      }
                                      i64toi32_i32$2 = $18$hi;
                                      i64toi32_i32$4 = $18_1;
                                      i64toi32_i32$3 = 0;
                                      $21_1 = +(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0);
                                     }
                                     label$192 : {
                                      label$193 : {
                                       switch (($15_1 & 255 | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $22_1 = +HEAPF64[$14_1 >> 3];
                                        break label$192;
                                       case 0:
                                        break label$193;
                                       default:
                                        break label$187;
                                       };
                                      }
                                      i64toi32_i32$3 = $14_1;
                                      i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                                      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$3 = 0;
                                      $22_1 = +(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$4 | 0);
                                     }
                                     HEAPF64[$7_1 >> 3] = $21_1 + $22_1;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$195 : {
                                     label$196 : {
                                      if ($12_1) {
                                       break label$196
                                      }
                                      $12_1 = 0;
                                      break label$195;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 22:
                                    $14_1 = $10_1 + (($6_1 >>> 24 | 0) << 4 | 0) | 0;
                                    label$197 : {
                                     label$198 : {
                                      label$199 : {
                                       label$200 : {
                                        label$201 : {
                                         $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                         switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                         case 16:
                                          break label$200;
                                         case 0:
                                          break label$201;
                                         default:
                                          break label$197;
                                         };
                                        }
                                        i64toi32_i32$3 = $6_1;
                                        i64toi32_i32$4 = HEAP32[$6_1 >> 2] | 0;
                                        i64toi32_i32$2 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                        $18_1 = i64toi32_i32$4;
                                        $18$hi = i64toi32_i32$2;
                                        $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                        if (($15_1 | 0) != (3 | 0)) {
                                         break label$199
                                        }
                                        i64toi32_i32$2 = $18$hi;
                                        i64toi32_i32$3 = $14_1;
                                        i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                                        i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                                        $1216 = i64toi32_i32$2;
                                        $1216$hi = i64toi32_i32$4;
                                        i64toi32_i32$4 = $18$hi;
                                        i64toi32_i32$3 = $18_1;
                                        i64toi32_i32$2 = $1216$hi;
                                        i64toi32_i32$1 = $1216;
                                        i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                                        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
                                        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
                                        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
                                        i64toi32_i32$3 = $7_1;
                                        HEAP32[$7_1 >> 2] = i64toi32_i32$0;
                                        HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$5;
                                        HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                        $11_1 = $11_1 + 4 | 0;
                                        break label$197;
                                       }
                                       $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                       $21_1 = +HEAPF64[$6_1 >> 3];
                                       break label$198;
                                      }
                                      i64toi32_i32$5 = $18$hi;
                                      i64toi32_i32$3 = $18_1;
                                      i64toi32_i32$4 = 0;
                                      $21_1 = +(i64toi32_i32$3 >>> 0) + 4294967296.0 * +(i64toi32_i32$5 | 0);
                                     }
                                     label$202 : {
                                      label$203 : {
                                       switch (($15_1 & 255 | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $22_1 = +HEAPF64[$14_1 >> 3];
                                        break label$202;
                                       case 0:
                                        break label$203;
                                       default:
                                        break label$197;
                                       };
                                      }
                                      i64toi32_i32$4 = $14_1;
                                      i64toi32_i32$5 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$3 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$4 = 0;
                                      $22_1 = +(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$3 | 0);
                                     }
                                     HEAPF64[$7_1 >> 3] = $21_1 - $22_1;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$205 : {
                                     label$206 : {
                                      if ($12_1) {
                                       break label$206
                                      }
                                      $12_1 = 0;
                                      break label$205;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 23:
                                    $14_1 = $10_1 + (($6_1 >>> 24 | 0) << 4 | 0) | 0;
                                    label$207 : {
                                     label$208 : {
                                      label$209 : {
                                       label$210 : {
                                        label$211 : {
                                         $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                         switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                         case 16:
                                          break label$210;
                                         case 0:
                                          break label$211;
                                         default:
                                          break label$207;
                                         };
                                        }
                                        i64toi32_i32$4 = $6_1;
                                        i64toi32_i32$3 = HEAP32[$6_1 >> 2] | 0;
                                        i64toi32_i32$5 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                        $18_1 = i64toi32_i32$3;
                                        $18$hi = i64toi32_i32$5;
                                        $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                        if (($15_1 | 0) != (3 | 0)) {
                                         break label$209
                                        }
                                        i64toi32_i32$4 = $14_1;
                                        i64toi32_i32$5 = HEAP32[$14_1 >> 2] | 0;
                                        i64toi32_i32$3 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                        $1280$hi = i64toi32_i32$3;
                                        i64toi32_i32$3 = $18$hi;
                                        i64toi32_i32$3 = $1280$hi;
                                        $302_1 = i64toi32_i32$5;
                                        i64toi32_i32$5 = $18$hi;
                                        i64toi32_i32$5 = __wasm_i64_mul($302_1 | 0, i64toi32_i32$3 | 0, $18_1 | 0, i64toi32_i32$5 | 0) | 0;
                                        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                                        $1282 = i64toi32_i32$5;
                                        i64toi32_i32$5 = $7_1;
                                        HEAP32[$7_1 >> 2] = $1282;
                                        HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$3;
                                        HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                        $11_1 = $11_1 + 4 | 0;
                                        break label$207;
                                       }
                                       $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                       $21_1 = +HEAPF64[$6_1 >> 3];
                                       break label$208;
                                      }
                                      i64toi32_i32$3 = $18$hi;
                                      i64toi32_i32$5 = $18_1;
                                      i64toi32_i32$4 = 0;
                                      $21_1 = +(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$3 | 0);
                                     }
                                     label$212 : {
                                      label$213 : {
                                       switch (($15_1 & 255 | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $22_1 = +HEAPF64[$14_1 >> 3];
                                        break label$212;
                                       case 0:
                                        break label$213;
                                       default:
                                        break label$207;
                                       };
                                      }
                                      i64toi32_i32$4 = $14_1;
                                      i64toi32_i32$3 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$5 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$4 = 0;
                                      $22_1 = +(i64toi32_i32$3 >>> 0) + 4294967296.0 * +(i64toi32_i32$5 | 0);
                                     }
                                     HEAPF64[$7_1 >> 3] = $21_1 * $22_1;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$215 : {
                                     label$216 : {
                                      if ($12_1) {
                                       break label$216
                                      }
                                      $12_1 = 0;
                                      break label$215;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 24:
                                    $14_1 = $10_1 + (($6_1 >>> 24 | 0) << 4 | 0) | 0;
                                    label$217 : {
                                     label$218 : {
                                      label$219 : {
                                       label$220 : {
                                        label$221 : {
                                         $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                         switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                         case 16:
                                          break label$220;
                                         case 0:
                                          break label$221;
                                         default:
                                          break label$217;
                                         };
                                        }
                                        $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                        if (($15_1 | 0) != (3 | 0)) {
                                         break label$219
                                        }
                                        label$222 : {
                                         label$223 : {
                                          i64toi32_i32$4 = $14_1;
                                          i64toi32_i32$5 = HEAP32[$14_1 >> 2] | 0;
                                          i64toi32_i32$3 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                          $18_1 = i64toi32_i32$5;
                                          $18$hi = i64toi32_i32$3;
                                          i64toi32_i32$4 = i64toi32_i32$5;
                                          i64toi32_i32$5 = 0;
                                          i64toi32_i32$1 = 1;
                                          i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                                          i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
                                          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                                           i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
                                          }
                                          i64toi32_i32$3 = i64toi32_i32$2;
                                          i64toi32_i32$4 = 0;
                                          i64toi32_i32$1 = 1;
                                          if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
                                           break label$223
                                          }
                                          i64toi32_i32$3 = 0;
                                          $19_1 = 0;
                                          $19$hi = i64toi32_i32$3;
                                          i64toi32_i32$3 = $18$hi;
                                          i64toi32_i32$1 = $18_1;
                                          i64toi32_i32$0 = 0;
                                          i64toi32_i32$4 = 0;
                                          if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
                                           break label$222
                                          }
                                          $187($0_1 | 0, 5269 | 0, 0 | 0);
                                          abort();
                                         }
                                         label$224 : {
                                          i64toi32_i32$4 = $6_1;
                                          i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
                                          i64toi32_i32$3 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                          $1350$hi = i64toi32_i32$3;
                                          i64toi32_i32$3 = $18$hi;
                                          i64toi32_i32$3 = $1350$hi;
                                          $303_1 = i64toi32_i32$1;
                                          i64toi32_i32$1 = $18$hi;
                                          i64toi32_i32$1 = __wasm_i64_srem($303_1 | 0, i64toi32_i32$3 | 0, $18_1 | 0, i64toi32_i32$1 | 0) | 0;
                                          i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                                          $19_1 = i64toi32_i32$1;
                                          $19$hi = i64toi32_i32$3;
                                          if (!!(i64toi32_i32$1 | i64toi32_i32$3 | 0)) {
                                           break label$224
                                          }
                                          i64toi32_i32$3 = 0;
                                          $19_1 = 0;
                                          $19$hi = i64toi32_i32$3;
                                          break label$222;
                                         }
                                         i64toi32_i32$3 = $19$hi;
                                         i64toi32_i32$3 = $18$hi;
                                         i64toi32_i32$3 = $19$hi;
                                         i64toi32_i32$4 = $19_1;
                                         i64toi32_i32$1 = $18$hi;
                                         i64toi32_i32$0 = $18_1;
                                         i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
                                         i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
                                         i64toi32_i32$4 = 0;
                                         i64toi32_i32$0 = 63;
                                         i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
                                         if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                                          i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
                                          $165_1 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
                                         } else {
                                          i64toi32_i32$4 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
                                          $165_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
                                         }
                                         $1359$hi = i64toi32_i32$4;
                                         i64toi32_i32$4 = $18$hi;
                                         i64toi32_i32$4 = $1359$hi;
                                         i64toi32_i32$1 = $165_1;
                                         i64toi32_i32$3 = $18$hi;
                                         i64toi32_i32$0 = $18_1;
                                         i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
                                         $1361$hi = i64toi32_i32$3;
                                         i64toi32_i32$3 = $19$hi;
                                         i64toi32_i32$3 = $1361$hi;
                                         i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
                                         i64toi32_i32$1 = $19$hi;
                                         i64toi32_i32$0 = $19_1;
                                         i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
                                         i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
                                         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                                          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
                                         }
                                         $19_1 = i64toi32_i32$5;
                                         $19$hi = i64toi32_i32$2;
                                        }
                                        $11_1 = $11_1 + 4 | 0;
                                        i64toi32_i32$2 = $19$hi;
                                        i64toi32_i32$4 = $7_1;
                                        HEAP32[$7_1 >> 2] = $19_1;
                                        HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$2;
                                        HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                        break label$217;
                                       }
                                       $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                       $22_1 = +HEAPF64[$6_1 >> 3];
                                       break label$218;
                                      }
                                      i64toi32_i32$3 = $6_1;
                                      i64toi32_i32$2 = HEAP32[$6_1 >> 2] | 0;
                                      i64toi32_i32$4 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$3 = 0;
                                      $22_1 = +(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$4 | 0);
                                     }
                                     label$225 : {
                                      label$226 : {
                                       switch (($15_1 & 255 | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $21_1 = +HEAPF64[$14_1 >> 3];
                                        break label$225;
                                       case 0:
                                        break label$226;
                                       default:
                                        break label$217;
                                       };
                                      }
                                      i64toi32_i32$3 = $14_1;
                                      i64toi32_i32$4 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$2 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$3 = 0;
                                      $21_1 = +(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0);
                                     }
                                     label$228 : {
                                      label$229 : {
                                       label$230 : {
                                        $22_1 = +$945(+$22_1, +$21_1);
                                        if ($22_1 > 0.0 ^ 1 | 0) {
                                         break label$230
                                        }
                                        if ($21_1 < 0.0) {
                                         break label$229
                                        }
                                        break label$228;
                                       }
                                       if ($21_1 > 0.0 ^ 1 | 0) {
                                        break label$228
                                       }
                                       if ($22_1 < 0.0 ^ 1 | 0) {
                                        break label$228
                                       }
                                      }
                                      $22_1 = $21_1 + $22_1;
                                     }
                                     $11_1 = $11_1 + 4 | 0;
                                     HEAPF64[$7_1 >> 3] = $22_1;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                    }
                                    label$231 : {
                                     label$232 : {
                                      if ($12_1) {
                                       break label$232
                                      }
                                      $12_1 = 0;
                                      break label$231;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 25:
                                    label$233 : {
                                     label$234 : {
                                      label$235 : {
                                       label$236 : {
                                        $14_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 0:
                                         break label$235;
                                        case 16:
                                         break label$236;
                                        default:
                                         break label$233;
                                        };
                                       }
                                       $21_1 = +HEAPF64[$14_1 >> 3];
                                       break label$234;
                                      }
                                      i64toi32_i32$3 = $14_1;
                                      i64toi32_i32$2 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$4 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$3 = 0;
                                      $21_1 = +(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$4 | 0);
                                     }
                                     $6_1 = $6_1 >>> 24 | 0;
                                     $14_1 = $10_1 + ($6_1 << 4 | 0) | 0;
                                     label$237 : {
                                      label$238 : {
                                       switch ((HEAPU8[(($10_1 + ($6_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $22_1 = +HEAPF64[$14_1 >> 3];
                                        break label$237;
                                       case 0:
                                        break label$238;
                                       default:
                                        break label$233;
                                       };
                                      }
                                      i64toi32_i32$3 = $14_1;
                                      i64toi32_i32$4 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$2 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$3 = 0;
                                      $22_1 = +(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0);
                                     }
                                     HEAPF64[$7_1 >> 3] = +$777(+$21_1, +$22_1);
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$240 : {
                                     label$241 : {
                                      if ($12_1) {
                                       break label$241
                                      }
                                      $12_1 = 0;
                                      break label$240;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 26:
                                    label$242 : {
                                     label$243 : {
                                      label$244 : {
                                       label$245 : {
                                        $14_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 0:
                                         break label$244;
                                        case 16:
                                         break label$245;
                                        default:
                                         break label$242;
                                        };
                                       }
                                       $21_1 = +HEAPF64[$14_1 >> 3];
                                       break label$243;
                                      }
                                      i64toi32_i32$3 = $14_1;
                                      i64toi32_i32$2 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$4 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$3 = 0;
                                      $21_1 = +(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$4 | 0);
                                     }
                                     $6_1 = $6_1 >>> 24 | 0;
                                     $14_1 = $10_1 + ($6_1 << 4 | 0) | 0;
                                     label$246 : {
                                      label$247 : {
                                       switch ((HEAPU8[(($10_1 + ($6_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $22_1 = +HEAPF64[$14_1 >> 3];
                                        break label$246;
                                       case 0:
                                        break label$247;
                                       default:
                                        break label$242;
                                       };
                                      }
                                      i64toi32_i32$3 = $14_1;
                                      i64toi32_i32$4 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$2 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$3 = 0;
                                      $22_1 = +(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0);
                                     }
                                     HEAPF64[$7_1 >> 3] = $21_1 / $22_1;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$249 : {
                                     label$250 : {
                                      if ($12_1) {
                                       break label$250
                                      }
                                      $12_1 = 0;
                                      break label$249;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 27:
                                    $14_1 = $10_1 + (($6_1 >>> 24 | 0) << 4 | 0) | 0;
                                    label$251 : {
                                     label$252 : {
                                      label$253 : {
                                       label$254 : {
                                        label$255 : {
                                         $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                         switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                         case 16:
                                          break label$254;
                                         case 0:
                                          break label$255;
                                         default:
                                          break label$251;
                                         };
                                        }
                                        i64toi32_i32$3 = $6_1;
                                        i64toi32_i32$2 = HEAP32[$6_1 >> 2] | 0;
                                        i64toi32_i32$4 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                        $18_1 = i64toi32_i32$2;
                                        $18$hi = i64toi32_i32$4;
                                        $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                        if (($15_1 | 0) != (3 | 0)) {
                                         break label$253
                                        }
                                        label$256 : {
                                         label$257 : {
                                          i64toi32_i32$3 = $14_1;
                                          i64toi32_i32$4 = HEAP32[$14_1 >> 2] | 0;
                                          i64toi32_i32$2 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                          $19_1 = i64toi32_i32$4;
                                          $19$hi = i64toi32_i32$2;
                                          i64toi32_i32$3 = i64toi32_i32$4;
                                          i64toi32_i32$4 = 0;
                                          i64toi32_i32$0 = 1;
                                          i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
                                          i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
                                          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
                                           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                                          }
                                          i64toi32_i32$2 = i64toi32_i32$1;
                                          i64toi32_i32$3 = 0;
                                          i64toi32_i32$0 = 1;
                                          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
                                           break label$257
                                          }
                                          i64toi32_i32$2 = $19$hi;
                                          i64toi32_i32$0 = $19_1;
                                          i64toi32_i32$5 = 0;
                                          i64toi32_i32$3 = 0;
                                          if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0) {
                                           break label$34
                                          }
                                          i64toi32_i32$0 = $18$hi;
                                          i64toi32_i32$0 = 0;
                                          i64toi32_i32$3 = 0;
                                          i64toi32_i32$2 = $18$hi;
                                          i64toi32_i32$5 = $18_1;
                                          i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
                                          i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
                                          i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
                                          i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
                                          $20_1 = i64toi32_i32$4;
                                          $20$hi = i64toi32_i32$1;
                                          break label$256;
                                         }
                                         i64toi32_i32$1 = $18$hi;
                                         i64toi32_i32$1 = $19$hi;
                                         i64toi32_i32$1 = $18$hi;
                                         i64toi32_i32$3 = $19$hi;
                                         i64toi32_i32$3 = __wasm_i64_sdiv($18_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0) | 0;
                                         i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                                         $20_1 = i64toi32_i32$3;
                                         $20$hi = i64toi32_i32$1;
                                         i64toi32_i32$1 = $19$hi;
                                         i64toi32_i32$1 = $18$hi;
                                         i64toi32_i32$1 = $19$hi;
                                         i64toi32_i32$0 = $19_1;
                                         i64toi32_i32$3 = $18$hi;
                                         i64toi32_i32$5 = $18_1;
                                         i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
                                         i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
                                         i64toi32_i32$0 = -1;
                                         i64toi32_i32$5 = -1;
                                         if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
                                          $166_1 = 1
                                         } else {
                                          if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
                                           if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$5 >>> 0) {
                                            $167_1 = 0
                                           } else {
                                            $167_1 = 1
                                           }
                                           $168_1 = $167_1;
                                          } else {
                                           $168_1 = 0
                                          }
                                          $166_1 = $168_1;
                                         }
                                         if ($166_1) {
                                          break label$256
                                         }
                                         i64toi32_i32$1 = $20$hi;
                                         i64toi32_i32$1 = $18$hi;
                                         i64toi32_i32$1 = $20$hi;
                                         i64toi32_i32$1 = $19$hi;
                                         i64toi32_i32$1 = $20$hi;
                                         i64toi32_i32$3 = $19$hi;
                                         i64toi32_i32$3 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0) | 0;
                                         i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
                                         $1564 = i64toi32_i32$3;
                                         $1564$hi = i64toi32_i32$1;
                                         i64toi32_i32$1 = $18$hi;
                                         i64toi32_i32$5 = $18_1;
                                         i64toi32_i32$3 = $1564$hi;
                                         i64toi32_i32$0 = $1564;
                                         i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
                                         i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
                                         i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
                                         i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
                                         i64toi32_i32$1 = i64toi32_i32$2;
                                         i64toi32_i32$5 = 0;
                                         i64toi32_i32$0 = 0;
                                         $1566 = (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | 0;
                                         i64toi32_i32$1 = 0;
                                         $1567$hi = i64toi32_i32$1;
                                         i64toi32_i32$1 = $20$hi;
                                         i64toi32_i32$0 = $20_1;
                                         i64toi32_i32$4 = $1567$hi;
                                         i64toi32_i32$5 = $1566;
                                         i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
                                         i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
                                         i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
                                         i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                                         $20_1 = i64toi32_i32$3;
                                         $20$hi = i64toi32_i32$2;
                                        }
                                        $11_1 = $11_1 + 4 | 0;
                                        i64toi32_i32$2 = $20$hi;
                                        i64toi32_i32$0 = $7_1;
                                        HEAP32[$7_1 >> 2] = $20_1;
                                        HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$2;
                                        HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                        break label$251;
                                       }
                                       $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                       $21_1 = +HEAPF64[$6_1 >> 3];
                                       break label$252;
                                      }
                                      i64toi32_i32$2 = $18$hi;
                                      i64toi32_i32$0 = $18_1;
                                      i64toi32_i32$1 = 0;
                                      $21_1 = +(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0);
                                     }
                                     label$258 : {
                                      label$259 : {
                                       switch (($15_1 & 255 | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $22_1 = +HEAPF64[$14_1 >> 3];
                                        break label$258;
                                       case 0:
                                        break label$259;
                                       default:
                                        break label$251;
                                       };
                                      }
                                      i64toi32_i32$1 = $14_1;
                                      i64toi32_i32$2 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$0 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$1 = 0;
                                      $22_1 = +(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0);
                                     }
                                     HEAPF64[$7_1 >> 3] = Math_floor($21_1 / $22_1);
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$261 : {
                                     label$262 : {
                                      if ($12_1) {
                                       break label$262
                                      }
                                      $12_1 = 0;
                                      break label$261;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 28:
                                    i64toi32_i32$1 = $10_1 + (($6_1 >>> 20 | 0) & 4080 | 0) | 0;
                                    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
                                    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
                                    $18_1 = i64toi32_i32$0;
                                    $18$hi = i64toi32_i32$2;
                                    label$263 : {
                                     label$264 : {
                                      label$265 : {
                                       label$266 : {
                                        $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 16:
                                         break label$265;
                                        case 0:
                                         break label$266;
                                        default:
                                         break label$263;
                                        };
                                       }
                                       i64toi32_i32$1 = $6_1;
                                       i64toi32_i32$2 = HEAP32[$6_1 >> 2] | 0;
                                       i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                       $19_1 = i64toi32_i32$2;
                                       $19$hi = i64toi32_i32$0;
                                       break label$264;
                                      }
                                      $21_1 = +HEAPF64[$6_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$263
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$263
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$263
                                      }
                                      label$267 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$267
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $169_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $169_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $170_1 = $169_1;
                                       } else {
                                        $170_1 = 0
                                       }
                                       i64toi32_i32$0 = $170_1;
                                       $19_1 = ~~i64toi32_i32$7 >>> 0;
                                       $19$hi = i64toi32_i32$0;
                                       break label$264;
                                      }
                                      i64toi32_i32$0 = -2147483648;
                                      $19_1 = 0;
                                      $19$hi = i64toi32_i32$0;
                                     }
                                     i64toi32_i32$0 = $19$hi;
                                     i64toi32_i32$0 = $18$hi;
                                     i64toi32_i32$0 = $19$hi;
                                     i64toi32_i32$1 = $19_1;
                                     i64toi32_i32$2 = $18$hi;
                                     i64toi32_i32$5 = $18_1;
                                     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
                                     $1651 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
                                     i64toi32_i32$1 = $7_1;
                                     HEAP32[$7_1 >> 2] = $1651;
                                     HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$2;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$268 : {
                                     label$269 : {
                                      if ($12_1) {
                                       break label$269
                                      }
                                      $12_1 = 0;
                                      break label$268;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 29:
                                    i64toi32_i32$0 = $10_1 + (($6_1 >>> 20 | 0) & 4080 | 0) | 0;
                                    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                                    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                                    $18_1 = i64toi32_i32$2;
                                    $18$hi = i64toi32_i32$1;
                                    label$270 : {
                                     label$271 : {
                                      label$272 : {
                                       label$273 : {
                                        $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 16:
                                         break label$272;
                                        case 0:
                                         break label$273;
                                        default:
                                         break label$270;
                                        };
                                       }
                                       i64toi32_i32$0 = $6_1;
                                       i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
                                       i64toi32_i32$2 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                       $19_1 = i64toi32_i32$1;
                                       $19$hi = i64toi32_i32$2;
                                       break label$271;
                                      }
                                      $21_1 = +HEAPF64[$6_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$270
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$270
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$270
                                      }
                                      label$274 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$274
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $171_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $171_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $172_1 = $171_1;
                                       } else {
                                        $172_1 = 0
                                       }
                                       i64toi32_i32$2 = $172_1;
                                       $19_1 = ~~i64toi32_i32$7 >>> 0;
                                       $19$hi = i64toi32_i32$2;
                                       break label$271;
                                      }
                                      i64toi32_i32$2 = -2147483648;
                                      $19_1 = 0;
                                      $19$hi = i64toi32_i32$2;
                                     }
                                     i64toi32_i32$2 = $19$hi;
                                     i64toi32_i32$2 = $18$hi;
                                     i64toi32_i32$2 = $19$hi;
                                     i64toi32_i32$0 = $19_1;
                                     i64toi32_i32$1 = $18$hi;
                                     i64toi32_i32$5 = $18_1;
                                     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
                                     $1707 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
                                     i64toi32_i32$0 = $7_1;
                                     HEAP32[$7_1 >> 2] = $1707;
                                     HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$1;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$275 : {
                                     label$276 : {
                                      if ($12_1) {
                                       break label$276
                                      }
                                      $12_1 = 0;
                                      break label$275;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 30:
                                    i64toi32_i32$2 = $10_1 + (($6_1 >>> 20 | 0) & 4080 | 0) | 0;
                                    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                                    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                                    $18_1 = i64toi32_i32$1;
                                    $18$hi = i64toi32_i32$0;
                                    label$277 : {
                                     label$278 : {
                                      label$279 : {
                                       label$280 : {
                                        $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 16:
                                         break label$279;
                                        case 0:
                                         break label$280;
                                        default:
                                         break label$277;
                                        };
                                       }
                                       i64toi32_i32$2 = $6_1;
                                       i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
                                       i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                       $19_1 = i64toi32_i32$0;
                                       $19$hi = i64toi32_i32$1;
                                       break label$278;
                                      }
                                      $21_1 = +HEAPF64[$6_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$277
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$277
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$277
                                      }
                                      label$281 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$281
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $173_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $173_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $174_1 = $173_1;
                                       } else {
                                        $174_1 = 0
                                       }
                                       i64toi32_i32$1 = $174_1;
                                       $19_1 = ~~i64toi32_i32$7 >>> 0;
                                       $19$hi = i64toi32_i32$1;
                                       break label$278;
                                      }
                                      i64toi32_i32$1 = -2147483648;
                                      $19_1 = 0;
                                      $19$hi = i64toi32_i32$1;
                                     }
                                     i64toi32_i32$1 = $19$hi;
                                     i64toi32_i32$1 = $18$hi;
                                     i64toi32_i32$1 = $19$hi;
                                     i64toi32_i32$2 = $19_1;
                                     i64toi32_i32$0 = $18$hi;
                                     i64toi32_i32$5 = $18_1;
                                     i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
                                     $1763 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
                                     i64toi32_i32$2 = $7_1;
                                     HEAP32[$7_1 >> 2] = $1763;
                                     HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$282 : {
                                     label$283 : {
                                      if ($12_1) {
                                       break label$283
                                      }
                                      $12_1 = 0;
                                      break label$282;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 31:
                                    label$284 : {
                                     label$285 : {
                                      label$286 : {
                                       label$287 : {
                                        $14_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 16:
                                         break label$286;
                                        case 0:
                                         break label$287;
                                        default:
                                         break label$284;
                                        };
                                       }
                                       i64toi32_i32$1 = $14_1;
                                       i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
                                       i64toi32_i32$2 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                       $18_1 = i64toi32_i32$0;
                                       $18$hi = i64toi32_i32$2;
                                       break label$285;
                                      }
                                      $21_1 = +HEAPF64[$14_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$284
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$284
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$284
                                      }
                                      label$288 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$288
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $176_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $176_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $177_1 = $176_1;
                                       } else {
                                        $177_1 = 0
                                       }
                                       i64toi32_i32$2 = $177_1;
                                       $18_1 = ~~i64toi32_i32$7 >>> 0;
                                       $18$hi = i64toi32_i32$2;
                                       break label$285;
                                      }
                                      i64toi32_i32$2 = -2147483648;
                                      $18_1 = 0;
                                      $18$hi = i64toi32_i32$2;
                                     }
                                     i64toi32_i32$0 = 127 - ($6_1 >>> 24 | 0) | 0;
                                     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
                                     $19_1 = i64toi32_i32$0;
                                     $19$hi = i64toi32_i32$2;
                                     label$289 : {
                                      label$290 : {
                                       if (($6_1 | 0) > (-1 | 0)) {
                                        break label$290
                                       }
                                       i64toi32_i32$2 = $18$hi;
                                       i64toi32_i32$2 = $19$hi;
                                       i64toi32_i32$2 = 0;
                                       i64toi32_i32$1 = 0;
                                       i64toi32_i32$0 = $19$hi;
                                       i64toi32_i32$5 = $19_1;
                                       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
                                       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
                                       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
                                       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
                                       $1818$hi = i64toi32_i32$3;
                                       i64toi32_i32$3 = $18$hi;
                                       i64toi32_i32$2 = $18_1;
                                       i64toi32_i32$1 = $1818$hi;
                                       i64toi32_i32$5 = i64toi32_i32$4;
                                       i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
                                       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                                        i64toi32_i32$1 = 0;
                                        $178_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
                                       } else {
                                        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
                                        $178_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
                                       }
                                       $1819$hi = i64toi32_i32$1;
                                       i64toi32_i32$0 = $6_1 >>> 0 > -1090519041 >>> 0;
                                       i64toi32_i32$1 = 0;
                                       i64toi32_i32$2 = $1819$hi;
                                       i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $178_1;
                                       i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$2;
                                       $18_1 = i64toi32_i32$5;
                                       $18$hi = i64toi32_i32$3;
                                       break label$289;
                                      }
                                      i64toi32_i32$3 = $18$hi;
                                      i64toi32_i32$3 = $19$hi;
                                      i64toi32_i32$3 = $18$hi;
                                      i64toi32_i32$0 = $18_1;
                                      i64toi32_i32$5 = $19$hi;
                                      i64toi32_i32$1 = $19_1;
                                      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
                                      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                                       i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
                                       $179_1 = 0;
                                      } else {
                                       i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
                                       $179_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
                                      }
                                      $1825$hi = i64toi32_i32$5;
                                      i64toi32_i32$2 = $6_1 >>> 0 < 1073741824 >>> 0;
                                      i64toi32_i32$5 = 0;
                                      i64toi32_i32$0 = $1825$hi;
                                      i64toi32_i32$1 = i64toi32_i32$2 ? 0 : $179_1;
                                      i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$0;
                                      $18_1 = i64toi32_i32$1;
                                      $18$hi = i64toi32_i32$3;
                                     }
                                     i64toi32_i32$3 = $18$hi;
                                     i64toi32_i32$1 = $7_1;
                                     HEAP32[$7_1 >> 2] = $18_1;
                                     HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$3;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$291 : {
                                     label$292 : {
                                      if ($12_1) {
                                       break label$292
                                      }
                                      $12_1 = 0;
                                      break label$291;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 32:
                                    label$293 : {
                                     label$294 : {
                                      label$295 : {
                                       label$296 : {
                                        $14_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 16:
                                         break label$295;
                                        case 0:
                                         break label$296;
                                        default:
                                         break label$293;
                                        };
                                       }
                                       i64toi32_i32$2 = $14_1;
                                       i64toi32_i32$3 = HEAP32[$14_1 >> 2] | 0;
                                       i64toi32_i32$1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                       $18_1 = i64toi32_i32$3;
                                       $18$hi = i64toi32_i32$1;
                                       break label$294;
                                      }
                                      $21_1 = +HEAPF64[$14_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$293
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$293
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$293
                                      }
                                      label$297 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$297
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $180_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $180_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $181_1 = $180_1;
                                       } else {
                                        $181_1 = 0
                                       }
                                       i64toi32_i32$1 = $181_1;
                                       $18_1 = ~~i64toi32_i32$7 >>> 0;
                                       $18$hi = i64toi32_i32$1;
                                       break label$294;
                                      }
                                      i64toi32_i32$1 = -2147483648;
                                      $18_1 = 0;
                                      $18$hi = i64toi32_i32$1;
                                     }
                                     i64toi32_i32$3 = ($6_1 >>> 24 | 0) + -127 | 0;
                                     i64toi32_i32$1 = i64toi32_i32$3 >> 31 | 0;
                                     $19_1 = i64toi32_i32$3;
                                     $19$hi = i64toi32_i32$1;
                                     label$298 : {
                                      label$299 : {
                                       i64toi32_i32$1 = $18$hi;
                                       i64toi32_i32$2 = $18_1;
                                       i64toi32_i32$3 = -1;
                                       i64toi32_i32$5 = -1;
                                       if ((i64toi32_i32$1 | 0) > (i64toi32_i32$3 | 0)) {
                                        $182_1 = 1
                                       } else {
                                        if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$3 | 0)) {
                                         if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
                                          $183_1 = 0
                                         } else {
                                          $183_1 = 1
                                         }
                                         $184_1 = $183_1;
                                        } else {
                                         $184_1 = 0
                                        }
                                        $182_1 = $184_1;
                                       }
                                       if ($182_1) {
                                        break label$299
                                       }
                                       i64toi32_i32$2 = $19$hi;
                                       i64toi32_i32$2 = $18$hi;
                                       i64toi32_i32$2 = 0;
                                       i64toi32_i32$5 = 0;
                                       i64toi32_i32$1 = $18$hi;
                                       i64toi32_i32$3 = $18_1;
                                       i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
                                       i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
                                       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
                                       i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
                                       $1885$hi = i64toi32_i32$4;
                                       i64toi32_i32$4 = $19$hi;
                                       i64toi32_i32$2 = $19_1;
                                       i64toi32_i32$5 = $1885$hi;
                                       i64toi32_i32$3 = i64toi32_i32$0;
                                       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
                                       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                                        i64toi32_i32$5 = 0;
                                        $185_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
                                       } else {
                                        i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
                                        $185_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
                                       }
                                       $1886 = $185_1;
                                       $1886$hi = i64toi32_i32$5;
                                       i64toi32_i32$5 = $18$hi;
                                       i64toi32_i32$4 = $18_1;
                                       i64toi32_i32$2 = -1;
                                       i64toi32_i32$3 = -63;
                                       if ((i64toi32_i32$5 | 0) < (i64toi32_i32$2 | 0)) {
                                        $186_1 = 1
                                       } else {
                                        if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$2 | 0)) {
                                         if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$3 >>> 0) {
                                          $187_1 = 0
                                         } else {
                                          $187_1 = 1
                                         }
                                         $188_1 = $187_1;
                                        } else {
                                         $188_1 = 0
                                        }
                                        $186_1 = $188_1;
                                       }
                                       i64toi32_i32$1 = $186_1;
                                       i64toi32_i32$4 = 0;
                                       i64toi32_i32$5 = $1886$hi;
                                       i64toi32_i32$2 = i64toi32_i32$1 ? 0 : $1886;
                                       i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$4 : i64toi32_i32$5;
                                       $18_1 = i64toi32_i32$2;
                                       $18$hi = i64toi32_i32$3;
                                       break label$298;
                                      }
                                      i64toi32_i32$3 = $19$hi;
                                      i64toi32_i32$3 = $18$hi;
                                      i64toi32_i32$3 = $19$hi;
                                      i64toi32_i32$1 = $19_1;
                                      i64toi32_i32$2 = $18$hi;
                                      i64toi32_i32$4 = $18_1;
                                      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
                                      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
                                       i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
                                       $189_1 = 0;
                                      } else {
                                       i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
                                       $189_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
                                      }
                                      $1892 = $189_1;
                                      $1892$hi = i64toi32_i32$2;
                                      i64toi32_i32$2 = $18$hi;
                                      i64toi32_i32$3 = $18_1;
                                      i64toi32_i32$1 = 0;
                                      i64toi32_i32$4 = 63;
                                      if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
                                       $190_1 = 1
                                      } else {
                                       if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
                                        if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
                                         $191_1 = 0
                                        } else {
                                         $191_1 = 1
                                        }
                                        $192_1 = $191_1;
                                       } else {
                                        $192_1 = 0
                                       }
                                       $190_1 = $192_1;
                                      }
                                      i64toi32_i32$5 = $190_1;
                                      i64toi32_i32$3 = 0;
                                      i64toi32_i32$2 = $1892$hi;
                                      i64toi32_i32$1 = i64toi32_i32$5 ? 0 : $1892;
                                      i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$2;
                                      $18_1 = i64toi32_i32$1;
                                      $18$hi = i64toi32_i32$4;
                                     }
                                     i64toi32_i32$4 = $18$hi;
                                     i64toi32_i32$1 = $7_1;
                                     HEAP32[$7_1 >> 2] = $18_1;
                                     HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$4;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$300 : {
                                     label$301 : {
                                      if ($12_1) {
                                       break label$301
                                      }
                                      $12_1 = 0;
                                      break label$300;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 33:
                                    $14_1 = $9_1 + (($6_1 >>> 24 | 0) << 4 | 0) | 0;
                                    label$302 : {
                                     label$303 : {
                                      label$304 : {
                                       label$305 : {
                                        label$306 : {
                                         $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                         switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                         case 16:
                                          break label$305;
                                         case 0:
                                          break label$306;
                                         default:
                                          break label$302;
                                         };
                                        }
                                        i64toi32_i32$5 = $6_1;
                                        i64toi32_i32$4 = HEAP32[$6_1 >> 2] | 0;
                                        i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                        $18_1 = i64toi32_i32$4;
                                        $18$hi = i64toi32_i32$1;
                                        $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                        if (($15_1 | 0) != (3 | 0)) {
                                         break label$304
                                        }
                                        $1934 = $7_1;
                                        i64toi32_i32$5 = $14_1;
                                        i64toi32_i32$1 = HEAP32[$14_1 >> 2] | 0;
                                        i64toi32_i32$4 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                        $1936$hi = i64toi32_i32$4;
                                        i64toi32_i32$4 = $18$hi;
                                        i64toi32_i32$4 = $1936$hi;
                                        i64toi32_i32$5 = i64toi32_i32$1;
                                        i64toi32_i32$1 = $18$hi;
                                        i64toi32_i32$3 = $18_1;
                                        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                                        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                                        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                                         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
                                        }
                                        i64toi32_i32$5 = $1934;
                                        HEAP32[i64toi32_i32$5 >> 2] = i64toi32_i32$2;
                                        HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
                                        HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                        $11_1 = $11_1 + 4 | 0;
                                        break label$302;
                                       }
                                       $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                       $21_1 = +HEAPF64[$6_1 >> 3];
                                       break label$303;
                                      }
                                      i64toi32_i32$0 = $18$hi;
                                      i64toi32_i32$5 = $18_1;
                                      i64toi32_i32$4 = 0;
                                      $21_1 = +(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0);
                                     }
                                     label$307 : {
                                      label$308 : {
                                       switch (($15_1 & 255 | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $22_1 = +HEAPF64[$14_1 >> 3];
                                        break label$307;
                                       case 0:
                                        break label$308;
                                       default:
                                        break label$302;
                                       };
                                      }
                                      i64toi32_i32$4 = $14_1;
                                      i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$5 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$4 = 0;
                                      $22_1 = +(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$5 | 0);
                                     }
                                     HEAPF64[$7_1 >> 3] = $21_1 + $22_1;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$310 : {
                                     label$311 : {
                                      if ($12_1) {
                                       break label$311
                                      }
                                      $12_1 = 0;
                                      break label$310;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 34:
                                    $14_1 = $9_1 + (($6_1 >>> 24 | 0) << 4 | 0) | 0;
                                    label$312 : {
                                     label$313 : {
                                      label$314 : {
                                       label$315 : {
                                        label$316 : {
                                         $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                         switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                         case 16:
                                          break label$315;
                                         case 0:
                                          break label$316;
                                         default:
                                          break label$312;
                                         };
                                        }
                                        i64toi32_i32$4 = $6_1;
                                        i64toi32_i32$5 = HEAP32[$6_1 >> 2] | 0;
                                        i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                        $18_1 = i64toi32_i32$5;
                                        $18$hi = i64toi32_i32$0;
                                        $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                        if (($15_1 | 0) != (3 | 0)) {
                                         break label$314
                                        }
                                        i64toi32_i32$0 = $18$hi;
                                        i64toi32_i32$4 = $14_1;
                                        i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
                                        i64toi32_i32$5 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                        $2002 = i64toi32_i32$0;
                                        $2002$hi = i64toi32_i32$5;
                                        i64toi32_i32$5 = $18$hi;
                                        i64toi32_i32$4 = $18_1;
                                        i64toi32_i32$0 = $2002$hi;
                                        i64toi32_i32$3 = $2002;
                                        i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
                                        i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
                                        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
                                        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
                                        i64toi32_i32$4 = $7_1;
                                        HEAP32[$7_1 >> 2] = i64toi32_i32$1;
                                        HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$2;
                                        HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                        $11_1 = $11_1 + 4 | 0;
                                        break label$312;
                                       }
                                       $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                       $21_1 = +HEAPF64[$6_1 >> 3];
                                       break label$313;
                                      }
                                      i64toi32_i32$2 = $18$hi;
                                      i64toi32_i32$4 = $18_1;
                                      i64toi32_i32$5 = 0;
                                      $21_1 = +(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0);
                                     }
                                     label$317 : {
                                      label$318 : {
                                       switch (($15_1 & 255 | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $22_1 = +HEAPF64[$14_1 >> 3];
                                        break label$317;
                                       case 0:
                                        break label$318;
                                       default:
                                        break label$312;
                                       };
                                      }
                                      i64toi32_i32$5 = $14_1;
                                      i64toi32_i32$2 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$4 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$5 = 0;
                                      $22_1 = +(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$4 | 0);
                                     }
                                     HEAPF64[$7_1 >> 3] = $21_1 - $22_1;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$320 : {
                                     label$321 : {
                                      if ($12_1) {
                                       break label$321
                                      }
                                      $12_1 = 0;
                                      break label$320;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 35:
                                    $14_1 = $9_1 + (($6_1 >>> 24 | 0) << 4 | 0) | 0;
                                    label$322 : {
                                     label$323 : {
                                      label$324 : {
                                       label$325 : {
                                        label$326 : {
                                         $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                         switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                         case 16:
                                          break label$325;
                                         case 0:
                                          break label$326;
                                         default:
                                          break label$322;
                                         };
                                        }
                                        i64toi32_i32$5 = $6_1;
                                        i64toi32_i32$4 = HEAP32[$6_1 >> 2] | 0;
                                        i64toi32_i32$2 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                        $18_1 = i64toi32_i32$4;
                                        $18$hi = i64toi32_i32$2;
                                        $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                        if (($15_1 | 0) != (3 | 0)) {
                                         break label$324
                                        }
                                        i64toi32_i32$5 = $14_1;
                                        i64toi32_i32$2 = HEAP32[$14_1 >> 2] | 0;
                                        i64toi32_i32$4 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                        $2066$hi = i64toi32_i32$4;
                                        i64toi32_i32$4 = $18$hi;
                                        i64toi32_i32$4 = $2066$hi;
                                        $304_1 = i64toi32_i32$2;
                                        i64toi32_i32$2 = $18$hi;
                                        i64toi32_i32$2 = __wasm_i64_mul($304_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$2 | 0) | 0;
                                        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                                        $2068 = i64toi32_i32$2;
                                        i64toi32_i32$2 = $7_1;
                                        HEAP32[$7_1 >> 2] = $2068;
                                        HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$4;
                                        HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                        $11_1 = $11_1 + 4 | 0;
                                        break label$322;
                                       }
                                       $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                       $21_1 = +HEAPF64[$6_1 >> 3];
                                       break label$323;
                                      }
                                      i64toi32_i32$4 = $18$hi;
                                      i64toi32_i32$2 = $18_1;
                                      i64toi32_i32$5 = 0;
                                      $21_1 = +(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$4 | 0);
                                     }
                                     label$327 : {
                                      label$328 : {
                                       switch (($15_1 & 255 | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $22_1 = +HEAPF64[$14_1 >> 3];
                                        break label$327;
                                       case 0:
                                        break label$328;
                                       default:
                                        break label$322;
                                       };
                                      }
                                      i64toi32_i32$5 = $14_1;
                                      i64toi32_i32$4 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$2 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$5 = 0;
                                      $22_1 = +(i64toi32_i32$4 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0);
                                     }
                                     HEAPF64[$7_1 >> 3] = $21_1 * $22_1;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$330 : {
                                     label$331 : {
                                      if ($12_1) {
                                       break label$331
                                      }
                                      $12_1 = 0;
                                      break label$330;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 36:
                                    $14_1 = $9_1 + (($6_1 >>> 24 | 0) << 4 | 0) | 0;
                                    label$332 : {
                                     label$333 : {
                                      label$334 : {
                                       label$335 : {
                                        label$336 : {
                                         $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                         switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                         case 16:
                                          break label$335;
                                         case 0:
                                          break label$336;
                                         default:
                                          break label$332;
                                         };
                                        }
                                        $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                        if (($15_1 | 0) != (3 | 0)) {
                                         break label$334
                                        }
                                        label$337 : {
                                         label$338 : {
                                          i64toi32_i32$5 = $14_1;
                                          i64toi32_i32$2 = HEAP32[$14_1 >> 2] | 0;
                                          i64toi32_i32$4 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                          $18_1 = i64toi32_i32$2;
                                          $18$hi = i64toi32_i32$4;
                                          i64toi32_i32$5 = i64toi32_i32$2;
                                          i64toi32_i32$2 = 0;
                                          i64toi32_i32$3 = 1;
                                          i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                                          i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
                                          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                                           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
                                          }
                                          i64toi32_i32$4 = i64toi32_i32$0;
                                          i64toi32_i32$5 = 0;
                                          i64toi32_i32$3 = 1;
                                          if (i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
                                           break label$338
                                          }
                                          i64toi32_i32$4 = 0;
                                          $19_1 = 0;
                                          $19$hi = i64toi32_i32$4;
                                          i64toi32_i32$4 = $18$hi;
                                          i64toi32_i32$3 = $18_1;
                                          i64toi32_i32$1 = 0;
                                          i64toi32_i32$5 = 0;
                                          if ((i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | 0) {
                                           break label$337
                                          }
                                          $187($0_1 | 0, 5269 | 0, 0 | 0);
                                          abort();
                                         }
                                         label$339 : {
                                          i64toi32_i32$5 = $6_1;
                                          i64toi32_i32$3 = HEAP32[$6_1 >> 2] | 0;
                                          i64toi32_i32$4 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                          $2136$hi = i64toi32_i32$4;
                                          i64toi32_i32$4 = $18$hi;
                                          i64toi32_i32$4 = $2136$hi;
                                          $305_1 = i64toi32_i32$3;
                                          i64toi32_i32$3 = $18$hi;
                                          i64toi32_i32$3 = __wasm_i64_srem($305_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$3 | 0) | 0;
                                          i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
                                          $19_1 = i64toi32_i32$3;
                                          $19$hi = i64toi32_i32$4;
                                          if (!!(i64toi32_i32$3 | i64toi32_i32$4 | 0)) {
                                           break label$339
                                          }
                                          i64toi32_i32$4 = 0;
                                          $19_1 = 0;
                                          $19$hi = i64toi32_i32$4;
                                          break label$337;
                                         }
                                         i64toi32_i32$4 = $19$hi;
                                         i64toi32_i32$4 = $18$hi;
                                         i64toi32_i32$4 = $19$hi;
                                         i64toi32_i32$5 = $19_1;
                                         i64toi32_i32$3 = $18$hi;
                                         i64toi32_i32$1 = $18_1;
                                         i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
                                         i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
                                         i64toi32_i32$5 = 0;
                                         i64toi32_i32$1 = 63;
                                         i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
                                         if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                                          i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
                                          $193_1 = i64toi32_i32$3 >> i64toi32_i32$2 | 0;
                                         } else {
                                          i64toi32_i32$5 = i64toi32_i32$3 >> i64toi32_i32$2 | 0;
                                          $193_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
                                         }
                                         $2145$hi = i64toi32_i32$5;
                                         i64toi32_i32$5 = $18$hi;
                                         i64toi32_i32$5 = $2145$hi;
                                         i64toi32_i32$3 = $193_1;
                                         i64toi32_i32$4 = $18$hi;
                                         i64toi32_i32$1 = $18_1;
                                         i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
                                         $2147$hi = i64toi32_i32$4;
                                         i64toi32_i32$4 = $19$hi;
                                         i64toi32_i32$4 = $2147$hi;
                                         i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
                                         i64toi32_i32$3 = $19$hi;
                                         i64toi32_i32$1 = $19_1;
                                         i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
                                         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                                         if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                                          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
                                         }
                                         $19_1 = i64toi32_i32$2;
                                         $19$hi = i64toi32_i32$0;
                                        }
                                        $11_1 = $11_1 + 4 | 0;
                                        i64toi32_i32$0 = $19$hi;
                                        i64toi32_i32$5 = $7_1;
                                        HEAP32[$7_1 >> 2] = $19_1;
                                        HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                        HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                        break label$332;
                                       }
                                       $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                       $22_1 = +HEAPF64[$6_1 >> 3];
                                       break label$333;
                                      }
                                      i64toi32_i32$4 = $6_1;
                                      i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
                                      i64toi32_i32$5 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$4 = 0;
                                      $22_1 = +(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$5 | 0);
                                     }
                                     label$340 : {
                                      label$341 : {
                                       switch (($15_1 & 255 | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $21_1 = +HEAPF64[$14_1 >> 3];
                                        break label$340;
                                       case 0:
                                        break label$341;
                                       default:
                                        break label$332;
                                       };
                                      }
                                      i64toi32_i32$4 = $14_1;
                                      i64toi32_i32$5 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$0 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$4 = 0;
                                      $21_1 = +(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0);
                                     }
                                     label$343 : {
                                      label$344 : {
                                       label$345 : {
                                        $22_1 = +$945(+$22_1, +$21_1);
                                        if ($22_1 > 0.0 ^ 1 | 0) {
                                         break label$345
                                        }
                                        if ($21_1 < 0.0) {
                                         break label$344
                                        }
                                        break label$343;
                                       }
                                       if ($21_1 > 0.0 ^ 1 | 0) {
                                        break label$343
                                       }
                                       if ($22_1 < 0.0 ^ 1 | 0) {
                                        break label$343
                                       }
                                      }
                                      $22_1 = $21_1 + $22_1;
                                     }
                                     $11_1 = $11_1 + 4 | 0;
                                     HEAPF64[$7_1 >> 3] = $22_1;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                    }
                                    label$346 : {
                                     label$347 : {
                                      if ($12_1) {
                                       break label$347
                                      }
                                      $12_1 = 0;
                                      break label$346;
                                     }
                                     $7_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                     $12_1 = $7_1;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 37:
                                    label$348 : {
                                     label$349 : {
                                      label$350 : {
                                       label$351 : {
                                        $14_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 0:
                                         break label$350;
                                        case 16:
                                         break label$351;
                                        default:
                                         break label$348;
                                        };
                                       }
                                       $21_1 = +HEAPF64[$14_1 >> 3];
                                       break label$349;
                                      }
                                      i64toi32_i32$4 = $14_1;
                                      i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$5 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$4 = 0;
                                      $21_1 = +(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$5 | 0);
                                     }
                                     $6_1 = $6_1 >>> 24 | 0;
                                     $14_1 = $9_1 + ($6_1 << 4 | 0) | 0;
                                     label$352 : {
                                      label$353 : {
                                       switch ((HEAPU8[(($9_1 + ($6_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $22_1 = +HEAPF64[$14_1 >> 3];
                                        break label$352;
                                       case 0:
                                        break label$353;
                                       default:
                                        break label$348;
                                       };
                                      }
                                      i64toi32_i32$4 = $14_1;
                                      i64toi32_i32$5 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$0 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$4 = 0;
                                      $22_1 = +(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0);
                                     }
                                     HEAPF64[$7_1 >> 3] = +$777(+$21_1, +$22_1);
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$355 : {
                                     label$356 : {
                                      if ($12_1) {
                                       break label$356
                                      }
                                      $12_1 = 0;
                                      break label$355;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 38:
                                    label$357 : {
                                     label$358 : {
                                      label$359 : {
                                       label$360 : {
                                        $14_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 0:
                                         break label$359;
                                        case 16:
                                         break label$360;
                                        default:
                                         break label$357;
                                        };
                                       }
                                       $21_1 = +HEAPF64[$14_1 >> 3];
                                       break label$358;
                                      }
                                      i64toi32_i32$4 = $14_1;
                                      i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$5 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$4 = 0;
                                      $21_1 = +(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$5 | 0);
                                     }
                                     $6_1 = $6_1 >>> 24 | 0;
                                     $14_1 = $9_1 + ($6_1 << 4 | 0) | 0;
                                     label$361 : {
                                      label$362 : {
                                       switch ((HEAPU8[(($9_1 + ($6_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $22_1 = +HEAPF64[$14_1 >> 3];
                                        break label$361;
                                       case 0:
                                        break label$362;
                                       default:
                                        break label$357;
                                       };
                                      }
                                      i64toi32_i32$4 = $14_1;
                                      i64toi32_i32$5 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$0 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$4 = 0;
                                      $22_1 = +(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0);
                                     }
                                     HEAPF64[$7_1 >> 3] = $21_1 / $22_1;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$364 : {
                                     label$365 : {
                                      if ($12_1) {
                                       break label$365
                                      }
                                      $12_1 = 0;
                                      break label$364;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 39:
                                    $14_1 = $9_1 + (($6_1 >>> 24 | 0) << 4 | 0) | 0;
                                    label$366 : {
                                     label$367 : {
                                      label$368 : {
                                       label$369 : {
                                        label$370 : {
                                         $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                         switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                         case 16:
                                          break label$369;
                                         case 0:
                                          break label$370;
                                         default:
                                          break label$366;
                                         };
                                        }
                                        i64toi32_i32$4 = $6_1;
                                        i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
                                        i64toi32_i32$5 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                        $18_1 = i64toi32_i32$0;
                                        $18$hi = i64toi32_i32$5;
                                        $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                        if (($15_1 | 0) != (3 | 0)) {
                                         break label$368
                                        }
                                        label$371 : {
                                         label$372 : {
                                          i64toi32_i32$4 = $14_1;
                                          i64toi32_i32$5 = HEAP32[$14_1 >> 2] | 0;
                                          i64toi32_i32$0 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                          $19_1 = i64toi32_i32$5;
                                          $19$hi = i64toi32_i32$0;
                                          i64toi32_i32$4 = i64toi32_i32$5;
                                          i64toi32_i32$5 = 0;
                                          i64toi32_i32$1 = 1;
                                          i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                                          i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
                                          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
                                           i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
                                          }
                                          i64toi32_i32$0 = i64toi32_i32$3;
                                          i64toi32_i32$4 = 0;
                                          i64toi32_i32$1 = 1;
                                          if (i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
                                           break label$372
                                          }
                                          i64toi32_i32$0 = $19$hi;
                                          i64toi32_i32$1 = $19_1;
                                          i64toi32_i32$2 = 0;
                                          i64toi32_i32$4 = 0;
                                          if ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
                                           break label$35
                                          }
                                          i64toi32_i32$1 = $18$hi;
                                          i64toi32_i32$1 = 0;
                                          i64toi32_i32$4 = 0;
                                          i64toi32_i32$0 = $18$hi;
                                          i64toi32_i32$2 = $18_1;
                                          i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
                                          i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0;
                                          i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
                                          i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
                                          $20_1 = i64toi32_i32$5;
                                          $20$hi = i64toi32_i32$3;
                                          break label$371;
                                         }
                                         i64toi32_i32$3 = $18$hi;
                                         i64toi32_i32$3 = $19$hi;
                                         i64toi32_i32$3 = $18$hi;
                                         i64toi32_i32$4 = $19$hi;
                                         i64toi32_i32$4 = __wasm_i64_sdiv($18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$4 | 0) | 0;
                                         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                                         $20_1 = i64toi32_i32$4;
                                         $20$hi = i64toi32_i32$3;
                                         i64toi32_i32$3 = $19$hi;
                                         i64toi32_i32$3 = $18$hi;
                                         i64toi32_i32$3 = $19$hi;
                                         i64toi32_i32$1 = $19_1;
                                         i64toi32_i32$4 = $18$hi;
                                         i64toi32_i32$2 = $18_1;
                                         i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
                                         i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
                                         i64toi32_i32$1 = -1;
                                         i64toi32_i32$2 = -1;
                                         if ((i64toi32_i32$4 | 0) > (i64toi32_i32$1 | 0)) {
                                          $194_1 = 1
                                         } else {
                                          if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$1 | 0)) {
                                           if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
                                            $195_1 = 0
                                           } else {
                                            $195_1 = 1
                                           }
                                           $196_1 = $195_1;
                                          } else {
                                           $196_1 = 0
                                          }
                                          $194_1 = $196_1;
                                         }
                                         if ($194_1) {
                                          break label$371
                                         }
                                         i64toi32_i32$3 = $20$hi;
                                         i64toi32_i32$3 = $18$hi;
                                         i64toi32_i32$3 = $20$hi;
                                         i64toi32_i32$3 = $19$hi;
                                         i64toi32_i32$3 = $20$hi;
                                         i64toi32_i32$4 = $19$hi;
                                         i64toi32_i32$4 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$4 | 0) | 0;
                                         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                                         $2348 = i64toi32_i32$4;
                                         $2348$hi = i64toi32_i32$3;
                                         i64toi32_i32$3 = $18$hi;
                                         i64toi32_i32$2 = $18_1;
                                         i64toi32_i32$4 = $2348$hi;
                                         i64toi32_i32$1 = $2348;
                                         i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
                                         i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
                                         i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
                                         i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
                                         i64toi32_i32$3 = i64toi32_i32$0;
                                         i64toi32_i32$2 = 0;
                                         i64toi32_i32$1 = 0;
                                         $2350 = (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0;
                                         i64toi32_i32$3 = 0;
                                         $2351$hi = i64toi32_i32$3;
                                         i64toi32_i32$3 = $20$hi;
                                         i64toi32_i32$1 = $20_1;
                                         i64toi32_i32$5 = $2351$hi;
                                         i64toi32_i32$2 = $2350;
                                         i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                                         i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
                                         i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                                         i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                                         $20_1 = i64toi32_i32$4;
                                         $20$hi = i64toi32_i32$0;
                                        }
                                        $11_1 = $11_1 + 4 | 0;
                                        i64toi32_i32$0 = $20$hi;
                                        i64toi32_i32$1 = $7_1;
                                        HEAP32[$7_1 >> 2] = $20_1;
                                        HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                        HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                        break label$366;
                                       }
                                       $15_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                       $21_1 = +HEAPF64[$6_1 >> 3];
                                       break label$367;
                                      }
                                      i64toi32_i32$0 = $18$hi;
                                      i64toi32_i32$1 = $18_1;
                                      i64toi32_i32$3 = 0;
                                      $21_1 = +(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0);
                                     }
                                     label$373 : {
                                      label$374 : {
                                       switch (($15_1 & 255 | 0) + -3 | 0 | 0) {
                                       case 16:
                                        $22_1 = +HEAPF64[$14_1 >> 3];
                                        break label$373;
                                       case 0:
                                        break label$374;
                                       default:
                                        break label$366;
                                       };
                                      }
                                      i64toi32_i32$3 = $14_1;
                                      i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
                                      i64toi32_i32$1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                      i64toi32_i32$3 = 0;
                                      $22_1 = +(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0);
                                     }
                                     HEAPF64[$7_1 >> 3] = Math_floor($21_1 / $22_1);
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$376 : {
                                     label$377 : {
                                      if ($12_1) {
                                       break label$377
                                      }
                                      $12_1 = 0;
                                      break label$376;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 40:
                                    label$378 : {
                                     label$379 : {
                                      label$380 : {
                                       label$381 : {
                                        $14_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 16:
                                         break label$380;
                                        case 0:
                                         break label$381;
                                        default:
                                         break label$378;
                                        };
                                       }
                                       i64toi32_i32$3 = $14_1;
                                       i64toi32_i32$1 = HEAP32[$14_1 >> 2] | 0;
                                       i64toi32_i32$0 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                       $18_1 = i64toi32_i32$1;
                                       $18$hi = i64toi32_i32$0;
                                       break label$379;
                                      }
                                      $21_1 = +HEAPF64[$14_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$378
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$378
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$378
                                      }
                                      label$382 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$382
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $197_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $197_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $198_1 = $197_1;
                                       } else {
                                        $198_1 = 0
                                       }
                                       i64toi32_i32$0 = $198_1;
                                       $18_1 = ~~i64toi32_i32$7 >>> 0;
                                       $18$hi = i64toi32_i32$0;
                                       break label$379;
                                      }
                                      i64toi32_i32$0 = -2147483648;
                                      $18_1 = 0;
                                      $18$hi = i64toi32_i32$0;
                                     }
                                     $6_1 = $6_1 >>> 24 | 0;
                                     $14_1 = $9_1 + ($6_1 << 4 | 0) | 0;
                                     label$383 : {
                                      label$384 : {
                                       switch ((HEAPU8[(($9_1 + ($6_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                       case 0:
                                        i64toi32_i32$3 = $14_1;
                                        i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
                                        i64toi32_i32$1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                        $19_1 = i64toi32_i32$0;
                                        $19$hi = i64toi32_i32$1;
                                        break label$383;
                                       case 16:
                                        break label$384;
                                       default:
                                        break label$378;
                                       };
                                      }
                                      $21_1 = +HEAPF64[$14_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$378
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$378
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$378
                                      }
                                      label$386 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$386
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $199_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $199_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $200_1 = $199_1;
                                       } else {
                                        $200_1 = 0
                                       }
                                       i64toi32_i32$1 = $200_1;
                                       $19_1 = ~~i64toi32_i32$7 >>> 0;
                                       $19$hi = i64toi32_i32$1;
                                       break label$383;
                                      }
                                      i64toi32_i32$1 = -2147483648;
                                      $19_1 = 0;
                                      $19$hi = i64toi32_i32$1;
                                     }
                                     i64toi32_i32$1 = $19$hi;
                                     i64toi32_i32$1 = $18$hi;
                                     i64toi32_i32$1 = $19$hi;
                                     i64toi32_i32$3 = $19_1;
                                     i64toi32_i32$0 = $18$hi;
                                     i64toi32_i32$2 = $18_1;
                                     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
                                     $2461 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
                                     i64toi32_i32$3 = $7_1;
                                     HEAP32[$7_1 >> 2] = $2461;
                                     HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$387 : {
                                     label$388 : {
                                      if ($12_1) {
                                       break label$388
                                      }
                                      $12_1 = 0;
                                      break label$387;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 41:
                                    label$389 : {
                                     label$390 : {
                                      label$391 : {
                                       label$392 : {
                                        $14_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 16:
                                         break label$391;
                                        case 0:
                                         break label$392;
                                        default:
                                         break label$389;
                                        };
                                       }
                                       i64toi32_i32$1 = $14_1;
                                       i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
                                       i64toi32_i32$3 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                       $18_1 = i64toi32_i32$0;
                                       $18$hi = i64toi32_i32$3;
                                       break label$390;
                                      }
                                      $21_1 = +HEAPF64[$14_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$389
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$389
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$389
                                      }
                                      label$393 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$393
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $201_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $201_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $202_1 = $201_1;
                                       } else {
                                        $202_1 = 0
                                       }
                                       i64toi32_i32$3 = $202_1;
                                       $18_1 = ~~i64toi32_i32$7 >>> 0;
                                       $18$hi = i64toi32_i32$3;
                                       break label$390;
                                      }
                                      i64toi32_i32$3 = -2147483648;
                                      $18_1 = 0;
                                      $18$hi = i64toi32_i32$3;
                                     }
                                     $6_1 = $6_1 >>> 24 | 0;
                                     $14_1 = $9_1 + ($6_1 << 4 | 0) | 0;
                                     label$394 : {
                                      label$395 : {
                                       switch ((HEAPU8[(($9_1 + ($6_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                       case 0:
                                        i64toi32_i32$1 = $14_1;
                                        i64toi32_i32$3 = HEAP32[$14_1 >> 2] | 0;
                                        i64toi32_i32$0 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                        $19_1 = i64toi32_i32$3;
                                        $19$hi = i64toi32_i32$0;
                                        break label$394;
                                       case 16:
                                        break label$395;
                                       default:
                                        break label$389;
                                       };
                                      }
                                      $21_1 = +HEAPF64[$14_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$389
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$389
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$389
                                      }
                                      label$397 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$397
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $203_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $203_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $204_1 = $203_1;
                                       } else {
                                        $204_1 = 0
                                       }
                                       i64toi32_i32$0 = $204_1;
                                       $19_1 = ~~i64toi32_i32$7 >>> 0;
                                       $19$hi = i64toi32_i32$0;
                                       break label$394;
                                      }
                                      i64toi32_i32$0 = -2147483648;
                                      $19_1 = 0;
                                      $19$hi = i64toi32_i32$0;
                                     }
                                     i64toi32_i32$0 = $19$hi;
                                     i64toi32_i32$0 = $18$hi;
                                     i64toi32_i32$0 = $19$hi;
                                     i64toi32_i32$1 = $19_1;
                                     i64toi32_i32$3 = $18$hi;
                                     i64toi32_i32$2 = $18_1;
                                     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
                                     $2543 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                                     i64toi32_i32$1 = $7_1;
                                     HEAP32[$7_1 >> 2] = $2543;
                                     HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$3;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$398 : {
                                     label$399 : {
                                      if ($12_1) {
                                       break label$399
                                      }
                                      $12_1 = 0;
                                      break label$398;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 42:
                                    label$400 : {
                                     label$401 : {
                                      label$402 : {
                                       label$403 : {
                                        $14_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 16:
                                         break label$402;
                                        case 0:
                                         break label$403;
                                        default:
                                         break label$400;
                                        };
                                       }
                                       i64toi32_i32$0 = $14_1;
                                       i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                                       i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                                       $18_1 = i64toi32_i32$3;
                                       $18$hi = i64toi32_i32$1;
                                       break label$401;
                                      }
                                      $21_1 = +HEAPF64[$14_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$400
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$400
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$400
                                      }
                                      label$404 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$404
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $205_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $205_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $206_1 = $205_1;
                                       } else {
                                        $206_1 = 0
                                       }
                                       i64toi32_i32$1 = $206_1;
                                       $18_1 = ~~i64toi32_i32$7 >>> 0;
                                       $18$hi = i64toi32_i32$1;
                                       break label$401;
                                      }
                                      i64toi32_i32$1 = -2147483648;
                                      $18_1 = 0;
                                      $18$hi = i64toi32_i32$1;
                                     }
                                     $6_1 = $6_1 >>> 24 | 0;
                                     $14_1 = $9_1 + ($6_1 << 4 | 0) | 0;
                                     label$405 : {
                                      label$406 : {
                                       switch ((HEAPU8[(($9_1 + ($6_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                       case 0:
                                        i64toi32_i32$0 = $14_1;
                                        i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                                        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                                        $19_1 = i64toi32_i32$1;
                                        $19$hi = i64toi32_i32$3;
                                        break label$405;
                                       case 16:
                                        break label$406;
                                       default:
                                        break label$400;
                                       };
                                      }
                                      $21_1 = +HEAPF64[$14_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$400
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$400
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$400
                                      }
                                      label$408 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$408
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $207_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $207_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $208_1 = $207_1;
                                       } else {
                                        $208_1 = 0
                                       }
                                       i64toi32_i32$3 = $208_1;
                                       $19_1 = ~~i64toi32_i32$7 >>> 0;
                                       $19$hi = i64toi32_i32$3;
                                       break label$405;
                                      }
                                      i64toi32_i32$3 = -2147483648;
                                      $19_1 = 0;
                                      $19$hi = i64toi32_i32$3;
                                     }
                                     i64toi32_i32$3 = $19$hi;
                                     i64toi32_i32$3 = $18$hi;
                                     i64toi32_i32$3 = $19$hi;
                                     i64toi32_i32$0 = $19_1;
                                     i64toi32_i32$1 = $18$hi;
                                     i64toi32_i32$2 = $18_1;
                                     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
                                     $2625 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
                                     i64toi32_i32$0 = $7_1;
                                     HEAP32[$7_1 >> 2] = $2625;
                                     HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$1;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$409 : {
                                     label$410 : {
                                      if ($12_1) {
                                       break label$410
                                      }
                                      $12_1 = 0;
                                      break label$409;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 43:
                                    label$411 : {
                                     label$412 : {
                                      label$413 : {
                                       label$414 : {
                                        $14_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 16:
                                         break label$413;
                                        case 0:
                                         break label$414;
                                        default:
                                         break label$411;
                                        };
                                       }
                                       i64toi32_i32$3 = $14_1;
                                       i64toi32_i32$1 = HEAP32[$14_1 >> 2] | 0;
                                       i64toi32_i32$0 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                       $19_1 = i64toi32_i32$1;
                                       $19$hi = i64toi32_i32$0;
                                       break label$412;
                                      }
                                      $21_1 = +HEAPF64[$14_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$411
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$411
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$411
                                      }
                                      label$415 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$415
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $209_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $209_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $210_1 = $209_1;
                                       } else {
                                        $210_1 = 0
                                       }
                                       i64toi32_i32$0 = $210_1;
                                       $19_1 = ~~i64toi32_i32$7 >>> 0;
                                       $19$hi = i64toi32_i32$0;
                                       break label$412;
                                      }
                                      i64toi32_i32$0 = -2147483648;
                                      $19_1 = 0;
                                      $19$hi = i64toi32_i32$0;
                                     }
                                     $6_1 = $6_1 >>> 24 | 0;
                                     $14_1 = $9_1 + ($6_1 << 4 | 0) | 0;
                                     label$416 : {
                                      label$417 : {
                                       switch ((HEAPU8[(($9_1 + ($6_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                       case 0:
                                        i64toi32_i32$3 = $14_1;
                                        i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
                                        i64toi32_i32$1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                        $18_1 = i64toi32_i32$0;
                                        $18$hi = i64toi32_i32$1;
                                        break label$416;
                                       case 16:
                                        break label$417;
                                       default:
                                        break label$411;
                                       };
                                      }
                                      $21_1 = +HEAPF64[$14_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$411
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$411
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$411
                                      }
                                      label$419 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$419
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $211_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $211_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $212_1 = $211_1;
                                       } else {
                                        $212_1 = 0
                                       }
                                       i64toi32_i32$1 = $212_1;
                                       $18_1 = ~~i64toi32_i32$7 >>> 0;
                                       $18$hi = i64toi32_i32$1;
                                       break label$416;
                                      }
                                      i64toi32_i32$1 = -2147483648;
                                      $18_1 = 0;
                                      $18$hi = i64toi32_i32$1;
                                     }
                                     label$420 : {
                                      label$421 : {
                                       i64toi32_i32$1 = $18$hi;
                                       i64toi32_i32$3 = $18_1;
                                       i64toi32_i32$0 = 0;
                                       i64toi32_i32$2 = 1;
                                       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
                                        $213_1 = 1
                                       } else {
                                        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                                         if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
                                          $214_1 = 0
                                         } else {
                                          $214_1 = 1
                                         }
                                         $215_1 = $214_1;
                                        } else {
                                         $215_1 = 0
                                        }
                                        $213_1 = $215_1;
                                       }
                                       if ($213_1) {
                                        break label$421
                                       }
                                       i64toi32_i32$3 = $19$hi;
                                       i64toi32_i32$3 = $18$hi;
                                       i64toi32_i32$3 = $19$hi;
                                       i64toi32_i32$2 = $19_1;
                                       i64toi32_i32$1 = $18$hi;
                                       i64toi32_i32$0 = $18_1;
                                       i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
                                       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                                        i64toi32_i32$1 = 0;
                                        $216_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
                                       } else {
                                        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
                                        $216_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
                                       }
                                       $2708 = $216_1;
                                       $2708$hi = i64toi32_i32$1;
                                       i64toi32_i32$1 = $18$hi;
                                       i64toi32_i32$3 = $18_1;
                                       i64toi32_i32$2 = 0;
                                       i64toi32_i32$0 = 63;
                                       if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
                                        $217_1 = 1
                                       } else {
                                        if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
                                         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
                                          $218_1 = 0
                                         } else {
                                          $218_1 = 1
                                         }
                                         $219_1 = $218_1;
                                        } else {
                                         $219_1 = 0
                                        }
                                        $217_1 = $219_1;
                                       }
                                       i64toi32_i32$5 = $217_1;
                                       i64toi32_i32$3 = 0;
                                       i64toi32_i32$1 = $2708$hi;
                                       i64toi32_i32$2 = i64toi32_i32$5 ? 0 : $2708;
                                       i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$1;
                                       $18_1 = i64toi32_i32$2;
                                       $18$hi = i64toi32_i32$0;
                                       break label$420;
                                      }
                                      i64toi32_i32$0 = $19$hi;
                                      i64toi32_i32$0 = $18$hi;
                                      i64toi32_i32$0 = 0;
                                      i64toi32_i32$5 = 0;
                                      i64toi32_i32$2 = $18$hi;
                                      i64toi32_i32$3 = $18_1;
                                      i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
                                      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
                                      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
                                      i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
                                      $2714$hi = i64toi32_i32$4;
                                      i64toi32_i32$4 = $19$hi;
                                      i64toi32_i32$0 = $19_1;
                                      i64toi32_i32$5 = $2714$hi;
                                      i64toi32_i32$3 = i64toi32_i32$1;
                                      i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
                                      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                                       i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
                                       $220_1 = 0;
                                      } else {
                                       i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
                                       $220_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
                                      }
                                      $2715 = $220_1;
                                      $2715$hi = i64toi32_i32$5;
                                      i64toi32_i32$5 = $18$hi;
                                      i64toi32_i32$4 = $18_1;
                                      i64toi32_i32$0 = -1;
                                      i64toi32_i32$3 = -63;
                                      if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
                                       $221_1 = 1
                                      } else {
                                       if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
                                        if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$3 >>> 0) {
                                         $222_1 = 0
                                        } else {
                                         $222_1 = 1
                                        }
                                        $223_1 = $222_1;
                                       } else {
                                        $223_1 = 0
                                       }
                                       $221_1 = $223_1;
                                      }
                                      i64toi32_i32$2 = $221_1;
                                      i64toi32_i32$4 = 0;
                                      i64toi32_i32$5 = $2715$hi;
                                      i64toi32_i32$0 = i64toi32_i32$2 ? 0 : $2715;
                                      i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$5;
                                      $18_1 = i64toi32_i32$0;
                                      $18$hi = i64toi32_i32$3;
                                     }
                                     i64toi32_i32$3 = $18$hi;
                                     i64toi32_i32$0 = $7_1;
                                     HEAP32[$7_1 >> 2] = $18_1;
                                     HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$3;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$422 : {
                                     label$423 : {
                                      if ($12_1) {
                                       break label$423
                                      }
                                      $12_1 = 0;
                                      break label$422;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 44:
                                    label$424 : {
                                     label$425 : {
                                      label$426 : {
                                       label$427 : {
                                        $14_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($14_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 16:
                                         break label$426;
                                        case 0:
                                         break label$427;
                                        default:
                                         break label$424;
                                        };
                                       }
                                       i64toi32_i32$2 = $14_1;
                                       i64toi32_i32$3 = HEAP32[$14_1 >> 2] | 0;
                                       i64toi32_i32$0 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                       $19_1 = i64toi32_i32$3;
                                       $19$hi = i64toi32_i32$0;
                                       break label$425;
                                      }
                                      $21_1 = +HEAPF64[$14_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$424
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$424
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$424
                                      }
                                      label$428 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$428
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $224_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $224_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $225_1 = $224_1;
                                       } else {
                                        $225_1 = 0
                                       }
                                       i64toi32_i32$0 = $225_1;
                                       $19_1 = ~~i64toi32_i32$7 >>> 0;
                                       $19$hi = i64toi32_i32$0;
                                       break label$425;
                                      }
                                      i64toi32_i32$0 = -2147483648;
                                      $19_1 = 0;
                                      $19$hi = i64toi32_i32$0;
                                     }
                                     $6_1 = $6_1 >>> 24 | 0;
                                     $14_1 = $9_1 + ($6_1 << 4 | 0) | 0;
                                     label$429 : {
                                      label$430 : {
                                       switch ((HEAPU8[(($9_1 + ($6_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                       case 0:
                                        i64toi32_i32$2 = $14_1;
                                        i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
                                        i64toi32_i32$3 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                        $18_1 = i64toi32_i32$0;
                                        $18$hi = i64toi32_i32$3;
                                        break label$429;
                                       case 16:
                                        break label$430;
                                       default:
                                        break label$424;
                                       };
                                      }
                                      $21_1 = +HEAPF64[$14_1 >> 3];
                                      $22_1 = Math_floor($21_1);
                                      if ($22_1 != $21_1) {
                                       break label$424
                                      }
                                      if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                       break label$424
                                      }
                                      if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                       break label$424
                                      }
                                      label$432 : {
                                       if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                        break label$432
                                       }
                                       i64toi32_i32$7 = $22_1;
                                       if (Math_abs($22_1) >= 1.0) {
                                        if (i64toi32_i32$7 > 0.0) {
                                         $226_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                        } else {
                                         $226_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                        }
                                        $227_1 = $226_1;
                                       } else {
                                        $227_1 = 0
                                       }
                                       i64toi32_i32$3 = $227_1;
                                       $18_1 = ~~i64toi32_i32$7 >>> 0;
                                       $18$hi = i64toi32_i32$3;
                                       break label$429;
                                      }
                                      i64toi32_i32$3 = -2147483648;
                                      $18_1 = 0;
                                      $18$hi = i64toi32_i32$3;
                                     }
                                     label$433 : {
                                      label$434 : {
                                       i64toi32_i32$3 = $18$hi;
                                       i64toi32_i32$2 = $18_1;
                                       i64toi32_i32$0 = -1;
                                       i64toi32_i32$4 = -1;
                                       if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
                                        $228_1 = 1
                                       } else {
                                        if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
                                         if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$4 >>> 0) {
                                          $229_1 = 0
                                         } else {
                                          $229_1 = 1
                                         }
                                         $230_1 = $229_1;
                                        } else {
                                         $230_1 = 0
                                        }
                                        $228_1 = $230_1;
                                       }
                                       if ($228_1) {
                                        break label$434
                                       }
                                       i64toi32_i32$2 = $19$hi;
                                       i64toi32_i32$2 = $18$hi;
                                       i64toi32_i32$2 = 0;
                                       i64toi32_i32$4 = 0;
                                       i64toi32_i32$3 = $18$hi;
                                       i64toi32_i32$0 = $18_1;
                                       i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
                                       i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
                                       i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
                                       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
                                       $2803$hi = i64toi32_i32$1;
                                       i64toi32_i32$1 = $19$hi;
                                       i64toi32_i32$2 = $19_1;
                                       i64toi32_i32$4 = $2803$hi;
                                       i64toi32_i32$0 = i64toi32_i32$5;
                                       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
                                       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
                                        i64toi32_i32$4 = 0;
                                        $231_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
                                       } else {
                                        i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
                                        $231_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
                                       }
                                       $2804 = $231_1;
                                       $2804$hi = i64toi32_i32$4;
                                       i64toi32_i32$4 = $18$hi;
                                       i64toi32_i32$1 = $18_1;
                                       i64toi32_i32$2 = -1;
                                       i64toi32_i32$0 = -63;
                                       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
                                        $232_1 = 1
                                       } else {
                                        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
                                         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
                                          $233_1 = 0
                                         } else {
                                          $233_1 = 1
                                         }
                                         $234_1 = $233_1;
                                        } else {
                                         $234_1 = 0
                                        }
                                        $232_1 = $234_1;
                                       }
                                       i64toi32_i32$3 = $232_1;
                                       i64toi32_i32$1 = 0;
                                       i64toi32_i32$4 = $2804$hi;
                                       i64toi32_i32$2 = i64toi32_i32$3 ? 0 : $2804;
                                       i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
                                       $18_1 = i64toi32_i32$2;
                                       $18$hi = i64toi32_i32$0;
                                       break label$433;
                                      }
                                      i64toi32_i32$0 = $19$hi;
                                      i64toi32_i32$0 = $18$hi;
                                      i64toi32_i32$0 = $19$hi;
                                      i64toi32_i32$3 = $19_1;
                                      i64toi32_i32$2 = $18$hi;
                                      i64toi32_i32$1 = $18_1;
                                      i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
                                      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
                                       i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
                                       $235_1 = 0;
                                      } else {
                                       i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
                                       $235_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
                                      }
                                      $2810 = $235_1;
                                      $2810$hi = i64toi32_i32$2;
                                      i64toi32_i32$2 = $18$hi;
                                      i64toi32_i32$0 = $18_1;
                                      i64toi32_i32$3 = 0;
                                      i64toi32_i32$1 = 63;
                                      if ((i64toi32_i32$2 | 0) > (i64toi32_i32$3 | 0)) {
                                       $236_1 = 1
                                      } else {
                                       if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$3 | 0)) {
                                        if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$1 >>> 0) {
                                         $237_1 = 0
                                        } else {
                                         $237_1 = 1
                                        }
                                        $238_1 = $237_1;
                                       } else {
                                        $238_1 = 0
                                       }
                                       $236_1 = $238_1;
                                      }
                                      i64toi32_i32$4 = $236_1;
                                      i64toi32_i32$0 = 0;
                                      i64toi32_i32$2 = $2810$hi;
                                      i64toi32_i32$3 = i64toi32_i32$4 ? 0 : $2810;
                                      i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
                                      $18_1 = i64toi32_i32$3;
                                      $18$hi = i64toi32_i32$1;
                                     }
                                     i64toi32_i32$1 = $18$hi;
                                     i64toi32_i32$3 = $7_1;
                                     HEAP32[$7_1 >> 2] = $18_1;
                                     HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$1;
                                     HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                     $11_1 = $11_1 + 4 | 0;
                                    }
                                    label$435 : {
                                     label$436 : {
                                      if ($12_1) {
                                       break label$436
                                      }
                                      $12_1 = 0;
                                      break label$435;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 45:
                                    $12_1 = HEAP32[($11_1 + -8 | 0) >> 2] | 0;
                                    HEAP32[$5_1 >> 2] = $11_1;
                                    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                    $445($0_1 | 0, $7_1 | 0, $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0 | 0, $9_1 + (($12_1 >>> 3 | 0) & 4080 | 0) | 0 | 0, $6_1 >>> 24 | 0 | 0);
                                    label$437 : {
                                     label$438 : {
                                      if (HEAP32[$4_1 >> 2] | 0) {
                                       break label$438
                                      }
                                      $12_1 = 0;
                                      break label$437;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 46:
                                    $12_1 = HEAP32[($11_1 + -8 | 0) >> 2] | 0;
                                    HEAP32[$5_1 >> 2] = $11_1;
                                    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                    i64toi32_i32$3 = (($6_1 >>> 16 | 0) & 255 | 0) + -127 | 0;
                                    i64toi32_i32$1 = i64toi32_i32$3 >> 31 | 0;
                                    $448($0_1 | 0, $7_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, ($6_1 >>> 15 | 0) & 1 | 0 | 0, $9_1 + (($12_1 >>> 3 | 0) & 4080 | 0) | 0 | 0, $6_1 >>> 24 | 0 | 0);
                                    label$439 : {
                                     label$440 : {
                                      if (HEAP32[$4_1 >> 2] | 0) {
                                       break label$440
                                      }
                                      $12_1 = 0;
                                      break label$439;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 47:
                                    $12_1 = HEAP32[($11_1 + -8 | 0) >> 2] | 0;
                                    HEAP32[$5_1 >> 2] = $11_1;
                                    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                    $447($0_1 | 0, $7_1 | 0, $10_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0 | 0, ($6_1 >>> 15 | 0) & 1 | 0 | 0, $9_1 + (($12_1 >>> 3 | 0) & 4080 | 0) | 0 | 0, $6_1 >>> 24 | 0 | 0);
                                    label$441 : {
                                     label$442 : {
                                      if (HEAP32[$4_1 >> 2] | 0) {
                                       break label$442
                                      }
                                      $12_1 = 0;
                                      break label$441;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 48:
                                    label$443 : {
                                     label$444 : {
                                      label$445 : {
                                       label$446 : {
                                        $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                        switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                        case 16:
                                         break label$445;
                                        case 0:
                                         break label$446;
                                        default:
                                         break label$444;
                                        };
                                       }
                                       i64toi32_i32$4 = $6_1;
                                       i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
                                       i64toi32_i32$3 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                       $2947 = i64toi32_i32$1;
                                       $2947$hi = i64toi32_i32$3;
                                       i64toi32_i32$3 = 0;
                                       i64toi32_i32$4 = 0;
                                       i64toi32_i32$1 = $2947$hi;
                                       i64toi32_i32$0 = $2947;
                                       i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
                                       i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
                                       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
                                       i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
                                       i64toi32_i32$4 = $7_1;
                                       HEAP32[$7_1 >> 2] = i64toi32_i32$2;
                                       HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$5;
                                       HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                       $7_1 = $12_1;
                                       break label$443;
                                      }
                                      HEAPF64[$7_1 >> 3] = -+HEAPF64[$6_1 >> 3];
                                      HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 19;
                                      $7_1 = $12_1;
                                      break label$443;
                                     }
                                     HEAP32[$5_1 >> 2] = $11_1;
                                     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                     $445($0_1 | 0, $6_1 | 0, $6_1 | 0, $7_1 | 0, 18 | 0);
                                     $7_1 = HEAP32[$4_1 >> 2] | 0;
                                    }
                                    label$447 : {
                                     label$448 : {
                                      if ($7_1) {
                                       break label$448
                                      }
                                      $12_1 = 0;
                                      break label$447;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 49:
                                    label$449 : {
                                     label$450 : {
                                      label$451 : {
                                       label$452 : {
                                        label$453 : {
                                         $6_1 = $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0;
                                         switch ((HEAPU8[($6_1 + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
                                         case 16:
                                          break label$452;
                                         case 0:
                                          break label$453;
                                         default:
                                          break label$450;
                                         };
                                        }
                                        i64toi32_i32$3 = $6_1;
                                        i64toi32_i32$5 = HEAP32[$6_1 >> 2] | 0;
                                        i64toi32_i32$4 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                                        $18_1 = i64toi32_i32$5;
                                        $18$hi = i64toi32_i32$4;
                                        break label$451;
                                       }
                                       $21_1 = +HEAPF64[$6_1 >> 3];
                                       $22_1 = Math_floor($21_1);
                                       if ($22_1 != $21_1) {
                                        break label$450
                                       }
                                       if ($22_1 >= -9223372036854775808.0 ^ 1 | 0) {
                                        break label$450
                                       }
                                       if ($22_1 < 9223372036854775808.0 ^ 1 | 0) {
                                        break label$450
                                       }
                                       label$454 : {
                                        if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                         break label$454
                                        }
                                        i64toi32_i32$7 = $22_1;
                                        if (Math_abs($22_1) >= 1.0) {
                                         if (i64toi32_i32$7 > 0.0) {
                                          $239_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                         } else {
                                          $239_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                         }
                                         $240_1 = $239_1;
                                        } else {
                                         $240_1 = 0
                                        }
                                        i64toi32_i32$4 = $240_1;
                                        $18_1 = ~~i64toi32_i32$7 >>> 0;
                                        $18$hi = i64toi32_i32$4;
                                        break label$451;
                                       }
                                       i64toi32_i32$4 = -2147483648;
                                       $18_1 = 0;
                                       $18$hi = i64toi32_i32$4;
                                      }
                                      i64toi32_i32$4 = $18$hi;
                                      i64toi32_i32$3 = $18_1;
                                      i64toi32_i32$5 = -1;
                                      i64toi32_i32$0 = -1;
                                      i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
                                      $3015 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
                                      i64toi32_i32$3 = $7_1;
                                      HEAP32[$7_1 >> 2] = $3015;
                                      HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$5;
                                      HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 3;
                                      break label$449;
                                     }
                                     HEAP32[$5_1 >> 2] = $11_1;
                                     HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                     $445($0_1 | 0, $6_1 | 0, $6_1 | 0, $7_1 | 0, 19 | 0);
                                     $12_1 = HEAP32[$4_1 >> 2] | 0;
                                    }
                                    label$455 : {
                                     label$456 : {
                                      if ($12_1) {
                                       break label$456
                                      }
                                      $12_1 = 0;
                                      break label$455;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 50:
                                    $7_1 = HEAPU8[(($9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0) + 8 | 0) >> 0] | 0;
                                    HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = ($7_1 | 0) == (1 | 0) ? 17 : $7_1 & 15 | 0 ? 1 : 17;
                                    label$457 : {
                                     label$458 : {
                                      if ($12_1) {
                                       break label$458
                                      }
                                      $12_1 = 0;
                                      break label$457;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 51:
                                    HEAP32[$5_1 >> 2] = $11_1;
                                    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                    $467($0_1 | 0, $7_1 | 0, $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0 | 0);
                                    label$459 : {
                                     label$460 : {
                                      if (HEAP32[$4_1 >> 2] | 0) {
                                       break label$460
                                      }
                                      $12_1 = 0;
                                      break label$459;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 52:
                                    $6_1 = ($6_1 >>> 16 | 0) & 255 | 0;
                                    HEAP32[($0_1 + 12 | 0) >> 2] = $7_1 + ($6_1 << 4 | 0) | 0;
                                    HEAP32[$5_1 >> 2] = $11_1;
                                    $466($0_1 | 0, $6_1 | 0);
                                    label$461 : {
                                     if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
                                      break label$461
                                     }
                                     $248($0_1 | 0);
                                    }
                                    label$462 : {
                                     label$463 : {
                                      if (HEAP32[$4_1 >> 2] | 0) {
                                       break label$463
                                      }
                                      $12_1 = 0;
                                      break label$462;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 53:
                                    HEAP32[$5_1 >> 2] = $11_1;
                                    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                    $12_1 = 0;
                                    $229($0_1 | 0, $7_1 | 0, 0 | 0) | 0;
                                    label$464 : {
                                     if (!(HEAP32[$4_1 >> 2] | 0)) {
                                      break label$464
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 54:
                                    HEAP32[$5_1 >> 2] = $11_1;
                                    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                    $223($0_1 | 0, $7_1 | 0);
                                    label$465 : {
                                     label$466 : {
                                      if ($12_1) {
                                       break label$466
                                      }
                                      $12_1 = 0;
                                      break label$465;
                                     }
                                     $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $6_1 = $11_1;
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 55:
                                    $6_1 = ((($6_1 >>> 5 | 0) & 134217724 | 0) + $11_1 | 0) + -67108860 | 0;
                                    label$467 : {
                                     label$468 : {
                                      if (HEAP32[$4_1 >> 2] | 0) {
                                       break label$468
                                      }
                                      $12_1 = 0;
                                      break label$467;
                                     }
                                     $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 56:
                                    HEAP32[$5_1 >> 2] = $11_1;
                                    HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                    $12_1 = 1;
                                    $7_1 = $465($0_1 | 0, $7_1 | 0, $9_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0 | 0) | 0;
                                    $13_1 = HEAP32[$4_1 >> 2] | 0;
                                    label$469 : {
                                     if (($7_1 | 0) != (($6_1 >>> 15 | 0) & 1 | 0 | 0)) {
                                      break label$469
                                     }
                                     $12_1 = ((HEAP32[$11_1 >> 2] | 0) >>> 7 | 0) + -16777214 | 0;
                                    }
                                    $6_1 = $11_1 + ($12_1 << 2 | 0) | 0;
                                    label$470 : {
                                     label$471 : {
                                      if ($13_1) {
                                       break label$471
                                      }
                                      $12_1 = 0;
                                      break label$470;
                                     }
                                     $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
                                     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                                    }
                                    $11_1 = $6_1 + 4 | 0;
                                    continue label$5;
                                   case 59:
                                    break label$10;
                                   case 60:
                                    break label$11;
                                   case 61:
                                    break label$12;
                                   case 62:
                                    break label$13;
                                   case 63:
                                    break label$14;
                                   case 64:
                                    break label$15;
                                   case 65:
                                    break label$16;
                                   case 66:
                                    break label$17;
                                   case 67:
                                    break label$18;
                                   case 68:
                                    break label$20;
                                   case 69:
                                    break label$21;
                                   case 70:
                                    break label$22;
                                   case 71:
                                    break label$23;
                                   case 72:
                                    break label$24;
                                   case 73:
                                    break label$25;
                                   case 76:
                                    break label$26;
                                   case 75:
                                    break label$27;
                                   case 74:
                                    break label$28;
                                   case 77:
                                    break label$29;
                                   case 78:
                                    break label$30;
                                   case 79:
                                    break label$31;
                                   case 80:
                                    break label$32;
                                   case 81:
                                    break label$33;
                                   case 57:
                                    break label$36;
                                   case 58:
                                    break label$9;
                                   };
                                  }
                                  $15_1 = ($6_1 >>> 16 | 0) & 255 | 0;
                                  $14_1 = $9_1 + ($15_1 << 4 | 0) | 0;
                                  label$472 : {
                                   label$473 : {
                                    $13_1 = $9_1 + ($13_1 << 4 | 0) | 0;
                                    $16_1 = HEAPU8[($13_1 + 8 | 0) >> 0] | 0;
                                    if (($16_1 | 0) != (3 | 0)) {
                                     break label$473
                                    }
                                    label$474 : {
                                     $16_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
                                     if (($16_1 | 0) != (3 | 0)) {
                                      break label$474
                                     }
                                     i64toi32_i32$4 = $7_1;
                                     i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
                                     i64toi32_i32$3 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
                                     $3228 = i64toi32_i32$5;
                                     $3228$hi = i64toi32_i32$3;
                                     i64toi32_i32$4 = $14_1;
                                     i64toi32_i32$3 = HEAP32[$14_1 >> 2] | 0;
                                     i64toi32_i32$5 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                     $3230 = i64toi32_i32$3;
                                     $3230$hi = i64toi32_i32$5;
                                     i64toi32_i32$5 = $3228$hi;
                                     i64toi32_i32$4 = $3228;
                                     i64toi32_i32$3 = $3230$hi;
                                     i64toi32_i32$0 = $3230;
                                     if ((i64toi32_i32$5 | 0) < (i64toi32_i32$3 | 0)) {
                                      $241_1 = 1
                                     } else {
                                      if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$3 | 0)) {
                                       if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$0 >>> 0) {
                                        $242_1 = 0
                                       } else {
                                        $242_1 = 1
                                       }
                                       $243_1 = $242_1;
                                      } else {
                                       $243_1 = 0
                                      }
                                      $241_1 = $243_1;
                                     }
                                     $7_1 = $241_1;
                                     break label$6;
                                    }
                                    if (($16_1 & 15 | 0 | 0) != (3 | 0)) {
                                     break label$472
                                    }
                                    $21_1 = +HEAPF64[$14_1 >> 3];
                                    label$475 : {
                                     i64toi32_i32$0 = $7_1;
                                     i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
                                     i64toi32_i32$5 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
                                     $18_1 = i64toi32_i32$4;
                                     $18$hi = i64toi32_i32$5;
                                     i64toi32_i32$0 = i64toi32_i32$4;
                                     i64toi32_i32$4 = 2097152;
                                     i64toi32_i32$3 = 0;
                                     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
                                     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
                                     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
                                      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
                                     }
                                     i64toi32_i32$5 = i64toi32_i32$1;
                                     i64toi32_i32$0 = 4194304;
                                     i64toi32_i32$3 = 0;
                                     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
                                      break label$475
                                     }
                                     i64toi32_i32$5 = $18$hi;
                                     i64toi32_i32$2 = $18_1;
                                     i64toi32_i32$3 = 0;
                                     $7_1 = $21_1 > +(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$5 | 0);
                                     break label$6;
                                    }
                                    $22_1 = Math_floor($21_1);
                                    $22_1 = $22_1 != $21_1 ? $22_1 + 1.0 : $22_1;
                                    $7_1 = $22_1 < 9223372036854775808.0;
                                    label$476 : {
                                     label$477 : {
                                      if (!(Math_abs($22_1) < 9223372036854775808.0)) {
                                       break label$477
                                      }
                                      i64toi32_i32$7 = $22_1;
                                      if (Math_abs($22_1) >= 1.0) {
                                       if (i64toi32_i32$7 > 0.0) {
                                        $244_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                       } else {
                                        $244_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                       }
                                       $245_1 = $244_1;
                                      } else {
                                       $245_1 = 0
                                      }
                                      i64toi32_i32$5 = $245_1;
                                      $19_1 = ~~i64toi32_i32$7 >>> 0;
                                      $19$hi = i64toi32_i32$5;
                                      break label$476;
                                     }
                                     i64toi32_i32$5 = -2147483648;
                                     $19_1 = 0;
                                     $19$hi = i64toi32_i32$5;
                                    }
                                    i64toi32_i32$5 = $19$hi;
                                    i64toi32_i32$5 = $18$hi;
                                    i64toi32_i32$5 = $19$hi;
                                    i64toi32_i32$3 = $19_1;
                                    i64toi32_i32$2 = $18$hi;
                                    i64toi32_i32$0 = $18_1;
                                    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
                                     $246_1 = 1
                                    } else {
                                     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
                                      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
                                       $247_1 = 0
                                      } else {
                                       $247_1 = 1
                                      }
                                      $248_1 = $247_1;
                                     } else {
                                      $248_1 = 0
                                     }
                                     $246_1 = $248_1;
                                    }
                                    $13_1 = $21_1 > 0.0;
                                    $7_1 = $22_1 >= -9223372036854775808.0 ? ($7_1 ? $246_1 : $13_1) : $13_1;
                                    break label$6;
                                   }
                                   if (($16_1 & 15 | 0 | 0) != (3 | 0)) {
                                    break label$472
                                   }
                                   $16_1 = HEAPU8[(($9_1 + ($15_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0;
                                   if (($16_1 & 15 | 0 | 0) != (3 | 0)) {
                                    break label$472
                                   }
                                   $21_1 = +HEAPF64[$7_1 >> 3];
                                   label$478 : {
                                    if (($16_1 | 0) != (19 | 0)) {
                                     break label$478
                                    }
                                    $7_1 = $21_1 < +HEAPF64[$14_1 >> 3];
                                    break label$6;
                                   }
                                   label$479 : {
                                    i64toi32_i32$0 = $14_1;
                                    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                                    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                                    $18_1 = i64toi32_i32$3;
                                    $18$hi = i64toi32_i32$5;
                                    i64toi32_i32$0 = i64toi32_i32$3;
                                    i64toi32_i32$3 = 2097152;
                                    i64toi32_i32$2 = 0;
                                    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                                    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                                    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
                                     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
                                    }
                                    i64toi32_i32$5 = i64toi32_i32$4;
                                    i64toi32_i32$0 = 4194304;
                                    i64toi32_i32$2 = 0;
                                    if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
                                     break label$479
                                    }
                                    i64toi32_i32$5 = $18$hi;
                                    i64toi32_i32$1 = $18_1;
                                    i64toi32_i32$2 = 0;
                                    $7_1 = $21_1 < +(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$5 | 0);
                                    break label$6;
                                   }
                                   $7_1 = $21_1 < 0.0;
                                   $21_1 = Math_floor($21_1);
                                   $13_1 = $21_1 < 9223372036854775808.0;
                                   label$480 : {
                                    label$481 : {
                                     if (!(Math_abs($21_1) < 9223372036854775808.0)) {
                                      break label$481
                                     }
                                     i64toi32_i32$7 = $21_1;
                                     if (Math_abs(i64toi32_i32$7) >= 1.0) {
                                      if (i64toi32_i32$7 > 0.0) {
                                       $249_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
                                      } else {
                                       $249_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
                                      }
                                      $250_1 = $249_1;
                                     } else {
                                      $250_1 = 0
                                     }
                                     i64toi32_i32$5 = $250_1;
                                     $19_1 = ~~i64toi32_i32$7 >>> 0;
                                     $19$hi = i64toi32_i32$5;
                                     break label$480;
                                    }
                                    i64toi32_i32$5 = -2147483648;
                                    $19_1 = 0;
                                    $19$hi = i64toi32_i32$5;
                                   }
                                   i64toi32_i32$5 = $19$hi;
                                   i64toi32_i32$5 = $18$hi;
                                   i64toi32_i32$5 = $19$hi;
                                   i64toi32_i32$2 = $19_1;
                                   i64toi32_i32$1 = $18$hi;
                                   i64toi32_i32$0 = $18_1;
                                   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
                                    $251_1 = 1
                                   } else {
                                    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
                                     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$0 >>> 0) {
                                      $252_1 = 0
                                     } else {
                                      $252_1 = 1
                                     }
                                     $253_1 = $252_1;
                                    } else {
                                     $253_1 = 0
                                    }
                                    $251_1 = $253_1;
                                   }
                                   $7_1 = $21_1 >= -9223372036854775808.0 ? ($13_1 ? $251_1 : $7_1) : $7_1;
                                   break label$6;
                                  }
                                  HEAP32[$5_1 >> 2] = $11_1;
                                  HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                                  if (((HEAPU8[($13_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
                                   break label$8
                                  }
                                  if (((HEAPU8[(($9_1 + ($15_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
                                   break label$8
                                  }
                                  $12_1 = HEAP32[$14_1 >> 2] | 0;
                                  label$482 : {
                                   label$483 : {
                                    $7_1 = HEAP32[$7_1 >> 2] | 0;
                                    if ((HEAPU8[($7_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
                                     break label$483
                                    }
                                    $15_1 = HEAPU8[($7_1 + 7 | 0) >> 0] | 0;
                                    break label$482;
                                   }
                                   $15_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
                                  }
                                  $7_1 = $7_1 + 16 | 0;
                                  $13_1 = $12_1 + 16 | 0;
                                  label$484 : {
                                   label$485 : {
                                    if ((HEAPU8[($12_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
                                     break label$485
                                    }
                                    $14_1 = HEAPU8[($12_1 + 7 | 0) >> 0] | 0;
                                    break label$484;
                                   }
                                   $14_1 = HEAP32[($12_1 + 12 | 0) >> 2] | 0;
                                  }
                                  label$486 : while (1) {
                                   label$487 : {
                                    label$488 : {
                                     $12_1 = $754($7_1 | 0, $13_1 | 0) | 0;
                                     if ($12_1) {
                                      break label$488
                                     }
                                     label$489 : {
                                      $12_1 = $961($7_1 | 0) | 0;
                                      if (($12_1 | 0) != ($14_1 | 0)) {
                                       break label$489
                                      }
                                      $12_1 = 0;
                                      break label$488;
                                     }
                                     if (($12_1 | 0) != ($15_1 | 0)) {
                                      break label$487
                                     }
                                     $12_1 = -1;
                                    }
                                    $7_1 = $12_1 >>> 31 | 0;
                                    break label$7;
                                   }
                                   $12_1 = $12_1 + 1 | 0;
                                   $14_1 = $14_1 - $12_1 | 0;
                                   $15_1 = $15_1 - $12_1 | 0;
                                   $13_1 = $13_1 + $12_1 | 0;
                                   $7_1 = $7_1 + $12_1 | 0;
                                   continue label$486;
                                  };
                                 }
                                 $187($0_1 | 0, 5243 | 0, 0 | 0);
                                 abort();
                                }
                                $187($0_1 | 0, 5243 | 0, 0 | 0);
                                abort();
                               }
                               label$490 : {
                                label$491 : {
                                 if ($12_1) {
                                  break label$491
                                 }
                                 $12_1 = 0;
                                 break label$490;
                                }
                                $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                                $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                               }
                               $6_1 = $11_1;
                               $11_1 = $6_1 + 4 | 0;
                               continue label$5;
                              }
                              $451($0_1 | 0, ($6_1 >>> 7 | 0) & 255 | 0 | 0, $1_1 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0);
                              label$492 : {
                               label$493 : {
                                if (HEAP32[($1_1 + 20 | 0) >> 2] | 0) {
                                 break label$493
                                }
                                $12_1 = 0;
                                break label$492;
                               }
                               $204($0_1 | 0, $1_1 | 0);
                               HEAP32[($0_1 + 24 | 0) >> 2] = $11_1 + 4 | 0;
                               $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                              }
                              $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                              $6_1 = $11_1;
                              $11_1 = $6_1 + 4 | 0;
                              continue label$5;
                             }
                             HEAP32[($1_1 + 16 | 0) >> 2] = $11_1;
                             HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
                             $452($0_1 | 0, $1_1 | 0, $7_1 | 0, ($6_1 >>> 24 | 0) + -1 | 0 | 0);
                             label$494 : {
                              label$495 : {
                               if (HEAP32[($1_1 + 20 | 0) >> 2] | 0) {
                                break label$495
                               }
                               $12_1 = 0;
                               break label$494;
                              }
                              $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                              $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                             }
                             $6_1 = $11_1;
                             $11_1 = $6_1 + 4 | 0;
                             continue label$5;
                            }
                            $6_1 = HEAP32[((HEAP32[((HEAP32[($8_1 + 12 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0) + (($6_1 >>> 13 | 0) & 524284 | 0) | 0) >> 2] | 0;
                            HEAP32[$5_1 >> 2] = $11_1;
                            HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                            $17_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
                            $16_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
                            $14_1 = $220($0_1 | 0, $16_1 | 0) | 0;
                            HEAP32[($14_1 + 12 | 0) >> 2] = $6_1;
                            HEAP32[$7_1 >> 2] = $14_1;
                            HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = 70;
                            label$496 : {
                             if (($16_1 | 0) < (1 | 0)) {
                              break label$496
                             }
                             $6_1 = 0;
                             label$497 : while (1) {
                              $13_1 = $17_1 + ($6_1 << 3 | 0) | 0;
                              $15_1 = HEAPU8[($13_1 + 5 | 0) >> 0] | 0;
                              label$498 : {
                               label$499 : {
                                if (!(HEAPU8[($13_1 + 4 | 0) >> 0] | 0)) {
                                 break label$499
                                }
                                $13_1 = $222($0_1 | 0, $9_1 + ($15_1 << 4 | 0) | 0 | 0) | 0;
                                break label$498;
                               }
                               $13_1 = HEAP32[(($8_1 + ($15_1 << 2 | 0) | 0) + 16 | 0) >> 2] | 0;
                              }
                              HEAP32[(($14_1 + ($6_1 << 2 | 0) | 0) + 16 | 0) >> 2] = $13_1;
                              label$500 : {
                               if (!((HEAPU8[($14_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
                                break label$500
                               }
                               if (!((HEAPU8[($13_1 + 5 | 0) >> 0] | 0) & 24 | 0)) {
                                break label$500
                               }
                               $233($0_1 | 0, $14_1 | 0, $13_1 | 0);
                              }
                              $6_1 = $6_1 + 1 | 0;
                              if (($6_1 | 0) != ($16_1 | 0)) {
                               continue label$497
                              }
                              break label$497;
                             };
                            }
                            label$501 : {
                             if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
                              break label$501
                             }
                             HEAP32[($0_1 + 12 | 0) >> 2] = $7_1 + 16 | 0;
                             $248($0_1 | 0);
                             $12_1 = HEAP32[$4_1 >> 2] | 0;
                            }
                            label$502 : {
                             label$503 : {
                              if ($12_1) {
                               break label$503
                              }
                              $12_1 = 0;
                              break label$502;
                             }
                             $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                             $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                            }
                            $6_1 = $11_1;
                            $11_1 = $6_1 + 4 | 0;
                            continue label$5;
                           }
                           $13_1 = $6_1 >>> 24 | 0;
                           $17_1 = HEAP32[$7_1 >> 2] | 0;
                           label$504 : {
                            label$505 : {
                             $15_1 = ($6_1 >>> 16 | 0) & 255 | 0;
                             if ($15_1) {
                              break label$505
                             }
                             $15_1 = (((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - $7_1 | 0) >> 4 | 0) + -1 | 0;
                             break label$504;
                            }
                            HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                           }
                           $14_1 = $15_1 + $13_1 | 0;
                           label$506 : {
                            label$507 : {
                             if ($6_1 & 32768 | 0) {
                              break label$507
                             }
                             $6_1 = $11_1;
                             break label$506;
                            }
                            $6_1 = $11_1 + 4 | 0;
                            $14_1 = (((HEAP32[$11_1 >> 2] | 0) << 1 | 0) & -256 | 0) + $14_1 | 0;
                           }
                           label$508 : {
                            if ($14_1 >>> 0 <= ($422($17_1 | 0) | 0) >>> 0) {
                             break label$508
                            }
                            $430($0_1 | 0, $17_1 | 0, $14_1 | 0);
                           }
                           label$509 : {
                            if (($15_1 | 0) < (1 | 0)) {
                             break label$509
                            }
                            label$510 : while (1) {
                             $14_1 = $14_1 + -1 | 0;
                             $16_1 = (HEAP32[($17_1 + 12 | 0) >> 2] | 0) + ($14_1 << 4 | 0) | 0;
                             $13_1 = $15_1;
                             $11_1 = $7_1 + ($13_1 << 4 | 0) | 0;
                             i64toi32_i32$0 = $11_1;
                             i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                             i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                             $3596 = i64toi32_i32$2;
                             i64toi32_i32$2 = $16_1;
                             HEAP32[i64toi32_i32$2 >> 2] = $3596;
                             HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
                             HEAP8[(i64toi32_i32$2 + 8 | 0) >> 0] = HEAPU8[(i64toi32_i32$0 + 8 | 0) >> 0] | 0;
                             label$511 : {
                              if (!((HEAPU8[(i64toi32_i32$0 + 8 | 0) >> 0] | 0) & 64 | 0)) {
                               break label$511
                              }
                              if (!((HEAPU8[($17_1 + 5 | 0) >> 0] | 0) & 32 | 0)) {
                               break label$511
                              }
                              if (!((HEAPU8[((HEAP32[$11_1 >> 2] | 0) + 5 | 0) >> 0] | 0) & 24 | 0)) {
                               break label$511
                              }
                              $235($0_1 | 0, $17_1 | 0);
                             }
                             $15_1 = $13_1 + -1 | 0;
                             if (($13_1 | 0) > (1 | 0)) {
                              continue label$510
                             }
                             break label$510;
                            };
                           }
                           label$512 : {
                            label$513 : {
                             if ($12_1) {
                              break label$513
                             }
                             $12_1 = 0;
                             break label$512;
                            }
                            $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
                            $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                           }
                           $11_1 = $6_1 + 4 | 0;
                           continue label$5;
                          }
                          HEAP32[$5_1 >> 2] = $11_1;
                          HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                          $223($0_1 | 0, $7_1 + 48 | 0 | 0);
                          $11_1 = $11_1 + (($6_1 >>> 13 | 0) & 524284 | 0) | 0;
                          $6_1 = HEAP32[$11_1 >> 2] | 0;
                          $11_1 = $11_1 + 4 | 0;
                         }
                         i64toi32_i32$0 = $7_1;
                         i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
                         i64toi32_i32$2 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
                         $3647 = i64toi32_i32$5;
                         i64toi32_i32$5 = $7_1;
                         HEAP32[($7_1 + 64 | 0) >> 2] = $3647;
                         HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$2;
                         i64toi32_i32$0 = $7_1 + 40 | 0;
                         i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                         $3652 = i64toi32_i32$2;
                         i64toi32_i32$2 = $7_1 + 104 | 0;
                         HEAP32[i64toi32_i32$2 >> 2] = $3652;
                         HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
                         i64toi32_i32$0 = $7_1 + 32 | 0;
                         i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                         $3657 = i64toi32_i32$5;
                         i64toi32_i32$5 = $7_1 + 96 | 0;
                         HEAP32[i64toi32_i32$5 >> 2] = $3657;
                         HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$2;
                         i64toi32_i32$0 = $7_1 + 24 | 0;
                         i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                         $3662 = i64toi32_i32$2;
                         i64toi32_i32$2 = $7_1 + 88 | 0;
                         HEAP32[i64toi32_i32$2 >> 2] = $3662;
                         HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
                         i64toi32_i32$0 = $7_1 + 16 | 0;
                         i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                         $3667 = i64toi32_i32$5;
                         i64toi32_i32$5 = $7_1 + 80 | 0;
                         HEAP32[i64toi32_i32$5 >> 2] = $3667;
                         HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$2;
                         i64toi32_i32$0 = $7_1 + 8 | 0;
                         i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
                         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
                         $3672 = i64toi32_i32$2;
                         i64toi32_i32$2 = $7_1 + 72 | 0;
                         HEAP32[i64toi32_i32$2 >> 2] = $3672;
                         HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
                         HEAP32[($0_1 + 12 | 0) >> 2] = $7_1 + 112 | 0;
                         HEAP32[$5_1 >> 2] = $11_1;
                         $208($0_1 | 0, $7_1 + 64 | 0 | 0, $6_1 >>> 24 | 0 | 0);
                         label$514 : {
                          $12_1 = HEAP32[$4_1 >> 2] | 0;
                          if (!$12_1) {
                           break label$514
                          }
                          $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                          $7_1 = $9_1 + (($6_1 >>> 3 | 0) & 4080 | 0) | 0;
                         }
                         $6_1 = HEAP32[$11_1 >> 2] | 0;
                         $11_1 = $11_1 + 4 | 0;
                        }
                        label$515 : {
                         label$516 : {
                          $13_1 = HEAPU8[($7_1 + 72 | 0) >> 0] | 0;
                          if ($13_1 & 15 | 0) {
                           break label$516
                          }
                          $6_1 = $11_1;
                          break label$515;
                         }
                         HEAP8[($7_1 + 40 | 0) >> 0] = $13_1;
                         i64toi32_i32$0 = $7_1;
                         i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         $3711 = i64toi32_i32$5;
                         i64toi32_i32$5 = $7_1;
                         HEAP32[($7_1 + 32 | 0) >> 2] = $3711;
                         HEAP32[($7_1 + 36 | 0) >> 2] = i64toi32_i32$2;
                         $6_1 = $11_1 - (($6_1 >>> 13 | 0) & 524284 | 0) | 0;
                        }
                        label$517 : {
                         label$518 : {
                          if ($12_1) {
                           break label$518
                          }
                          $12_1 = 0;
                          break label$517;
                         }
                         $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
                         $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                        }
                        $11_1 = $6_1 + 4 | 0;
                        continue label$5;
                       }
                       HEAP32[$5_1 >> 2] = $11_1;
                       HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
                       $14_1 = $7_1 + 16 | 0;
                       label$519 : {
                        label$520 : {
                         label$521 : {
                          label$522 : {
                           label$523 : {
                            label$524 : {
                             label$525 : {
                              label$526 : {
                               label$527 : {
                                label$528 : {
                                 $13_1 = $9_1 + ($13_1 << 4 | 0) | 0;
                                 if ((HEAPU8[($13_1 + 8 | 0) >> 0] | 0 | 0) != (3 | 0)) {
                                  break label$528
                                 }
                                 if ((HEAPU8[($7_1 + 40 | 0) >> 0] | 0 | 0) != (3 | 0)) {
                                  break label$528
                                 }
                                 i64toi32_i32$0 = $7_1;
                                 i64toi32_i32$2 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
                                 i64toi32_i32$5 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
                                 $18_1 = i64toi32_i32$2;
                                 $18$hi = i64toi32_i32$5;
                                 i64toi32_i32$0 = i64toi32_i32$2;
                                 i64toi32_i32$2 = 0;
                                 i64toi32_i32$1 = 0;
                                 if ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) | 0) {
                                  break label$524
                                 }
                                 i64toi32_i32$1 = $7_1;
                                 i64toi32_i32$0 = HEAP32[$7_1 >> 2] | 0;
                                 i64toi32_i32$5 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
                                 $20_1 = i64toi32_i32$0;
                                 $20$hi = i64toi32_i32$5;
                                 i64toi32_i32$0 = $7_1;
                                 HEAP32[($7_1 + 48 | 0) >> 2] = $20_1;
                                 HEAP32[($7_1 + 52 | 0) >> 2] = i64toi32_i32$5;
                                 HEAP8[($7_1 + 56 | 0) >> 0] = 3;
                                 label$529 : {
                                  label$530 : {
                                   $3754 = $14_1;
                                   $3756 = $2_1 + 40 | 0;
                                   i64toi32_i32$5 = $18$hi;
                                   i64toi32_i32$1 = $18_1;
                                   i64toi32_i32$0 = 0;
                                   i64toi32_i32$2 = 0;
                                   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
                                    $254_1 = 1
                                   } else {
                                    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
                                     if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
                                      $255_1 = 0
                                     } else {
                                      $255_1 = 1
                                     }
                                     $256_1 = $255_1;
                                    } else {
                                     $256_1 = 0
                                    }
                                    $254_1 = $256_1;
                                   }
                                   if (!($460($3754 | 0, $3756 | 0, ($254_1 ? 2 : 1) | 0) | 0)) {
                                    break label$530
                                   }
                                   i64toi32_i32$2 = $2_1;
                                   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
                                   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
                                   $19_1 = i64toi32_i32$1;
                                   $19$hi = i64toi32_i32$5;
                                   break label$529;
                                  }
                                  label$531 : {
                                   label$532 : {
                                    $13_1 = HEAPU8[($7_1 + 24 | 0) >> 0] | 0;
                                    if (($13_1 | 0) != (19 | 0)) {
                                     break label$532
                                    }
                                    $21_1 = +HEAPF64[$14_1 >> 3];
                                    break label$531;
                                   }
                                   label$533 : {
                                    if (($13_1 | 0) != (3 | 0)) {
                                     break label$533
                                    }
                                    i64toi32_i32$2 = $14_1;
                                    i64toi32_i32$5 = HEAP32[$14_1 >> 2] | 0;
                                    i64toi32_i32$1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                    i64toi32_i32$2 = 0;
                                    $21_1 = +(i64toi32_i32$5 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0);
                                    break label$531;
                                   }
                                   if (($13_1 & 15 | 0 | 0) != (4 | 0)) {
                                    break label$523
                                   }
                                   $13_1 = $292((HEAP32[$14_1 >> 2] | 0) + 16 | 0 | 0, $2_1 + 48 | 0 | 0) | 0;
                                   label$534 : {
                                    label$535 : {
                                     $15_1 = HEAP32[$14_1 >> 2] | 0;
                                     if ((HEAPU8[($15_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
                                      break label$535
                                     }
                                     $15_1 = HEAPU8[($15_1 + 7 | 0) >> 0] | 0;
                                     break label$534;
                                    }
                                    $15_1 = HEAP32[($15_1 + 12 | 0) >> 2] | 0;
                                   }
                                   if (($13_1 | 0) != ($15_1 + 1 | 0 | 0)) {
                                    break label$523
                                   }
                                   i64toi32_i32$2 = $2_1;
                                   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
                                   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
                                   $19_1 = i64toi32_i32$1;
                                   $19$hi = i64toi32_i32$5;
                                   i64toi32_i32$2 = 0;
                                   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
                                   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
                                   $21_1 = (wasm2js_f64$0 = +(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$5 | 0), wasm2js_f64$1 = +wasm2js_scratch_load_f64(), wasm2js_i32$0 = (HEAPU8[($2_1 + 56 | 0) >> 0] | 0 | 0) == (3 | 0), wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
                                  }
                                  label$536 : {
                                   label$537 : {
                                    if ($21_1 > 0.0 ^ 1 | 0) {
                                     break label$537
                                    }
                                    i64toi32_i32$5 = 2147483647;
                                    $19_1 = -1;
                                    $19$hi = i64toi32_i32$5;
                                    i64toi32_i32$5 = $18$hi;
                                    i64toi32_i32$2 = $18_1;
                                    i64toi32_i32$1 = 0;
                                    i64toi32_i32$0 = 0;
                                    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$1 | 0)) {
                                     $257_1 = 1
                                    } else {
                                     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$1 | 0)) {
                                      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
                                       $258_1 = 0
                                      } else {
                                       $258_1 = 1
                                      }
                                      $259_1 = $258_1;
                                     } else {
                                      $259_1 = 0
                                     }
                                     $257_1 = $259_1;
                                    }
                                    if ($257_1) {
                                     break label$536
                                    }
                                    break label$527;
                                   }
                                   i64toi32_i32$2 = $18$hi;
                                   i64toi32_i32$0 = $18_1;
                                   i64toi32_i32$5 = 0;
                                   i64toi32_i32$1 = 0;
                                   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
                                    $260_1 = 1
                                   } else {
                                    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
                                     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$1 >>> 0) {
                                      $261_1 = 0
                                     } else {
                                      $261_1 = 1
                                     }
                                     $262_1 = $261_1;
                                    } else {
                                     $262_1 = 0
                                    }
                                    $260_1 = $262_1;
                                   }
                                   if ($260_1) {
                                    break label$527
                                   }
                                   i64toi32_i32$0 = -2147483648;
                                   $19_1 = 0;
                                   $19$hi = i64toi32_i32$0;
                                  }
                                  i64toi32_i32$0 = $19$hi;
                                  i64toi32_i32$2 = $2_1;
                                  HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] = $19_1;
                                  HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] = i64toi32_i32$0;
                                 }
                                 i64toi32_i32$0 = $19$hi;
                                 i64toi32_i32$0 = $20$hi;
                                 i64toi32_i32$0 = $19$hi;
                                 i64toi32_i32$1 = $19_1;
                                 i64toi32_i32$2 = $20$hi;
                                 i64toi32_i32$5 = $20_1;
                                 if ((i64toi32_i32$0 | 0) > (i64toi32_i32$2 | 0)) {
                                  $263_1 = 1
                                 } else {
                                  if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
                                   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
                                    $264_1 = 0
                                   } else {
                                    $264_1 = 1
                                   }
                                   $265_1 = $264_1;
                                  } else {
                                   $265_1 = 0
                                  }
                                  $263_1 = $265_1;
                                 }
                                 $3819 = $263_1;
                                 i64toi32_i32$1 = $19$hi;
                                 i64toi32_i32$1 = $20$hi;
                                 i64toi32_i32$1 = $19$hi;
                                 i64toi32_i32$5 = $19_1;
                                 i64toi32_i32$0 = $20$hi;
                                 i64toi32_i32$2 = $20_1;
                                 if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
                                  $266_1 = 1
                                 } else {
                                  if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                                   if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0) {
                                    $267_1 = 0
                                   } else {
                                    $267_1 = 1
                                   }
                                   $269_1 = $267_1;
                                  } else {
                                   $269_1 = 0
                                  }
                                  $266_1 = $269_1;
                                 }
                                 $3822 = $266_1;
                                 i64toi32_i32$5 = $18$hi;
                                 i64toi32_i32$2 = $18_1;
                                 i64toi32_i32$1 = 0;
                                 i64toi32_i32$0 = 0;
                                 if ((i64toi32_i32$5 | 0) > (i64toi32_i32$1 | 0)) {
                                  $270_1 = 1
                                 } else {
                                  if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$1 | 0)) {
                                   if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$0 >>> 0) {
                                    $271_1 = 0
                                   } else {
                                    $271_1 = 1
                                   }
                                   $272_1 = $271_1;
                                  } else {
                                   $272_1 = 0
                                  }
                                  $270_1 = $272_1;
                                 }
                                 if ((($270_1 ? $3819 : $3822) | 0) != (1 | 0)) {
                                  break label$527
                                 }
                                 label$538 : {
                                  label$539 : {
                                   i64toi32_i32$2 = $18$hi;
                                   i64toi32_i32$0 = $18_1;
                                   i64toi32_i32$5 = 0;
                                   i64toi32_i32$1 = 1;
                                   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
                                    $273_1 = 1
                                   } else {
                                    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
                                     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
                                      $274_1 = 0
                                     } else {
                                      $274_1 = 1
                                     }
                                     $275_1 = $274_1;
                                    } else {
                                     $275_1 = 0
                                    }
                                    $273_1 = $275_1;
                                   }
                                   if ($273_1) {
                                    break label$539
                                   }
                                   i64toi32_i32$0 = $19$hi;
                                   i64toi32_i32$0 = $20$hi;
                                   i64toi32_i32$0 = $19$hi;
                                   i64toi32_i32$1 = $19_1;
                                   i64toi32_i32$2 = $20$hi;
                                   i64toi32_i32$5 = $20_1;
                                   i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
                                   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
                                   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
                                   i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
                                   $19_1 = i64toi32_i32$3;
                                   $19$hi = i64toi32_i32$4;
                                   i64toi32_i32$4 = $18$hi;
                                   i64toi32_i32$0 = $18_1;
                                   i64toi32_i32$1 = 0;
                                   i64toi32_i32$5 = 1;
                                   if ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0) {
                                    break label$538
                                   }
                                   i64toi32_i32$0 = $19$hi;
                                   i64toi32_i32$0 = $18$hi;
                                   i64toi32_i32$0 = $19$hi;
                                   i64toi32_i32$4 = $18$hi;
                                   i64toi32_i32$4 = __wasm_i64_udiv($19_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$4 | 0) | 0;
                                   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                                   $19_1 = i64toi32_i32$4;
                                   $19$hi = i64toi32_i32$0;
                                   break label$538;
                                  }
                                  i64toi32_i32$0 = $20$hi;
                                  i64toi32_i32$0 = $19$hi;
                                  i64toi32_i32$0 = $20$hi;
                                  i64toi32_i32$5 = $20_1;
                                  i64toi32_i32$4 = $19$hi;
                                  i64toi32_i32$1 = $19_1;
                                  i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
                                  i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
                                  i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
                                  i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
                                  $3839 = i64toi32_i32$2;
                                  $3839$hi = i64toi32_i32$3;
                                  i64toi32_i32$3 = $18$hi;
                                  i64toi32_i32$3 = 0;
                                  i64toi32_i32$0 = 0;
                                  i64toi32_i32$5 = $18$hi;
                                  i64toi32_i32$1 = $18_1;
                                  i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
                                  i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
                                  i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                                  i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
                                  $3841$hi = i64toi32_i32$2;
                                  i64toi32_i32$2 = $3839$hi;
                                  i64toi32_i32$0 = $3841$hi;
                                  i64toi32_i32$0 = __wasm_i64_udiv($3839 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0) | 0;
                                  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                                  $19_1 = i64toi32_i32$0;
                                  $19$hi = i64toi32_i32$2;
                                 }
                                 i64toi32_i32$2 = $19$hi;
                                 i64toi32_i32$0 = $7_1;
                                 HEAP32[($7_1 + 16 | 0) >> 2] = $19_1;
                                 HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$2;
                                 HEAP8[($7_1 + 24 | 0) >> 0] = 3;
                                 break label$525;
                                }
                                label$540 : {
                                 label$541 : {
                                  $15_1 = HEAPU8[($7_1 + 24 | 0) >> 0] | 0;
                                  if (($15_1 | 0) != (19 | 0)) {
                                   break label$541
                                  }
                                  $23_1 = +HEAPF64[$14_1 >> 3];
                                  break label$540;
                                 }
                                 label$542 : {
                                  if (($15_1 | 0) != (3 | 0)) {
                                   break label$542
                                  }
                                  i64toi32_i32$3 = $14_1;
                                  i64toi32_i32$2 = HEAP32[$14_1 >> 2] | 0;
                                  i64toi32_i32$0 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                  i64toi32_i32$3 = 0;
                                  $23_1 = +(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0);
                                  break label$540;
                                 }
                                 if (($15_1 & 15 | 0 | 0) != (4 | 0)) {
                                  break label$522
                                 }
                                 $15_1 = $292((HEAP32[$14_1 >> 2] | 0) + 16 | 0 | 0, $2_1 + 48 | 0 | 0) | 0;
                                 label$543 : {
                                  label$544 : {
                                   $16_1 = HEAP32[$14_1 >> 2] | 0;
                                   if ((HEAPU8[($16_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
                                    break label$544
                                   }
                                   $16_1 = HEAPU8[($16_1 + 7 | 0) >> 0] | 0;
                                   break label$543;
                                  }
                                  $16_1 = HEAP32[($16_1 + 12 | 0) >> 2] | 0;
                                 }
                                 if (($15_1 | 0) != ($16_1 + 1 | 0 | 0)) {
                                  break label$522
                                 }
                                 i64toi32_i32$3 = $2_1;
                                 i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
                                 i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
                                 $18_1 = i64toi32_i32$0;
                                 $18$hi = i64toi32_i32$2;
                                 i64toi32_i32$3 = 0;
                                 wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | 0);
                                 wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
                                 $23_1 = (wasm2js_f64$0 = +(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0), wasm2js_f64$1 = +wasm2js_scratch_load_f64(), wasm2js_i32$0 = (HEAPU8[($2_1 + 56 | 0) >> 0] | 0 | 0) == (3 | 0), wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
                                }
                                $14_1 = $7_1 + 32 | 0;
                                label$545 : {
                                 label$546 : {
                                  $15_1 = HEAPU8[($7_1 + 40 | 0) >> 0] | 0;
                                  if (($15_1 | 0) != (19 | 0)) {
                                   break label$546
                                  }
                                  $21_1 = +HEAPF64[$14_1 >> 3];
                                  break label$545;
                                 }
                                 label$547 : {
                                  if (($15_1 | 0) != (3 | 0)) {
                                   break label$547
                                  }
                                  i64toi32_i32$3 = $14_1;
                                  i64toi32_i32$2 = HEAP32[$14_1 >> 2] | 0;
                                  i64toi32_i32$0 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
                                  i64toi32_i32$3 = 0;
                                  $21_1 = +(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0);
                                  break label$545;
                                 }
                                 if (($15_1 & 15 | 0 | 0) != (4 | 0)) {
                                  break label$521
                                 }
                                 $15_1 = $292((HEAP32[$14_1 >> 2] | 0) + 16 | 0 | 0, $2_1 + 48 | 0 | 0) | 0;
                                 label$548 : {
                                  label$549 : {
                                   $16_1 = HEAP32[$14_1 >> 2] | 0;
                                   if ((HEAPU8[($16_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
                                    break label$549
                                   }
                                   $16_1 = HEAPU8[($16_1 + 7 | 0) >> 0] | 0;
                                   break label$548;
                                  }
                                  $16_1 = HEAP32[($16_1 + 12 | 0) >> 2] | 0;
                                 }
                                 if (($15_1 | 0) != ($16_1 + 1 | 0 | 0)) {
                                  break label$521
                                 }
                                 i64toi32_i32$3 = $2_1;
                                 i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
                                 i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
                                 $18_1 = i64toi32_i32$0;
                                 $18$hi = i64toi32_i32$2;
                                 i64toi32_i32$3 = 0;
                                 wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | 0);
                                 wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
                                 $21_1 = (wasm2js_f64$0 = +(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0), wasm2js_f64$1 = +wasm2js_scratch_load_f64(), wasm2js_i32$0 = (HEAPU8[($2_1 + 56 | 0) >> 0] | 0 | 0) == (3 | 0), wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
                                }
                                label$550 : {
                                 label$551 : {
                                  $14_1 = $13_1 + 8 | 0;
                                  $13_1 = HEAPU8[$14_1 >> 0] | 0;
                                  if (($13_1 | 0) != (19 | 0)) {
                                   break label$551
                                  }
                                  $22_1 = +HEAPF64[$7_1 >> 3];
                                  break label$550;
                                 }
                                 label$552 : {
                                  if (($13_1 | 0) != (3 | 0)) {
                                   break label$552
                                  }
                                  i64toi32_i32$3 = $7_1;
                                  i64toi32_i32$2 = HEAP32[$7_1 >> 2] | 0;
                                  i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
                                  i64toi32_i32$3 = 0;
                                  $22_1 = +(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$0 | 0);
                                  break label$550;
                                 }
                                 if (($13_1 & 15 | 0 | 0) != (4 | 0)) {
                                  break label$520
                                 }
                                 $13_1 = $292((HEAP32[$7_1 >> 2] | 0) + 16 | 0 | 0, $2_1 + 48 | 0 | 0) | 0;
                                 label$553 : {
                                  label$554 : {
                                   $15_1 = HEAP32[$7_1 >> 2] | 0;
                                   if ((HEAPU8[($15_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
                                    break label$554
                                   }
                                   $15_1 = HEAPU8[($15_1 + 7 | 0) >> 0] | 0;
                                   break label$553;
                                  }
                                  $15_1 = HEAP32[($15_1 + 12 | 0) >> 2] | 0;
                                 }
                                 if (($13_1 | 0) != ($15_1 + 1 | 0 | 0)) {
                                  break label$520
                                 }
                                 i64toi32_i32$3 = $2_1;
                                 i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
                                 i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
                                 $18_1 = i64toi32_i32$0;
                                 $18$hi = i64toi32_i32$2;
                                 i64toi32_i32$3 = 0;
                                 wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | 0);
                                 wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
                                 $22_1 = (wasm2js_f64$0 = +(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 | 0), wasm2js_f64$1 = +wasm2js_scratch_load_f64(), wasm2js_i32$0 = (HEAPU8[($2_1 + 56 | 0) >> 0] | 0 | 0) == (3 | 0), wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
                                }
                                if ($21_1 == 0.0) {
                                 break label$519
                                }
                                label$555 : {
                                 if ($21_1 > 0.0 ^ 1 | 0) {
                                  break label$555
                                 }
                                 if (!($23_1 < $22_1)) {
                                  break label$526
                                 }
                                 break label$527;
                                }
                                if (!($22_1 < $23_1)) {
                                 break label$526
                                }
                               }
                               $11_1 = ((($6_1 >>> 13 | 0) & 524284 | 0) + $11_1 | 0) + 4 | 0;
                               break label$525;
                              }
                              HEAP8[($7_1 + 40 | 0) >> 0] = 19;
                              HEAPF64[($7_1 + 32 | 0) >> 3] = $21_1;
                              HEAP8[($7_1 + 24 | 0) >> 0] = 19;
                              HEAPF64[($7_1 + 16 | 0) >> 3] = $23_1;
                              HEAPF64[$7_1 >> 3] = $22_1;
                              HEAP8[$14_1 >> 0] = 19;
                              HEAP8[($7_1 + 56 | 0) >> 0] = 19;
                              HEAPF64[($7_1 + 48 | 0) >> 3] = $22_1;
                             }
                             label$556 : {
                              label$557 : {
                               if ($12_1) {
                                break label$557
                               }
                               $12_1 = 0;
                               break label$556;
                              }
                              $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                              $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                             }
                             $6_1 = $11_1;
                             $11_1 = $6_1 + 4 | 0;
                             continue label$5;
                            }
                            $187($0_1 | 0, 5628 | 0, 0 | 0);
                            abort();
                           }
                           $189($0_1 | 0, $14_1 | 0, 5647 | 0);
                           abort();
                          }
                          $189($0_1 | 0, $14_1 | 0, 5647 | 0);
                          abort();
                         }
                         $189($0_1 | 0, $14_1 | 0, 5653 | 0);
                         abort();
                        }
                        $189($0_1 | 0, $7_1 | 0, 5658 | 0);
                        abort();
                       }
                       $187($0_1 | 0, 5628 | 0, 0 | 0);
                       abort();
                      }
                      label$558 : {
                       label$559 : {
                        if ((HEAPU8[($7_1 + 40 | 0) >> 0] | 0 | 0) != (3 | 0)) {
                         break label$559
                        }
                        label$560 : {
                         i64toi32_i32$3 = $7_1;
                         i64toi32_i32$2 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
                         $18_1 = i64toi32_i32$2;
                         $18$hi = i64toi32_i32$0;
                         if (!!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
                          break label$560
                         }
                         $6_1 = $11_1;
                         break label$558;
                        }
                        $4044 = $7_1;
                        i64toi32_i32$0 = $18$hi;
                        i64toi32_i32$3 = $18_1;
                        i64toi32_i32$2 = -1;
                        i64toi32_i32$1 = -1;
                        i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
                        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
                        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
                         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
                        }
                        i64toi32_i32$3 = $4044;
                        HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] = i64toi32_i32$5;
                        HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] = i64toi32_i32$4;
                        HEAP8[($7_1 + 56 | 0) >> 0] = 3;
                        $4049 = $7_1;
                        i64toi32_i32$0 = $7_1;
                        i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
                        i64toi32_i32$3 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
                        $4051 = i64toi32_i32$4;
                        $4051$hi = i64toi32_i32$3;
                        i64toi32_i32$3 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
                        i64toi32_i32$4 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
                        $4053 = i64toi32_i32$3;
                        $4053$hi = i64toi32_i32$4;
                        i64toi32_i32$4 = $4051$hi;
                        i64toi32_i32$0 = $4051;
                        i64toi32_i32$3 = $4053$hi;
                        i64toi32_i32$1 = $4053;
                        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
                        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
                         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                        }
                        $18_1 = i64toi32_i32$2;
                        $18$hi = i64toi32_i32$5;
                        i64toi32_i32$0 = $4049;
                        HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = i64toi32_i32$2;
                        HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$5;
                        i64toi32_i32$0 = $7_1;
                        HEAP32[$7_1 >> 2] = i64toi32_i32$2;
                        HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$5;
                        $6_1 = $11_1 - (($6_1 >>> 13 | 0) & 524284 | 0) | 0;
                        break label$558;
                       }
                       $22_1 = +HEAPF64[($7_1 + 32 | 0) >> 3];
                       $21_1 = $22_1 + +HEAPF64[$7_1 >> 3];
                       $23_1 = +HEAPF64[($7_1 + 16 | 0) >> 3];
                       label$561 : {
                        label$562 : {
                         if ($22_1 > 0.0 ^ 1 | 0) {
                          break label$562
                         }
                         if (!($21_1 <= $23_1 ^ 1 | 0)) {
                          break label$561
                         }
                         $6_1 = $11_1;
                         break label$558;
                        }
                        if (!($23_1 <= $21_1 ^ 1 | 0)) {
                         break label$561
                        }
                        $6_1 = $11_1;
                        break label$558;
                       }
                       HEAPF64[($7_1 + 48 | 0) >> 3] = $21_1;
                       HEAPF64[$7_1 >> 3] = $21_1;
                       HEAP8[($7_1 + 56 | 0) >> 0] = 19;
                       $6_1 = $11_1 - (($6_1 >>> 13 | 0) & 524284 | 0) | 0;
                      }
                      label$563 : {
                       label$564 : {
                        if (HEAP32[$4_1 >> 2] | 0) {
                         break label$564
                        }
                        $12_1 = 0;
                        break label$563;
                       }
                       $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
                       $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                      }
                      $11_1 = $6_1 + 4 | 0;
                      continue label$5;
                     }
                     label$565 : {
                      if (!(HEAP32[($0_1 + 112 | 0) >> 2] | 0)) {
                       break label$565
                      }
                      HEAP32[($0_1 + 12 | 0) >> 2] = $7_1 + 16 | 0;
                      HEAP32[($1_1 + 16 | 0) >> 2] = $11_1;
                      $206($0_1 | 0, $1_1 | 0, 1 | 0);
                      break label$19;
                     }
                     $11_1 = HEAPU16[($1_1 + 32 | 0) >> 1] | 0;
                     HEAP32[($0_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
                     label$566 : {
                      if ($11_1) {
                       break label$566
                      }
                      HEAP32[($0_1 + 12 | 0) >> 2] = $9_1 + -16 | 0;
                      break label$19;
                     }
                     $6_1 = $9_1 + -16 | 0;
                     i64toi32_i32$4 = $7_1;
                     i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
                     $4130 = i64toi32_i32$5;
                     i64toi32_i32$5 = $6_1;
                     HEAP32[$6_1 >> 2] = $4130;
                     HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     HEAP8[($6_1 + 8 | 0) >> 0] = HEAPU8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0;
                     HEAP32[($0_1 + 12 | 0) >> 2] = $9_1;
                     $7_1 = ($11_1 << 16 | 0) >> 16 | 0;
                     if (($7_1 | 0) < (2 | 0)) {
                      break label$19
                     }
                     HEAP32[($0_1 + 12 | 0) >> 2] = $9_1 + 16 | 0;
                     HEAP8[($9_1 + 8 | 0) >> 0] = 0;
                     if (($7_1 | 0) == (2 | 0)) {
                      break label$19
                     }
                     label$567 : while (1) {
                      $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
                      HEAP32[($0_1 + 12 | 0) >> 2] = $7_1 + 16 | 0;
                      HEAP8[($7_1 + 8 | 0) >> 0] = 0;
                      $7_1 = ($11_1 | 0) > (3 | 0);
                      $11_1 = $11_1 + -1 | 0;
                      if ($7_1) {
                       continue label$567
                      }
                      break label$19;
                     };
                    }
                    label$568 : {
                     if (!(HEAP32[($0_1 + 112 | 0) >> 2] | 0)) {
                      break label$568
                     }
                     HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
                     HEAP32[($1_1 + 16 | 0) >> 2] = $11_1;
                     $206($0_1 | 0, $1_1 | 0, 0 | 0);
                     break label$19;
                    }
                    $7_1 = HEAPU16[($1_1 + 32 | 0) >> 1] | 0;
                    $11_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
                    HEAP32[($0_1 + 12 | 0) >> 2] = $9_1 + -16 | 0;
                    HEAP32[($0_1 + 20 | 0) >> 2] = $11_1;
                    $11_1 = ($7_1 << 16 | 0) >> 16 | 0;
                    if (($11_1 | 0) < (1 | 0)) {
                     break label$19
                    }
                    HEAP32[($0_1 + 12 | 0) >> 2] = $9_1;
                    HEAP8[($9_1 + -8 | 0) >> 0] = 0;
                    if (($11_1 | 0) == (1 | 0)) {
                     break label$19
                    }
                    label$569 : while (1) {
                     $11_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
                     HEAP32[($0_1 + 12 | 0) >> 2] = $11_1 + 16 | 0;
                     HEAP8[($11_1 + 8 | 0) >> 0] = 0;
                     $11_1 = ($7_1 | 0) > (2 | 0);
                     $7_1 = $7_1 + -1 | 0;
                     if ($11_1) {
                      continue label$569
                     }
                     break label$19;
                    };
                   }
                   label$570 : {
                    label$571 : {
                     $12_1 = ($6_1 >>> 16 | 0) & 255 | 0;
                     if (!$12_1) {
                      break label$571
                     }
                     $12_1 = $12_1 + -1 | 0;
                     break label$570;
                    }
                    $12_1 = ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - $7_1 | 0) >> 4 | 0;
                   }
                   $13_1 = $6_1 >>> 24 | 0;
                   HEAP32[$5_1 >> 2] = $11_1;
                   label$572 : {
                    if (!($6_1 & 32768 | 0)) {
                     break label$572
                    }
                    label$573 : {
                     $11_1 = HEAP32[$3_1 >> 2] | 0;
                     if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) >>> 0 >= $11_1 >>> 0) {
                      break label$573
                     }
                     HEAP32[($0_1 + 12 | 0) >> 2] = $11_1;
                    }
                    $229($0_1 | 0, $9_1 | 0, 0 | 0) | 0;
                    if (!(HEAP32[$4_1 >> 2] | 0)) {
                     break label$572
                    }
                    $7_1 = ((HEAP32[$1_1 >> 2] | 0) + (($6_1 >>> 3 | 0) & 4080 | 0) | 0) + 16 | 0;
                   }
                   label$574 : {
                    if (!$13_1) {
                     break label$574
                    }
                    HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) - (($13_1 + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0) << 4 | 0) | 0;
                   }
                   HEAP32[($0_1 + 12 | 0) >> 2] = $7_1 + ($12_1 << 4 | 0) | 0;
                   $206($0_1 | 0, $1_1 | 0, $12_1 | 0);
                   break label$19;
                  }
                  $12_1 = ($6_1 >>> 16 | 0) & 255 | 0;
                  label$575 : {
                   label$576 : {
                    $14_1 = $6_1 >>> 24 | 0;
                    if ($14_1) {
                     break label$576
                    }
                    $14_1 = 0;
                    break label$575;
                   }
                   $14_1 = (HEAP32[($1_1 + 24 | 0) >> 2] | 0) + $14_1 | 0;
                  }
                  label$577 : {
                   label$578 : {
                    if (!$12_1) {
                     break label$578
                    }
                    HEAP32[($0_1 + 12 | 0) >> 2] = $7_1 + ($12_1 << 4 | 0) | 0;
                    break label$577;
                   }
                   $12_1 = ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - $7_1 | 0) >> 4 | 0;
                  }
                  HEAP32[$5_1 >> 2] = $11_1;
                  label$579 : {
                   if (!($6_1 & 32768 | 0)) {
                    break label$579
                   }
                   $229($0_1 | 0, $9_1 | 0, -1 | 0) | 0;
                  }
                  label$580 : {
                   $11_1 = HEAPU8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0;
                   if (($11_1 & 15 | 0 | 0) == (6 | 0)) {
                    break label$580
                   }
                   label$581 : while (1) {
                    $205($0_1 | 0, $7_1 | 0);
                    label$582 : {
                     if (((HEAP32[($0_1 + 28 | 0) >> 2] | 0) - (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0 | 0) > (31 | 0)) {
                      break label$582
                     }
                     $7_1 = $7_1 - (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
                     label$583 : {
                      if ((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
                       break label$583
                      }
                      $248($0_1 | 0);
                     }
                     $200($0_1 | 0, 1 | 0, 1 | 0) | 0;
                     $7_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $7_1 | 0;
                    }
                    $12_1 = $12_1 + 1 | 0;
                    $11_1 = HEAPU8[($7_1 + 8 | 0) >> 0] | 0;
                    if (($11_1 & 15 | 0 | 0) != (6 | 0)) {
                     continue label$581
                    }
                    break label$581;
                   };
                  }
                  label$584 : {
                   if (($11_1 | 0) == (70 | 0)) {
                    break label$584
                   }
                   $208($0_1 | 0, $7_1 | 0, -1 | 0);
                   $11_1 = HEAP32[$1_1 >> 2] | 0;
                   HEAP32[$1_1 >> 2] = $11_1 - ($14_1 << 4 | 0) | 0;
                   $206($0_1 | 0, $1_1 | 0, ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) - (HEAP32[($1_1 + 20 | 0) >> 2] | 0 ? ($11_1 + (($6_1 >>> 3 | 0) & 4080 | 0) | 0) + 16 | 0 : $7_1) | 0) >> 4 | 0 | 0);
                   break label$19;
                  }
                  HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) - ($14_1 << 4 | 0) | 0;
                  $207($0_1 | 0, $1_1 | 0, $7_1 | 0, $12_1 | 0);
                  continue label$1;
                 }
                 global$0 = $2_1 + 64 | 0;
                 return;
                }
                $12_1 = ($6_1 >>> 24 | 0) + -1 | 0;
                label$585 : {
                 $6_1 = ($6_1 >>> 16 | 0) & 255 | 0;
                 if (!$6_1) {
                  break label$585
                 }
                 HEAP32[($0_1 + 12 | 0) >> 2] = $7_1 + ($6_1 << 4 | 0) | 0;
                }
                HEAP32[$5_1 >> 2] = $11_1;
                $208($0_1 | 0, $7_1 | 0, $12_1 | 0);
                label$586 : {
                 label$587 : {
                  if (HEAP32[$4_1 >> 2] | 0) {
                   break label$587
                  }
                  $12_1 = 0;
                  break label$586;
                 }
                 $12_1 = $195($0_1 | 0, $11_1 | 0) | 0;
                 $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
                }
                $6_1 = $11_1;
                $11_1 = $6_1 + 4 | 0;
                continue label$5;
               }
               label$588 : {
                label$589 : {
                 $4398 = !($6_1 & 32768 | 0);
                 $6_1 = $9_1 + ((($6_1 >>> 16 | 0) & 255 | 0) << 4 | 0) | 0;
                 $14_1 = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
                 if (($4398 | 0) == (($14_1 | 0) == (1 | 0) | !($14_1 & 15 | 0) | 0 | 0)) {
                  break label$589
                 }
                 $6_1 = $11_1 + 4 | 0;
                 $7_1 = $12_1;
                 break label$588;
                }
                i64toi32_i32$4 = $6_1;
                i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
                i64toi32_i32$5 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
                $4419 = i64toi32_i32$0;
                i64toi32_i32$0 = $7_1;
                HEAP32[$7_1 >> 2] = $4419;
                HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$5;
                HEAP8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] = HEAPU8[($6_1 + 8 | 0) >> 0] | 0;
                $6_1 = ((((HEAP32[$11_1 >> 2] | 0) >>> 5 | 0) & 134217724 | 0) + $11_1 | 0) + -67108856 | 0;
                $7_1 = HEAP32[$4_1 >> 2] | 0;
               }
               label$590 : {
                label$591 : {
                 if ($7_1) {
                  break label$591
                 }
                 $12_1 = 0;
                 break label$590;
                }
                $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
                $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
               }
               $11_1 = $6_1 + 4 | 0;
               continue label$5;
              }
              label$592 : {
               label$593 : {
                $7_1 = HEAPU8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0;
                if ((($6_1 & 32768 | 0) >>> 15 | 0 | 0) != (($7_1 | 0) == (1 | 0) | !($7_1 & 15 | 0) | 0 | 0)) {
                 break label$593
                }
                $6_1 = $11_1 + 4 | 0;
                $7_1 = $12_1;
                break label$592;
               }
               $6_1 = ((((HEAP32[$11_1 >> 2] | 0) >>> 5 | 0) & 134217724 | 0) + $11_1 | 0) + -67108856 | 0;
               $7_1 = HEAP32[$4_1 >> 2] | 0;
              }
              label$594 : {
               label$595 : {
                if ($7_1) {
                 break label$595
                }
                $12_1 = 0;
                break label$594;
               }
               $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
               $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
              }
              $11_1 = $6_1 + 4 | 0;
              continue label$5;
             }
             $14_1 = (($6_1 >>> 16 | 0) & 255 | 0) + -127 | 0;
             label$596 : {
              label$597 : {
               switch ((HEAPU8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
               case 0:
                i64toi32_i32$4 = $7_1;
                i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
                $4492 = i64toi32_i32$5;
                $4492$hi = i64toi32_i32$0;
                i64toi32_i32$5 = $14_1;
                i64toi32_i32$0 = $14_1 >> 31 | 0;
                $4494$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $4492$hi;
                i64toi32_i32$4 = $4492;
                i64toi32_i32$5 = $4494$hi;
                i64toi32_i32$1 = $14_1;
                if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
                 $276_1 = 1
                } else {
                 if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
                  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
                   $277_1 = 0
                  } else {
                   $277_1 = 1
                  }
                  $278_1 = $277_1;
                 } else {
                  $278_1 = 0
                 }
                 $276_1 = $278_1;
                }
                $13_1 = $276_1;
                $7_1 = $12_1;
                break label$596;
               case 16:
                $13_1 = +HEAPF64[$7_1 >> 3] >= +($14_1 | 0);
                $7_1 = $12_1;
                break label$596;
               default:
                break label$597;
               };
              }
              HEAP32[$5_1 >> 2] = $11_1;
              HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
              $13_1 = $450($0_1 | 0, $7_1 | 0, $14_1 | 0, 1 | 0, $6_1 >>> 24 | 0 | 0, 21 | 0) | 0;
              $7_1 = HEAP32[$4_1 >> 2] | 0;
             }
             label$600 : {
              label$601 : {
               if (($13_1 | 0) == (($6_1 >>> 15 | 0) & 1 | 0 | 0)) {
                break label$601
               }
               $6_1 = $11_1 + 4 | 0;
               break label$600;
              }
              $6_1 = ((((HEAP32[$11_1 >> 2] | 0) >>> 5 | 0) & 134217724 | 0) + $11_1 | 0) + -67108856 | 0;
              $7_1 = HEAP32[$4_1 >> 2] | 0;
             }
             label$602 : {
              label$603 : {
               if ($7_1) {
                break label$603
               }
               $12_1 = 0;
               break label$602;
              }
              $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
              $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
             }
             $11_1 = $6_1 + 4 | 0;
             continue label$5;
            }
            $14_1 = (($6_1 >>> 16 | 0) & 255 | 0) + -127 | 0;
            label$604 : {
             label$605 : {
              switch ((HEAPU8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
              case 0:
               i64toi32_i32$1 = $7_1;
               i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
               i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
               $4552 = i64toi32_i32$4;
               $4552$hi = i64toi32_i32$0;
               i64toi32_i32$4 = $14_1;
               i64toi32_i32$0 = $14_1 >> 31 | 0;
               $4554$hi = i64toi32_i32$0;
               i64toi32_i32$0 = $4552$hi;
               i64toi32_i32$1 = $4552;
               i64toi32_i32$4 = $4554$hi;
               i64toi32_i32$5 = $14_1;
               if ((i64toi32_i32$0 | 0) > (i64toi32_i32$4 | 0)) {
                $279_1 = 1
               } else {
                if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$4 | 0)) {
                 if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$5 >>> 0) {
                  $280_1 = 0
                 } else {
                  $280_1 = 1
                 }
                 $281_1 = $280_1;
                } else {
                 $281_1 = 0
                }
                $279_1 = $281_1;
               }
               $13_1 = $279_1;
               $7_1 = $12_1;
               break label$604;
              case 16:
               $13_1 = +HEAPF64[$7_1 >> 3] > +($14_1 | 0);
               $7_1 = $12_1;
               break label$604;
              default:
               break label$605;
              };
             }
             HEAP32[$5_1 >> 2] = $11_1;
             HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
             $13_1 = $450($0_1 | 0, $7_1 | 0, $14_1 | 0, 1 | 0, $6_1 >>> 24 | 0 | 0, 20 | 0) | 0;
             $7_1 = HEAP32[$4_1 >> 2] | 0;
            }
            label$608 : {
             label$609 : {
              if (($13_1 | 0) == (($6_1 >>> 15 | 0) & 1 | 0 | 0)) {
               break label$609
              }
              $6_1 = $11_1 + 4 | 0;
              break label$608;
             }
             $6_1 = ((((HEAP32[$11_1 >> 2] | 0) >>> 5 | 0) & 134217724 | 0) + $11_1 | 0) + -67108856 | 0;
             $7_1 = HEAP32[$4_1 >> 2] | 0;
            }
            label$610 : {
             label$611 : {
              if ($7_1) {
               break label$611
              }
              $12_1 = 0;
              break label$610;
             }
             $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
             $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
            }
            $11_1 = $6_1 + 4 | 0;
            continue label$5;
           }
           $14_1 = (($6_1 >>> 16 | 0) & 255 | 0) + -127 | 0;
           label$612 : {
            label$613 : {
             switch ((HEAPU8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
             case 0:
              i64toi32_i32$5 = $7_1;
              i64toi32_i32$1 = HEAP32[$7_1 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
              $4612 = i64toi32_i32$1;
              $4612$hi = i64toi32_i32$0;
              i64toi32_i32$1 = $14_1;
              i64toi32_i32$0 = $14_1 >> 31 | 0;
              $4614$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $4612$hi;
              i64toi32_i32$5 = $4612;
              i64toi32_i32$1 = $4614$hi;
              i64toi32_i32$4 = $14_1;
              if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
               $282_1 = 1
              } else {
               if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
                if (i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0) {
                 $283_1 = 0
                } else {
                 $283_1 = 1
                }
                $284_1 = $283_1;
               } else {
                $284_1 = 0
               }
               $282_1 = $284_1;
              }
              $13_1 = $282_1;
              $7_1 = $12_1;
              break label$612;
             case 16:
              $13_1 = +HEAPF64[$7_1 >> 3] <= +($14_1 | 0);
              $7_1 = $12_1;
              break label$612;
             default:
              break label$613;
             };
            }
            HEAP32[$5_1 >> 2] = $11_1;
            HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
            $13_1 = $450($0_1 | 0, $7_1 | 0, $14_1 | 0, 0 | 0, $6_1 >>> 24 | 0 | 0, 21 | 0) | 0;
            $7_1 = HEAP32[$4_1 >> 2] | 0;
           }
           label$616 : {
            label$617 : {
             if (($13_1 | 0) == (($6_1 >>> 15 | 0) & 1 | 0 | 0)) {
              break label$617
             }
             $6_1 = $11_1 + 4 | 0;
             break label$616;
            }
            $6_1 = ((((HEAP32[$11_1 >> 2] | 0) >>> 5 | 0) & 134217724 | 0) + $11_1 | 0) + -67108856 | 0;
            $7_1 = HEAP32[$4_1 >> 2] | 0;
           }
           label$618 : {
            label$619 : {
             if ($7_1) {
              break label$619
             }
             $12_1 = 0;
             break label$618;
            }
            $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
            $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
           }
           $11_1 = $6_1 + 4 | 0;
           continue label$5;
          }
          $14_1 = (($6_1 >>> 16 | 0) & 255 | 0) + -127 | 0;
          label$620 : {
           label$621 : {
            switch ((HEAPU8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
            case 0:
             i64toi32_i32$4 = $7_1;
             i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
             i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
             $4672 = i64toi32_i32$5;
             $4672$hi = i64toi32_i32$0;
             i64toi32_i32$5 = $14_1;
             i64toi32_i32$0 = $14_1 >> 31 | 0;
             $4674$hi = i64toi32_i32$0;
             i64toi32_i32$0 = $4672$hi;
             i64toi32_i32$4 = $4672;
             i64toi32_i32$5 = $4674$hi;
             i64toi32_i32$1 = $14_1;
             if ((i64toi32_i32$0 | 0) < (i64toi32_i32$5 | 0)) {
              $285_1 = 1
             } else {
              if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
               if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0) {
                $286_1 = 0
               } else {
                $286_1 = 1
               }
               $287_1 = $286_1;
              } else {
               $287_1 = 0
              }
              $285_1 = $287_1;
             }
             $13_1 = $285_1;
             $7_1 = $12_1;
             break label$620;
            case 16:
             $13_1 = +HEAPF64[$7_1 >> 3] < +($14_1 | 0);
             $7_1 = $12_1;
             break label$620;
            default:
             break label$621;
            };
           }
           HEAP32[$5_1 >> 2] = $11_1;
           HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
           $13_1 = $450($0_1 | 0, $7_1 | 0, $14_1 | 0, 0 | 0, $6_1 >>> 24 | 0 | 0, 20 | 0) | 0;
           $7_1 = HEAP32[$4_1 >> 2] | 0;
          }
          label$624 : {
           label$625 : {
            if (($13_1 | 0) == (($6_1 >>> 15 | 0) & 1 | 0 | 0)) {
             break label$625
            }
            $6_1 = $11_1 + 4 | 0;
            break label$624;
           }
           $6_1 = ((((HEAP32[$11_1 >> 2] | 0) >>> 5 | 0) & 134217724 | 0) + $11_1 | 0) + -67108856 | 0;
           $7_1 = HEAP32[$4_1 >> 2] | 0;
          }
          label$626 : {
           label$627 : {
            if ($7_1) {
             break label$627
            }
            $12_1 = 0;
            break label$626;
           }
           $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
           $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
          }
          $11_1 = $6_1 + 4 | 0;
          continue label$5;
         }
         $14_1 = (($6_1 >>> 16 | 0) & 255 | 0) + -127 | 0;
         label$628 : {
          label$629 : {
           label$630 : {
            label$631 : {
             label$632 : {
              label$633 : {
               switch ((HEAPU8[(($9_1 + ($13_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) + -3 | 0 | 0) {
               case 0:
                i64toi32_i32$1 = $7_1;
                i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
                $4732 = i64toi32_i32$4;
                $4732$hi = i64toi32_i32$0;
                i64toi32_i32$4 = $14_1;
                i64toi32_i32$0 = $14_1 >> 31 | 0;
                $4734$hi = i64toi32_i32$0;
                i64toi32_i32$0 = $4732$hi;
                i64toi32_i32$1 = $4732;
                i64toi32_i32$4 = $4734$hi;
                i64toi32_i32$5 = $14_1;
                $7_1 = (i64toi32_i32$1 | 0) == ($14_1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0;
                break label$632;
               case 16:
                break label$633;
               default:
                break label$631;
               };
              }
              $7_1 = +HEAPF64[$7_1 >> 3] == +($14_1 | 0);
             }
             if (!($6_1 & 32768 | 0) ^ $7_1 | 0) {
              break label$629
             }
             break label$630;
            }
            if (!($6_1 & 32768 | 0)) {
             break label$629
            }
           }
           $6_1 = $11_1 + 4 | 0;
           break label$628;
          }
          $6_1 = ((((HEAP32[$11_1 >> 2] | 0) >>> 5 | 0) & 134217724 | 0) + $11_1 | 0) + -67108856 | 0;
          $12_1 = HEAP32[$4_1 >> 2] | 0;
         }
         label$635 : {
          label$636 : {
           if ($12_1) {
            break label$636
           }
           $12_1 = 0;
           break label$635;
          }
          $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
          $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
         }
         $11_1 = $6_1 + 4 | 0;
         continue label$5;
        }
        label$637 : {
         label$638 : {
          if (($465(0 | 0, $7_1 | 0, $10_1 + (($6_1 >>> 12 | 0) & 4080 | 0) | 0 | 0) | 0 | 0) == (($6_1 >>> 15 | 0) & 1 | 0 | 0)) {
           break label$638
          }
          $6_1 = $11_1 + 4 | 0;
          $7_1 = $12_1;
          break label$637;
         }
         $6_1 = ((((HEAP32[$11_1 >> 2] | 0) >>> 5 | 0) & 134217724 | 0) + $11_1 | 0) + -67108856 | 0;
         $7_1 = HEAP32[$4_1 >> 2] | 0;
        }
        label$639 : {
         label$640 : {
          if ($7_1) {
           break label$640
          }
          $12_1 = 0;
          break label$639;
         }
         $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
         $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
        }
        $11_1 = $6_1 + 4 | 0;
        continue label$5;
       }
       $15_1 = ($6_1 >>> 16 | 0) & 255 | 0;
       $14_1 = $9_1 + ($15_1 << 4 | 0) | 0;
       label$641 : {
        label$642 : {
         label$643 : {
          $13_1 = $9_1 + ($13_1 << 4 | 0) | 0;
          $16_1 = HEAPU8[($13_1 + 8 | 0) >> 0] | 0;
          if (($16_1 | 0) != (3 | 0)) {
           break label$643
          }
          label$644 : {
           $16_1 = HEAPU8[($14_1 + 8 | 0) >> 0] | 0;
           if (($16_1 | 0) != (3 | 0)) {
            break label$644
           }
           i64toi32_i32$5 = $7_1;
           i64toi32_i32$1 = HEAP32[$7_1 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
           $4821 = i64toi32_i32$1;
           $4821$hi = i64toi32_i32$0;
           i64toi32_i32$5 = $14_1;
           i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
           $4823 = i64toi32_i32$0;
           $4823$hi = i64toi32_i32$1;
           i64toi32_i32$1 = $4821$hi;
           i64toi32_i32$5 = $4821;
           i64toi32_i32$0 = $4823$hi;
           i64toi32_i32$4 = $4823;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
            $288_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
             if (i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0) {
              $289_1 = 0
             } else {
              $289_1 = 1
             }
             $290_1 = $289_1;
            } else {
             $290_1 = 0
            }
            $288_1 = $290_1;
           }
           $7_1 = $288_1;
           break label$641;
          }
          if (($16_1 & 15 | 0 | 0) != (3 | 0)) {
           break label$642
          }
          $21_1 = +HEAPF64[$14_1 >> 3];
          label$645 : {
           i64toi32_i32$4 = $7_1;
           i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
           $18_1 = i64toi32_i32$5;
           $18$hi = i64toi32_i32$1;
           i64toi32_i32$4 = i64toi32_i32$5;
           i64toi32_i32$5 = 2097152;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
           i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
           if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
           }
           i64toi32_i32$1 = i64toi32_i32$3;
           i64toi32_i32$4 = 4194304;
           i64toi32_i32$0 = 0;
           if (i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
            break label$645
           }
           i64toi32_i32$1 = $18$hi;
           i64toi32_i32$2 = $18_1;
           i64toi32_i32$0 = 0;
           $7_1 = $21_1 >= +(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0);
           break label$641;
          }
          $7_1 = $21_1 > 0.0;
          $21_1 = Math_floor($21_1);
          $13_1 = $21_1 < 9223372036854775808.0;
          label$646 : {
           label$647 : {
            if (!(Math_abs($21_1) < 9223372036854775808.0)) {
             break label$647
            }
            i64toi32_i32$7 = $21_1;
            if (Math_abs(i64toi32_i32$7) >= 1.0) {
             if (i64toi32_i32$7 > 0.0) {
              $291_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
             } else {
              $291_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
             }
             $292_1 = $291_1;
            } else {
             $292_1 = 0
            }
            i64toi32_i32$1 = $292_1;
            $19_1 = ~~i64toi32_i32$7 >>> 0;
            $19$hi = i64toi32_i32$1;
            break label$646;
           }
           i64toi32_i32$1 = -2147483648;
           $19_1 = 0;
           $19$hi = i64toi32_i32$1;
          }
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$0 = $19_1;
          i64toi32_i32$2 = $18$hi;
          i64toi32_i32$4 = $18_1;
          if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
           $293_1 = 1
          } else {
           if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
            if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
             $294_1 = 0
            } else {
             $294_1 = 1
            }
            $295_1 = $294_1;
           } else {
            $295_1 = 0
           }
           $293_1 = $295_1;
          }
          $7_1 = $21_1 >= -9223372036854775808.0 ? ($13_1 ? $293_1 : $7_1) : $7_1;
          break label$641;
         }
         if (($16_1 & 15 | 0 | 0) != (3 | 0)) {
          break label$642
         }
         $16_1 = HEAPU8[(($9_1 + ($15_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0;
         if (($16_1 & 15 | 0 | 0) != (3 | 0)) {
          break label$642
         }
         $21_1 = +HEAPF64[$7_1 >> 3];
         label$648 : {
          if (($16_1 | 0) != (19 | 0)) {
           break label$648
          }
          $7_1 = $21_1 <= +HEAPF64[$14_1 >> 3];
          break label$641;
         }
         label$649 : {
          i64toi32_i32$4 = $14_1;
          i64toi32_i32$0 = HEAP32[$14_1 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
          $18_1 = i64toi32_i32$0;
          $18$hi = i64toi32_i32$1;
          i64toi32_i32$4 = i64toi32_i32$0;
          i64toi32_i32$0 = 2097152;
          i64toi32_i32$2 = 0;
          i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
          i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
          }
          i64toi32_i32$1 = i64toi32_i32$5;
          i64toi32_i32$4 = 4194304;
          i64toi32_i32$2 = 0;
          if (i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
           break label$649
          }
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$3 = $18_1;
          i64toi32_i32$2 = 0;
          $7_1 = $21_1 <= +(i64toi32_i32$3 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0);
          break label$641;
         }
         $22_1 = Math_floor($21_1);
         $22_1 = $22_1 != $21_1 ? $22_1 + 1.0 : $22_1;
         $7_1 = $22_1 < 9223372036854775808.0;
         label$650 : {
          label$651 : {
           if (!(Math_abs($22_1) < 9223372036854775808.0)) {
            break label$651
           }
           i64toi32_i32$7 = $22_1;
           if (Math_abs($22_1) >= 1.0) {
            if (i64toi32_i32$7 > 0.0) {
             $297_1 = ~~Math_min(Math_floor(i64toi32_i32$7 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
            } else {
             $297_1 = ~~Math_ceil((i64toi32_i32$7 - +(~~i64toi32_i32$7 >>> 0 >>> 0)) / 4294967296.0) >>> 0
            }
            $298_1 = $297_1;
           } else {
            $298_1 = 0
           }
           i64toi32_i32$1 = $298_1;
           $19_1 = ~~i64toi32_i32$7 >>> 0;
           $19$hi = i64toi32_i32$1;
           break label$650;
          }
          i64toi32_i32$1 = -2147483648;
          $19_1 = 0;
          $19$hi = i64toi32_i32$1;
         }
         i64toi32_i32$1 = $19$hi;
         i64toi32_i32$1 = $18$hi;
         i64toi32_i32$1 = $19$hi;
         i64toi32_i32$2 = $19_1;
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$4 = $18_1;
         if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
          $299_1 = 1
         } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0) {
            $300_1 = 0
           } else {
            $300_1 = 1
           }
           $301_1 = $300_1;
          } else {
           $301_1 = 0
          }
          $299_1 = $301_1;
         }
         $13_1 = $21_1 < 0.0;
         $7_1 = $22_1 >= -9223372036854775808.0 ? ($7_1 ? $299_1 : $13_1) : $13_1;
         break label$641;
        }
        HEAP32[$5_1 >> 2] = $11_1;
        HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
        label$652 : {
         label$653 : {
          if (((HEAPU8[($13_1 + 8 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
           break label$653
          }
          if (((HEAPU8[(($9_1 + ($15_1 << 4 | 0) | 0) + 8 | 0) >> 0] | 0) & 15 | 0 | 0) != (4 | 0)) {
           break label$653
          }
          $12_1 = HEAP32[$14_1 >> 2] | 0;
          label$654 : {
           label$655 : {
            $7_1 = HEAP32[$7_1 >> 2] | 0;
            if ((HEAPU8[($7_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
             break label$655
            }
            $15_1 = HEAPU8[($7_1 + 7 | 0) >> 0] | 0;
            break label$654;
           }
           $15_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
          }
          $7_1 = $7_1 + 16 | 0;
          $13_1 = $12_1 + 16 | 0;
          label$656 : {
           label$657 : {
            if ((HEAPU8[($12_1 + 4 | 0) >> 0] | 0 | 0) != (4 | 0)) {
             break label$657
            }
            $14_1 = HEAPU8[($12_1 + 7 | 0) >> 0] | 0;
            break label$656;
           }
           $14_1 = HEAP32[($12_1 + 12 | 0) >> 2] | 0;
          }
          label$658 : while (1) {
           label$659 : {
            label$660 : {
             $12_1 = $754($7_1 | 0, $13_1 | 0) | 0;
             if ($12_1) {
              break label$660
             }
             label$661 : {
              $12_1 = $961($7_1 | 0) | 0;
              if (($12_1 | 0) != ($14_1 | 0)) {
               break label$661
              }
              $12_1 = ($14_1 | 0) != ($15_1 | 0);
              break label$660;
             }
             if (($12_1 | 0) != ($15_1 | 0)) {
              break label$659
             }
             $12_1 = -1;
            }
            $7_1 = ($12_1 | 0) < (1 | 0);
            break label$652;
           }
           $12_1 = $12_1 + 1 | 0;
           $14_1 = $14_1 - $12_1 | 0;
           $15_1 = $15_1 - $12_1 | 0;
           $13_1 = $13_1 + $12_1 | 0;
           $7_1 = $7_1 + $12_1 | 0;
           continue label$658;
          };
         }
         $7_1 = $449($0_1 | 0, $7_1 | 0, $14_1 | 0, 21 | 0) | 0;
        }
        $12_1 = HEAP32[$4_1 >> 2] | 0;
       }
       label$662 : {
        label$663 : {
         if (($7_1 | 0) == (($6_1 >>> 15 | 0) & 1 | 0 | 0)) {
          break label$663
         }
         $6_1 = $11_1 + 4 | 0;
         $7_1 = $12_1;
         break label$662;
        }
        $6_1 = ((((HEAP32[$11_1 >> 2] | 0) >>> 5 | 0) & 134217724 | 0) + $11_1 | 0) + -67108856 | 0;
        $7_1 = HEAP32[$4_1 >> 2] | 0;
       }
       label$664 : {
        label$665 : {
         if ($7_1) {
          break label$665
         }
         $12_1 = 0;
         break label$664;
        }
        $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
        $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
       }
       $11_1 = $6_1 + 4 | 0;
       continue label$5;
      }
      $7_1 = $449($0_1 | 0, $7_1 | 0, $14_1 | 0, 20 | 0) | 0;
     }
     $12_1 = HEAP32[$4_1 >> 2] | 0;
    }
    label$666 : {
     label$667 : {
      if (($7_1 | 0) == (($6_1 >>> 15 | 0) & 1 | 0 | 0)) {
       break label$667
      }
      $6_1 = $11_1 + 4 | 0;
      $7_1 = $12_1;
      break label$666;
     }
     $6_1 = ((((HEAP32[$11_1 >> 2] | 0) >>> 5 | 0) & 134217724 | 0) + $11_1 | 0) + -67108856 | 0;
     $7_1 = HEAP32[$4_1 >> 2] | 0;
    }
    label$668 : {
     label$669 : {
      if ($7_1) {
       break label$669
      }
      $12_1 = 0;
      break label$668;
     }
     $12_1 = $195($0_1 | 0, $6_1 | 0) | 0;
     $9_1 = (HEAP32[$1_1 >> 2] | 0) + 16 | 0;
    }
    $11_1 = $6_1 + 4 | 0;
    continue label$5;
   };
  };
 }
 
 function $474($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   $3_1 = FUNCTION_TABLE[HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 16 | 0) >> 2] | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0, $1_1 + 12 | 0) | 0;
   if (!$3_1) {
    break label$1
   }
   $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
   HEAP32[$0_1 >> 2] = $4_1 + -1 | 0;
   $2_1 = HEAPU8[$3_1 >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $475($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = 0;
 }
 
 function $476($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (!$5_1) {
       break label$4
      }
      $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      break label$3;
     }
     label$5 : {
      $6_1 = FUNCTION_TABLE[HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0](HEAP32[($0_1 + 16 | 0) >> 2] | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0, $3_1 + 12 | 0) | 0;
      if ($6_1) {
       break label$5
      }
      $4_1 = $2_1;
      break label$1;
     }
     label$6 : {
      $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
      if ($5_1) {
       break label$6
      }
      $4_1 = $2_1;
      break label$1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
     HEAP32[$0_1 >> 2] = $5_1;
    }
    $7_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $2_1;
    $6_1 = $951($1_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
    $5_1 = (HEAP32[$0_1 >> 2] | 0) - $7_1 | 0;
    HEAP32[$0_1 >> 2] = $5_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $7_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
    $1_1 = $6_1 + $7_1 | 0;
    $2_1 = $2_1 - $7_1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $477() {
  var $0_1 = 0;
  $0_1 = $531() | 0;
  $731($0_1 | 0);
  $36($0_1 | 0, 12 | 0, 0 | 0);
  $49($0_1 | 0, 5706 | 0);
  return $0_1 | 0;
 }
 
 function $478($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0.0, $7_1 = 0.0, $8_1 = 0.0, $9_1 = 0.0, $10_1 = 0.0, $11_1 = 0.0, $12_1 = 0.0, $13_1 = 0.0, $14_1 = 0.0, $15_1 = 0.0, $16_1 = 0.0, $3_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 192 | 0;
  global$0 = $1_1;
  $2_1 = $6($0_1 | 0) | 0;
  $3_1 = $24($0_1 | 0, 1 | 0, 0 | 0) | 0;
  $952($1_1 + 96 | 0 | 0, 0 | 0, 88 | 0) | 0;
  $4_1 = 2;
  $6_1 = 0.0;
  $7_1 = 0.0;
  $8_1 = 0.0;
  $9_1 = 0.0;
  $10_1 = 0.0;
  $11_1 = 0.0;
  $12_1 = 0.0;
  $13_1 = 0.0;
  $14_1 = 0.0;
  $15_1 = 0.0;
  $16_1 = 0.0;
  label$1 : {
   if (($2_1 | 0) < (2 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    HEAPF64[((($4_1 << 3 | 0) + ($1_1 + 96 | 0) | 0) + -16 | 0) >> 3] = +$21($0_1 | 0, $4_1 | 0, 0 | 0);
    $5_1 = ($4_1 | 0) != ($2_1 | 0);
    $4_1 = $4_1 + 1 | 0;
    if ($5_1) {
     continue label$2
    }
    break label$2;
   };
   $6_1 = +HEAPF64[($1_1 + 176 | 0) >> 3];
   $7_1 = +HEAPF64[($1_1 + 168 | 0) >> 3];
   $8_1 = +HEAPF64[($1_1 + 160 | 0) >> 3];
   $9_1 = +HEAPF64[($1_1 + 152 | 0) >> 3];
   $10_1 = +HEAPF64[($1_1 + 144 | 0) >> 3];
   $11_1 = +HEAPF64[($1_1 + 136 | 0) >> 3];
   $12_1 = +HEAPF64[($1_1 + 128 | 0) >> 3];
   $13_1 = +HEAPF64[($1_1 + 120 | 0) >> 3];
   $14_1 = +HEAPF64[($1_1 + 112 | 0) >> 3];
   $15_1 = +HEAPF64[($1_1 + 104 | 0) >> 3];
   $16_1 = +HEAPF64[($1_1 + 96 | 0) >> 3];
  }
  HEAPF64[($1_1 + 88 | 0) >> 3] = $6_1;
  HEAPF64[($1_1 + 80 | 0) >> 3] = $7_1;
  HEAPF64[($1_1 + 72 | 0) >> 3] = $8_1;
  HEAPF64[($1_1 + 64 | 0) >> 3] = $9_1;
  HEAPF64[($1_1 + 56 | 0) >> 3] = $10_1;
  HEAPF64[($1_1 + 48 | 0) >> 3] = $11_1;
  HEAPF64[($1_1 + 40 | 0) >> 3] = $12_1;
  HEAPF64[($1_1 + 32 | 0) >> 3] = $13_1;
  HEAPF64[($1_1 + 24 | 0) >> 3] = $14_1;
  HEAPF64[($1_1 + 16 | 0) >> 3] = $15_1;
  HEAPF64[($1_1 + 8 | 0) >> 3] = $16_1;
  HEAP32[$1_1 >> 2] = $3_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + -1 | 0;
  $30($0_1 | 0, +(+(fimport$12(5714 | 0, 5823 | 0, $1_1 | 0) | 0 | 0)));
  global$0 = $1_1 + 192 | 0;
  return 1 | 0;
 }
 
 function $479($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $1_1 = $522($0_1 | 0, $1_1 | 0, $961($1_1 | 0) | 0 | 0, 5672 | 0, 0 | 0) | 0;
    if ($1_1) {
     break label$2
    }
    $3_1 = $6($0_1 | 0) | 0;
    $36($0_1 | 0, 13 | 0, 0 | 0);
    $8($0_1 | 0, $3_1 | 0, 1 | 0);
    $1_1 = $58($0_1 | 0, 0 | 0, 0 | 0, $3_1 | 0, 0 | 0, 0 | 0) | 0;
    $8($0_1 | 0, $3_1 | 0, -1 | 0);
    $7($0_1 | 0, -2 | 0);
    if ($1_1) {
     break label$2
    }
    $1_1 = 0;
    break label$1;
   }
   $4_1 = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = 5877;
   $3_1 = HEAP32[(0 + 18944 | 0) >> 2] | 0;
   $824($3_1 | 0, 5883 | 0, $2_1 + 16 | 0 | 0) | 0;
   $795($3_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = $4_1;
   $824($3_1 | 0, 5888 | 0, $2_1 | 0) | 0;
   $795($3_1 | 0) | 0;
   $7($0_1 | 0, -2 | 0);
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $480($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = $24($0_1 | 0, 1 | 0, 0 | 0) | 0;
    if ($2_1) {
     break label$2
    }
    label$3 : {
     if (!($524($0_1 | 0, 1 | 0, 5837 | 0) | 0)) {
      break label$3
     }
     if (($11($0_1 | 0, -1 | 0) | 0 | 0) == (4 | 0)) {
      break label$1
     }
    }
    HEAP32[$1_1 >> 2] = $12($0_1 | 0, $11($0_1 | 0, 1 | 0) | 0 | 0) | 0;
    $2_1 = $35($0_1 | 0, 5848 | 0, $1_1 | 0) | 0;
   }
   $484($0_1 | 0, $0_1 | 0, $2_1 | 0, 1 | 0);
  }
  global$0 = $1_1 + 16 | 0;
  return 1 | 0;
 }
 
 function $481($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (($40($0_1 | 0, $1_1 | 0) | 0 | 0) == (6 | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = $1_1;
    $958(5673 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   $57($0_1 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $482($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $40($0_1 | 0, $1_1 | 0) | 0;
  $7($0_1 | 0, -2 | 0);
  return ($1_1 | 0) == (6 | 0) | 0;
 }
 
 function $483($0_1) {
  $0_1 = $0_1 | 0;
  $408($0_1 | 0);
 }
 
 function $484($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $8_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $9_1 = 0, $93_1 = 0, $95_1 = 0, $275_1 = 0, $277_1 = 0;
  $4_1 = global$0 - 736 | 0;
  global$0 = $4_1;
  $5_1 = 1;
  $6_1 = 1;
  label$1 : while (1) {
   $7_1 = $6_1;
   $6_1 = $5_1;
   $5_1 = $6_1 << 1 | 0;
   if ($179($1_1 | 0, $6_1 | 0, $4_1 + 624 | 0 | 0) | 0) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   if (($7_1 | 0) >= ($6_1 | 0)) {
    break label$2
   }
   label$3 : while (1) {
    $5_1 = ($6_1 + $7_1 | 0 | 0) / (2 | 0) | 0;
    $8_1 = $179($1_1 | 0, $5_1 | 0, $4_1 + 624 | 0 | 0) | 0;
    $7_1 = $8_1 ? $5_1 + 1 | 0 : $7_1;
    $6_1 = $8_1 ? $6_1 : $5_1;
    if (($7_1 | 0) < ($6_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP32[($4_1 + 108 | 0) >> 2] = $0_1;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[($4_1 + 100 | 0) >> 2] = 512;
  HEAP32[($4_1 + 104 | 0) >> 2] = i64toi32_i32$0;
  $9_1 = ($4_1 + 96 | 0) + 16 | 0;
  HEAP32[($4_1 + 96 | 0) >> 2] = $9_1;
  label$4 : {
   if (!$2_1) {
    break label$4
   }
   label$5 : {
    label$6 : {
     $7_1 = $961($2_1 | 0) | 0;
     if ($7_1) {
      break label$6
     }
     $7_1 = 0;
     break label$5;
    }
    $951($485($4_1 + 96 | 0 | 0, $7_1 | 0, -1 | 0) | 0 | 0, $2_1 | 0, $7_1 | 0) | 0;
    $7_1 = (HEAP32[($4_1 + 104 | 0) >> 2] | 0) + $7_1 | 0;
    HEAP32[($4_1 + 104 | 0) >> 2] = $7_1;
    if ($7_1 >>> 0 < (HEAP32[($4_1 + 100 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    $485($4_1 + 96 | 0 | 0, 1 | 0, -1 | 0) | 0;
    $7_1 = HEAP32[($4_1 + 104 | 0) >> 2] | 0;
   }
   HEAP32[($4_1 + 104 | 0) >> 2] = $7_1 + 1 | 0;
   HEAP8[((HEAP32[($4_1 + 96 | 0) >> 2] | 0) + $7_1 | 0) >> 0] = 10;
  }
  $7_1 = $485($4_1 + 96 | 0 | 0, 16 | 0, -1 | 0) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 5900 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5901 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 5902 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 5903 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 5904 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5905 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 5906 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 5907 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $93_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $7_1 + 8 | 0;
  $17_1 = $93_1;
  HEAP8[i64toi32_i32$0 >> 0] = $17_1;
  HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $17_1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $17_1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $17_1 >>> 24 | 0;
  HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
  HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
  HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
  HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 5892 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5893 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 5894 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 5895 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 5896 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5897 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 5898 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 5899 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $95_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $7_1;
  $18_1 = $95_1;
  HEAP8[$7_1 >> 0] = $18_1;
  HEAP8[($7_1 + 1 | 0) >> 0] = $18_1 >>> 8 | 0;
  HEAP8[($7_1 + 2 | 0) >> 0] = $18_1 >>> 16 | 0;
  HEAP8[($7_1 + 3 | 0) >> 0] = $18_1 >>> 24 | 0;
  HEAP8[($7_1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[($7_1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[($7_1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[($7_1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  HEAP32[($4_1 + 104 | 0) >> 2] = (HEAP32[($4_1 + 104 | 0) >> 2] | 0) + 16 | 0;
  label$7 : {
   if (!($179($1_1 | 0, $3_1 | 0, $4_1 + 624 | 0 | 0) | 0)) {
    break label$7
   }
   $7_1 = ($6_1 + ($3_1 ^ -1 | 0) | 0 | 0) > (21 | 0) ? 10 : -1;
   $8_1 = $6_1 + -11 | 0;
   $2_1 = $4_1 + 668 | 0;
   label$8 : while (1) {
    label$9 : {
     label$10 : {
      if ($7_1) {
       break label$10
      }
      HEAP32[$4_1 >> 2] = $8_1 + ($3_1 ^ -1 | 0) | 0;
      $35($0_1 | 0, 5909 | 0, $4_1 | 0) | 0;
      $6_1 = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
      $5_1 = $24($6_1 | 0, -1 | 0, $4_1 + 732 | 0 | 0) | 0;
      $951($485($4_1 + 96 | 0 | 0, HEAP32[($4_1 + 732 | 0) >> 2] | 0 | 0, -2 | 0) | 0 | 0, $5_1 | 0, HEAP32[($4_1 + 732 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($4_1 + 104 | 0) >> 2] = (HEAP32[($4_1 + 104 | 0) >> 2] | 0) + (HEAP32[($4_1 + 732 | 0) >> 2] | 0) | 0;
      $7($6_1 | 0, -2 | 0);
      $3_1 = $8_1;
      break label$9;
     }
     $183($1_1 | 0, 5936 | 0, $4_1 + 624 | 0 | 0) | 0;
     label$11 : {
      label$12 : {
       $6_1 = HEAP32[($4_1 + 648 | 0) >> 2] | 0;
       if (($6_1 | 0) > (0 | 0)) {
        break label$12
       }
       HEAP32[($4_1 + 64 | 0) >> 2] = $2_1;
       $35($0_1 | 0, 5941 | 0, $4_1 + 64 | 0 | 0) | 0;
       break label$11;
      }
      HEAP32[($4_1 + 84 | 0) >> 2] = $6_1;
      HEAP32[($4_1 + 80 | 0) >> 2] = $2_1;
      $35($0_1 | 0, 5951 | 0, $4_1 + 80 | 0 | 0) | 0;
     }
     $6_1 = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
     $5_1 = $24($6_1 | 0, -1 | 0, $4_1 + 732 | 0 | 0) | 0;
     $951($485($4_1 + 96 | 0 | 0, HEAP32[($4_1 + 732 | 0) >> 2] | 0 | 0, -2 | 0) | 0 | 0, $5_1 | 0, HEAP32[($4_1 + 732 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 104 | 0) >> 2] = (HEAP32[($4_1 + 104 | 0) >> 2] | 0) + (HEAP32[($4_1 + 732 | 0) >> 2] | 0) | 0;
     $7($6_1 | 0, -2 | 0);
     label$13 : {
      label$14 : {
       if (!($486($0_1 | 0, $4_1 + 624 | 0 | 0) | 0)) {
        break label$14
       }
       HEAP32[($4_1 + 48 | 0) >> 2] = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
       $35($0_1 | 0, 6488 | 0, $4_1 + 48 | 0 | 0) | 0;
       $8($0_1 | 0, -2 | 0, -1 | 0);
       $7($0_1 | 0, -2 | 0);
       break label$13;
      }
      label$15 : {
       $6_1 = HEAP32[($4_1 + 632 | 0) >> 2] | 0;
       if (!(HEAPU8[$6_1 >> 0] | 0)) {
        break label$15
       }
       HEAP32[($4_1 + 32 | 0) >> 2] = $6_1;
       HEAP32[($4_1 + 36 | 0) >> 2] = HEAP32[($4_1 + 628 | 0) >> 2] | 0;
       $35($0_1 | 0, 6502 | 0, $4_1 + 32 | 0 | 0) | 0;
       break label$13;
      }
      label$16 : {
       $6_1 = HEAPU8[(HEAP32[($4_1 + 636 | 0) >> 2] | 0) >> 0] | 0;
       if (($6_1 | 0) == (67 | 0)) {
        break label$16
       }
       label$17 : {
        if (($6_1 | 0) != (109 | 0)) {
         break label$17
        }
        $33($0_1 | 0, 6510 | 0) | 0;
        break label$13;
       }
       HEAP32[($4_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($4_1 + 652 | 0) >> 2] | 0;
       $35($0_1 | 0, 6521 | 0, $4_1 + 16 | 0 | 0) | 0;
       break label$13;
      }
      $33($0_1 | 0, 6046 | 0) | 0;
     }
     $3_1 = $3_1 + 1 | 0;
     $6_1 = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
     $5_1 = $24($6_1 | 0, -1 | 0, $4_1 + 732 | 0 | 0) | 0;
     $951($485($4_1 + 96 | 0 | 0, HEAP32[($4_1 + 732 | 0) >> 2] | 0 | 0, -2 | 0) | 0 | 0, $5_1 | 0, HEAP32[($4_1 + 732 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 104 | 0) >> 2] = (HEAP32[($4_1 + 104 | 0) >> 2] | 0) + (HEAP32[($4_1 + 732 | 0) >> 2] | 0) | 0;
     $7($6_1 | 0, -2 | 0);
     if (!(HEAPU8[($4_1 + 663 | 0) >> 0] | 0)) {
      break label$9
     }
     $6_1 = $485($4_1 + 96 | 0 | 0, 20 | 0, -1 | 0) | 0;
     $19_1 = 0;
     $20_1 = $6_1 + 16 | 0;
     $21_1 = HEAPU8[($19_1 + 5980 | 0) >> 0] | 0 | ((HEAPU8[($19_1 + 5981 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($19_1 + 5982 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($19_1 + 5983 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     HEAP8[$20_1 >> 0] = $21_1;
     HEAP8[($20_1 + 1 | 0) >> 0] = $21_1 >>> 8 | 0;
     HEAP8[($20_1 + 2 | 0) >> 0] = $21_1 >>> 16 | 0;
     HEAP8[($20_1 + 3 | 0) >> 0] = $21_1 >>> 24 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 5972 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5973 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 5974 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 5975 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 5976 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5977 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 5978 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 5979 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $275_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1 + 8 | 0;
     $22_1 = $275_1;
     HEAP8[i64toi32_i32$0 >> 0] = $22_1;
     HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $22_1 >>> 8 | 0;
     HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $22_1 >>> 16 | 0;
     HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $22_1 >>> 24 | 0;
     HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
     HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
     HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
     HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 5964 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5965 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 5966 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 5967 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 5968 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5969 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 5970 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 5971 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $277_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $6_1;
     $23_1 = $277_1;
     HEAP8[$6_1 >> 0] = $23_1;
     HEAP8[($6_1 + 1 | 0) >> 0] = $23_1 >>> 8 | 0;
     HEAP8[($6_1 + 2 | 0) >> 0] = $23_1 >>> 16 | 0;
     HEAP8[($6_1 + 3 | 0) >> 0] = $23_1 >>> 24 | 0;
     HEAP8[($6_1 + 4 | 0) >> 0] = i64toi32_i32$0;
     HEAP8[($6_1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
     HEAP8[($6_1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
     HEAP8[($6_1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
     HEAP32[($4_1 + 104 | 0) >> 2] = (HEAP32[($4_1 + 104 | 0) >> 2] | 0) + 20 | 0;
    }
    $7_1 = $7_1 + -1 | 0;
    if ($179($1_1 | 0, $3_1 | 0, $4_1 + 624 | 0 | 0) | 0) {
     continue label$8
    }
    break label$8;
   };
  }
  $6_1 = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
  $32($6_1 | 0, HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0) | 0;
  label$18 : {
   if ((HEAP32[($4_1 + 96 | 0) >> 2] | 0 | 0) == ($9_1 | 0)) {
    break label$18
   }
   $9($6_1 | 0, -1 | 0, -3 | 0);
   $7($6_1 | 0, -3 | 0);
  }
  global$0 = $4_1 + 736 | 0;
 }
 
 function $485($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $0_1 = (HEAP32[$0_1 >> 2] | 0) + $5_1 | 0;
    break label$1;
   }
   $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     if ($5_1 >>> 0 <= ($1_1 ^ -1 | 0) >>> 0) {
      break label$4
     }
     $5_1 = $493($6_1 | 0, 6583 | 0, 0 | 0) | 0;
     break label$3;
    }
    $1_1 = $5_1 + $1_1 | 0;
    $5_1 = $4_1 << 1 | 0;
    $5_1 = $5_1 >>> 0 < $1_1 >>> 0 ? $1_1 : $5_1;
   }
   label$5 : {
    label$6 : {
     if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($0_1 + 16 | 0 | 0)) {
      break label$6
     }
     $1_1 = $69($6_1 | 0, $3_1 + 8 | 0 | 0) | 0;
     $2_1 = $26($6_1 | 0, $2_1 | 0) | 0;
     $1_1 = FUNCTION_TABLE[$1_1 | 0](HEAP32[($3_1 + 8 | 0) >> 2] | 0, HEAP32[$2_1 >> 2] | 0, HEAP32[($2_1 + 4 | 0) >> 2] | 0, $5_1) | 0;
     label$7 : {
      if (!$5_1) {
       break label$7
      }
      if ($1_1) {
       break label$7
      }
      $493($6_1 | 0, 6600 | 0, 0 | 0) | 0;
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = $5_1;
     HEAP32[$2_1 >> 2] = $1_1;
     break label$5;
    }
    $29($6_1 | 0);
    i64toi32_i32$1 = $72($6_1 | 0, 8 | 0, 0 | 0) | 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
    label$8 : {
     if (!($500($6_1 | 0, 6640 | 0) | 0)) {
      break label$8
     }
     $514($6_1 | 0, 6656 | 0, 0 | 0);
    }
    $55($6_1 | 0, -2 | 0) | 0;
    $8($6_1 | 0, $2_1 + -1 | 0 | 0, 2 | 0);
    $66($6_1 | 0, $2_1 | 0);
    $1_1 = $69($6_1 | 0, $3_1 + 12 | 0 | 0) | 0;
    $2_1 = $26($6_1 | 0, $2_1 | 0) | 0;
    $1_1 = FUNCTION_TABLE[$1_1 | 0](HEAP32[($3_1 + 12 | 0) >> 2] | 0, HEAP32[$2_1 >> 2] | 0, HEAP32[($2_1 + 4 | 0) >> 2] | 0, $5_1) | 0;
    label$9 : {
     if (!$5_1) {
      break label$9
     }
     if ($1_1) {
      break label$9
     }
     $493($6_1 | 0, 6600 | 0, 0 | 0) | 0;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $5_1;
    HEAP32[$2_1 >> 2] = $1_1;
    $951($1_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[$0_1 >> 2] = $1_1;
   $0_1 = $1_1 + (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $486($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $6($0_1 | 0) | 0;
  $183($0_1 | 0, 6538 | 0, $1_1 | 0) | 0;
  $42($0_1 | 0, -1001e3 | 0, 6377 | 0) | 0;
  label$1 : {
   $1_1 = $2_1 + 1 | 0;
   if ($494($0_1 | 0, $1_1 | 0, 2 | 0) | 0) {
    break label$1
   }
   $7($0_1 | 0, $2_1 | 0);
   return 0 | 0;
  }
  label$2 : {
   $2_1 = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
   if ($875($2_1 | 0, 6540 | 0, 3 | 0) | 0) {
    break label$2
   }
   $33($0_1 | 0, $2_1 + 3 | 0 | 0) | 0;
   $8($0_1 | 0, -2 | 0, -1 | 0);
   $7($0_1 | 0, -2 | 0);
  }
  $9($0_1 | 0, -1 | 0, $1_1 | 0);
  $7($0_1 | 0, $1_1 | 0);
  return 1 | 0;
 }
 
 function $487($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = 512;
  HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  HEAP32[$1_1 >> 2] = $1_1 + 16 | 0;
 }
 
 function $488($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = $961($1_1 | 0) | 0;
   if (!$2_1) {
    break label$1
   }
   $951($485($0_1 | 0, $2_1 | 0, -1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $2_1 | 0;
  }
 }
 
 function $489($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $485($0_1 | 0, $1_1 | 0, -1 | 0) | 0 | 0;
 }
 
 function $490($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $3_1 = $24($2_1 | 0, -1 | 0, $1_1 + 12 | 0 | 0) | 0;
  $951($485($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, -2 | 0) | 0 | 0, $3_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + (HEAP32[($1_1 + 12 | 0) >> 2] | 0) | 0;
  $7($2_1 | 0, -2 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $491($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $32($1_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($0_1 + 16 | 0 | 0)) {
    break label$1
   }
   $9($1_1 | 0, -1 | 0, -3 | 0);
   $7($1_1 | 0, -3 | 0);
  }
 }
 
 function $492($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 160 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($179($0_1 | 0, 0 | 0, $3_1 + 48 | 0 | 0) | 0) {
     break label$2
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
    HEAP32[$3_1 >> 2] = $1_1;
    $0_1 = $493($0_1 | 0, 5985 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $183($0_1 | 0, 6007 | 0, $3_1 + 48 | 0 | 0) | 0;
   label$3 : {
    if ($876(HEAP32[($3_1 + 56 | 0) >> 2] | 0 | 0, 6009 | 0) | 0) {
     break label$3
    }
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     break label$3
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
    HEAP32[($3_1 + 20 | 0) >> 2] = $2_1;
    $0_1 = $493($0_1 | 0, 6016 | 0, $3_1 + 16 | 0 | 0) | 0;
    break label$1;
   }
   label$4 : {
    $4_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
    if ($4_1) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if ($486($0_1 | 0, $3_1 + 48 | 0 | 0) | 0) {
       break label$6
      }
      $4_1 = 6046;
      break label$5;
     }
     $4_1 = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
    }
    HEAP32[($3_1 + 52 | 0) >> 2] = $4_1;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 36 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 32 | 0) >> 2] = $1_1;
   $0_1 = $493($0_1 | 0, 6048 | 0, $3_1 + 32 | 0 | 0) | 0;
  }
  global$0 = $3_1 + 160 | 0;
  return $0_1 | 0;
 }
 
 function $493($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 128 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!($179($0_1 | 0, 1 | 0, $3_1 + 16 | 0 | 0) | 0)) {
     break label$2
    }
    $183($0_1 | 0, 6120 | 0, $3_1 + 16 | 0 | 0) | 0;
    $2_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
    if (($2_1 | 0) < (1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
    HEAP32[$3_1 >> 2] = $3_1 + 60 | 0;
    $35($0_1 | 0, 6123 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $35($0_1 | 0, 6131 | 0, 0 | 0) | 0;
  }
  $34($0_1 | 0, $1_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $67($0_1 | 0, 2 | 0);
  $0_1 = $64($0_1 | 0) | 0;
  global$0 = $3_1 + 128 | 0;
  return $0_1 | 0;
 }
 
 function $494($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   if (($11($0_1 | 0, -1 | 0) | 0 | 0) != (5 | 0)) {
    break label$1
   }
   $29($0_1 | 0);
   if (!($65($0_1 | 0, -2 | 0) | 0)) {
    break label$1
   }
   $2_1 = $2_1 + -1 | 0;
   label$2 : while (1) {
    label$3 : {
     if (($11($0_1 | 0, -2 | 0) | 0 | 0) != (4 | 0)) {
      break label$3
     }
     label$4 : {
      if (!($17($0_1 | 0, $1_1 | 0, -1 | 0) | 0)) {
       break label$4
      }
      $7($0_1 | 0, -2 | 0);
      return 1 | 0;
     }
     if (!($494($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0)) {
      break label$3
     }
     $33($0_1 | 0, 6544 | 0) | 0;
     $9($0_1 | 0, -1 | 0, -3 | 0);
     $7($0_1 | 0, -2 | 0);
     $67($0_1 | 0, 3 | 0);
     return 1 | 0;
    }
    $7($0_1 | 0, -2 | 0);
    if ($65($0_1 | 0, -2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $495($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!($47($0_1 | 0, $1_1 | 0) | 0)) {
     break label$2
    }
    $33($0_1 | 0, 6078 | 0) | 0;
    label$3 : {
     $4_1 = $44($0_1 | 0, -2 | 0) | 0;
     if ($4_1) {
      break label$3
     }
     $7($0_1 | 0, -3 | 0);
     break label$2;
    }
    $8($0_1 | 0, -2 | 0, -1 | 0);
    $7($0_1 | 0, -2 | 0);
    if (($4_1 | 0) != (4 | 0)) {
     break label$2
    }
    $4_1 = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
    break label$1;
   }
   $4_1 = 6085;
   if (($11($0_1 | 0, $1_1 | 0) | 0 | 0) == (2 | 0)) {
    break label$1
   }
   $4_1 = $12($0_1 | 0, $11($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  }
  HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
  HEAP32[$3_1 >> 2] = $2_1;
  $0_1 = $492($0_1 | 0, $1_1 | 0, $35($0_1 | 0, 6100 | 0, $3_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $496($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($47($0_1 | 0, $1_1 | 0) | 0) {
    break label$1
   }
   return 0 | 0;
  }
  $33($0_1 | 0, $2_1 | 0) | 0;
  label$2 : {
   $1_1 = $44($0_1 | 0, -2 | 0) | 0;
   if ($1_1) {
    break label$2
   }
   $7($0_1 | 0, -3 | 0);
   return 0 | 0;
  }
  $8($0_1 | 0, -2 | 0, -1 | 0);
  $7($0_1 | 0, -2 | 0);
  return $1_1 | 0;
 }
 
 function $497($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 128 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!($179($0_1 | 0, $1_1 | 0, $2_1 + 16 | 0 | 0) | 0)) {
     break label$2
    }
    $183($0_1 | 0, 6120 | 0, $2_1 + 16 | 0 | 0) | 0;
    $1_1 = HEAP32[($2_1 + 40 | 0) >> 2] | 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$2
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$2_1 >> 2] = $2_1 + 60 | 0;
    $35($0_1 | 0, 6123 | 0, $2_1 | 0) | 0;
    break label$1;
   }
   $35($0_1 | 0, 6131 | 0, 0 | 0) | 0;
  }
  global$0 = $2_1 + 128 | 0;
 }
 
 function $498($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $744() | 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    $1_1 = 1;
    $37($0_1 | 0, 1 | 0);
    break label$1;
   }
   $1_1 = HEAP32[$4_1 >> 2] | 0;
   $29($0_1 | 0);
   $4_1 = $747($1_1 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$2_1) {
      break label$4
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
     HEAP32[$3_1 >> 2] = $2_1;
     $35($0_1 | 0, 6132 | 0, $3_1 | 0) | 0;
     break label$3;
    }
    $33($0_1 | 0, $4_1 | 0) | 0;
   }
   i64toi32_i32$0 = $1_1 >> 31 | 0;
   $31($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0);
   $1_1 = 3;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $499($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) != (-1 | 0)) {
     break label$2
    }
    $1_1 = HEAP32[($744() | 0) >> 2] | 0;
    $29($0_1 | 0);
    $33($0_1 | 0, $747($1_1 | 0) | 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     $2_1 = $1_1 & 127 | 0;
     if ($2_1) {
      break label$4
     }
     $1_1 = ($1_1 >>> 8 | 0) & 255 | 0;
     $3_1 = 6139;
     break label$3;
    }
    $4_1 = (($1_1 & 65535 | 0) + -1 | 0) >>> 0 < 255 >>> 0;
    $3_1 = $4_1 ? 6144 : 6139;
    $1_1 = $4_1 ? $2_1 : $1_1;
   }
   label$5 : {
    label$6 : {
     if ($1_1) {
      break label$6
     }
     if (((HEAPU8[$3_1 >> 0] | 0) & 255 | 0 | 0) != (101 | 0)) {
      break label$6
     }
     $37($0_1 | 0, 1 | 0);
     break label$5;
    }
    $29($0_1 | 0);
   }
   $33($0_1 | 0, $3_1 | 0) | 0;
  }
  i64toi32_i32$0 = $1_1 >> 31 | 0;
  $31($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0);
  return 3 | 0;
 }
 
 function $500($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   if ($42($0_1 | 0, -1001e3 | 0, $1_1 | 0) | 0) {
    break label$1
   }
   $7($0_1 | 0, -2 | 0);
   $46($0_1 | 0, 0 | 0, 2 | 0);
   $33($0_1 | 0, $1_1 | 0) | 0;
   $51($0_1 | 0, -2 | 0, 6078 | 0);
   $10($0_1 | 0, -1 | 0);
   $51($0_1 | 0, -1001e3 | 0, $1_1 | 0);
   $2_1 = 1;
  }
  return $2_1 | 0;
 }
 
 function $501($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $42($0_1 | 0, -1001e3 | 0, $1_1 | 0) | 0;
  $55($0_1 | 0, -2 | 0) | 0;
 }
 
 function $502($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : {
   $4_1 = $26($0_1 | 0, $1_1 | 0) | 0;
   if (!$4_1) {
    break label$1
   }
   if (!($47($0_1 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   $42($0_1 | 0, -1001e3 | 0, $2_1 | 0) | 0;
   $1_1 = $17($0_1 | 0, -1 | 0, -2 | 0) | 0;
   $7($0_1 | 0, -3 | 0);
   $3_1 = $1_1 ? $4_1 : 0;
  }
  return $3_1 | 0;
 }
 
 function $503($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = $26($0_1 | 0, $1_1 | 0) | 0;
    if (!$3_1) {
     break label$2
    }
    if (!($47($0_1 | 0, $1_1 | 0) | 0)) {
     break label$2
    }
    $42($0_1 | 0, -1001e3 | 0, $2_1 | 0) | 0;
    $4_1 = $17($0_1 | 0, -1 | 0, -2 | 0) | 0;
    $7($0_1 | 0, -3 | 0);
    if ($4_1) {
     break label$1
    }
   }
   $495($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $504($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     if (($11($0_1 | 0, $1_1 | 0) | 0 | 0) < (1 | 0)) {
      break label$1
     }
     $2_1 = $24($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
     if ($2_1) {
      break label$1
     }
     $495($0_1 | 0, $1_1 | 0, $12($0_1 | 0, 4 | 0) | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $24($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
    if ($2_1) {
     break label$1
    }
    $495($0_1 | 0, $1_1 | 0, $12($0_1 | 0, 4 | 0) | 0 | 0) | 0;
   }
   $2_1 = 0;
  }
  label$4 : {
   label$5 : {
    $5_1 = HEAP32[$3_1 >> 2] | 0;
    if (!$5_1) {
     break label$5
    }
    $6_1 = 0;
    label$6 : while (1) {
     if (!($876($5_1 | 0, $2_1 | 0) | 0)) {
      break label$4
     }
     $6_1 = $6_1 + 1 | 0;
     $5_1 = HEAP32[($3_1 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
     if ($5_1) {
      continue label$6
     }
     break label$6;
    };
   }
   HEAP32[$4_1 >> 2] = $2_1;
   $6_1 = $492($0_1 | 0, $1_1 | 0, $35($0_1 | 0, 6151 | 0, $4_1 | 0) | 0 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $505($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : {
    if (($11($0_1 | 0, $1_1 | 0) | 0 | 0) > (0 | 0)) {
     break label$2
    }
    if (!$3_1) {
     break label$1
    }
    label$3 : {
     if ($2_1) {
      break label$3
     }
     HEAP32[$3_1 >> 2] = 0;
     return $2_1 | 0;
    }
    HEAP32[$3_1 >> 2] = $961($2_1 | 0) | 0;
    return $2_1 | 0;
   }
   $2_1 = $24($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   $495($0_1 | 0, $1_1 | 0, $12($0_1 | 0, 4 | 0) | 0 | 0) | 0;
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $506($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $2_1 = $24($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   $495($0_1 | 0, $1_1 | 0, $12($0_1 | 0, 4 | 0) | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $507($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if ($1($0_1 | 0, $1_1 | 0) | 0) {
    break label$1
   }
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    HEAP32[$3_1 >> 2] = $2_1;
    $493($0_1 | 0, 6171 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $493($0_1 | 0, 6191 | 0, 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $508($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (($11($0_1 | 0, $1_1 | 0) | 0 | 0) == ($2_1 | 0)) {
    break label$1
   }
   $495($0_1 | 0, $1_1 | 0, $12($0_1 | 0, $2_1 | 0) | 0 | 0) | 0;
  }
 }
 
 function $509($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($11($0_1 | 0, $1_1 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $492($0_1 | 0, $1_1 | 0, 6206 | 0) | 0;
  }
 }
 
 function $510($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = +$21($0_1 | 0, $1_1 | 0, $2_1 + 12 | 0 | 0);
  label$1 : {
   if (HEAP32[($2_1 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   $495($0_1 | 0, $1_1 | 0, $12($0_1 | 0, 3 | 0) | 0 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return +$3_1;
 }
 
 function $511($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($11($0_1 | 0, $1_1 | 0) | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $2_1 = +$21($0_1 | 0, $1_1 | 0, $3_1 + 12 | 0 | 0);
   if (HEAP32[($3_1 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   $495($0_1 | 0, $1_1 | 0, $12($0_1 | 0, 3 | 0) | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return +$2_1;
 }
 
 function $512($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $3$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = $22($0_1 | 0, $1_1 | 0, $2_1 + 12 | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  label$1 : {
   if (HEAP32[($2_1 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   label$2 : {
    if (!($15($0_1 | 0, $1_1 | 0) | 0)) {
     break label$2
    }
    $492($0_1 | 0, $1_1 | 0, 6546 | 0) | 0;
    break label$1;
   }
   $495($0_1 | 0, $1_1 | 0, $12($0_1 | 0, 3 | 0) | 0 | 0) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $513($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($11($0_1 | 0, $1_1 | 0) | 0 | 0) < (1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $22($0_1 | 0, $1_1 | 0, $3_1 + 12 | 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   if (HEAP32[($3_1 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   label$2 : {
    if (!($15($0_1 | 0, $1_1 | 0) | 0)) {
     break label$2
    }
    $492($0_1 | 0, $1_1 | 0, 6546 | 0) | 0;
    break label$1;
   }
   $495($0_1 | 0, $1_1 | 0, $12($0_1 | 0, 3 | 0) | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $514($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if ($1($0_1 | 0, $2_1 | 0) | 0) {
    break label$1
   }
   HEAP32[$3_1 >> 2] = 6359;
   $493($0_1 | 0, 6171 | 0, $3_1 | 0) | 0;
  }
  label$2 : {
   if (!(HEAP32[$1_1 >> 2] | 0)) {
    break label$2
   }
   $4_1 = -2 - $2_1 | 0;
   $5_1 = 0 - $2_1 | 0;
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$5
      }
      $7_1 = 0;
      label$6 : {
       if (($2_1 | 0) <= (0 | 0)) {
        break label$6
       }
       label$7 : while (1) {
        $10($0_1 | 0, $5_1 | 0);
        $7_1 = $7_1 + 1 | 0;
        if (($7_1 | 0) != ($2_1 | 0)) {
         continue label$7
        }
        break label$7;
       };
       $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      }
      $36($0_1 | 0, $6_1 | 0, $2_1 | 0);
      break label$4;
     }
     $37($0_1 | 0, 0 | 0);
    }
    $51($0_1 | 0, $4_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
    $7_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $1_1 = $1_1 + 8 | 0;
    if ($7_1) {
     continue label$3
    }
    break label$3;
   };
  }
  $7($0_1 | 0, $2_1 ^ -1 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $515($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $951($485($0_1 | 0, $2_1 | 0, -1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $2_1 | 0;
  }
 }
 
 function $516($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $1_1 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $32($1_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $2_1 | 0) | 0;
  label$1 : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($0_1 + 16 | 0 | 0)) {
    break label$1
   }
   $9($1_1 | 0, -1 | 0, -3 | 0);
   $7($1_1 | 0, -3 | 0);
  }
 }
 
 function $517($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = 512;
  HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  HEAP32[$1_1 >> 2] = $1_1 + 16 | 0;
  return $485($1_1 | 0, $2_1 | 0, -1 | 0) | 0 | 0;
 }
 
 function $518($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $12_1 = 0, $13_1 = 0, $3_1 = 0, $3$hi = 0, $20_1 = 0, $21_1 = 0;
  label$1 : {
   if ($11($0_1 | 0, -1 | 0) | 0) {
    break label$1
   }
   $7($0_1 | 0, -2 | 0);
   return -1 | 0;
  }
  $1_1 = $5($0_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$0 = 0;
  $45($0_1 | 0, $1_1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$0 = $22($0_1 | 0, -1 | 0, 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  $7($0_1 | 0, -2 | 0);
  label$2 : {
   label$3 : {
    $2_1 = i64toi32_i32$0;
    if (!i64toi32_i32$0) {
     break label$3
    }
    $20_1 = $0_1;
    $21_1 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $12_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $12_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$1 = $12_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
     $13_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $45($20_1 | 0, $21_1 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$2 = 0;
    $54($0_1 | 0, $1_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
    break label$2;
   }
   i64toi32_i32$2 = $25($0_1 | 0, $1_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $2_1 = i64toi32_i32$2 + 1 | 0;
  }
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
  $54($0_1 | 0, $1_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 | 0);
  return i64toi32_i32$2 | 0;
 }
 
 function $519($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 1088 | 0;
  global$0 = $3_1;
  $4_1 = ($6($0_1 | 0) | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     $33($0_1 | 0, 6221 | 0) | 0;
     HEAP32[($3_1 + 60 | 0) >> 2] = HEAP32[(0 + 19528 | 0) >> 2] | 0;
     break label$2;
    }
    HEAP32[($3_1 + 48 | 0) >> 2] = $1_1;
    $35($0_1 | 0, 6228 | 0, $3_1 + 48 | 0 | 0) | 0;
    $5_1 = $798($1_1 | 0, 6232 | 0) | 0;
    HEAP32[($3_1 + 60 | 0) >> 2] = $5_1;
    if ($5_1) {
     break label$2
    }
    $1_1 = $747(HEAP32[($744() | 0) >> 2] | 0 | 0) | 0;
    $5_1 = $24($0_1 | 0, $4_1 | 0, 0 | 0) | 0;
    HEAP32[($3_1 + 40 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 32 | 0) >> 2] = 6234;
    HEAP32[($3_1 + 36 | 0) >> 2] = $5_1 + 1 | 0;
    $35($0_1 | 0, 6693 | 0, $3_1 + 32 | 0 | 0) | 0;
    $8($0_1 | 0, $4_1 | 0, -1 | 0);
    $7($0_1 | 0, -2 | 0);
    $5_1 = 6;
    break label$1;
   }
   label$4 : {
    if (!($520($3_1 + 56 | 0 | 0, $3_1 + 52 | 0 | 0) | 0)) {
     break label$4
    }
    $5_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
    HEAP32[($3_1 + 56 | 0) >> 2] = $5_1 + 1 | 0;
    HEAP8[(($5_1 + ($3_1 + 56 | 0) | 0) + 8 | 0) >> 0] = 10;
   }
   $5_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
   label$5 : {
    if (!$1_1) {
     break label$5
    }
    if (($5_1 | 0) != (27 | 0)) {
     break label$5
    }
    $5_1 = $791($1_1 | 0, 6239 | 0, HEAP32[($3_1 + 60 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($3_1 + 60 | 0) >> 2] = $5_1;
    label$6 : {
     if ($5_1) {
      break label$6
     }
     $1_1 = $747(HEAP32[($744() | 0) >> 2] | 0 | 0) | 0;
     $5_1 = $24($0_1 | 0, $4_1 | 0, 0 | 0) | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
     HEAP32[$3_1 >> 2] = 6242;
     HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
     $35($0_1 | 0, 6693 | 0, $3_1 | 0) | 0;
     $8($0_1 | 0, $4_1 | 0, -1 | 0);
     $7($0_1 | 0, -2 | 0);
     $5_1 = 6;
     break label$1;
    }
    $520($3_1 + 56 | 0 | 0, $3_1 + 52 | 0 | 0) | 0;
    $5_1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
   }
   label$7 : {
    if (($5_1 | 0) == (-1 | 0)) {
     break label$7
    }
    $6_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
    HEAP32[($3_1 + 56 | 0) >> 2] = $6_1 + 1 | 0;
    HEAP8[(($6_1 + ($3_1 + 56 | 0) | 0) + 8 | 0) >> 0] = $5_1;
   }
   $5_1 = $60($0_1 | 0, 14 | 0, $3_1 + 56 | 0 | 0, $24($0_1 | 0, -1 | 0, 0 | 0) | 0 | 0, $2_1 | 0) | 0;
   $6_1 = HEAP32[($3_1 + 60 | 0) >> 2] | 0;
   $2_1 = $833($6_1 | 0) | 0;
   label$8 : {
    if (!$1_1) {
     break label$8
    }
    $852($6_1 | 0) | 0;
   }
   label$9 : {
    if (!$2_1) {
     break label$9
    }
    $7($0_1 | 0, $4_1 | 0);
    $1_1 = $747(HEAP32[($744() | 0) >> 2] | 0 | 0) | 0;
    $5_1 = $24($0_1 | 0, $4_1 | 0, 0 | 0) | 0;
    HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 16 | 0) >> 2] = 6249;
    HEAP32[($3_1 + 20 | 0) >> 2] = $5_1 + 1 | 0;
    $35($0_1 | 0, 6693 | 0, $3_1 + 16 | 0 | 0) | 0;
    $8($0_1 | 0, $4_1 | 0, -1 | 0);
    $7($0_1 | 0, -2 | 0);
    $5_1 = 6;
    break label$1;
   }
   $8($0_1 | 0, $4_1 | 0, -1 | 0);
   $7($0_1 | 0, -2 | 0);
  }
  global$0 = $3_1 + 1088 | 0;
  return $5_1 | 0;
 }
 
 function $520($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = 0;
  HEAP32[$0_1 >> 2] = 0;
  label$1 : {
   label$2 : {
    $3_1 = $834(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    if (($3_1 | 0) == (-1 | 0)) {
     break label$2
    }
    label$3 : {
     if (($3_1 | 0) != (239 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = $3_1 + 1 | 0;
     HEAP8[(($0_1 + $3_1 | 0) + 8 | 0) >> 0] = 239;
     $3_1 = $834(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
     if (($3_1 | 0) == (-1 | 0)) {
      break label$2
     }
     if (($3_1 | 0) != (187 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     HEAP32[$0_1 >> 2] = $3_1 + 1 | 0;
     HEAP8[(($0_1 + $3_1 | 0) + 8 | 0) >> 0] = 187;
     $3_1 = $834(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
     if (($3_1 | 0) == (-1 | 0)) {
      break label$2
     }
     if (($3_1 | 0) != (191 | 0)) {
      break label$3
     }
     HEAP8[(($0_1 + (HEAP32[$0_1 >> 2] | 0) | 0) + 8 | 0) >> 0] = 191;
     HEAP32[$0_1 >> 2] = 0;
     $3_1 = $834(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $2_1 = 0;
    if (($3_1 | 0) != (35 | 0)) {
     break label$1
    }
    label$4 : {
     label$5 : while (1) switch (($834(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0) + 1 | 0 | 0) {
     case 0:
     case 11:
      break label$4;
     default:
      continue label$5;
     };
    }
    $2_1 = 1;
    $3_1 = $834(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   }
   HEAP32[$1_1 >> 2] = $3_1;
  }
  return $2_1 | 0;
 }
 
 function $521($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if (($3_1 | 0) < (1 | 0)) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = $3_1;
     HEAP32[$1_1 >> 2] = 0;
     break label$2;
    }
    $3_1 = 0;
    if ($831(HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0) {
     break label$1
    }
    HEAP32[$2_1 >> 2] = $836($1_1 + 8 | 0 | 0, 1 | 0, 1024 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
   }
   $3_1 = $1_1 + 8 | 0;
  }
  return $3_1 | 0;
 }
 
 function $522($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  $0_1 = $60($0_1 | 0, 15 | 0, $5_1 + 8 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $523($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if ($3_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[$2_1 >> 2] = $3_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = 0;
  return HEAP32[$1_1 >> 2] | 0 | 0;
 }
 
 function $524($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   $1_1 = $5($0_1 | 0, $1_1 | 0) | 0;
   if (!($47($0_1 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   $33($0_1 | 0, $2_1 | 0) | 0;
   label$2 : {
    if ($44($0_1 | 0, -2 | 0) | 0) {
     break label$2
    }
    $7($0_1 | 0, -3 | 0);
    return 0 | 0;
   }
   $8($0_1 | 0, -2 | 0, -1 | 0);
   $7($0_1 | 0, -2 | 0);
   $10($0_1 | 0, $1_1 | 0);
   $3_1 = 1;
   $57($0_1 | 0, 1 | 0, 1 | 0, 0 | 0, 0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $525($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $3$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $68($0_1 | 0, $1_1 | 0);
  i64toi32_i32$0 = $22($0_1 | 0, -1 | 0, $2_1 + 12 | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  label$1 : {
   if (HEAP32[($2_1 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   $493($0_1 | 0, 6254 | 0, 0 | 0) | 0;
  }
  $7($0_1 | 0, -2 | 0);
  global$0 = $2_1 + 16 | 0;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $526($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $27_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!($524($0_1 | 0, $1_1 | 0, 6286 | 0) | 0)) {
     break label$2
    }
    if ($16($0_1 | 0, -1 | 0) | 0) {
     break label$1
    }
    $493($0_1 | 0, 6297 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    switch ($11($0_1 | 0, $1_1 | 0) | 0 | 0) {
    case 3:
     label$8 : {
      if (!($14($0_1 | 0, $1_1 | 0) | 0)) {
       break label$8
      }
      i64toi32_i32$0 = $22($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $27_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1;
      HEAP32[($3_1 + 32 | 0) >> 2] = $27_1;
      HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$1;
      $35($0_1 | 0, 6331 | 0, $3_1 + 32 | 0 | 0) | 0;
      break label$1;
     }
     HEAPF64[($3_1 + 16 | 0) >> 3] = +$21($0_1 | 0, $1_1 | 0, 0 | 0);
     $35($0_1 | 0, 6334 | 0, $3_1 + 16 | 0 | 0) | 0;
     break label$1;
    case 4:
     $10($0_1 | 0, $1_1 | 0);
     break label$1;
    case 1:
     $33($0_1 | 0, ($23($0_1 | 0, $1_1 | 0) | 0 ? 6337 : 6342) | 0) | 0;
     break label$1;
    case 0:
     $33($0_1 | 0, 6348 | 0) | 0;
     break label$1;
    default:
     break label$3;
    };
   }
   $4_1 = 0;
   label$9 : {
    label$10 : {
     if (!($47($0_1 | 0, $1_1 | 0) | 0)) {
      break label$10
     }
     $33($0_1 | 0, 6078 | 0) | 0;
     label$11 : {
      $4_1 = $44($0_1 | 0, -2 | 0) | 0;
      if ($4_1) {
       break label$11
      }
      $7($0_1 | 0, -3 | 0);
      $4_1 = 0;
      break label$10;
     }
     $8($0_1 | 0, -2 | 0, -1 | 0);
     $7($0_1 | 0, -2 | 0);
     if (($4_1 | 0) != (4 | 0)) {
      break label$10
     }
     $5_1 = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
     $4_1 = 4;
     break label$9;
    }
    $5_1 = $12($0_1 | 0, $11($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = $28($0_1 | 0, $1_1 | 0) | 0;
   HEAP32[$3_1 >> 2] = $5_1;
   $35($0_1 | 0, 6352 | 0, $3_1 | 0) | 0;
   if (!$4_1) {
    break label$1
   }
   $8($0_1 | 0, -2 | 0, -1 | 0);
   $7($0_1 | 0, -2 | 0);
  }
  $0_1 = $24($0_1 | 0, -1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 48 | 0;
  return $0_1 | 0;
 }
 
 function $527($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   if (($42($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0) == (5 | 0)) {
    break label$1
   }
   $7($0_1 | 0, -2 | 0);
   $3_1 = 0;
   $1_1 = $5($0_1 | 0, $1_1 | 0) | 0;
   $46($0_1 | 0, 0 | 0, 0 | 0);
   $10($0_1 | 0, -1 | 0);
   $51($0_1 | 0, $1_1 | 0, $2_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $528($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   if (($42($0_1 | 0, -1001e3 | 0, 6377 | 0) | 0 | 0) == (5 | 0)) {
    break label$1
   }
   $7($0_1 | 0, -2 | 0);
   $4_1 = $5($0_1 | 0, -1001e3 | 0) | 0;
   $46($0_1 | 0, 0 | 0, 0 | 0);
   $10($0_1 | 0, -1 | 0);
   $51($0_1 | 0, $4_1 | 0, 6377 | 0);
  }
  $42($0_1 | 0, -1 | 0, $1_1 | 0) | 0;
  label$2 : {
   if ($23($0_1 | 0, -1 | 0) | 0) {
    break label$2
   }
   $7($0_1 | 0, -2 | 0);
   $36($0_1 | 0, $2_1 | 0, 0 | 0);
   $33($0_1 | 0, $1_1 | 0) | 0;
   $57($0_1 | 0, 1 | 0, 1 | 0, 0 | 0, 0 | 0);
   $10($0_1 | 0, -1 | 0);
   $51($0_1 | 0, -3 | 0, $1_1 | 0);
  }
  $8($0_1 | 0, -2 | 0, -1 | 0);
  $7($0_1 | 0, -2 | 0);
  label$3 : {
   if (!$3_1) {
    break label$3
   }
   $10($0_1 | 0, -1 | 0);
   $49($0_1 | 0, $1_1 | 0);
  }
 }
 
 function $529($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $6_1 = 0, $4_1 = 0;
  $4_1 = $961($2_1 | 0) | 0;
  label$1 : {
   $5_1 = $867($1_1 | 0, $2_1 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $6_1 = $5_1 - $1_1 | 0;
     if (!$6_1) {
      break label$3
     }
     $951($485($0_1 | 0, $6_1 | 0, -1 | 0) | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $6_1 | 0;
    }
    label$4 : {
     $6_1 = $961($3_1 | 0) | 0;
     if (!$6_1) {
      break label$4
     }
     $951($485($0_1 | 0, $6_1 | 0, -1 | 0) | 0 | 0, $3_1 | 0, $6_1 | 0) | 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $6_1 | 0;
    }
    $1_1 = $5_1 + $4_1 | 0;
    $5_1 = $867($1_1 | 0, $2_1 | 0) | 0;
    if ($5_1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$5 : {
   $5_1 = $961($1_1 | 0) | 0;
   if (!$5_1) {
    break label$5
   }
   $951($485($0_1 | 0, $5_1 | 0, -1 | 0) | 0 | 0, $1_1 | 0, $5_1 | 0) | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + $5_1 | 0;
  }
 }
 
 function $530($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 528 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 512;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  $5_1 = $4_1 + 16 | 0;
  HEAP32[$4_1 >> 2] = $5_1;
  $529($4_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  $1_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $32($1_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[$4_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
    break label$1
   }
   $9($1_1 | 0, -1 | 0, -3 | 0);
   $7($1_1 | 0, -3 | 0);
  }
  $0_1 = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
  global$0 = $4_1 + 528 | 0;
  return $0_1 | 0;
 }
 
 function $531() {
  var $0_1 = 0, $1_1 = 0;
  label$1 : {
   $0_1 = $405(16 | 0, 0 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $3($0_1 | 0, 17 | 0) | 0;
   $1_1 = $72($0_1 | 0, 4 | 0, 0 | 0) | 0;
   $518($0_1 | 0, -1001e3 | 0) | 0;
   HEAP32[$1_1 >> 2] = 0;
   $70($0_1 | 0, 18 | 0, $1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $532($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if ($3_1) {
    break label$1
   }
   $940($1_1 | 0);
   return 0 | 0;
  }
  return $941($1_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function $533($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
  $0_1 = HEAP32[(0 + 18944 | 0) >> 2] | 0;
  $824($0_1 | 0, 6710 | 0, $1_1 | 0) | 0;
  $795($0_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $534($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = HEAP32[$0_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    if (($3_1 | 0) == (2 | 0)) {
     break label$2
    }
    if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (64 | 0)) {
     break label$2
    }
    label$3 : {
     if ($876($1_1 | 0, 6760 | 0) | 0) {
      break label$3
     }
     HEAP32[$0_1 >> 2] = 0;
     return;
    }
    if ($876($1_1 | 0, 6765 | 0) | 0) {
     break label$1
    }
    HEAP32[$0_1 >> 2] = 1;
    return;
   }
   if (!$3_1) {
    break label$1
   }
   label$4 : {
    label$5 : {
     if (($3_1 | 0) == (1 | 0)) {
      break label$5
     }
     $3_1 = HEAP32[(0 + 18944 | 0) >> 2] | 0;
     break label$4;
    }
    $3_1 = HEAP32[(0 + 18944 | 0) >> 2] | 0;
    $956(6769 | 0, 13 | 0, 1 | 0, $3_1 | 0) | 0;
    $795($3_1 | 0) | 0;
   }
   $957($1_1 | 0, $3_1 | 0) | 0;
   $795($3_1 | 0) | 0;
   $1_1 = 2;
   label$6 : {
    if ($2_1) {
     break label$6
    }
    $840(10 | 0, $3_1 | 0) | 0;
    $795($3_1 | 0) | 0;
    $1_1 = 1;
   }
   HEAP32[$0_1 >> 2] = $1_1;
  }
 }
 
 function $535($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = +$4($0_1 | 0);
  label$1 : {
   label$2 : {
    if (($2_1 | 0) == (136 | 0)) {
     break label$2
    }
    $493($0_1 | 0, 6385 | 0, 0 | 0) | 0;
    break label$1;
   }
   if ($4_1 == $1_1) {
    break label$1
   }
   HEAPF64[($3_1 + 8 | 0) >> 3] = $4_1;
   HEAPF64[$3_1 >> 3] = $1_1;
   $493($0_1 | 0, 6434 | 0, $3_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $536($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $69($0_1 | 0, $1_1 + 12 | 0 | 0) | 0;
  $0_1 = $26($0_1 | 0, 1 | 0) | 0;
  $2_1 = FUNCTION_TABLE[$2_1 | 0](HEAP32[($1_1 + 12 | 0) >> 2] | 0, HEAP32[$0_1 >> 2] | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0, 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = $2_1;
  global$0 = $1_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $537($0_1) {
  $0_1 = $0_1 | 0;
  $45($0_1 | 0, -1001e3 | 0, 2 | 0, 0 | 0) | 0;
  $514($0_1 | 0, 6784 | 0, 0 | 0);
  $10($0_1 | 0, -1 | 0);
  $51($0_1 | 0, -2 | 0, 6992 | 0);
  $33($0_1 | 0, 6995 | 0) | 0;
  $51($0_1 | 0, -2 | 0, 7003 | 0);
  return 1 | 0;
 }
 
 function $538($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($23($0_1 | 0, 1 | 0) | 0)) {
    break label$1
   }
   return $6($0_1 | 0) | 0 | 0;
  }
  $509($0_1 | 0, 1 | 0);
  $8($0_1 | 0, 1 | 0, -1 | 0);
  $7($0_1 | 0, -2 | 0);
  $33($0_1 | 0, 7189 | 0) | 0;
  $7($0_1 | 0, 1 | 0);
  return $539($0_1 | 0) | 0 | 0;
 }
 
 function $539($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $513($0_1 | 0, 2 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $7($0_1 | 0, 1 | 0);
  $1_1 = $11($0_1 | 0, 1 | 0) | 0;
  label$1 : {
   $2_1 = i64toi32_i32$0;
   if ((i64toi32_i32$0 | 0) < (1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) != (4 | 0)) {
    break label$1
   }
   $497($0_1 | 0, $2_1 | 0);
   $10($0_1 | 0, 1 | 0);
   $67($0_1 | 0, 2 | 0);
  }
  return $64($0_1 | 0) | 0 | 0;
 }
 
 function $540($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          $2_1 = HEAP32[((($504($0_1 | 0, 1 | 0, 7273 | 0, 7216 | 0) | 0) << 2 | 0) + 7360 | 0) >> 2] | 0;
          switch ($2_1 + -3 | 0 | 0) {
          case 8:
           break label$3;
          case 7:
           break label$4;
          case 6:
           break label$5;
          case 3:
          case 4:
           break label$6;
          case 2:
           break label$7;
          case 0:
           break label$8;
          default:
           break label$2;
          };
         }
         $2_1 = $63($0_1 | 0, 3 | 0, 0 | 0) | 0;
         $30($0_1 | 0, +(+($63($0_1 | 0, 4 | 0, 0 | 0) | 0 | 0) * .0009765625 + +($2_1 | 0)));
         break label$1;
        }
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = $513($0_1 | 0, 2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        HEAP32[$1_1 >> 2] = i64toi32_i32$0;
        $37($0_1 | 0, $63($0_1 | 0, 5 | 0, $1_1 | 0) | 0 | 0);
        break label$1;
       }
       i64toi32_i32$1 = 0;
       i64toi32_i32$1 = $513($0_1 | 0, 2 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       HEAP32[($1_1 + 16 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$1 = $63($0_1 | 0, $2_1 | 0, $1_1 + 16 | 0 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
       $31($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
       break label$1;
      }
      $37($0_1 | 0, $63($0_1 | 0, 9 | 0, 0 | 0) | 0 | 0);
      break label$1;
     }
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = $513($0_1 | 0, 2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$1 = $513($0_1 | 0, 3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $3$hi;
     HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
     $33($0_1 | 0, (($63($0_1 | 0, 10 | 0, $1_1 + 32 | 0 | 0) | 0 | 0) == (11 | 0) ? 7335 : 7322) | 0) | 0;
     break label$1;
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $513($0_1 | 0, 2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$1 = $513($0_1 | 0, 3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $513($0_1 | 0, 4 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    HEAP32[($1_1 + 56 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $4$hi;
    HEAP32[($1_1 + 52 | 0) >> 2] = $4_1;
    i64toi32_i32$1 = $3$hi;
    HEAP32[($1_1 + 48 | 0) >> 2] = $3_1;
    $33($0_1 | 0, (($63($0_1 | 0, 11 | 0, $1_1 + 48 | 0 | 0) | 0 | 0) == (11 | 0) ? 7335 : 7322) | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $63($0_1 | 0, $2_1 | 0, 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $31($0_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  }
  global$0 = $1_1 + 64 | 0;
  return 1 | 0;
 }
 
 function $541($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $505($0_1 | 0, 1 | 0, 0 | 0, 0 | 0) | 0;
  $7($0_1 | 0, 1 | 0);
  label$1 : {
   if (!($519($0_1 | 0, $1_1 | 0, 0 | 0) | 0)) {
    break label$1
   }
   return $64($0_1 | 0) | 0 | 0;
  }
  $57($0_1 | 0, 0 | 0, -1 | 0, 0 | 0, 20 | 0);
  return ($6($0_1 | 0) | 0) + -1 | 0 | 0;
 }
 
 function $542($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($6($0_1 | 0) | 0) + -1 | 0 | 0;
 }
 
 function $543($0_1) {
  $0_1 = $0_1 | 0;
  $509($0_1 | 0, 1 | 0);
  label$1 : {
   if ($47($0_1 | 0, 1 | 0) | 0) {
    break label$1
   }
   $29($0_1 | 0);
   return 1 | 0;
  }
  $496($0_1 | 0, 1 | 0, 7400 | 0) | 0;
  return 1 | 0;
 }
 
 function $544($0_1) {
  $0_1 = $0_1 | 0;
  $509($0_1 | 0, 1 | 0);
  $36($0_1 | 0, 21 | 0, 0 | 0);
  $10($0_1 | 0, 1 | 0);
  $31($0_1 | 0, 0 | 0, 0 | 0);
  return 3 | 0;
 }
 
 function $545($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0;
  $2_1 = $0_1;
  i64toi32_i32$0 = $512($0_1 | 0, 2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $31($2_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0);
  return ($43($0_1 | 0, 1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0) | 0 ? 2 : 1) | 0;
 }
 
 function $546($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = 1;
  $2_1 = $505($0_1 | 0, 1 | 0, 0 | 0, 0 | 0) | 0;
  $3_1 = $505($0_1 | 0, 2 | 0, 0 | 0, 0 | 0) | 0;
  $4_1 = $11($0_1 | 0, 3 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($519($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0) {
     break label$2
    }
    $2_1 = ($4_1 | 0) == (-1 | 0);
    if ($2_1) {
     break label$1
    }
    $10($0_1 | 0, ($2_1 ? 0 : 3) | 0);
    $1_1 = 1;
    if ($74($0_1 | 0, -2 | 0, 1 | 0) | 0) {
     break label$1
    }
    $7($0_1 | 0, -2 | 0);
    return 1 | 0;
   }
   $29($0_1 | 0);
   $8($0_1 | 0, -2 | 0, 1 | 0);
   $1_1 = 2;
  }
  return $1_1 | 0;
 }
 
 function $547($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $24($0_1 | 0, 1 | 0, $1_1 + 12 | 0 | 0) | 0;
  $3_1 = $505($0_1 | 0, 3 | 0, 7412 | 0, 0 | 0) | 0;
  $4_1 = $11($0_1 | 0, 4 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    $5_1 = $505($0_1 | 0, 2 | 0, $2_1 | 0, 0 | 0) | 0;
    $3_1 = $522($0_1 | 0, $2_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $2_1 = $505($0_1 | 0, 2 | 0, 7415 | 0, 0 | 0) | 0;
   $508($0_1 | 0, 1 | 0, 6 | 0);
   $7($0_1 | 0, 5 | 0);
   $3_1 = $60($0_1 | 0, 22 | 0, 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  $2_1 = 2;
  label$3 : {
   label$4 : {
    if ($3_1) {
     break label$4
    }
    label$5 : {
     if (($4_1 | 0) != (-1 | 0)) {
      break label$5
     }
     $2_1 = 1;
     break label$3;
    }
    $10($0_1 | 0, (($4_1 | 0) != (-1 | 0)) << 2 | 0 | 0);
    $2_1 = 1;
    if ($74($0_1 | 0, -2 | 0, 1 | 0) | 0) {
     break label$3
    }
    $7($0_1 | 0, -2 | 0);
    break label$3;
   }
   $29($0_1 | 0);
   $8($0_1 | 0, -2 | 0, 1 | 0);
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $548($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $507($0_1 | 0, 2 | 0, 7423 | 0);
  $10($0_1 | 0, 1 | 0);
  $57($0_1 | 0, 0 | 0, 1 | 0, 0 | 0, 0 | 0);
  label$1 : {
   if ($11($0_1 | 0, -1 | 0) | 0) {
    break label$1
   }
   $7($0_1 | 0, -2 | 0);
   HEAP32[$2_1 >> 2] = 0;
   return 0 | 0;
  }
  label$2 : {
   if ($16($0_1 | 0, -1 | 0) | 0) {
    break label$2
   }
   $493($0_1 | 0, 7449 | 0, 0 | 0) | 0;
  }
  $9($0_1 | 0, -1 | 0, 5 | 0);
  $7($0_1 | 0, -2 | 0);
  return $24($0_1 | 0, 5 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $549($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $508($0_1 | 0, 1 | 0, 5 | 0);
  $1_1 = 2;
  $7($0_1 | 0, 2 | 0);
  label$1 : {
   if ($65($0_1 | 0, 1 | 0) | 0) {
    break label$1
   }
   $29($0_1 | 0);
   $1_1 = 1;
  }
  return $1_1 | 0;
 }
 
 function $550($0_1) {
  $0_1 = $0_1 | 0;
  $509($0_1 | 0, 1 | 0);
  label$1 : {
   if ($496($0_1 | 0, 1 | 0, 7486 | 0) | 0) {
    break label$1
   }
   $36($0_1 | 0, 23 | 0, 0 | 0);
   $10($0_1 | 0, 1 | 0);
   $29($0_1 | 0);
   return 3 | 0;
  }
  $10($0_1 | 0, 1 | 0);
  $57($0_1 | 0, 1 | 0, 3 | 0, 0 | 0, 0 | 0);
  return 3 | 0;
 }
 
 function $551($0_1) {
  $0_1 = $0_1 | 0;
  $509($0_1 | 0, 1 | 0);
  $37($0_1 | 0, 1 | 0);
  $8($0_1 | 0, 1 | 0, 1 | 0);
  label$1 : {
   if (($58($0_1 | 0, ($6($0_1 | 0) | 0) + -2 | 0 | 0, -1 | 0, 0 | 0, 0 | 0, 24 | 0) | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $37($0_1 | 0, 0 | 0);
   $10($0_1 | 0, -2 | 0);
   return 2 | 0;
  }
  return $6($0_1 | 0) | 0 | 0;
 }
 
 function $552($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 < 2 >>> 0) {
    break label$1
   }
   $37($0_1 | 0, 0 | 0);
   $10($0_1 | 0, -2 | 0);
   return 2 | 0;
  }
  return ($6($0_1 | 0) | 0) - $2_1 | 0 | 0;
 }
 
 function $553($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $17_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = $6($0_1 | 0) | 0;
    if (($2_1 | 0) > (0 | 0)) {
     break label$2
    }
    $3_1 = HEAP32[(0 + 19532 | 0) >> 2] | 0;
    break label$1;
   }
   $17_1 = $526($0_1 | 0, 1 | 0, $1_1 + 12 | 0 | 0) | 0;
   $3_1 = HEAP32[(0 + 19532 | 0) >> 2] | 0;
   $956($17_1 | 0, 1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
   $7($0_1 | 0, -2 | 0);
   if (($2_1 | 0) == (1 | 0)) {
    break label$1
   }
   $4_1 = 2;
   label$3 : while (1) {
    $5_1 = $526($0_1 | 0, $4_1 | 0, $1_1 + 12 | 0 | 0) | 0;
    $840(9 | 0, $3_1 | 0) | 0;
    $956($5_1 | 0, 1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
    $7($0_1 | 0, -2 | 0);
    $5_1 = ($4_1 | 0) != ($2_1 | 0);
    $4_1 = $4_1 + 1 | 0;
    if ($5_1) {
     continue label$3
    }
    break label$3;
   };
  }
  $840(10 | 0, $3_1 | 0) | 0;
  $795($3_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $554($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0;
  $1_1 = $6($0_1 | 0) | 0;
  $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
  $2_1 = 2;
  label$1 : {
   if (($1_1 | 0) < (2 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $506($0_1 | 0, $2_1 | 0, 0 | 0) | 0;
    $3_1 = ($2_1 | 0) == ($1_1 | 0);
    $2_1 = $2_1 + 1 | 0;
    if (!$3_1) {
     continue label$2
    }
    break label$2;
   };
   $2_1 = 1;
   if (($1_1 | 0) <= (1 | 0)) {
    break label$1
   }
   label$3 : while (1) {
    $71($0_1 | 0, $24($0_1 | 0, $2_1 | 0, 0 | 0) | 0 | 0, 1 | 0);
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  $71($0_1 | 0, $24($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0, 0 | 0);
  return 0 | 0;
 }
 
 function $555($0_1) {
  $0_1 = $0_1 | 0;
  $509($0_1 | 0, 1 | 0);
  $509($0_1 | 0, 2 | 0);
  $37($0_1 | 0, $17($0_1 | 0, 1 | 0, 2 | 0) | 0 | 0);
  return 1 | 0;
 }
 
 function $556($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   if ((($11($0_1 | 0, 1 | 0) | 0) & -2 | 0 | 0) == (4 | 0)) {
    break label$1
   }
   $495($0_1 | 0, 1 | 0, 7494 | 0) | 0;
  }
  i64toi32_i32$0 = $25($0_1 | 0, 1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $31($0_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  return 1 | 0;
 }
 
 function $557($0_1) {
  $0_1 = $0_1 | 0;
  $508($0_1 | 0, 1 | 0, 5 | 0);
  $509($0_1 | 0, 2 | 0);
  $7($0_1 | 0, 2 | 0);
  $44($0_1 | 0, 1 | 0) | 0;
  return 1 | 0;
 }
 
 function $558($0_1) {
  $0_1 = $0_1 | 0;
  $508($0_1 | 0, 1 | 0, 5 | 0);
  $509($0_1 | 0, 2 | 0);
  $509($0_1 | 0, 3 | 0);
  $7($0_1 | 0, 3 | 0);
  $53($0_1 | 0, 1 | 0);
  return 1 | 0;
 }
 
 function $559($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $2$hi = 0, $1_1 = 0, $3$hi = 0, $3_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $23_1 = 0, $23$hi = 0, $24_1 = 0, $24$hi = 0, $25_1 = 0, $25$hi = 0, $29_1 = 0, $29$hi = 0;
  $1_1 = $6($0_1 | 0) | 0;
  label$1 : {
   if (($11($0_1 | 0, 1 | 0) | 0 | 0) != (4 | 0)) {
    break label$1
   }
   if ((HEAPU8[($24($0_1 | 0, 1 | 0, 0 | 0) | 0) >> 0] | 0 | 0) != (35 | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $1_1 + -1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $31($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
   return 1 | 0;
  }
  label$2 : {
   i64toi32_i32$0 = $512($0_1 | 0, 1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $23_1 = i64toi32_i32$4;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   $24_1 = $3_1;
   $24$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   $25_1 = $2_1;
   $25$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
    $20_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $21_1 = 0
     } else {
      $21_1 = 1
     }
     $22_1 = $21_1;
    } else {
     $22_1 = 0
    }
    $20_1 = $22_1;
   }
   i64toi32_i32$0 = $20_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$5 = $25$hi;
   i64toi32_i32$2 = i64toi32_i32$0 ? $24_1 : $25_1;
   i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
   $29_1 = i64toi32_i32$2;
   $29$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 0;
   if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
    $26_1 = 1
   } else {
    if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
      $27_1 = 0
     } else {
      $27_1 = 1
     }
     $28_1 = $27_1;
    } else {
     $28_1 = 0
    }
    $26_1 = $28_1;
   }
   i64toi32_i32$5 = $26_1;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $29$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $23_1 : $29_1;
   i64toi32_i32$1 = i64toi32_i32$5 ? i64toi32_i32$0 : i64toi32_i32$3;
   $2_1 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $30_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$0 >>> 0) {
      $31_1 = 0
     } else {
      $31_1 = 1
     }
     $32_1 = $31_1;
    } else {
     $32_1 = 0
    }
    $30_1 = $32_1;
   }
   if ($30_1) {
    break label$2
   }
   $492($0_1 | 0, 1 | 0, 7510 | 0) | 0;
  }
  i64toi32_i32$5 = $2$hi;
  return $1_1 - $2_1 | 0 | 0;
 }
 
 function $560($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $11($0_1 | 0, 2 | 0) | 0;
  $508($0_1 | 0, 1 | 0, 5 | 0);
  label$1 : {
   switch ($1_1 | 0) {
   default:
    $495($0_1 | 0, 2 | 0, 7529 | 0) | 0;
    break;
   case 0:
   case 5:
    break label$1;
   };
  }
  label$3 : {
   if (!($496($0_1 | 0, 1 | 0, 7400 | 0) | 0)) {
    break label$3
   }
   return $493($0_1 | 0, 7542 | 0, 0 | 0) | 0 | 0;
  }
  $7($0_1 | 0, 2 | 0);
  $55($0_1 | 0, 1 | 0) | 0;
  return 1 | 0;
 }
 
 function $561($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $9$hi = 0, $9_1 = 0, $5_1 = 0, $1_1 = 0, $8_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $23_1 = 0, $24_1 = 0, $10$hi = 0, $10_1 = 0, $84_1 = 0, $84$hi = 0, $86$hi = 0, $105$hi = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($11($0_1 | 0, 2 | 0) | 0 | 0) > (0 | 0)) {
      break label$3
     }
     label$4 : {
      if (($11($0_1 | 0, 1 | 0) | 0 | 0) != (3 | 0)) {
       break label$4
      }
      $7($0_1 | 0, 1 | 0);
      break label$1;
     }
     label$5 : {
      $2_1 = $24($0_1 | 0, 1 | 0, $1_1 + 12 | 0 | 0) | 0;
      if (!$2_1) {
       break label$5
      }
      if (($20($0_1 | 0, $2_1 | 0) | 0 | 0) == ((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0 | 0)) {
       break label$1
      }
     }
     $509($0_1 | 0, 1 | 0);
     break label$2;
    }
    $3_1 = 1;
    i64toi32_i32$0 = $512($0_1 | 0, 2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $9_1 = i64toi32_i32$0;
    $9$hi = i64toi32_i32$1;
    $508($0_1 | 0, 1 | 0, 4 | 0);
    $4_1 = $24($0_1 | 0, 1 | 0, $1_1 + 8 | 0 | 0) | 0;
    label$6 : {
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -2;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 35;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$6
     }
     $492($0_1 | 0, 2 | 0, 7578 | 0) | 0;
    }
    label$7 : {
     label$8 : {
      label$9 : {
       $5_1 = $4_1 + ($866($4_1 | 0, 7596 | 0) | 0) | 0;
       switch ((HEAPU8[$5_1 >> 0] | 0) + -43 | 0 | 0) {
       case 0:
        break label$8;
       case 2:
        break label$9;
       default:
        break label$7;
       };
      }
      $5_1 = $5_1 + 1 | 0;
      $3_1 = 0;
      break label$7;
     }
     $3_1 = 1;
     $5_1 = $5_1 + 1 | 0;
    }
    $6_1 = 0;
    label$10 : {
     label$11 : {
      $2_1 = HEAPU8[$5_1 >> 0] | 0;
      if ($743($2_1 | 0) | 0) {
       break label$11
      }
      i64toi32_i32$1 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$1;
      break label$10;
     }
     i64toi32_i32$1 = $9$hi;
     $7_1 = $9_1;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $23_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
      $23_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     i64toi32_i32$1 = $23_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
      $24_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
      $24_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $10_1 = $24_1;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $9_1 = 0;
     $9$hi = i64toi32_i32$3;
     label$12 : while (1) {
      label$13 : {
       label$14 : {
        $8_1 = $2_1 & 255 | 0;
        if (($8_1 + -48 | 0) >>> 0 > 9 >>> 0) {
         break label$14
        }
        $2_1 = (($2_1 << 24 | 0) >> 24 | 0) + -48 | 0;
        break label$13;
       }
       $2_1 = ($736($8_1 | 0) | 0) + -55 | 0;
      }
      label$15 : {
       if (($2_1 | 0) < ($7_1 | 0)) {
        break label$15
       }
       i64toi32_i32$3 = 0;
       $9_1 = 0;
       $9$hi = i64toi32_i32$3;
       break label$10;
      }
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $9$hi;
      i64toi32_i32$1 = $10$hi;
      i64toi32_i32$1 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $84_1 = i64toi32_i32$1;
      $84$hi = i64toi32_i32$3;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$3 = i64toi32_i32$1 >> 31 | 0;
      $86$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $84$hi;
      i64toi32_i32$5 = $84_1;
      i64toi32_i32$1 = $86$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$5 + $2_1 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < $2_1 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $9_1 = i64toi32_i32$0;
      $9$hi = i64toi32_i32$4;
      label$16 : {
       $8_1 = $5_1 + 1 | 0;
       $2_1 = ($2_1 | 0) < ($7_1 | 0) ? $8_1 : $5_1;
       if (!($743(HEAPU8[$2_1 >> 0] | 0 | 0) | 0)) {
        break label$16
       }
       $2_1 = HEAPU8[$8_1 >> 0] | 0;
       $5_1 = $8_1;
       continue label$12;
      }
      break label$12;
     };
     i64toi32_i32$4 = $9$hi;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
     i64toi32_i32$0 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
     $105$hi = i64toi32_i32$0;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$3 = $105$hi;
     i64toi32_i32$2 = i64toi32_i32$5 ? i64toi32_i32$2 : i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$0 : i64toi32_i32$3;
     $9_1 = i64toi32_i32$2;
     $9$hi = i64toi32_i32$4;
     $6_1 = $2_1 + ($866($2_1 | 0, 7596 | 0) | 0) | 0;
    }
    if (($6_1 | 0) != ($4_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0 | 0)) {
     break label$2
    }
    i64toi32_i32$4 = $9$hi;
    $31($0_1 | 0, $9_1 | 0, i64toi32_i32$4 | 0);
    break label$1;
   }
   $29($0_1 | 0);
  }
  global$0 = $1_1 + 16 | 0;
  return 1 | 0;
 }
 
 function $562($0_1) {
  $0_1 = $0_1 | 0;
  $509($0_1 | 0, 1 | 0);
  $526($0_1 | 0, 1 | 0, 0 | 0) | 0;
  return 1 | 0;
 }
 
 function $563($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $11($0_1 | 0, 1 | 0) | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   $492($0_1 | 0, 1 | 0, 7603 | 0) | 0;
  }
  $33($0_1 | 0, $12($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  return 1 | 0;
 }
 
 function $564($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $6($0_1 | 0) | 0;
  $508($0_1 | 0, 2 | 0, 6 | 0);
  $37($0_1 | 0, 1 | 0);
  $10($0_1 | 0, 1 | 0);
  $8($0_1 | 0, 3 | 0, 2 | 0);
  label$1 : {
   if (($58($0_1 | 0, $1_1 + -2 | 0 | 0, -1 | 0, 2 | 0, 2 | 0, 24 | 0) | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $37($0_1 | 0, 0 | 0);
   $10($0_1 | 0, -2 | 0);
   return 2 | 0;
  }
  return ($6($0_1 | 0) | 0) + -2 | 0 | 0;
 }
 
 function $565($0_1) {
  $0_1 = $0_1 | 0;
  $535($0_1 | 0, +(504.0), 136 | 0);
  $46($0_1 | 0, 0 | 0, 17 | 0);
  $514($0_1 | 0, 7632 | 0, 0 | 0);
  return 1 | 0;
 }
 
 function $566($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 272 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[(0 + 18944 | 0) >> 2] | 0;
  $956(7957 | 0, 11 | 0, 1 | 0, $2_1 | 0) | 0;
  $795($2_1 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[(0 + 19528 | 0) >> 2] | 0;
   if (!($851($1_1 + 16 | 0 | 0, 250 | 0, $3_1 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    if (!($874($1_1 + 16 | 0 | 0, 7969 | 0, 6 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if ($522($0_1 | 0, $1_1 + 16 | 0 | 0, $961($1_1 + 16 | 0 | 0) | 0 | 0, 7975 | 0, 0 | 0) | 0) {
       break label$4
      }
      if (!($58($0_1 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0, 0 | 0) | 0)) {
       break label$3
      }
     }
     HEAP32[$1_1 >> 2] = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
     $824($2_1 | 0, 7992 | 0, $1_1 | 0) | 0;
     $795($2_1 | 0) | 0;
    }
    $7($0_1 | 0, 0 | 0);
    $956(7957 | 0, 11 | 0, 1 | 0, $2_1 | 0) | 0;
    $795($2_1 | 0) | 0;
    if ($851($1_1 + 16 | 0 | 0, 250 | 0, $3_1 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $1_1 + 272 | 0;
  return 0 | 0;
 }
 
 function $567($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $2$hi = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $513($0_1 | 0, 2 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   if (($11($0_1 | 0, 1 | 0) | 0 | 0) == (7 | 0)) {
    break label$1
   }
   $29($0_1 | 0);
   return 1 | 0;
  }
  $1_1 = 1;
  label$2 : {
   i64toi32_i32$1 = $2$hi;
   if (($48($0_1 | 0, 1 | 0, $2_1 | 0) | 0 | 0) == (-1 | 0)) {
    break label$2
   }
   $37($0_1 | 0, 1 | 0);
   $1_1 = 2;
  }
  return $1_1 | 0;
 }
 
 function $568($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $2_1 = 0, $1_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $0_1;
  label$1 : {
   if (($11($0_1 | 0, 1 | 0) | 0 | 0) != (8 | 0)) {
    break label$1
   }
   $2_1 = $27($0_1 | 0, 1 | 0) | 0;
  }
  $3_1 = $177($2_1 | 0) | 0;
  label$2 : {
   label$3 : {
    $4_1 = $176($2_1 | 0) | 0;
    if ($4_1) {
     break label$3
    }
    $29($0_1 | 0);
    $0_1 = 1;
    break label$2;
   }
   label$4 : {
    label$5 : {
     if (($4_1 | 0) == (47 | 0)) {
      break label$5
     }
     $33($0_1 | 0, 7996 | 0) | 0;
     break label$4;
    }
    $42($0_1 | 0, -1001e3 | 0, 8010 | 0) | 0;
    label$6 : {
     if (($2_1 | 0) == ($0_1 | 0)) {
      break label$6
     }
     if ($1($2_1 | 0, 1 | 0) | 0) {
      break label$6
     }
     $493($0_1 | 0, 8085 | 0, 0 | 0) | 0;
    }
    $39($2_1 | 0) | 0;
    $2($2_1 | 0, $0_1 | 0, 1 | 0);
    $44($0_1 | 0, -2 | 0) | 0;
    $8($0_1 | 0, -2 | 0, -1 | 0);
    $7($0_1 | 0, -2 | 0);
   }
   $4_1 = 0;
   label$7 : {
    if (!($3_1 & 1 | 0)) {
     break label$7
    }
    HEAP8[($1_1 + 11 | 0) >> 0] = 99;
    $4_1 = 1;
   }
   label$8 : {
    if (!($3_1 & 2 | 0)) {
     break label$8
    }
    HEAP8[(($1_1 + 11 | 0) + $4_1 | 0) >> 0] = 114;
    $4_1 = $4_1 + 1 | 0;
   }
   label$9 : {
    if (!($3_1 & 4 | 0)) {
     break label$9
    }
    HEAP8[(($1_1 + 11 | 0) + $4_1 | 0) >> 0] = 108;
    $4_1 = $4_1 + 1 | 0;
   }
   HEAP8[(($1_1 + 11 | 0) + $4_1 | 0) >> 0] = 0;
   $33($0_1 | 0, $1_1 + 11 | 0 | 0) | 0;
   i64toi32_i32$1 = $178($2_1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $31($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
   $0_1 = 3;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $569($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0;
  $42($0_1 | 0, -1001e3 | 0, 8010 | 0) | 0;
  $39($0_1 | 0) | 0;
  label$1 : {
   if (($44($0_1 | 0, -2 | 0) | 0 | 0) != (6 | 0)) {
    break label$1
   }
   $33($0_1 | 0, HEAP32[(((HEAP32[$1_1 >> 2] | 0) << 2 | 0) + 8032 | 0) >> 2] | 0 | 0) | 0;
   label$2 : {
    label$3 : {
     $1_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     if (($1_1 | 0) < (0 | 0)) {
      break label$3
     }
     i64toi32_i32$0 = 0;
     $31($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0);
     break label$2;
    }
    $29($0_1 | 0);
   }
   $57($0_1 | 0, 2 | 0, 0 | 0, 0 | 0, 0 | 0);
  }
 }
 
 function $570($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 128 | 0;
  global$0 = $1_1;
  $2_1 = 1;
  label$1 : {
   label$2 : {
    if (($11($0_1 | 0, 1 | 0) | 0 | 0) == (8 | 0)) {
     break label$2
    }
    $3_1 = 2;
    $4_1 = $505($0_1 | 0, 2 | 0, 8100 | 0, 0 | 0) | 0;
    $5_1 = $0_1;
    $6_1 = 1;
    break label$1;
   }
   $2_1 = 1;
   $5_1 = $27($0_1 | 0, 1 | 0) | 0;
   $6_1 = 2;
   $3_1 = 3;
   $4_1 = $505($0_1 | 0, 3 | 0, 8100 | 0, 0 | 0) | 0;
   label$3 : {
    if (($5_1 | 0) != ($0_1 | 0)) {
     break label$3
    }
    $5_1 = $0_1;
    break label$1;
   }
   $3_1 = 3;
   label$4 : {
    if (!($1($5_1 | 0, 3 | 0) | 0)) {
     break label$4
    }
    $2_1 = 0;
    break label$1;
   }
   $2_1 = 0;
   $493($0_1 | 0, 8085 | 0, 0 | 0) | 0;
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if (($11($0_1 | 0, $6_1 | 0) | 0 | 0) != (6 | 0)) {
      break label$7
     }
     HEAP32[$1_1 >> 2] = $4_1;
     $4_1 = $35($0_1 | 0, 8108 | 0, $1_1 | 0) | 0;
     $10($0_1 | 0, $6_1 | 0);
     $2($0_1 | 0, $5_1 | 0, 1 | 0);
     break label$6;
    }
    i64toi32_i32$0 = $512($0_1 | 0, $6_1 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    if ($179($5_1 | 0, i64toi32_i32$0 | 0, $1_1 + 16 | 0 | 0) | 0) {
     break label$6
    }
    $29($0_1 | 0);
    $6_1 = 1;
    break label$5;
   }
   label$8 : {
    if ($183($5_1 | 0, $4_1 | 0, $1_1 + 16 | 0 | 0) | 0) {
     break label$8
    }
    $6_1 = $492($0_1 | 0, $3_1 | 0, 8112 | 0) | 0;
    break label$5;
   }
   $46($0_1 | 0, 0 | 0, 0 | 0);
   label$9 : {
    if (!($865($4_1 | 0, 83 | 0) | 0)) {
     break label$9
    }
    $32($0_1 | 0, HEAP32[($1_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) | 0;
    $51($0_1 | 0, -2 | 0, 8127 | 0);
    $33($0_1 | 0, $1_1 + 60 | 0 | 0) | 0;
    $51($0_1 | 0, -2 | 0, 8134 | 0);
    i64toi32_i32$1 = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $31($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
    $51($0_1 | 0, -2 | 0, 8144 | 0);
    i64toi32_i32$0 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $31($0_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
    $51($0_1 | 0, -2 | 0, 8156 | 0);
    $33($0_1 | 0, HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) | 0;
    $51($0_1 | 0, -2 | 0, 8172 | 0);
   }
   label$10 : {
    if (!($865($4_1 | 0, 108 | 0) | 0)) {
     break label$10
    }
    i64toi32_i32$1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $31($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
    $51($0_1 | 0, -2 | 0, 8177 | 0);
   }
   label$11 : {
    if (!($865($4_1 | 0, 117 | 0) | 0)) {
     break label$11
    }
    i64toi32_i32$0 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    i64toi32_i32$1 = 0;
    $31($0_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
    $51($0_1 | 0, -2 | 0, 8189 | 0);
    i64toi32_i32$1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    i64toi32_i32$0 = 0;
    $31($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
    $51($0_1 | 0, -2 | 0, 8194 | 0);
    $37($0_1 | 0, HEAP8[($1_1 + 54 | 0) >> 0] | 0 | 0);
    $51($0_1 | 0, -2 | 0, 8202 | 0);
   }
   label$12 : {
    if (!($865($4_1 | 0, 110 | 0) | 0)) {
     break label$12
    }
    $33($0_1 | 0, HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $51($0_1 | 0, -2 | 0, 8211 | 0);
    $33($0_1 | 0, HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    $51($0_1 | 0, -2 | 0, 8216 | 0);
   }
   label$13 : {
    if (!($865($4_1 | 0, 114 | 0) | 0)) {
     break label$13
    }
    i64toi32_i32$0 = HEAPU16[($1_1 + 56 | 0) >> 1] | 0;
    i64toi32_i32$1 = 0;
    $31($0_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
    $51($0_1 | 0, -2 | 0, 8225 | 0);
    i64toi32_i32$1 = HEAPU16[($1_1 + 58 | 0) >> 1] | 0;
    i64toi32_i32$0 = 0;
    $31($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
    $51($0_1 | 0, -2 | 0, 8235 | 0);
   }
   label$14 : {
    if (!($865($4_1 | 0, 116 | 0) | 0)) {
     break label$14
    }
    $37($0_1 | 0, HEAP8[($1_1 + 55 | 0) >> 0] | 0 | 0);
    $51($0_1 | 0, -2 | 0, 8245 | 0);
   }
   label$15 : {
    if (!($865($4_1 | 0, 76 | 0) | 0)) {
     break label$15
    }
    label$16 : {
     label$17 : {
      if (!$2_1) {
       break label$17
      }
      $8($0_1 | 0, -2 | 0, 1 | 0);
      break label$16;
     }
     $2($5_1 | 0, $0_1 | 0, 1 | 0);
    }
    $51($0_1 | 0, -2 | 0, 8256 | 0);
   }
   $6_1 = 1;
   if (!($865($4_1 | 0, 102 | 0) | 0)) {
    break label$5
   }
   label$18 : {
    label$19 : {
     if (!$2_1) {
      break label$19
     }
     $8($0_1 | 0, -2 | 0, 1 | 0);
     break label$18;
    }
    $2($5_1 | 0, $0_1 | 0, 1 | 0);
   }
   $51($0_1 | 0, -2 | 0, 8268 | 0);
  }
  global$0 = $1_1 + 128 | 0;
  return $6_1 | 0;
 }
 
 function $571($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0;
  $1_1 = global$0 - 112 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  $3_1 = $0_1;
  label$1 : {
   if (($11($0_1 | 0, 1 | 0) | 0 | 0) != (8 | 0)) {
    break label$1
   }
   $3_1 = $27($0_1 | 0, 1 | 0) | 0;
   $2_1 = 1;
  }
  i64toi32_i32$0 = $512($0_1 | 0, $2_1 | 2 | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $4_1 = i64toi32_i32$0;
  label$2 : {
   label$3 : {
    label$4 : {
     $2_1 = $2_1 + 1 | 0;
     if (($11($0_1 | 0, $2_1 | 0) | 0 | 0) != (6 | 0)) {
      break label$4
     }
     $10($0_1 | 0, $2_1 | 0);
     $33($0_1 | 0, $181($0_1 | 0, 0 | 0, $4_1 | 0) | 0 | 0) | 0;
     break label$3;
    }
    label$5 : {
     i64toi32_i32$1 = $512($0_1 | 0, $2_1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     if ($179($3_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0) | 0) {
      break label$5
     }
     $0_1 = $492($0_1 | 0, $2_1 | 0, 8273 | 0) | 0;
     break label$2;
    }
    label$6 : {
     if (($3_1 | 0) == ($0_1 | 0)) {
      break label$6
     }
     if ($1($3_1 | 0, 1 | 0) | 0) {
      break label$6
     }
     $493($0_1 | 0, 8085 | 0, 0 | 0) | 0;
    }
    label$7 : {
     $2_1 = $181($3_1 | 0, $1_1 | 0, $4_1 | 0) | 0;
     if (!$2_1) {
      break label$7
     }
     $2($3_1 | 0, $0_1 | 0, 1 | 0);
     $33($0_1 | 0, $2_1 | 0) | 0;
     $8($0_1 | 0, -2 | 0, 1 | 0);
     $0_1 = 2;
     break label$2;
    }
    $29($0_1 | 0);
   }
   $0_1 = 1;
  }
  global$0 = $1_1 + 112 | 0;
  return $0_1 | 0;
 }
 
 function $572($0_1) {
  $0_1 = $0_1 | 0;
  $10($0_1 | 0, -1001e3 | 0);
  return 1 | 0;
 }
 
 function $573($0_1) {
  $0_1 = $0_1 | 0;
  $509($0_1 | 0, 1 | 0);
  label$1 : {
   if ($47($0_1 | 0, 1 | 0) | 0) {
    break label$1
   }
   $29($0_1 | 0);
  }
  return 1 | 0;
 }
 
 function $574($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $512($0_1 | 0, 2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $508($0_1 | 0, 1 | 0, 6 | 0);
  label$1 : {
   $1_1 = $73($0_1 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   return 0 | 0;
  }
  $33($0_1 | 0, $1_1 | 0) | 0;
  $8($0_1 | 0, -2 | 0, 1 | 0);
  return 2 | 0;
 }
 
 function $575($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0;
  i64toi32_i32$0 = $512($0_1 | 0, 2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $508($0_1 | 0, 1 | 0, 6 | 0);
  label$1 : {
   $1_1 = i64toi32_i32$0;
   if ($73($0_1 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0) {
    break label$1
   }
   $492($0_1 | 0, 2 | 0, 8314 | 0) | 0;
  }
  i64toi32_i32$1 = $512($0_1 | 0, 4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $508($0_1 | 0, 3 | 0, 6 | 0);
  label$2 : {
   $2_1 = i64toi32_i32$1;
   if ($73($0_1 | 0, 3 | 0, i64toi32_i32$1 | 0) | 0) {
    break label$2
   }
   $492($0_1 | 0, 4 | 0, 8314 | 0) | 0;
  }
  label$3 : {
   if (!($13($0_1 | 0, 1 | 0) | 0)) {
    break label$3
   }
   $492($0_1 | 0, 1 | 0, 8292 | 0) | 0;
  }
  label$4 : {
   if (!($13($0_1 | 0, 3 | 0) | 0)) {
    break label$4
   }
   $492($0_1 | 0, 3 | 0, 8292 | 0) | 0;
  }
  $76($0_1 | 0, 1 | 0, $1_1 | 0, 3 | 0, $2_1 | 0);
  return 0 | 0;
 }
 
 function $576($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $512($0_1 | 0, 2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $508($0_1 | 0, 1 | 0, 6 | 0);
  label$1 : {
   $1_1 = i64toi32_i32$0;
   if ($73($0_1 | 0, 1 | 0, $1_1 | 0) | 0) {
    break label$1
   }
   $492($0_1 | 0, 2 | 0, 8314 | 0) | 0;
  }
  $38($0_1 | 0, $75($0_1 | 0, 1 | 0, $1_1 | 0) | 0 | 0);
  return 1 | 0;
 }
 
 function $577($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $513($0_1 | 0, 3 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $508($0_1 | 0, 1 | 0, 7 | 0);
  $509($0_1 | 0, 2 | 0);
  $7($0_1 | 0, 2 | 0);
  label$1 : {
   if ($56($0_1 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0) {
    break label$1
   }
   $29($0_1 | 0);
  }
  return 1 | 0;
 }
 
 function $578($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0;
  $1_1 = 0;
  $2_1 = $0_1;
  label$1 : {
   if (($11($0_1 | 0, 1 | 0) | 0 | 0) != (8 | 0)) {
    break label$1
   }
   $2_1 = $27($0_1 | 0, 1 | 0) | 0;
   $1_1 = 1;
  }
  label$2 : {
   label$3 : {
    $3_1 = $1_1 + 1 | 0;
    if (($11($0_1 | 0, $3_1 | 0) | 0 | 0) > (0 | 0)) {
     break label$3
    }
    $7($0_1 | 0, $3_1 | 0);
    $1_1 = 0;
    $4_1 = 0;
    $5_1 = 0;
    break label$2;
   }
   $4_1 = $506($0_1 | 0, $1_1 | 2 | 0 | 0, 0 | 0) | 0;
   $508($0_1 | 0, $3_1 | 0, 6 | 0);
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = $513($0_1 | 0, $1_1 + 3 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $1_1 = ($865($4_1 | 0, 99 | 0) | 0 | 0) != (0 | 0);
   $1_1 = $865($4_1 | 0, 114 | 0) | 0 ? $1_1 | 2 | 0 : $1_1;
   $1_1 = $865($4_1 | 0, 108 | 0) | 0 ? $1_1 | 4 | 0 : $1_1;
   $4_1 = i64toi32_i32$0;
   $5_1 = ($4_1 | 0) > (0 | 0) ? $1_1 | 8 | 0 : $1_1;
   $1_1 = 47;
  }
  label$4 : {
   if ($527($0_1 | 0, -1001e3 | 0, 8010 | 0) | 0) {
    break label$4
   }
   $33($0_1 | 0, 8336 | 0) | 0;
   $51($0_1 | 0, -2 | 0, 8338 | 0);
   $10($0_1 | 0, -1 | 0);
   $55($0_1 | 0, -2 | 0) | 0;
  }
  label$5 : {
   if (($2_1 | 0) == ($0_1 | 0)) {
    break label$5
   }
   if ($1($2_1 | 0, 1 | 0) | 0) {
    break label$5
   }
   $493($0_1 | 0, 8085 | 0, 0 | 0) | 0;
  }
  $39($2_1 | 0) | 0;
  $2($2_1 | 0, $0_1 | 0, 1 | 0);
  $10($0_1 | 0, $3_1 | 0);
  $53($0_1 | 0, -3 | 0);
  $175($2_1 | 0, $1_1 | 0, $5_1 | 0, $4_1 | 0);
  return 0 | 0;
 }
 
 function $579($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0;
  $1_1 = global$0 - 112 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  $3_1 = $0_1;
  label$1 : {
   if (($11($0_1 | 0, 1 | 0) | 0 | 0) != (8 | 0)) {
    break label$1
   }
   $3_1 = $27($0_1 | 0, 1 | 0) | 0;
   $2_1 = 1;
  }
  $4_1 = $2_1 + 1 | 0;
  i64toi32_i32$0 = $512($0_1 | 0, $4_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $512($0_1 | 0, $2_1 | 2 | 0 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  label$2 : {
   label$3 : {
    i64toi32_i32$0 = $5$hi;
    if ($179($3_1 | 0, $5_1 | 0, $1_1 | 0) | 0) {
     break label$3
    }
    $2_1 = $492($0_1 | 0, $4_1 | 0, 8273 | 0) | 0;
    break label$2;
   }
   $2_1 = $2_1 + 3 | 0;
   $509($0_1 | 0, $2_1 | 0);
   $7($0_1 | 0, $2_1 | 0);
   i64toi32_i32$0 = $6$hi;
   $4_1 = $6_1;
   label$4 : {
    if (($3_1 | 0) == ($0_1 | 0)) {
     break label$4
    }
    if ($1($3_1 | 0, 1 | 0) | 0) {
     break label$4
    }
    $493($0_1 | 0, 8085 | 0, 0 | 0) | 0;
   }
   $2_1 = 1;
   $2($0_1 | 0, $3_1 | 0, 1 | 0);
   label$5 : {
    $4_1 = $182($3_1 | 0, $1_1 | 0, $4_1 | 0) | 0;
    if ($4_1) {
     break label$5
    }
    $7($3_1 | 0, -2 | 0);
   }
   $33($0_1 | 0, $4_1 | 0) | 0;
  }
  global$0 = $1_1 + 112 | 0;
  return $2_1 | 0;
 }
 
 function $580($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   switch ($11($0_1 | 0, 2 | 0) | 0 | 0) {
   default:
    $495($0_1 | 0, 2 | 0, 8345 | 0) | 0;
    break;
   case 0:
   case 5:
    break label$1;
   };
  }
  $7($0_1 | 0, 2 | 0);
  $55($0_1 | 0, 1 | 0) | 0;
  return 1 | 0;
 }
 
 function $581($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $509($0_1 | 0, 3 | 0);
  i64toi32_i32$0 = $512($0_1 | 0, 2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $508($0_1 | 0, 1 | 0, 6 | 0);
  label$1 : {
   $1_1 = $74($0_1 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   return 0 | 0;
  }
  $33($0_1 | 0, $1_1 | 0) | 0;
  $8($0_1 | 0, -1 | 0, 1 | 0);
  return 1 | 0;
 }
 
 function $582($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0;
  $1_1 = 0;
  $2_1 = $0_1;
  label$1 : {
   if (($11($0_1 | 0, 1 | 0) | 0 | 0) != (8 | 0)) {
    break label$1
   }
   $2_1 = $27($0_1 | 0, 1 | 0) | 0;
   $1_1 = 1;
  }
  label$2 : {
   $3_1 = $1_1 + 1 | 0;
   $4_1 = $24($0_1 | 0, $3_1 | 0, 0 | 0) | 0;
   if ($4_1) {
    break label$2
   }
   if (($11($0_1 | 0, $3_1 | 0) | 0 | 0) < (1 | 0)) {
    break label$2
   }
   $10($0_1 | 0, $3_1 | 0);
   return 1 | 0;
  }
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $513($0_1 | 0, $1_1 | 2 | 0 | 0, ($2_1 | 0) == ($0_1 | 0) | 0, i64toi32_i32$0 | 0) | 0;
  $484($0_1 | 0, $2_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
  return 1 | 0;
 }
 
 function $583($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $512($0_1 | 0, 1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $1_1 = $397($0_1 | 0, i64toi32_i32$0 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   $37($0_1 | 0, 0 | 0);
   return 1 | 0;
  }
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $31($0_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0);
  return 1 | 0;
 }
 
 function $584($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $535($0_1 | 0, +(504.0), 136 | 0);
  $46($0_1 | 0, 0 | 0, 11 | 0);
  $514($0_1 | 0, 8368 | 0, 0 | 0);
  $500($0_1 | 0, 8571 | 0) | 0;
  $514($0_1 | 0, 8784 | 0, 0 | 0);
  $46($0_1 | 0, 0 | 0, 7 | 0);
  $514($0_1 | 0, 8832 | 0, 0 | 0);
  $51($0_1 | 0, -2 | 0, 8896 | 0);
  $7($0_1 | 0, -2 | 0);
  $1_1 = $72($0_1 | 0, 8 | 0, 0 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = 0;
  $501($0_1 | 0, 8571 | 0);
  HEAP32[($1_1 + 4 | 0) >> 2] = 65;
  HEAP32[$1_1 >> 2] = HEAP32[(0 + 19528 | 0) >> 2] | 0;
  $10($0_1 | 0, -1 | 0);
  $51($0_1 | 0, -1001e3 | 0, 8464 | 0);
  $51($0_1 | 0, -2 | 0, 8474 | 0);
  $1_1 = $72($0_1 | 0, 8 | 0, 0 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = 0;
  $501($0_1 | 0, 8571 | 0);
  HEAP32[($1_1 + 4 | 0) >> 2] = 65;
  HEAP32[$1_1 >> 2] = HEAP32[(0 + 19532 | 0) >> 2] | 0;
  $10($0_1 | 0, -1 | 0);
  $51($0_1 | 0, -1001e3 | 0, 8480 | 0);
  $51($0_1 | 0, -2 | 0, 8491 | 0);
  $1_1 = $72($0_1 | 0, 8 | 0, 0 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = 0;
  $501($0_1 | 0, 8571 | 0);
  HEAP32[($1_1 + 4 | 0) >> 2] = 65;
  HEAP32[$1_1 >> 2] = HEAP32[(0 + 18944 | 0) >> 2] | 0;
  $51($0_1 | 0, -2 | 0, 8498 | 0);
  return 1 | 0;
 }
 
 function $585($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(($503($0_1 | 0, 1 | 0, 8571 | 0) | 0) + 4 | 0) >> 2] = 65;
  $29($0_1 | 0);
  $33($0_1 | 0, 9069 | 0) | 0;
  return 2 | 0;
 }
 
 function $586($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (($11($0_1 | 0, 1 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $42($0_1 | 0, -1001e3 | 0, 8480 | 0) | 0;
  }
  label$2 : {
   if (HEAP32[(($503($0_1 | 0, 1 | 0, 8571 | 0) | 0) + 4 | 0) >> 2] | 0) {
    break label$2
   }
   $493($0_1 | 0, 8577 | 0, 0 | 0) | 0;
  }
  $2_1 = $503($0_1 | 0, 1 | 0, 8571 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = 0;
  $0_1 = FUNCTION_TABLE[HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0]($0_1) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $587($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $42($0_1 | 0, -1001e3 | 0, 8480 | 0) | 0;
  label$1 : {
   $2_1 = $26($0_1 | 0, -1 | 0) | 0;
   if (HEAP32[($2_1 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = 8484;
   $493($0_1 | 0, 8606 | 0, $1_1 | 0) | 0;
  }
  $0_1 = $498($0_1 | 0, !($795(HEAP32[$2_1 >> 2] | 0 | 0) | 0) | 0, 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $588($0_1) {
  $0_1 = $0_1 | 0;
  $589($0_1 | 0, 8464 | 0, 8632 | 0);
  return 1 | 0;
 }
 
 function $589($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($11($0_1 | 0, 1 | 0) | 0 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $4_1 = $24($0_1 | 0, 1 | 0, 0 | 0) | 0;
     if (!$4_1) {
      break label$3
     }
     $5_1 = $72($0_1 | 0, 8 | 0, 0 | 0) | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = 0;
     $501($0_1 | 0, 8571 | 0);
     HEAP32[($5_1 + 4 | 0) >> 2] = 66;
     HEAP32[$5_1 >> 2] = 0;
     $2_1 = $798($4_1 | 0, $2_1 | 0) | 0;
     HEAP32[$5_1 >> 2] = $2_1;
     if ($2_1) {
      break label$2
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = $747(HEAP32[($744() | 0) >> 2] | 0 | 0) | 0;
     HEAP32[$3_1 >> 2] = $4_1;
     $493($0_1 | 0, 8634 | 0, $3_1 | 0) | 0;
     break label$2;
    }
    label$4 : {
     if (HEAP32[(($503($0_1 | 0, 1 | 0, 8571 | 0) | 0) + 4 | 0) >> 2] | 0) {
      break label$4
     }
     $493($0_1 | 0, 8577 | 0, 0 | 0) | 0;
    }
    $10($0_1 | 0, 1 | 0);
   }
   $51($0_1 | 0, -1001e3 | 0, $1_1 | 0);
  }
  $42($0_1 | 0, -1001e3 | 0, $1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $590($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (($11($0_1 | 0, 1 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $29($0_1 | 0);
  }
  label$2 : {
   label$3 : {
    if ($11($0_1 | 0, 1 | 0) | 0) {
     break label$3
    }
    $42($0_1 | 0, -1001e3 | 0, 8464 | 0) | 0;
    $2_1 = 1;
    $9($0_1 | 0, -1 | 0, 1 | 0);
    $7($0_1 | 0, -2 | 0);
    label$4 : {
     if (HEAP32[(($503($0_1 | 0, 1 | 0, 8571 | 0) | 0) + 4 | 0) >> 2] | 0) {
      break label$4
     }
     $493($0_1 | 0, 8577 | 0, 0 | 0) | 0;
    }
    $591($0_1 | 0, 0 | 0);
    break label$2;
   }
   $3_1 = $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
   $2_1 = $72($0_1 | 0, 8 | 0, 0 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = 0;
   $501($0_1 | 0, 8571 | 0);
   HEAP32[($2_1 + 4 | 0) >> 2] = 66;
   HEAP32[$2_1 >> 2] = 0;
   $4_1 = $798($3_1 | 0, 8632 | 0) | 0;
   HEAP32[$2_1 >> 2] = $4_1;
   label$5 : {
    if ($4_1) {
     break label$5
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $747(HEAP32[($744() | 0) >> 2] | 0 | 0) | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    $493($0_1 | 0, 8634 | 0, $1_1 | 0) | 0;
   }
   $9($0_1 | 0, -1 | 0, 1 | 0);
   $7($0_1 | 0, -2 | 0);
   $591($0_1 | 0, 1 | 0);
   $29($0_1 | 0);
   $29($0_1 | 0);
   $10($0_1 | 0, 1 | 0);
   $2_1 = 4;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $591($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   $2_1 = $6($0_1 | 0) | 0;
   if (($2_1 | 0) < (252 | 0)) {
    break label$1
   }
   $492($0_1 | 0, 252 | 0, 8661 | 0) | 0;
  }
  $10($0_1 | 0, 1 | 0);
  i64toi32_i32$1 = $2_1 + -1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $31($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
  $37($0_1 | 0, $1_1 | 0);
  $8($0_1 | 0, 2 | 0, 3 | 0);
  $36($0_1 | 0, 67 | 0, $2_1 + 2 | 0 | 0);
 }
 
 function $592($0_1) {
  $0_1 = $0_1 | 0;
  return $498($0_1 | 0, !($852(HEAP32[($503($0_1 | 0, 1 | 0, 8571 | 0) | 0) >> 2] | 0 | 0) | 0) | 0, 0 | 0) | 0 | 0;
 }
 
 function $593($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $1_1 = 0;
  $1_1 = $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
  $2_1 = $505($0_1 | 0, 2 | 0, 8632 | 0, 0 | 0) | 0;
  $3_1 = $72($0_1 | 0, 8 | 0, 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  $501($0_1 | 0, 8571 | 0);
  HEAP32[($3_1 + 4 | 0) >> 2] = 66;
  HEAP32[$3_1 >> 2] = 0;
  label$1 : {
   label$2 : {
    $4_1 = HEAP8[$2_1 >> 0] | 0;
    if (!$4_1) {
     break label$2
    }
    if (!($879(8741 | 0, $4_1 | 0, 4 | 0) | 0)) {
     break label$2
    }
    $4_1 = (HEAPU8[($2_1 + 1 | 0) >> 0] | 0 | 0) == (43 | 0) ? $2_1 + 2 | 0 : $2_1 + 1 | 0;
    if (($866($4_1 | 0, 8745 | 0) | 0 | 0) == ($961($4_1 | 0) | 0 | 0)) {
     break label$1
    }
   }
   $492($0_1 | 0, 2 | 0, 8728 | 0) | 0;
  }
  $4_1 = $798($1_1 | 0, $2_1 | 0) | 0;
  HEAP32[$3_1 >> 2] = $4_1;
  $2_1 = 1;
  label$3 : {
   if ($4_1) {
    break label$3
   }
   $2_1 = $498($0_1 | 0, 0 | 0, $1_1 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $594($0_1) {
  $0_1 = $0_1 | 0;
  $589($0_1 | 0, 8480 | 0, 8747 | 0);
  return 1 | 0;
 }
 
 function $595($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = 1;
  $2_1 = $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
  $3_1 = $505($0_1 | 0, 2 | 0, 8632 | 0, 0 | 0) | 0;
  $4_1 = $72($0_1 | 0, 8 | 0, 0 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  $501($0_1 | 0, 8571 | 0);
  $795(0 | 0) | 0;
  $3_1 = fimport$13($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 68;
  HEAP32[$4_1 >> 2] = $3_1;
  label$1 : {
   if ($3_1) {
    break label$1
   }
   $1_1 = $498($0_1 | 0, 0 | 0, $2_1 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $596($0_1) {
  $0_1 = $0_1 | 0;
  return $499($0_1 | 0, $843(HEAP32[($503($0_1 | 0, 1 | 0, 8571 | 0) | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $597($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $42($0_1 | 0, -1001e3 | 0, 8464 | 0) | 0;
  label$1 : {
   $2_1 = $26($0_1 | 0, -1 | 0) | 0;
   if (HEAP32[($2_1 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = 8468;
   $493($0_1 | 0, 8606 | 0, $1_1 | 0) | 0;
  }
  $0_1 = $598($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $598($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $10_1 = 0, $14_1 = 0, $13_1 = 0, $5_1 = 0, $9_1 = 0, $11_1 = 0, $6_1 = 0, $12_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 528 | 0;
  global$0 = $3_1;
  $4_1 = $6($0_1 | 0) | 0;
  $793($1_1 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (($4_1 | 0) != (1 | 0)) {
      break label$3
     }
     $5_1 = $2_1 + 1 | 0;
     $4_1 = $605($0_1 | 0, $1_1 | 0, 1 | 0) | 0;
     break label$2;
    }
    $507($0_1 | 0, $4_1 + 19 | 0 | 0, 8661 | 0);
    $6_1 = $4_1 + -2 | 0;
    $7_1 = $3_1 + 12 | 0;
    $5_1 = $2_1;
    label$4 : while (1) {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             if (($11($0_1 | 0, $5_1 | 0) | 0 | 0) != (3 | 0)) {
              break label$12
             }
             $4_1 = $512($0_1 | 0, $5_1 | 0) | 0;
             if ($4_1) {
              break label$11
             }
             $4_1 = $834($1_1 | 0) | 0;
             $805($4_1 | 0, $1_1 | 0) | 0;
             $33($0_1 | 0, 8721 | 0) | 0;
             $4_1 = ($4_1 | 0) != (-1 | 0);
             break label$5;
            }
            label$13 : {
             $4_1 = $506($0_1 | 0, $5_1 | 0, 0 | 0) | 0;
             switch ((HEAP8[($4_1 + ((HEAPU8[$4_1 >> 0] | 0 | 0) == (42 | 0)) | 0) >> 0] | 0) + -76 | 0 | 0) {
             case 34:
              break label$13;
             case 32:
              break label$7;
             case 0:
              break label$8;
             case 21:
              break label$9;
             default:
              break label$10;
             };
            }
            HEAP32[($3_1 + 8 | 0) >> 2] = 0;
            HEAP32[$3_1 >> 2] = $1_1;
            $8_1 = HEAP8[(HEAP32[($752() | 0) >> 2] | 0) >> 0] | 0;
            $804($1_1 | 0);
            label$14 : while (1) {
             $4_1 = $806($1_1 | 0) | 0;
             if ($742($4_1 | 0) | 0) {
              continue label$14
             }
             break label$14;
            };
            HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
            $9_1 = 0;
            $10_1 = 0;
            label$15 : {
             switch ($4_1 + -43 | 0 | 0) {
             case 0:
             case 2:
              HEAP8[($3_1 + 12 | 0) >> 0] = $4_1;
              $10_1 = 1;
              HEAP32[($3_1 + 8 | 0) >> 2] = 1;
              $4_1 = $806($1_1 | 0) | 0;
              HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
              break;
             default:
              break label$15;
             };
            }
            $11_1 = 1;
            $12_1 = 8725;
            label$17 : {
             if (($4_1 | 0) != (48 | 0)) {
              break label$17
             }
             $9_1 = 1;
             $13_1 = $10_1 + 1 | 0;
             HEAP32[($3_1 + 8 | 0) >> 2] = $13_1;
             HEAP8[(($3_1 | $10_1 | 0) + 12 | 0) >> 0] = 48;
             $4_1 = $806($1_1 | 0) | 0;
             HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
             label$18 : {
              if (($4_1 | 32 | 0 | 0) == (120 | 0)) {
               break label$18
              }
              $11_1 = 1;
              break label$17;
             }
             HEAP32[($3_1 + 8 | 0) >> 2] = $10_1 | 2 | 0;
             HEAP8[(($3_1 | $13_1 | 0) + 12 | 0) >> 0] = $4_1;
             $4_1 = $806($1_1 | 0) | 0;
             HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
             $9_1 = 0;
             $12_1 = 8722;
             $11_1 = 0;
            }
            $13_1 = 0;
            $14_1 = $1_1;
            label$19 : while (1) {
             label$20 : {
              label$21 : {
               if ($11_1) {
                break label$21
               }
               $10_1 = $733($4_1 | 0) | 0;
               break label$20;
              }
              $10_1 = ($4_1 + -48 | 0) >>> 0 < 10 >>> 0;
             }
             label$22 : {
              label$23 : {
               if (!$10_1) {
                break label$23
               }
               $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
               if (($10_1 | 0) < (200 | 0)) {
                break label$22
               }
               HEAP8[($3_1 + 12 | 0) >> 0] = 0;
              }
              $9_1 = $13_1 + $9_1 | 0;
              label$24 : {
               if (($4_1 | 0) == ($8_1 | 0)) {
                break label$24
               }
               if (($4_1 | 0) != (46 | 0)) {
                break label$6
               }
              }
              label$25 : {
               $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
               if (($10_1 | 0) < (200 | 0)) {
                break label$25
               }
               HEAP8[($3_1 + 12 | 0) >> 0] = 0;
               break label$6;
              }
              HEAP32[($3_1 + 8 | 0) >> 2] = $10_1 + 1 | 0;
              HEAP8[(($3_1 + $10_1 | 0) + 12 | 0) >> 0] = $4_1;
              $14_1 = HEAP32[$3_1 >> 2] | 0;
              $4_1 = $806($14_1 | 0) | 0;
              HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
              $13_1 = 0;
              label$26 : while (1) {
               label$27 : {
                label$28 : {
                 if ($11_1) {
                  break label$28
                 }
                 $10_1 = $733($4_1 | 0) | 0;
                 break label$27;
                }
                $10_1 = ($4_1 + -48 | 0) >>> 0 < 10 >>> 0;
               }
               label$29 : {
                label$30 : {
                 if (!$10_1) {
                  break label$30
                 }
                 $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                 if (($10_1 | 0) < (200 | 0)) {
                  break label$29
                 }
                 HEAP8[($3_1 + 12 | 0) >> 0] = 0;
                }
                $9_1 = $13_1 + $9_1 | 0;
                break label$6;
               }
               HEAP32[($3_1 + 8 | 0) >> 2] = $10_1 + 1 | 0;
               HEAP8[(($3_1 + $10_1 | 0) + 12 | 0) >> 0] = $4_1;
               $14_1 = HEAP32[$3_1 >> 2] | 0;
               $4_1 = $806($14_1 | 0) | 0;
               HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
               $13_1 = $13_1 + 1 | 0;
               continue label$26;
              };
             }
             HEAP32[($3_1 + 8 | 0) >> 2] = $10_1 + 1 | 0;
             HEAP8[(($3_1 + $10_1 | 0) + 12 | 0) >> 0] = $4_1;
             $14_1 = HEAP32[$3_1 >> 2] | 0;
             $4_1 = $806($14_1 | 0) | 0;
             HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
             $13_1 = $13_1 + 1 | 0;
             continue label$19;
            };
           }
           $487($0_1 | 0, $3_1 | 0);
           $4_1 = $836($489($3_1 | 0, $4_1 | 0) | 0 | 0, 1 | 0, $4_1 | 0, $1_1 | 0) | 0;
           HEAP32[($3_1 + 8 | 0) >> 2] = $4_1 + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0;
           $4_1 = ($4_1 | 0) != (0 | 0);
           $491($3_1 | 0);
           break label$5;
          }
          $4_1 = $492($0_1 | 0, $5_1 | 0, 8706 | 0) | 0;
          break label$1;
         }
         $487($0_1 | 0, $3_1 | 0);
         label$31 : while (1) {
          $4_1 = $836($489($3_1 | 0, 512 | 0) | 0 | 0, 1 | 0, 512 | 0, $1_1 | 0) | 0;
          HEAP32[($3_1 + 8 | 0) >> 2] = $4_1 + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0;
          if (($4_1 | 0) == (512 | 0)) {
           continue label$31
          }
          break label$31;
         };
         $491($3_1 | 0);
         $4_1 = 1;
         break label$5;
        }
        $4_1 = $605($0_1 | 0, $1_1 | 0, 0 | 0) | 0;
        break label$5;
       }
       $4_1 = $605($0_1 | 0, $1_1 | 0, 1 | 0) | 0;
       break label$5;
      }
      label$32 : {
       if (($9_1 | 0) < (1 | 0)) {
        break label$32
       }
       label$33 : {
        if (($4_1 | 0) == (HEAP8[$12_1 >> 0] | 0 | 0)) {
         break label$33
        }
        if (($4_1 | 0) != (HEAP8[($12_1 + 1 | 0) >> 0] | 0 | 0)) {
         break label$32
        }
       }
       label$34 : {
        $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        if (($10_1 | 0) >= (200 | 0)) {
         break label$34
        }
        HEAP32[($3_1 + 8 | 0) >> 2] = $10_1 + 1 | 0;
        HEAP8[(($3_1 + $10_1 | 0) + 12 | 0) >> 0] = $4_1;
        $14_1 = HEAP32[$3_1 >> 2] | 0;
        $4_1 = $806($14_1 | 0) | 0;
        HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
        label$35 : {
         label$36 : {
          switch ($4_1 + -43 | 0 | 0) {
          case 0:
          case 2:
           break label$36;
          default:
           break label$35;
          };
         }
         label$37 : {
          $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
          if (($10_1 | 0) < (200 | 0)) {
           break label$37
          }
          HEAP8[($3_1 + 12 | 0) >> 0] = 0;
          break label$35;
         }
         HEAP32[($3_1 + 8 | 0) >> 2] = $10_1 + 1 | 0;
         HEAP8[(($3_1 + $10_1 | 0) + 12 | 0) >> 0] = $4_1;
         $14_1 = HEAP32[$3_1 >> 2] | 0;
         $4_1 = $806($14_1 | 0) | 0;
         HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
        }
        if (($4_1 + -48 | 0) >>> 0 > 9 >>> 0) {
         break label$32
        }
        $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        if (($10_1 | 0) > (199 | 0)) {
         break label$34
        }
        label$38 : while (1) {
         HEAP32[($3_1 + 8 | 0) >> 2] = $10_1 + 1 | 0;
         HEAP8[(($3_1 + $10_1 | 0) + 12 | 0) >> 0] = $4_1;
         $14_1 = HEAP32[$3_1 >> 2] | 0;
         $4_1 = $806($14_1 | 0) | 0;
         HEAP32[($3_1 + 4 | 0) >> 2] = $4_1;
         if (($4_1 + -48 | 0) >>> 0 >= 10 >>> 0) {
          break label$32
         }
         $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         if (($10_1 | 0) < (200 | 0)) {
          continue label$38
         }
         break label$38;
        };
       }
       HEAP8[($3_1 + 12 | 0) >> 0] = 0;
      }
      $805($4_1 | 0, $14_1 | 0) | 0;
      $792($14_1 | 0);
      HEAP8[(($3_1 + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) + 12 | 0) >> 0] = 0;
      $4_1 = 1;
      if ($20($0_1 | 0, $7_1 | 0) | 0) {
       break label$5
      }
      $29($0_1 | 0);
      $4_1 = 0;
     }
     $5_1 = $5_1 + 1 | 0;
     if (!$6_1) {
      break label$2
     }
     $6_1 = $6_1 + -1 | 0;
     if ($4_1) {
      continue label$4
     }
     break label$4;
    };
   }
   label$39 : {
    if (!($833($1_1 | 0) | 0)) {
     break label$39
    }
    $4_1 = $498($0_1 | 0, 0 | 0, 0 | 0) | 0;
    break label$1;
   }
   label$40 : {
    if ($4_1) {
     break label$40
    }
    $7($0_1 | 0, -2 | 0);
    $29($0_1 | 0);
   }
   $4_1 = $5_1 - $2_1 | 0;
  }
  global$0 = $3_1 + 528 | 0;
  return $4_1 | 0;
 }
 
 function $599($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $72($0_1 | 0, 8 | 0, 0 | 0) | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = 0;
  $501($0_1 | 0, 8571 | 0);
  HEAP32[($1_1 + 4 | 0) >> 2] = 66;
  HEAP32[$1_1 >> 2] = 0;
  $2_1 = $826() | 0;
  HEAP32[$1_1 >> 2] = $2_1;
  $1_1 = 1;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   $1_1 = $498($0_1 | 0, 0 | 0, 0 | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $600($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $509($0_1 | 0, 1 | 0);
  label$1 : {
   $1_1 = $502($0_1 | 0, 1 | 0, 8571 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   $29($0_1 | 0);
   return 1 | 0;
  }
  label$2 : {
   if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
    break label$2
   }
   $33($0_1 | 0, 8749 | 0) | 0;
   return 1 | 0;
  }
  $33($0_1 | 0, 8761 | 0) | 0;
  return 1 | 0;
 }
 
 function $601($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $42($0_1 | 0, -1001e3 | 0, 8480 | 0) | 0;
  label$1 : {
   $2_1 = $26($0_1 | 0, -1 | 0) | 0;
   if (HEAP32[($2_1 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = 8484;
   $493($0_1 | 0, 8606 | 0, $1_1 | 0) | 0;
  }
  $0_1 = $602($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $602($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $28_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = ($6($0_1 | 0) | 0) - $2_1 | 0;
    if ($4_1) {
     break label$2
    }
    $2_1 = 1;
    break label$1;
   }
   $5_1 = 1;
   label$3 : while (1) {
    $4_1 = $4_1 + -1 | 0;
    label$4 : {
     label$5 : {
      if (($11($0_1 | 0, $2_1 | 0) | 0 | 0) != (3 | 0)) {
       break label$5
      }
      label$6 : {
       label$7 : {
        if (!($14($0_1 | 0, $2_1 | 0) | 0)) {
         break label$7
        }
        i64toi32_i32$0 = $22($0_1 | 0, $2_1 | 0, 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $28_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $3_1;
        HEAP32[($3_1 + 16 | 0) >> 2] = $28_1;
        HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$1;
        $6_1 = $824($1_1 | 0, 8766 | 0, $3_1 + 16 | 0 | 0) | 0;
        break label$6;
       }
       HEAPF64[$3_1 >> 3] = +$21($0_1 | 0, $2_1 | 0, 0 | 0);
       $6_1 = $825($1_1 | 0, 8771 | 0, $3_1 | 0) | 0;
      }
      $5_1 = ($5_1 | 0) != (0 | 0) & ($6_1 | 0) > (0 | 0) | 0;
      break label$4;
     }
     $6_1 = $506($0_1 | 0, $2_1 | 0, $3_1 + 28 | 0 | 0) | 0;
     label$8 : {
      if ($5_1) {
       break label$8
      }
      $5_1 = 0;
      break label$4;
     }
     $5_1 = ($956($6_1 | 0, 1 | 0, HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0 | 0) == (HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0);
    }
    $2_1 = $2_1 + 1 | 0;
    if ($4_1) {
     continue label$3
    }
    break label$3;
   };
   $2_1 = 1;
   if ($5_1) {
    break label$1
   }
   $2_1 = $498($0_1 | 0, 0 | 0, 0 | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $603($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (HEAP32[(($503($0_1 | 0, 1 | 0, 8571 | 0) | 0) + 4 | 0) >> 2] | 0) {
    break label$1
   }
   $493($0_1 | 0, 8577 | 0, 0 | 0) | 0;
  }
  $2_1 = $503($0_1 | 0, 1 | 0, 8571 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = 0;
  $0_1 = FUNCTION_TABLE[HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0]($0_1) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $604($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $5_1 = 0, $4_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $6$hi = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $26($0_1 | 0, -1001001 | 0) | 0;
  i64toi32_i32$0 = $22($0_1 | 0, -1001002 | 0, 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $6_1 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    if (HEAP32[($2_1 + 4 | 0) >> 2] | 0) {
     break label$2
    }
    $3_1 = $493($0_1 | 0, 8680 | 0, 0 | 0) | 0;
    break label$1;
   }
   $3_1 = 1;
   $7($0_1 | 0, 1 | 0);
   i64toi32_i32$1 = $6$hi;
   $4_1 = $6_1;
   $507($0_1 | 0, $4_1 | 0, 8661 | 0);
   label$3 : {
    if (($4_1 | 0) < (1 | 0)) {
     break label$3
    }
    label$4 : while (1) {
     $10($0_1 | 0, -1001003 - $3_1 | 0 | 0);
     $5_1 = ($3_1 | 0) != ($4_1 | 0);
     $3_1 = $3_1 + 1 | 0;
     if ($5_1) {
      continue label$4
     }
     break label$4;
    };
   }
   $3_1 = $598($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 2 | 0) | 0;
   if ($23($0_1 | 0, 0 - $3_1 | 0 | 0) | 0) {
    break label$1
   }
   label$5 : {
    if (($3_1 | 0) < (2 | 0)) {
     break label$5
    }
    HEAP32[$1_1 >> 2] = $24($0_1 | 0, 1 - $3_1 | 0 | 0, 0 | 0) | 0;
    $3_1 = $493($0_1 | 0, 8703 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   label$6 : {
    if ($23($0_1 | 0, -1001003 | 0) | 0) {
     break label$6
    }
    $3_1 = 0;
    break label$1;
   }
   $3_1 = 0;
   $7($0_1 | 0, 0 | 0);
   $10($0_1 | 0, -1001001 | 0);
   $5_1 = $503($0_1 | 0, 1 | 0, 8571 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = 0;
   FUNCTION_TABLE[HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0]($0_1) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $605($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0;
  $3_1 = global$0 - 528 | 0;
  global$0 = $3_1;
  $487($0_1 | 0, $3_1 | 0);
  label$1 : while (1) {
   $4_1 = $489($3_1 | 0, 512 | 0) | 0;
   $804($1_1 | 0);
   $5_1 = 0;
   label$2 : {
    label$3 : while (1) {
     $6_1 = $5_1;
     label$4 : {
      $7_1 = $806($1_1 | 0) | 0;
      $8_1 = $7_1 + 1 | 0;
      switch ($8_1 | 0) {
      case 0:
      case 11:
       break label$2;
      default:
       break label$4;
      };
     }
     HEAP8[($4_1 + $5_1 | 0) >> 0] = $7_1;
     $6_1 = 512;
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) != (512 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $792($1_1 | 0);
   $5_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + $6_1 | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
   label$5 : {
    switch ($8_1 | 0) {
    case 0:
    case 11:
     break label$5;
    default:
     continue label$1;
    };
   }
   break label$1;
  };
  label$6 : {
   if ($2_1) {
    break label$6
   }
   if (($7_1 | 0) != (10 | 0)) {
    break label$6
   }
   label$7 : {
    if ($5_1 >>> 0 < (HEAP32[($3_1 + 4 | 0) >> 2] | 0) >>> 0) {
     break label$7
    }
    $489($3_1 | 0, 1 | 0) | 0;
    $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $5_1 + 1 | 0;
   HEAP8[((HEAP32[$3_1 >> 2] | 0) + $5_1 | 0) >> 0] = 10;
  }
  $491($3_1 | 0);
  $5_1 = 1;
  label$8 : {
   if (($7_1 | 0) == (10 | 0)) {
    break label$8
   }
   i64toi32_i32$0 = $25($0_1 | 0, -1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $5_1 = (i64toi32_i32$2 | 0) != (0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  global$0 = $3_1 + 528 | 0;
  return $5_1 | 0;
 }
 
 function $606($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = $503($0_1 | 0, 1 | 0, 8571 | 0) | 0;
   if (!(HEAP32[($2_1 + 4 | 0) >> 2] | 0)) {
    break label$1
   }
   if (!(HEAP32[$2_1 >> 2] | 0)) {
    break label$1
   }
   $2_1 = $503($0_1 | 0, 1 | 0, 8571 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = 0;
   FUNCTION_TABLE[HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0]($0_1) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $607($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = $503($0_1 | 0, 1 | 0, 8571 | 0) | 0;
    if (HEAP32[($2_1 + 4 | 0) >> 2] | 0) {
     break label$2
    }
    $33($0_1 | 0, 8928 | 0) | 0;
    break label$1;
   }
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
   $35($0_1 | 0, 8942 | 0, $1_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return 1 | 0;
 }
 
 function $608($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $503($0_1 | 0, 1 | 0, 8571 | 0) | 0;
   if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   $493($0_1 | 0, 8577 | 0, 0 | 0) | 0;
  }
  return $598($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, 2 | 0) | 0 | 0;
 }
 
 function $609($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $503($0_1 | 0, 1 | 0, 8571 | 0) | 0;
   if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   $493($0_1 | 0, 8577 | 0, 0 | 0) | 0;
  }
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  $10($0_1 | 0, 1 | 0);
  return $602($0_1 | 0, $1_1 | 0, 2 | 0) | 0 | 0;
 }
 
 function $610($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAP32[(($503($0_1 | 0, 1 | 0, 8571 | 0) | 0) + 4 | 0) >> 2] | 0) {
    break label$1
   }
   $493($0_1 | 0, 8577 | 0, 0 | 0) | 0;
  }
  $591($0_1 | 0, 0 | 0);
  return 1 | 0;
 }
 
 function $611($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $503($0_1 | 0, 1 | 0, 8571 | 0) | 0;
   if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   $493($0_1 | 0, 8577 | 0, 0 | 0) | 0;
  }
  return $498($0_1 | 0, !($795(HEAP32[$1_1 >> 2] | 0 | 0) | 0) | 0, 0 | 0) | 0 | 0;
 }
 
 function $612($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = $503($0_1 | 0, 1 | 0, 8571 | 0) | 0;
   if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   $493($0_1 | 0, 8577 | 0, 0 | 0) | 0;
  }
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  $2_1 = $504($0_1 | 0, 2 | 0, 9012 | 0, 8992 | 0) | 0;
  label$2 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = $513($0_1 | 0, 3 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   if (!($801($1_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, HEAP32[(($2_1 << 2 | 0) + 8968 | 0) >> 2] | 0 | 0) | 0)) {
    break label$2
   }
   return $498($0_1 | 0, 0 | 0, 0 | 0) | 0 | 0;
  }
  i64toi32_i32$1 = $847($1_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $31($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
  return 1 | 0;
 }
 
 function $613($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $1_1 = 0, $10_1 = 0, $15_1 = 0;
  label$1 : {
   $1_1 = $503($0_1 | 0, 1 | 0, 8571 | 0) | 0;
   if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   $493($0_1 | 0, 8577 | 0, 0 | 0) | 0;
  }
  $10_1 = HEAP32[$1_1 >> 2] | 0;
  $15_1 = HEAP32[((($504($0_1 | 0, 2 | 0, 0 | 0, 9040 | 0) | 0) << 2 | 0) + 9020 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $513($0_1 | 0, 3 | 0, 512 | 0, i64toi32_i32$0 | 0) | 0;
  return $498($0_1 | 0, !($802($10_1 | 0, 0 | 0, $15_1 | 0, i64toi32_i32$0 | 0) | 0) | 0, 0 | 0) | 0 | 0;
 }
 
 function $614($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $16$hi = 0, $18$hi = 0, $6_1 = 0;
  $535($0_1 | 0, +(504.0), 136 | 0);
  $46($0_1 | 0, 0 | 0, 27 | 0);
  $514($0_1 | 0, 9104 | 0, 0 | 0);
  $30($0_1 | 0, +(3.141592653589793));
  $51($0_1 | 0, -2 | 0, 9328 | 0);
  $30($0_1 | 0, +(infinity));
  $51($0_1 | 0, -2 | 0, 9331 | 0);
  i64toi32_i32$0 = 2147483647;
  $31($0_1 | 0, -1 | 0, i64toi32_i32$0 | 0);
  $51($0_1 | 0, -2 | 0, 9336 | 0);
  i64toi32_i32$0 = -2147483648;
  $31($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $51($0_1 | 0, -2 | 0, 9347 | 0);
  $14_1 = $72($0_1 | 0, 32 | 0, 0 | 0) | 0;
  i64toi32_i32$1 = fimport$11(0 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $16$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  $6_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  $615($0_1 | 0, $14_1 | 0, $6_1 | 0, i64toi32_i32$0 | 0, $0_1 | 0, i64toi32_i32$1 | 0);
  $7($0_1 | 0, -3 | 0);
  $514($0_1 | 0, 9520 | 0, 1 | 0);
  return 1 | 0;
 }
 
 function $615($0_1, $1_1, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $6$hi = 0, $6_1 = 0, $5$hi = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $7$hi = 0, $7_1 = 0, $8_1 = 0, $8$hi = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $123_1 = 0, $124_1 = 0, $125_1 = 0, $126_1 = 0, $127_1 = 0, $9_1 = 0, $16_1 = 0, $16$hi = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $26_1 = 0, $26$hi = 0, $28$hi = 0, $36_1 = 0, $36$hi = 0, $41$hi = 0, $42_1 = 0, $42$hi = 0, $44$hi = 0, $52_1 = 0, $52$hi = 0, $57$hi = 0, $58_1 = 0, $58$hi = 0, $60$hi = 0, $68_1 = 0, $68$hi = 0, $73$hi = 0, $74_1 = 0, $74$hi = 0, $76$hi = 0, $84_1 = 0, $84$hi = 0, $89$hi = 0, $90_1 = 0, $90$hi = 0, $92$hi = 0, $100_1 = 0, $100$hi = 0, $105$hi = 0, $106_1 = 0, $106$hi = 0, $108$hi = 0, $116_1 = 0, $116$hi = 0, $121$hi = 0, $122_1 = 0, $122$hi = 0, $124$hi = 0, $132_1 = 0, $132$hi = 0, $137$hi = 0, $138_1 = 0, $138$hi = 0, $140$hi = 0, $148_1 = 0, $148$hi = 0, $153$hi = 0, $154_1 = 0, $154$hi = 0, $156$hi = 0, $164_1 = 0, $164$hi = 0, $169$hi = 0, $170_1 = 0, $170$hi = 0, $172$hi = 0, $180_1 = 0, $180$hi = 0, $185$hi = 0, $186_1 = 0, $186$hi = 0, $188$hi = 0, $196_1 = 0, $196$hi = 0, $201$hi = 0, $202_1 = 0, $202$hi = 0, $204$hi = 0, $212_1 = 0, $212$hi = 0, $217$hi = 0, $218_1 = 0, $218$hi = 0, $220$hi = 0, $233_1 = 0, $234_1 = 0, $235_1 = 0, $235$hi = 0, $237$hi = 0, $238_1 = 0, $241$hi = 0, $245_1 = 0, $249_1 = 0;
  $9_1 = $1_1;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $111_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $111_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  i64toi32_i32$1 = $111_1;
  i64toi32_i32$0 = 2088960;
  i64toi32_i32$3 = 255;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $5_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$0;
  $16_1 = $5_1;
  $16$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 33423360;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $112_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $112_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $20$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$1 = $16_1;
  i64toi32_i32$0 = $20$hi;
  i64toi32_i32$3 = $112_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $21_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2088960;
  i64toi32_i32$3 = 255;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$3 = $4_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $26_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $26$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64(i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 45 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $28$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$2 = $28$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $4_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $26$hi;
  i64toi32_i32$2 = $26_1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$3 = $4_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 255;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $8_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$0;
  $36_1 = $8_1;
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $113_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $113_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $41$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $36$hi;
  i64toi32_i32$1 = $36_1;
  i64toi32_i32$0 = $41$hi;
  i64toi32_i32$3 = $113_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $42_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $42$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($4_1 | 0, i64toi32_i32$0 | 0, 45 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $44$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $44$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $42$hi;
  i64toi32_i32$1 = $42_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $7_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$0;
  $52_1 = $7_1;
  $52$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $114_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $114_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $57$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $52$hi;
  i64toi32_i32$1 = $52_1;
  i64toi32_i32$0 = $57$hi;
  i64toi32_i32$3 = $114_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $58_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $58$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($4_1 | 0, i64toi32_i32$0 | 0, 45 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $60$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $60$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $58$hi;
  i64toi32_i32$1 = $58_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $8_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$0;
  $68_1 = $8_1;
  $68$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $115_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $115_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $73$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $68$hi;
  i64toi32_i32$1 = $68_1;
  i64toi32_i32$0 = $73$hi;
  i64toi32_i32$3 = $115_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $74_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $74$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($4_1 | 0, i64toi32_i32$0 | 0, 45 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $76$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $76$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $74$hi;
  i64toi32_i32$1 = $74_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $7_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$0;
  $84_1 = $7_1;
  $84$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $117_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $117_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $89$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $84$hi;
  i64toi32_i32$1 = $84_1;
  i64toi32_i32$0 = $89$hi;
  i64toi32_i32$3 = $117_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $90_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $90$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($4_1 | 0, i64toi32_i32$0 | 0, 45 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $92$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $92$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $90$hi;
  i64toi32_i32$1 = $90_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $8_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$0;
  $100_1 = $8_1;
  $100$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $118_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $118_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $105$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $100$hi;
  i64toi32_i32$1 = $100_1;
  i64toi32_i32$0 = $105$hi;
  i64toi32_i32$3 = $118_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $106_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $106$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($4_1 | 0, i64toi32_i32$0 | 0, 45 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $108$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $108$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $106$hi;
  i64toi32_i32$1 = $106_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $7_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$0;
  $116_1 = $7_1;
  $116$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $119_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $119_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $121$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $116$hi;
  i64toi32_i32$1 = $116_1;
  i64toi32_i32$0 = $121$hi;
  i64toi32_i32$3 = $119_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $122_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $122$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($4_1 | 0, i64toi32_i32$0 | 0, 45 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $124$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $124$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $122$hi;
  i64toi32_i32$1 = $122_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $8_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$0;
  $132_1 = $8_1;
  $132$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $120_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $120_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $137$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $132$hi;
  i64toi32_i32$1 = $132_1;
  i64toi32_i32$0 = $137$hi;
  i64toi32_i32$3 = $120_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $138_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $138$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($4_1 | 0, i64toi32_i32$0 | 0, 45 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $140$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $140$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $138$hi;
  i64toi32_i32$1 = $138_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $7_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$0;
  $148_1 = $7_1;
  $148$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $121_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $121_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $153$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $148$hi;
  i64toi32_i32$1 = $148_1;
  i64toi32_i32$0 = $153$hi;
  i64toi32_i32$3 = $121_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $154_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $154$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($4_1 | 0, i64toi32_i32$0 | 0, 45 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $156$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $156$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $154$hi;
  i64toi32_i32$1 = $154_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $8_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$0;
  $164_1 = $8_1;
  $164$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $123_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $123_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $169$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $164$hi;
  i64toi32_i32$1 = $164_1;
  i64toi32_i32$0 = $169$hi;
  i64toi32_i32$3 = $123_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $170_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $170$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($4_1 | 0, i64toi32_i32$0 | 0, 45 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $172$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $172$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $170$hi;
  i64toi32_i32$1 = $170_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $7_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$0;
  $180_1 = $7_1;
  $180$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $124_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $124_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $185$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $180$hi;
  i64toi32_i32$1 = $180_1;
  i64toi32_i32$0 = $185$hi;
  i64toi32_i32$3 = $124_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $186_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $186$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($4_1 | 0, i64toi32_i32$0 | 0, 45 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $188$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $188$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $186$hi;
  i64toi32_i32$1 = $186_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $8_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$0;
  $196_1 = $8_1;
  $196$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $125_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $125_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $201$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $196$hi;
  i64toi32_i32$1 = $196_1;
  i64toi32_i32$0 = $201$hi;
  i64toi32_i32$3 = $125_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $202_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $202$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($4_1 | 0, i64toi32_i32$0 | 0, 45 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $204$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $204$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $202$hi;
  i64toi32_i32$1 = $202_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $7_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$0;
  $212_1 = $7_1;
  $212$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $126_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $126_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $217$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $212$hi;
  i64toi32_i32$1 = $212_1;
  i64toi32_i32$0 = $217$hi;
  i64toi32_i32$3 = $126_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $218_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $218$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($4_1 | 0, i64toi32_i32$0 | 0, 45 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $220$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $220$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $218$hi;
  i64toi32_i32$1 = $218_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $8_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$0 = $8_1;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $233_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $9_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $233_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  $234_1 = $1_1;
  i64toi32_i32$2 = i64toi32_i32$1;
  $235_1 = $8_1;
  $235$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$1 = i64toi32_i32$3;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $127_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $127_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $237$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $235$hi;
  i64toi32_i32$2 = $235_1;
  i64toi32_i32$1 = $237$hi;
  i64toi32_i32$3 = $127_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $238_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $234_1;
  HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = $238_1;
  HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($4_1 | 0, i64toi32_i32$1 | 0, 45 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $241$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$1 = $241$hi;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $6_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = __wasm_rotl_i64($6_1 | 0, i64toi32_i32$2 | 0, 45 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $245_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $245_1;
  HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $249_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $1_1;
  HEAP32[i64toi32_i32$1 >> 2] = $249_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $31($0_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0);
  i64toi32_i32$0 = $3$hi;
  $31($0_1 | 0, $3_1 | 0, i64toi32_i32$0 | 0);
 }
 
 function $616($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $1$hi = 0, $1_1 = 0, i64toi32_i32$2 = 0, $13_1 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $12$hi = 0;
  label$1 : {
   if (!($14($0_1 | 0, 1 | 0) | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   i64toi32_i32$0 = $22($0_1 | 0, 1 | 0, 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$1;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $13_1 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
    $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $1_1 = $13_1;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + $1$hi | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $12$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $31($5_1 | 0, i64toi32_i32$0 ^ i64toi32_i32$3 | 0 | 0, i64toi32_i32$1 | 0);
   return 1 | 0;
  }
  $30($0_1 | 0, +Math_abs(+$510($0_1 | 0, 1 | 0)));
  return 1 | 0;
 }
 
 function $617($0_1) {
  $0_1 = $0_1 | 0;
  $30($0_1 | 0, +(+$779(+(+$510($0_1 | 0, 1 | 0)))));
  return 1 | 0;
 }
 
 function $618($0_1) {
  $0_1 = $0_1 | 0;
  $30($0_1 | 0, +(+$781(+(+$510($0_1 | 0, 1 | 0)))));
  return 1 | 0;
 }
 
 function $619($0_1) {
  $0_1 = $0_1 | 0;
  $30($0_1 | 0, +(+$773(+(+$510($0_1 | 0, 1 | 0)), +(+$511($0_1 | 0, 2 | 0, +(1.0))))));
  return 1 | 0;
 }
 
 function $620($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0.0, $1_1 = 0.0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $19_1 = 0;
  label$1 : {
   if (!($14($0_1 | 0, 1 | 0) | 0)) {
    break label$1
   }
   $7($0_1 | 0, 1 | 0);
   return 1 | 0;
  }
  label$2 : {
   $1_1 = Math_ceil(+$510($0_1 | 0, 1 | 0));
   if ($1_1 >= -9223372036854775808.0 ^ 1 | 0) {
    break label$2
   }
   if ($1_1 < 9223372036854775808.0 ^ 1 | 0) {
    break label$2
   }
   label$3 : {
    if (!(Math_abs($1_1) < 9223372036854775808.0)) {
     break label$3
    }
    $19_1 = $0_1;
    i64toi32_i32$0 = $1_1;
    if (Math_abs(i64toi32_i32$0) >= 1.0) {
     if (i64toi32_i32$0 > 0.0) {
      $5_1 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
     } else {
      $5_1 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
     }
     $6_1 = $5_1;
    } else {
     $6_1 = 0
    }
    i64toi32_i32$1 = $6_1;
    $31($19_1 | 0, ~~i64toi32_i32$0 >>> 0 | 0, i64toi32_i32$1 | 0);
    return 1 | 0;
   }
   i64toi32_i32$1 = -2147483648;
   $31($0_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
   return 1 | 0;
  }
  $30($0_1 | 0, +$1_1);
  return 1 | 0;
 }
 
 function $621($0_1) {
  $0_1 = $0_1 | 0;
  $30($0_1 | 0, +(+$768(+(+$510($0_1 | 0, 1 | 0)))));
  return 1 | 0;
 }
 
 function $622($0_1) {
  $0_1 = $0_1 | 0;
  $30($0_1 | 0, +(+$510($0_1 | 0, 1 | 0) * 57.29577951308232));
  return 1 | 0;
 }
 
 function $623($0_1) {
  $0_1 = $0_1 | 0;
  $30($0_1 | 0, +(+$769(+(+$510($0_1 | 0, 1 | 0)))));
  return 1 | 0;
 }
 
 function $624($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $2$hi = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  i64toi32_i32$0 = $22($0_1 | 0, 1 | 0, $1_1 + 12 | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($1_1 + 12 | 0) >> 2] | 0)) {
     break label$2
    }
    i64toi32_i32$1 = $2$hi;
    $31($0_1 | 0, $2_1 | 0, i64toi32_i32$1 | 0);
    break label$1;
   }
   $509($0_1 | 0, 1 | 0);
   $29($0_1 | 0);
  }
  global$0 = $1_1 + 16 | 0;
  return 1 | 0;
 }
 
 function $625($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0.0, $1_1 = 0.0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $19_1 = 0;
  label$1 : {
   if (!($14($0_1 | 0, 1 | 0) | 0)) {
    break label$1
   }
   $7($0_1 | 0, 1 | 0);
   return 1 | 0;
  }
  label$2 : {
   $1_1 = Math_floor(+$510($0_1 | 0, 1 | 0));
   if ($1_1 >= -9223372036854775808.0 ^ 1 | 0) {
    break label$2
   }
   if ($1_1 < 9223372036854775808.0 ^ 1 | 0) {
    break label$2
   }
   label$3 : {
    if (!(Math_abs($1_1) < 9223372036854775808.0)) {
     break label$3
    }
    $19_1 = $0_1;
    i64toi32_i32$0 = $1_1;
    if (Math_abs(i64toi32_i32$0) >= 1.0) {
     if (i64toi32_i32$0 > 0.0) {
      $5_1 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
     } else {
      $5_1 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
     }
     $6_1 = $5_1;
    } else {
     $6_1 = 0
    }
    i64toi32_i32$1 = $6_1;
    $31($19_1 | 0, ~~i64toi32_i32$0 >>> 0 | 0, i64toi32_i32$1 | 0);
    return 1 | 0;
   }
   i64toi32_i32$1 = -2147483648;
   $31($0_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
   return 1 | 0;
  }
  $30($0_1 | 0, +$1_1);
  return 1 | 0;
 }
 
 function $626($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $1$hi = 0, i64toi32_i32$4 = 0, $20$hi = 0, $10_1 = 0;
  label$1 : {
   if (!($14($0_1 | 0, 1 | 0) | 0)) {
    break label$1
   }
   if (!($14($0_1 | 0, 2 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$0 = $22($0_1 | 0, 2 | 0, 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$3
     }
     $492($0_1 | 0, 2 | 0, 9476 | 0) | 0;
    }
    i64toi32_i32$3 = 0;
    $31($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    return 1 | 0;
   }
   i64toi32_i32$3 = $22($0_1 | 0, 1 | 0, 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $20$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $20$hi;
   $10_1 = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = __wasm_i64_srem($10_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $31($0_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0);
   return 1 | 0;
  }
  $30($0_1 | 0, +(+$945(+(+$510($0_1 | 0, 1 | 0)), +(+$510($0_1 | 0, 2 | 0)))));
  return 1 | 0;
 }
 
 function $627($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $3$hi = 0, $5_1 = 0, $5$hi = 0;
  i64toi32_i32$0 = $512($0_1 | 0, 1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $512($0_1 | 0, 2 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$1;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$1 = $5$hi;
  $37($0_1 | 0, i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & $3_1 >>> 0 < $5_1 >>> 0 | 0) | 0 | 0);
  return 1 | 0;
 }
 
 function $628($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0.0, $2_1 = 0.0;
  $1_1 = +$510($0_1 | 0, 1 | 0);
  label$1 : {
   label$2 : {
    if (($11($0_1 | 0, 2 | 0) | 0 | 0) > (0 | 0)) {
     break label$2
    }
    $1_1 = +$765(+$1_1);
    break label$1;
   }
   label$3 : {
    $2_1 = +$510($0_1 | 0, 2 | 0);
    if ($2_1 != 2.0) {
     break label$3
    }
    $1_1 = +$947(+$1_1);
    break label$1;
   }
   label$4 : {
    if ($2_1 != 10.0) {
     break label$4
    }
    $1_1 = +$948(+$1_1);
    break label$1;
   }
   $1_1 = +$765(+$1_1) / +$765(+$2_1);
  }
  $30($0_1 | 0, +$1_1);
  return 1 | 0;
 }
 
 function $629($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = $6($0_1 | 0) | 0;
    if (($1_1 | 0) > (0 | 0)) {
     break label$2
    }
    $2_1 = 1;
    $492($0_1 | 0, 1 | 0, 9481 | 0) | 0;
    break label$1;
   }
   $2_1 = 1;
   if (($1_1 | 0) == (1 | 0)) {
    break label$1
   }
   $3_1 = 2;
   label$3 : while (1) {
    $2_1 = $19($0_1 | 0, $2_1 | 0, $3_1 | 0, 1 | 0) | 0 ? $3_1 : $2_1;
    $4_1 = ($3_1 | 0) != ($1_1 | 0);
    $3_1 = $3_1 + 1 | 0;
    if ($4_1) {
     continue label$3
    }
    break label$3;
   };
  }
  $10($0_1 | 0, $2_1 | 0);
  return 1 | 0;
 }
 
 function $630($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = $6($0_1 | 0) | 0;
    if (($1_1 | 0) > (0 | 0)) {
     break label$2
    }
    $2_1 = 1;
    $492($0_1 | 0, 1 | 0, 9481 | 0) | 0;
    break label$1;
   }
   $2_1 = 1;
   if (($1_1 | 0) == (1 | 0)) {
    break label$1
   }
   $3_1 = 2;
   label$3 : while (1) {
    $2_1 = $19($0_1 | 0, $3_1 | 0, $2_1 | 0, 1 | 0) | 0 ? $3_1 : $2_1;
    $4_1 = ($3_1 | 0) != ($1_1 | 0);
    $3_1 = $3_1 + 1 | 0;
    if ($4_1) {
     continue label$3
    }
    break label$3;
   };
  }
  $10($0_1 | 0, $2_1 | 0);
  return 1 | 0;
 }
 
 function $631($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0.0, $2_1 = 0.0, i64toi32_i32$0 = 0.0, i64toi32_i32$1 = 0, $6_1 = 0, $7_1 = 0, $26_1 = 0;
  label$1 : {
   label$2 : {
    if (!($14($0_1 | 0, 1 | 0) | 0)) {
     break label$2
    }
    $7($0_1 | 0, 1 | 0);
    $1_1 = 0.0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     $1_1 = +$510($0_1 | 0, 1 | 0);
     $2_1 = $1_1 < 0.0 ? Math_ceil($1_1) : Math_floor($1_1);
     if ($2_1 >= -9223372036854775808.0 ^ 1 | 0) {
      break label$4
     }
     if ($2_1 < 9223372036854775808.0 ^ 1 | 0) {
      break label$4
     }
     label$5 : {
      if (!(Math_abs($2_1) < 9223372036854775808.0)) {
       break label$5
      }
      $26_1 = $0_1;
      i64toi32_i32$0 = $2_1;
      if (Math_abs($2_1) >= 1.0) {
       if (i64toi32_i32$0 > 0.0) {
        $6_1 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
       } else {
        $6_1 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
       }
       $7_1 = $6_1;
      } else {
       $7_1 = 0
      }
      i64toi32_i32$1 = $7_1;
      $31($26_1 | 0, ~~i64toi32_i32$0 >>> 0 | 0, i64toi32_i32$1 | 0);
      break label$3;
     }
     i64toi32_i32$1 = -2147483648;
     $31($0_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
     break label$3;
    }
    $30($0_1 | 0, +$2_1);
   }
   $1_1 = $1_1 == $2_1 ? 0.0 : $1_1 - $2_1;
  }
  $30($0_1 | 0, +$1_1);
  return 2 | 0;
 }
 
 function $632($0_1) {
  $0_1 = $0_1 | 0;
  $30($0_1 | 0, +(+$510($0_1 | 0, 1 | 0) * .017453292519943295));
  return 1 | 0;
 }
 
 function $633($0_1) {
  $0_1 = $0_1 | 0;
  $30($0_1 | 0, +(+$767(+(+$510($0_1 | 0, 1 | 0)))));
  return 1 | 0;
 }
 
 function $634($0_1) {
  $0_1 = $0_1 | 0;
  $30($0_1 | 0, +Math_sqrt(+$510($0_1 | 0, 1 | 0)));
  return 1 | 0;
 }
 
 function $635($0_1) {
  $0_1 = $0_1 | 0;
  $30($0_1 | 0, +(+$788(+(+$510($0_1 | 0, 1 | 0)))));
  return 1 | 0;
 }
 
 function $636($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (($11($0_1 | 0, 1 | 0) | 0 | 0) != (3 | 0)) {
    break label$1
   }
   $33($0_1 | 0, ($14($0_1 | 0, 1 | 0) | 0 ? 9496 : 9504) | 0) | 0;
   return 1 | 0;
  }
  $509($0_1 | 0, 1 | 0);
  $29($0_1 | 0);
  return 1 | 0;
 }
 
 function $637($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $3$hi = 0, $3_1 = 0, $2$hi = 0, $2_1 = 0, $7$hi = 0, $8$hi = 0, $4$hi = 0, $8_1 = 0, $5$hi = 0, $6$hi = 0, $1_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0, $10_1 = 0, $10$hi = 0, $9$hi = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $9_1 = 0, $64_1 = 0, $11_1 = 0, $16_1 = 0, $16$hi = 0, $22_1 = 0, $23_1 = 0, $25_1 = 0, $25$hi = 0, $30_1 = 0, $30$hi = 0, $32$hi = 0, $33_1 = 0, $37_1 = 0, $41_1 = 0, $65_1 = 0, $66_1 = 0, $48_1 = 0, $74$hi = 0, $82$hi = 0, $86$hi = 0, $90$hi = 0, $94$hi = 0, $98$hi = 0, $102$hi = 0, $122_1 = 0, $122$hi = 0, $124$hi = 0, $11$hi = 0, $67_1 = 0, $142$hi = 0, $156_1 = 0;
  $1_1 = $26($0_1 | 0, -1001001 | 0) | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$0;
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $2_1 = i64toi32_i32$1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$2 = $16_1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $3_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$2 = __wasm_rotl_i64($3_1 | 0, i64toi32_i32$1 | 0, 45 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $22_1 = i64toi32_i32$2;
  i64toi32_i32$2 = $1_1;
  HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $22_1;
  HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$1;
  $23_1 = i64toi32_i32$2;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$1;
  $25$hi = i64toi32_i32$2;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$2;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $25$hi;
  i64toi32_i32$0 = $25_1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$3 = $4_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$2;
  $30_1 = $5_1;
  $30$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $53_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $53_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $32$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $30$hi;
  i64toi32_i32$2 = $30_1;
  i64toi32_i32$1 = $32$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $33_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $23_1;
  HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = $33_1;
  HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$0 = $5_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $37_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $1_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $37_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$3 = $4_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $41_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $1_1;
  HEAP32[i64toi32_i32$1 >> 2] = $41_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, 5 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $65_1 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_rotl_i64($65_1 | 0, i64toi32_i32$0 | 0, 7 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $66_1 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_i64_mul($66_1 | 0, i64toi32_i32$0 | 0, 9 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$1;
  $2$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    switch ($6($0_1 | 0) | 0 | 0) {
    case 0:
     $48_1 = $0_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 11;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $54_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $54_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     i64toi32_i32$2 = $54_1;
     i64toi32_i32$0 = 0;
     $30($48_1 | 0, +((+(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)) * 1.1102230246251565e-16));
     return 1 | 0;
    case 1:
     i64toi32_i32$1 = 0;
     $6_1 = 1;
     $6$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $512($0_1 | 0, 1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$0 = $2$hi;
     $31($0_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0);
     return 1 | 0;
    default:
     return $493($0_1 | 0, 9544 | 0, 0 | 0) | 0 | 0;
    case 2:
     break label$2;
    };
   }
   i64toi32_i32$0 = $512($0_1 | 0, 1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $512($0_1 | 0, 2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$0;
  }
  label$6 : {
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$1 = $6_1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$2 | 0)) {
    $55_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      $56_1 = 0
     } else {
      $56_1 = 1
     }
     $57_1 = $56_1;
    } else {
     $57_1 = 0
    }
    $55_1 = $57_1;
   }
   if ($55_1) {
    break label$6
   }
   $492($0_1 | 0, 1 | 0, 9570 | 0) | 0;
  }
  label$7 : {
   label$8 : {
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
    $7_1 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$5;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $74$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$4 = $74$hi;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$8
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $8_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    $8$hi = i64toi32_i32$3;
    break label$7;
   }
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 1;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $58_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $58_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $82$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$2 = $82$hi;
   i64toi32_i32$3 = $58_1;
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $3_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$4;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 2;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $59_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    $59_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
   }
   $86$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $86$hi;
   i64toi32_i32$4 = $59_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 4;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $60_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $60_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
   }
   $90$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $90$hi;
   i64toi32_i32$2 = $60_1;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $3_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 8;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $61_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $61_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $94$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $94$hi;
   i64toi32_i32$3 = $61_1;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $3_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$4;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 16;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $62_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    $62_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
   }
   $98$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $98$hi;
   i64toi32_i32$4 = $62_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $63_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $63_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
   }
   $102$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $102$hi;
   i64toi32_i32$2 = $63_1;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $9_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $9$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $8_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $8$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$3 = $8_1;
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$5 = $7_1;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$5 >>> 0 | 0) | 0) {
    break label$7
   }
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$2;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$3;
   label$9 : while (1) {
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$2 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
    $8_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
    $8$hi = i64toi32_i32$2;
    $122_1 = $8_1;
    $122$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 17;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
     $64_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
     $64_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    }
    $124$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $122$hi;
    i64toi32_i32$2 = $122_1;
    i64toi32_i32$3 = $124$hi;
    i64toi32_i32$4 = $64_1;
    i64toi32_i32$3 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$2 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$5 = 0;
    i64toi32_i32$5 = __wasm_rotl_i64($10_1 | 0, i64toi32_i32$2 | 0, 45 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
    $3_1 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, 5 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $10_1 = i64toi32_i32$3;
    $10$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $11_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
    $11$hi = i64toi32_i32$3;
    $2_1 = $11_1;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$2 = __wasm_rotl_i64($10_1 | 0, i64toi32_i32$3 | 0, 7 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $67_1 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$2 = __wasm_i64_mul($67_1 | 0, i64toi32_i32$3 | 0, 9 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $142$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$3 = $142$hi;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $8_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
    $8$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$3 = $8_1;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$4 = $7_1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
     continue label$9
    }
    break label$9;
   };
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$2 = $1_1;
   HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $4_1;
   HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$3;
   i64toi32_i32$3 = $5$hi;
   HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = $5_1;
   HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $11_1;
   HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   HEAP32[i64toi32_i32$2 >> 2] = $3_1;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$3;
  }
  $156_1 = $0_1;
  i64toi32_i32$3 = $8$hi;
  i64toi32_i32$3 = $6$hi;
  i64toi32_i32$3 = $8$hi;
  i64toi32_i32$4 = $8_1;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $31($156_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
  return 1 | 0;
 }
 
 function $638($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $10$hi = 0, $12$hi = 0, $10_1 = 0, $16_1 = 0, $16$hi = 0, $18_1 = 0, $18$hi = 0;
  $1_1 = $26($0_1 | 0, -1001001 | 0) | 0;
  label$1 : {
   if (($11($0_1 | 0, 1 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$1 = fimport$11(0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   $10_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   $615($0_1 | 0, $1_1 | 0, $10_1 | 0, i64toi32_i32$0 | 0, $0_1 | 0, i64toi32_i32$1 | 0);
   return 2 | 0;
  }
  i64toi32_i32$1 = $512($0_1 | 0, 1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $16_1 = i64toi32_i32$1;
  $16$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $513($0_1 | 0, 2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $18_1 = i64toi32_i32$0;
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$0 = $18$hi;
  $615($0_1 | 0, $1_1 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$0 | 0);
  return 2 | 0;
 }
 
 function $639($0_1) {
  $0_1 = $0_1 | 0;
  $535($0_1 | 0, +(504.0), 136 | 0);
  $46($0_1 | 0, 0 | 0, 11 | 0);
  $514($0_1 | 0, 9600 | 0, 0 | 0);
  return 1 | 0;
 }
 
 function $640($0_1) {
  $0_1 = $0_1 | 0;
  $30($0_1 | 0, +(+(fimport$14() | 0 | 0) / 1.0e6));
  return 1 | 0;
 }
 
 function $641($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, i64toi32_i32$4 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $7_1 = 0, $8_1 = 0;
  $1_1 = global$0 - 608 | 0;
  global$0 = $1_1;
  $2_1 = $505($0_1 | 0, 1 | 0, 9773 | 0, $1_1 + 604 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (($11($0_1 | 0, 2 | 0) | 0 | 0) > (0 | 0)) {
     break label$2
    }
    $3_1 = fimport$11(0 | 0) | 0;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$0 = $512($0_1 | 0, 2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $11_1 = i64toi32_i32$0;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$3
    }
    $492($0_1 | 0, 2 | 0, 9834 | 0) | 0;
   }
   i64toi32_i32$1 = $11$hi;
   $3_1 = $11_1;
  }
  HEAP32[($1_1 + 600 | 0) >> 2] = $3_1;
  $3_1 = HEAP32[($1_1 + 604 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    if ((HEAPU8[$2_1 >> 0] | 0 | 0) != (33 | 0)) {
     break label$5
    }
    $4_1 = $2_1 + 1 | 0;
    $5_1 = fimport$15($1_1 + 600 | 0 | 0, $1_1 + 552 | 0 | 0) | 0;
    break label$4;
   }
   $5_1 = fimport$16($1_1 + 600 | 0 | 0, $1_1 + 552 | 0 | 0) | 0;
   $4_1 = $2_1;
  }
  label$6 : {
   label$7 : {
    if ($5_1) {
     break label$7
    }
    $2_1 = $493($0_1 | 0, 9776 | 0, 0 | 0) | 0;
    break label$6;
   }
   label$8 : {
    label$9 : {
     if ($876($4_1 | 0, 9831 | 0) | 0) {
      break label$9
     }
     $46($0_1 | 0, 0 | 0, 9 | 0);
     $642($0_1 | 0, $5_1 | 0);
     break label$8;
    }
    HEAP8[($1_1 + 548 | 0) >> 0] = 37;
    $487($0_1 | 0, $1_1 + 16 | 0 | 0);
    label$10 : {
     $6_1 = $2_1 + $3_1 | 0;
     if ($4_1 >>> 0 >= $6_1 >>> 0) {
      break label$10
     }
     $7_1 = ($1_1 + 548 | 0) + 1 | 0;
     label$11 : while (1) {
      label$12 : {
       label$13 : {
        $2_1 = HEAPU8[$4_1 >> 0] | 0;
        if (($2_1 | 0) == (37 | 0)) {
         break label$13
        }
        label$14 : {
         $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
         if ($3_1 >>> 0 < (HEAP32[($1_1 + 20 | 0) >> 2] | 0) >>> 0) {
          break label$14
         }
         $489($1_1 + 16 | 0 | 0, 1 | 0) | 0;
         $2_1 = HEAPU8[$4_1 >> 0] | 0;
         $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
        }
        HEAP32[($1_1 + 24 | 0) >> 2] = $3_1 + 1 | 0;
        HEAP8[((HEAP32[($1_1 + 16 | 0) >> 2] | 0) + $3_1 | 0) >> 0] = $2_1;
        $4_1 = $4_1 + 1 | 0;
        break label$12;
       }
       $2_1 = 1;
       $8_1 = $489($1_1 + 16 | 0 | 0, 250 | 0) | 0;
       label$15 : {
        label$16 : {
         $4_1 = $4_1 + 1 | 0;
         $9_1 = $6_1 - $4_1 | 0;
         if (($9_1 | 0) < (1 | 0)) {
          break label$16
         }
         $3_1 = 9897;
         $10_1 = 97;
         label$17 : while (1) {
          label$18 : {
           label$19 : {
            if (($10_1 & 255 | 0 | 0) != (124 | 0)) {
             break label$19
            }
            $2_1 = $2_1 + 1 | 0;
            break label$18;
           }
           if ($874($4_1 | 0, $3_1 | 0, $2_1 | 0) | 0) {
            break label$18
           }
           HEAP8[(($951($7_1 | 0, $4_1 | 0, $2_1 | 0) | 0) + $2_1 | 0) >> 0] = 0;
           $4_1 = $4_1 + $2_1 | 0;
           break label$15;
          }
          if (($2_1 | 0) > ($9_1 | 0)) {
           break label$16
          }
          $3_1 = $3_1 + $2_1 | 0;
          $10_1 = HEAPU8[$3_1 >> 0] | 0;
          if ($10_1 & 255 | 0) {
           continue label$17
          }
          break label$17;
         };
        }
        HEAP32[$1_1 >> 2] = $4_1;
        $492($0_1 | 0, 1 | 0, $35($0_1 | 0, 9975 | 0, $1_1 | 0) | 0 | 0) | 0;
       }
       HEAP32[($1_1 + 24 | 0) >> 2] = (fimport$17($8_1 | 0, 250 | 0, $1_1 + 548 | 0 | 0, $5_1 | 0) | 0) + (HEAP32[($1_1 + 24 | 0) >> 2] | 0) | 0;
      }
      if ($4_1 >>> 0 < $6_1 >>> 0) {
       continue label$11
      }
      break label$11;
     };
    }
    $491($1_1 + 16 | 0 | 0);
   }
   $2_1 = 1;
  }
  global$0 = $1_1 + 608 | 0;
  return $2_1 | 0;
 }
 
 function $642($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $7_1 = 0, $28_1 = 0, $33_1 = 0;
  $2_1 = $0_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 1900;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $31($2_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0);
  $51($0_1 | 0, -2 | 0, 9853 | 0);
  $7_1 = $0_1;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
  i64toi32_i32$1 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $31($7_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0);
  $51($0_1 | 0, -2 | 0, 9858 | 0);
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
  $31($0_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0);
  $51($0_1 | 0, -2 | 0, 9864 | 0);
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
  $31($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 | 0);
  $51($0_1 | 0, -2 | 0, 9868 | 0);
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
  $31($0_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0);
  $51($0_1 | 0, -2 | 0, 9873 | 0);
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
  $31($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 | 0);
  $51($0_1 | 0, -2 | 0, 9877 | 0);
  $28_1 = $0_1;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $31($28_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0);
  $51($0_1 | 0, -2 | 0, 9881 | 0);
  $33_1 = $0_1;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $31($33_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0);
  $51($0_1 | 0, -2 | 0, 9886 | 0);
  label$1 : {
   $1_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $37($0_1 | 0, $1_1 | 0);
   $51($0_1 | 0, -2 | 0, 9891 | 0);
  }
 }
 
 function $643($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $1_1 = 0, $1$hi = 0, $2_1 = 0, $2$hi = 0;
  label$1 : {
   i64toi32_i32$0 = $512($0_1 | 0, 1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = 1;
   i64toi32_i32$3 = 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
    break label$1
   }
   $492($0_1 | 0, 1 | 0, 9834 | 0) | 0;
  }
  label$2 : {
   i64toi32_i32$1 = $512($0_1 | 0, 2 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = -2147483648;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$2 = 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
    break label$2
   }
   $492($0_1 | 0, 2 | 0, 9834 | 0) | 0;
  }
  i64toi32_i32$5 = $1$hi;
  i64toi32_i32$5 = $2$hi;
  $30($0_1 | 0, +(+fimport$18($1_1 | 0, $2_1 | 0)));
  return 1 | 0;
 }
 
 function $644($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $505($0_1 | 0, 1 | 0, 0 | 0, 0 | 0) | 0;
  $2_1 = fimport$19($1_1 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   return $499($0_1 | 0, $2_1 | 0) | 0 | 0;
  }
  $37($0_1 | 0, $2_1 | 0);
  return 1 | 0;
 }
 
 function $645($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (($11($0_1 | 0, 1 | 0) | 0 | 0) != (1 | 0)) {
     break label$2
    }
    $1_1 = !($23($0_1 | 0, 1 | 0) | 0);
    break label$1;
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = $513($0_1 | 0, 1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
   $1_1 = i64toi32_i32$0;
  }
  label$3 : {
   if (!($23($0_1 | 0, 2 | 0) | 0)) {
    break label$3
   }
   $408($0_1 | 0);
  }
  label$4 : {
   if (!$0_1) {
    break label$4
   }
   fimport$20($1_1 | 0);
   abort();
  }
  return 0 | 0;
 }
 
 function $646($0_1) {
  $0_1 = $0_1 | 0;
  $33($0_1 | 0, $885($506($0_1 | 0, 1 | 0, 0 | 0) | 0 | 0) | 0 | 0) | 0;
  return 1 | 0;
 }
 
 function $647($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
  return $498($0_1 | 0, !($844($1_1 | 0) | 0) | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $648($0_1) {
  $0_1 = $0_1 | 0;
  return $498($0_1 | 0, !($797($506($0_1 | 0, 1 | 0, 0 | 0) | 0 | 0, $506($0_1 | 0, 2 | 0, 0 | 0) | 0 | 0) | 0) | 0, 0 | 0) | 0 | 0;
 }
 
 function $649($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $505($0_1 | 0, 1 | 0, 0 | 0, 0 | 0) | 0;
  $33($0_1 | 0, $756(HEAP32[((($504($0_1 | 0, 2 | 0, 10076 | 0, 10048 | 0) | 0) << 2 | 0) + 10016 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0 | 0) | 0;
  return 1 | 0;
 }
 
 function $650($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if (($11($0_1 | 0, 1 | 0) | 0 | 0) > (0 | 0)) {
     break label$2
    }
    $2_1 = fimport$11(0 | 0) | 0;
    break label$1;
   }
   $508($0_1 | 0, 1 | 0, 5 | 0);
   $7($0_1 | 0, 1 | 0);
   $2_1 = -1;
   HEAP32[($1_1 + 20 | 0) >> 2] = $651($0_1 | 0, 9853 | 0, -1 | 0, 1900 | 0) | 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = $651($0_1 | 0, 9858 | 0, -1 | 0, 1 | 0) | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $651($0_1 | 0, 9864 | 0, -1 | 0, 0 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $651($0_1 | 0, 9868 | 0, 12 | 0, 0 | 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $651($0_1 | 0, 9873 | 0, 0 | 0, 0 | 0) | 0;
   HEAP32[$1_1 >> 2] = $651($0_1 | 0, 9877 | 0, 0 | 0, 0 | 0) | 0;
   label$3 : {
    if (!($42($0_1 | 0, -1 | 0, 9891 | 0) | 0)) {
     break label$3
    }
    $2_1 = $23($0_1 | 0, -1 | 0) | 0;
   }
   $7($0_1 | 0, -2 | 0);
   HEAP32[($1_1 + 32 | 0) >> 2] = $2_1;
   $2_1 = fimport$21($1_1 | 0) | 0;
   $642($0_1 | 0, $1_1 | 0);
  }
  label$4 : {
   label$5 : {
    if (($2_1 | 0) != (-1 | 0)) {
     break label$5
    }
    $0_1 = $493($0_1 | 0, 10111 | 0, 0 | 0) | 0;
    break label$4;
   }
   i64toi32_i32$0 = $2_1 >> 31 | 0;
   $31($0_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0);
   $0_1 = 1;
  }
  global$0 = $1_1 + 48 | 0;
  return $0_1 | 0;
 }
 
 function $651($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4_1 = 0, i64toi32_i32$5 = 0, $6$hi = 0, $6_1 = 0, $7$hi = 0, $7_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $5_1 = 0, $41_1 = 0, $41$hi = 0, $43$hi = 0, $46$hi = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $5_1 = $42($0_1 | 0, -1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$0 = $22($0_1 | 0, -1 | 0, $4_1 + 44 | 0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $6_1 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (HEAP32[($4_1 + 44 | 0) >> 2] | 0) {
      break label$3
     }
     label$4 : {
      if (!$5_1) {
       break label$4
      }
      HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
      $0_1 = $493($0_1 | 0, 10166 | 0, $4_1 + 16 | 0 | 0) | 0;
      break label$1;
     }
     label$5 : {
      if (($2_1 | 0) > (-1 | 0)) {
       break label$5
      }
      HEAP32[$4_1 >> 2] = $1_1;
      $0_1 = $493($0_1 | 0, 10195 | 0, $4_1 | 0) | 0;
      break label$1;
     }
     i64toi32_i32$1 = 0;
     $6_1 = $2_1;
     $6$hi = i64toi32_i32$1;
     break label$2;
    }
    i64toi32_i32$1 = 0;
    $7_1 = $3_1;
    $7$hi = i64toi32_i32$1;
    label$6 : {
     label$7 : {
      label$8 : {
       i64toi32_i32$1 = $6$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $20_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $21_1 = 0
         } else {
          $21_1 = 1
         }
         $22_1 = $21_1;
        } else {
         $22_1 = 0
        }
        $20_1 = $22_1;
       }
       if ($20_1) {
        break label$8
       }
       i64toi32_i32$2 = $6$hi;
       $41_1 = $6_1;
       $41$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$3 = $7_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 2147483647;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $43$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $41$hi;
       i64toi32_i32$2 = $41_1;
       i64toi32_i32$3 = $43$hi;
       i64toi32_i32$0 = i64toi32_i32$4;
       if (i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
        break label$7
       }
       break label$6;
      }
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = -2147483648;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $46$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$4 = $46$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$3 = $6_1;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $23_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
         $24_1 = 0
        } else {
         $24_1 = 1
        }
        $25_1 = $24_1;
       } else {
        $25_1 = 0
       }
       $23_1 = $25_1;
      }
      if ($23_1) {
       break label$6
      }
     }
     HEAP32[($4_1 + 32 | 0) >> 2] = $1_1;
     $0_1 = $493($0_1 | 0, 10228 | 0, $4_1 + 32 | 0 | 0) | 0;
     break label$1;
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    $6_1 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$1;
   }
   $7($0_1 | 0, -2 | 0);
   i64toi32_i32$1 = $6$hi;
   $0_1 = $6_1;
  }
  global$0 = $4_1 + 48 | 0;
  return $0_1 | 0;
 }
 
 function $652($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $7_1 = 0, $9_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 10263 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 10264 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 10265 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 10266 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 10267 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 10268 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 10269 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 10270 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $7_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $7_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 10255 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 10256 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 10257 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 10258 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 10259 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 10260 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 10261 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 10262 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $9_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[$1_1 >> 2] = $9_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    $2_1 = $749($1_1 | 0) | 0;
    if (($2_1 | 0) == (-1 | 0)) {
     break label$2
    }
    $764($2_1 | 0) | 0;
    $33($0_1 | 0, $1_1 | 0) | 0;
    $0_1 = 1;
    break label$1;
   }
   $0_1 = $493($0_1 | 0, 10271 | 0, 0 | 0) | 0;
  }
  global$0 = $1_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $653($0_1) {
  $0_1 = $0_1 | 0;
  $535($0_1 | 0, +(504.0), 136 | 0);
  $46($0_1 | 0, 0 | 0, 7 | 0);
  $514($0_1 | 0, 10320 | 0, 0 | 0);
  return 1 | 0;
 }
 
 function $654($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4$hi = 0, $5$hi = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, i64toi32_i32$4 = 0, $3_1 = 0;
  $1_1 = global$0 - 576 | 0;
  global$0 = $1_1;
  $655($0_1 | 0, 1 | 0, 5 | 0);
  i64toi32_i32$0 = $525($0_1 | 0, 1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  $2_1 = $505($0_1 | 0, 2 | 0, 10427 | 0, $1_1 + 44 | 0 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = $513($0_1 | 0, 3 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$1;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $513($0_1 | 0, 4 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  $487($0_1 | 0, $1_1 + 48 | 0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
      $14_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $15_1 = 0
       } else {
        $15_1 = 1
       }
       $16_1 = $15_1;
      } else {
       $16_1 = 0
      }
      $14_1 = $16_1;
     }
     if ($14_1) {
      break label$3
     }
     label$4 : while (1) {
      i64toi32_i32$2 = $5$hi;
      $43($0_1 | 0, 1 | 0, $5_1 | 0, i64toi32_i32$2 | 0) | 0;
      label$5 : {
       if ($16($0_1 | 0, -1 | 0) | 0) {
        break label$5
       }
       $3_1 = $12($0_1 | 0, $11($0_1 | 0, -1 | 0) | 0 | 0) | 0;
       i64toi32_i32$2 = $5$hi;
       i64toi32_i32$1 = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $5_1;
       HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$2;
       HEAP32[($1_1 + 16 | 0) >> 2] = $3_1;
       $493($0_1 | 0, 10453 | 0, $1_1 + 16 | 0 | 0) | 0;
      }
      $490($1_1 + 48 | 0 | 0);
      $515($1_1 + 48 | 0 | 0, $2_1 | 0, HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0);
      i64toi32_i32$2 = $5$hi;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = $5_1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $5_1 = i64toi32_i32$4;
      $5$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $5$hi;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $4_1;
      if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$5 | 0) != ($4$hi | 0) | 0) {
       continue label$4
      }
      break label$2;
     };
    }
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = $4_1;
    if ((i64toi32_i32$0 | 0) != ($4_1 | 0) | (i64toi32_i32$2 | 0) != ($4$hi | 0) | 0) {
     break label$1
    }
   }
   i64toi32_i32$0 = $4$hi;
   $43($0_1 | 0, 1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
   label$6 : {
    if ($16($0_1 | 0, -1 | 0) | 0) {
     break label$6
    }
    $2_1 = $12($0_1 | 0, $11($0_1 | 0, -1 | 0) | 0 | 0) | 0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$1_1 >> 2] = $2_1;
    $493($0_1 | 0, 10453 | 0, $1_1 | 0) | 0;
   }
   $490($1_1 + 48 | 0 | 0);
  }
  $491($1_1 + 48 | 0 | 0);
  global$0 = $1_1 + 576 | 0;
  return 1 | 0;
 }
 
 function $655($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (($11($0_1 | 0, $1_1 | 0) | 0 | 0) == (5 | 0)) {
    break label$1
   }
   label$2 : {
    if (!($47($0_1 | 0, $1_1 | 0) | 0)) {
     break label$2
    }
    $3_1 = 1;
    label$3 : {
     if (!($2_1 & 1 | 0)) {
      break label$3
     }
     $33($0_1 | 0, 10428 | 0) | 0;
     $3_1 = 2;
     if (!($44($0_1 | 0, -2 | 0) | 0)) {
      break label$2
     }
    }
    label$4 : {
     if (!($2_1 & 2 | 0)) {
      break label$4
     }
     $33($0_1 | 0, 10436 | 0) | 0;
     if (!($44($0_1 | 0, $3_1 ^ -1 | 0 | 0) | 0)) {
      break label$2
     }
     $3_1 = $3_1 + 1 | 0;
    }
    label$5 : {
     if (!($2_1 & 4 | 0)) {
      break label$5
     }
     $33($0_1 | 0, 10447 | 0) | 0;
     if (!($44($0_1 | 0, $3_1 ^ -1 | 0 | 0) | 0)) {
      break label$2
     }
     $3_1 = $3_1 + 1 | 0;
    }
    $7($0_1 | 0, $3_1 ^ -1 | 0 | 0);
    return;
   }
   $508($0_1 | 0, $1_1 | 0, 5 | 0);
  }
 }
 
 function $656($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $2$hi = 0, $2_1 = 0, $3$hi = 0, $1$hi = 0, $3_1 = 0, $1_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $15$hi = 0, $23_1 = 0;
  $655($0_1 | 0, 1 | 0, 7 | 0);
  i64toi32_i32$0 = $525($0_1 | 0, 1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $2_1 = i64toi32_i32$4;
  $2$hi = i64toi32_i32$5;
  label$1 : {
   switch (($6($0_1 | 0) | 0) + -2 | 0 | 0) {
   case 1:
    label$4 : {
     i64toi32_i32$5 = $512($0_1 | 0, 2 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$4
     }
     $492($0_1 | 0, 2 | 0, 10506 | 0) | 0;
    }
    label$5 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = $3_1;
     if ((i64toi32_i32$2 | 0) < (i64toi32_i32$4 | 0)) {
      $15_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
       if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0) {
        $16_1 = 0
       } else {
        $16_1 = 1
       }
       $17_1 = $16_1;
      } else {
       $17_1 = 0
      }
      $15_1 = $17_1;
     }
     if ($15_1) {
      break label$5
     }
     label$6 : while (1) {
      $23_1 = $0_1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
      $43($23_1 | 0, 1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$0 = $2$hi;
      $52($0_1 | 0, 1 | 0, $2_1 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $1$hi;
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$4 = $3_1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       continue label$6
      }
      break label$6;
     };
    }
    i64toi32_i32$3 = $3$hi;
    $2_1 = $3_1;
    $2$hi = i64toi32_i32$3;
   case 0:
    i64toi32_i32$3 = $2$hi;
    $52($0_1 | 0, 1 | 0, $2_1 | 0, i64toi32_i32$3 | 0);
    return 0 | 0;
   default:
    break label$1;
   };
  }
  return $493($0_1 | 0, 10529 | 0, 0 | 0) | 0 | 0;
 }
 
 function $657($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $3$hi = 0, i64toi32_i32$2 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0;
  $1_1 = $6($0_1 | 0) | 0;
  $46($0_1 | 0, $1_1 | 0, 1 | 0);
  $8($0_1 | 0, 1 | 0, 1 | 0);
  label$1 : {
   if (($1_1 | 0) < (1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $3_1 = $1_1;
   $3$hi = i64toi32_i32$0;
   label$2 : while (1) {
    i64toi32_i32$0 = $3$hi;
    $52($0_1 | 0, 1 | 0, $3_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
     $11_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $12_1 = 0
      } else {
       $12_1 = 1
      }
      $13_1 = $12_1;
     } else {
      $13_1 = 0
     }
     $11_1 = $13_1;
    }
    $2_1 = $11_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$5;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$5 = $1_1 >> 31 | 0;
  $31($0_1 | 0, $1_1 | 0, i64toi32_i32$5 | 0);
  $51($0_1 | 0, 1 | 0, 10567 | 0);
  return 1 | 0;
 }
 
 function $658($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3$hi = 0, $2$hi = 0, i64toi32_i32$4 = 0, $2_1 = 0, $3_1 = 0, $1_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $4_1 = 0, $4$hi = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $513($0_1 | 0, 2 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    if (($11($0_1 | 0, 3 | 0) | 0 | 0) > (0 | 0)) {
     break label$2
    }
    i64toi32_i32$1 = $525($0_1 | 0, 1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $512($0_1 | 0, 3 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
  }
  $1_1 = 0;
  label$3 : {
   label$4 : {
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $14_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $15_1 = 0
      } else {
       $15_1 = 1
      }
      $16_1 = $15_1;
     } else {
      $16_1 = 0
     }
     $14_1 = $16_1;
    }
    if ($14_1) {
     break label$4
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 2147483646;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$2 = $4$hi;
    $1_1 = $4_1 + 1 | 0;
    if (!($1($0_1 | 0, $1_1 | 0) | 0)) {
     break label$3
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2_1;
     if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
      $17_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0) {
        $18_1 = 0
       } else {
        $18_1 = 1
       }
       $19_1 = $18_1;
      } else {
       $19_1 = 0
      }
      $17_1 = $19_1;
     }
     if ($17_1) {
      break label$5
     }
     label$6 : while (1) {
      i64toi32_i32$0 = $2$hi;
      $43($0_1 | 0, 1 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$5 = $3_1;
      if ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != ($3$hi | 0) | 0) {
       continue label$6
      }
      break label$6;
     };
    }
    i64toi32_i32$0 = $3$hi;
    $43($0_1 | 0, 1 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
   }
   return $1_1 | 0;
  }
  return $493($0_1 | 0, 10569 | 0, 0 | 0) | 0 | 0;
 }
 
 function $659($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $1$hi = 0, $2$hi = 0, i64toi32_i32$3 = 0, $1_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $14$hi = 0, $25_1 = 0, $3$hi = 0;
  $655($0_1 | 0, 1 | 0, 7 | 0);
  i64toi32_i32$0 = $525($0_1 | 0, 1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  label$1 : {
   i64toi32_i32$1 = $513($0_1 | 0, 2 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   if ((i64toi32_i32$2 | 0) == ($2_1 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$4 = $2_1 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $14$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   if (i64toi32_i32$5 >>> 0 < $1$hi >>> 0 | ((i64toi32_i32$5 | 0) == ($1$hi | 0) & i64toi32_i32$4 >>> 0 <= i64toi32_i32$1 >>> 0 | 0) | 0) {
    break label$1
   }
   $492($0_1 | 0, 1 | 0, 10506 | 0) | 0;
  }
  i64toi32_i32$2 = $2$hi;
  $43($0_1 | 0, 1 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  label$2 : {
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$3 = $1_1;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
    $14_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      $15_1 = 0
     } else {
      $15_1 = 1
     }
     $16_1 = $15_1;
    } else {
     $16_1 = 0
    }
    $14_1 = $16_1;
   }
   if ($14_1) {
    break label$2
   }
   label$3 : while (1) {
    $25_1 = $0_1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$0 = $2_1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $3$hi = i64toi32_i32$4;
    $43($25_1 | 0, 1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$4 = $2$hi;
    $52($0_1 | 0, 1 | 0, $2_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $3$hi;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$5 = $1_1;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != ($1$hi | 0) | 0) {
     continue label$3
    }
    break label$3;
   };
   i64toi32_i32$1 = $1$hi;
   $2_1 = $1_1;
   $2$hi = i64toi32_i32$1;
  }
  $29($0_1 | 0);
  i64toi32_i32$1 = $2$hi;
  $52($0_1 | 0, 1 | 0, $2_1 | 0, i64toi32_i32$1 | 0);
  return 1 | 0;
 }
 
 function $660($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $6$hi = 0, $5$hi = 0, $4$hi = 0, $6_1 = 0, $3_1 = 0, $7$hi = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, i64toi32_i32$6 = 0, $1_1 = 0, $7_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $27_1 = 0, $27$hi = 0, $29$hi = 0, $38$hi = 0, $59_1 = 0, $64_1 = 0, $65_1 = 0, $76_1 = 0, $81_1 = 0, $82_1 = 0;
  i64toi32_i32$0 = $512($0_1 | 0, 2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $3_1 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $512($0_1 | 0, 3 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $512($0_1 | 0, 4 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  $1_1 = $11($0_1 | 0, 5 | 0) | 0;
  $655($0_1 | 0, 1 | 0, 1 | 0);
  $2_1 = ($1_1 | 0) > (0 | 0) ? 5 : 1;
  $655($0_1 | 0, $2_1 | 0, 2 | 0);
  label$1 : {
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $30_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $31_1 = 0
     } else {
      $31_1 = 1
     }
     $32_1 = $31_1;
    } else {
     $32_1 = 0
    }
    $30_1 = $32_1;
   }
   if ($30_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $33_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $34_1 = 0
      } else {
       $34_1 = 1
      }
      $35_1 = $34_1;
     } else {
      $35_1 = 0
     }
     $33_1 = $35_1;
    }
    if ($33_1) {
     break label$2
    }
    i64toi32_i32$3 = $4$hi;
    $27_1 = $4_1;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$2 = 2147483647;
    i64toi32_i32$1 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $29$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$0 = $29$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
     $36_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $37_1 = 0
      } else {
       $37_1 = 1
      }
      $38_1 = $37_1;
     } else {
      $38_1 = 0
     }
     $36_1 = $38_1;
    }
    if ($36_1) {
     break label$2
    }
    $492($0_1 | 0, 3 | 0, 10596 | 0) | 0;
   }
   label$3 : {
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
    $6_1 = i64toi32_i32$2;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
    $38$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$3 = $38$hi;
    i64toi32_i32$0 = i64toi32_i32$5;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
     $39_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
      if (i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0) {
       $40_1 = 0
      } else {
       $40_1 = 1
      }
      $41_1 = $40_1;
     } else {
      $41_1 = 0
     }
     $39_1 = $41_1;
    }
    if ($39_1) {
     break label$3
    }
    $492($0_1 | 0, 4 | 0, 10622 | 0) | 0;
   }
   label$4 : {
    label$5 : {
     i64toi32_i32$4 = $5$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $5$hi;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $42_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $43_1 = 0
       } else {
        $43_1 = 1
       }
       $44_1 = $43_1;
      } else {
       $44_1 = 0
      }
      $42_1 = $44_1;
     }
     if ($42_1) {
      break label$5
     }
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3_1;
     if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
      $45_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0) {
        $46_1 = 0
       } else {
        $46_1 = 1
       }
       $47_1 = $46_1;
      } else {
       $47_1 = 0
      }
      $45_1 = $47_1;
     }
     if ($45_1) {
      break label$5
     }
     if (($1_1 | 0) < (1 | 0)) {
      break label$4
     }
     if ($19($0_1 | 0, 1 | 0, $2_1 | 0, 0 | 0) | 0) {
      break label$4
     }
    }
    i64toi32_i32$3 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $48_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $49_1 = 0
      } else {
       $49_1 = 1
      }
      $50_1 = $49_1;
     } else {
      $50_1 = 0
     }
     $48_1 = $50_1;
    }
    if ($48_1) {
     break label$1
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $6_1 = i64toi32_i32$3;
    $6$hi = i64toi32_i32$1;
    label$6 : while (1) {
     $59_1 = $0_1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $43($59_1 | 0, 1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$3 | 0) | 0;
     $64_1 = $0_1;
     $65_1 = $2_1;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$3 = $5$hi;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$5 = $5$hi;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $52($64_1 | 0, $65_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $7_1 = i64toi32_i32$5;
     $7$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$0 = $6_1;
     if ((i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      continue label$6
     }
     break label$1;
    };
   }
   i64toi32_i32$4 = $6$hi;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
    $51_1 = 1
   } else {
    if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $52_1 = 0
     } else {
      $52_1 = 1
     }
     $53_1 = $52_1;
    } else {
     $53_1 = 0
    }
    $51_1 = $53_1;
   }
   if ($51_1) {
    break label$1
   }
   label$7 : while (1) {
    $76_1 = $0_1;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $43($76_1 | 0, 1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0) | 0;
    $81_1 = $0_1;
    $82_1 = $2_1;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $52($81_1 | 0, $82_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $54_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $55_1 = 0
      } else {
       $55_1 = 1
      }
      $56_1 = $55_1;
     } else {
      $56_1 = 0
     }
     $54_1 = $56_1;
    }
    $1_1 = $54_1;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $6_1 = i64toi32_i32$3;
    $6$hi = i64toi32_i32$4;
    if ($1_1) {
     continue label$7
    }
    break label$7;
   };
  }
  $10($0_1 | 0, $2_1 | 0);
  return 1 | 0;
 }
 
 function $661($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $1$hi = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $655($0_1 | 0, 1 | 0, 7 | 0);
  label$1 : {
   i64toi32_i32$0 = $525($0_1 | 0, 1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 2;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $7_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $8_1 = 0
     } else {
      $8_1 = 1
     }
     $9_1 = $8_1;
    } else {
     $9_1 = 0
    }
    $7_1 = $9_1;
   }
   if ($7_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147483647;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
     $10_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
       $11_1 = 0
      } else {
       $11_1 = 1
      }
      $12_1 = $11_1;
     } else {
      $12_1 = 0
     }
     $10_1 = $12_1;
    }
    if ($10_1) {
     break label$2
    }
    $492($0_1 | 0, 1 | 0, 10646 | 0) | 0;
   }
   label$3 : {
    if (($11($0_1 | 0, 2 | 0) | 0 | 0) < (1 | 0)) {
     break label$3
    }
    $508($0_1 | 0, 2 | 0, 6 | 0);
   }
   $7($0_1 | 0, 2 | 0);
   i64toi32_i32$3 = $1$hi;
   $662($0_1 | 0, 1 | 0, $1_1 | 0, 0 | 0);
  }
  return 0 | 0;
 }
 
 function $662($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $8_1 = 0, $9_1 = 0, $9$hi = 0, $8$hi = 0, $6_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   label$2 : while (1) {
    i64toi32_i32$0 = 0;
    $7_1 = $1_1;
    $7$hi = i64toi32_i32$0;
    $43($0_1 | 0, 1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$0 = 0;
    $8_1 = $2_1;
    $8$hi = i64toi32_i32$0;
    $43($0_1 | 0, 1 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!($663($0_1 | 0, -1 | 0, -2 | 0) | 0)) {
       break label$4
      }
      i64toi32_i32$0 = $7$hi;
      $52($0_1 | 0, 1 | 0, $7_1 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $8$hi;
      $52($0_1 | 0, 1 | 0, $8_1 | 0, i64toi32_i32$0 | 0);
      break label$3;
     }
     $7($0_1 | 0, -3 | 0);
    }
    $4_1 = $2_1 - $1_1 | 0;
    if (($4_1 | 0) == (1 | 0)) {
     break label$1
    }
    label$5 : {
     label$6 : {
      label$7 : {
       if ($4_1 >>> 0 < 100 >>> 0) {
        break label$7
       }
       if ($3_1) {
        break label$6
       }
      }
      $5_1 = ($2_1 + $1_1 | 0) >>> 1 | 0;
      break label$5;
     }
     $5_1 = $4_1 >>> 2 | 0;
     $5_1 = ($5_1 + $1_1 | 0) + (($3_1 >>> 0) % (($5_1 << 1 | 0) >>> 0) | 0) | 0;
    }
    i64toi32_i32$0 = 0;
    $9_1 = $5_1;
    $9$hi = i64toi32_i32$0;
    $43($0_1 | 0, 1 | 0, $5_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$0 = $7$hi;
    $43($0_1 | 0, 1 | 0, $7_1 | 0, i64toi32_i32$0 | 0) | 0;
    label$8 : {
     label$9 : {
      if (!($663($0_1 | 0, -2 | 0, -1 | 0) | 0)) {
       break label$9
      }
      i64toi32_i32$0 = $9$hi;
      $52($0_1 | 0, 1 | 0, $9_1 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $7$hi;
      $52($0_1 | 0, 1 | 0, $7_1 | 0, i64toi32_i32$0 | 0);
      break label$8;
     }
     $7($0_1 | 0, -2 | 0);
     i64toi32_i32$0 = $8$hi;
     $43($0_1 | 0, 1 | 0, $8_1 | 0, i64toi32_i32$0 | 0) | 0;
     label$10 : {
      if (!($663($0_1 | 0, -1 | 0, -2 | 0) | 0)) {
       break label$10
      }
      i64toi32_i32$0 = $9$hi;
      $52($0_1 | 0, 1 | 0, $9_1 | 0, i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $8$hi;
      $52($0_1 | 0, 1 | 0, $8_1 | 0, i64toi32_i32$0 | 0);
      break label$8;
     }
     $7($0_1 | 0, -3 | 0);
    }
    if (($4_1 | 0) == (2 | 0)) {
     break label$1
    }
    i64toi32_i32$0 = $9$hi;
    $43($0_1 | 0, 1 | 0, $9_1 | 0, i64toi32_i32$0 | 0) | 0;
    $10($0_1 | 0, -1 | 0);
    $6_1 = $2_1 + -1 | 0;
    i64toi32_i32$0 = 0;
    $8_1 = $6_1;
    $8$hi = i64toi32_i32$0;
    $43($0_1 | 0, 1 | 0, $8_1 | 0, i64toi32_i32$0 | 0) | 0;
    $7_1 = $8_1;
    $7$hi = i64toi32_i32$0;
    $4_1 = $1_1;
    $5_1 = $7_1;
    label$11 : while (1) {
     i64toi32_i32$0 = $9$hi;
     $52($0_1 | 0, 1 | 0, $9_1 | 0, i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $7$hi;
     $52($0_1 | 0, 1 | 0, $7_1 | 0, i64toi32_i32$0 | 0);
     $4_1 = $4_1 + 1 | 0;
     i64toi32_i32$0 = 0;
     $9_1 = $4_1;
     $9$hi = i64toi32_i32$0;
     $43($0_1 | 0, 1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     label$12 : {
      if (!($663($0_1 | 0, -1 | 0, -2 | 0) | 0)) {
       break label$12
      }
      label$13 : while (1) {
       label$14 : {
        if (($4_1 | 0) != ($6_1 | 0)) {
         break label$14
        }
        $493($0_1 | 0, 10660 | 0, 0 | 0) | 0;
       }
       $7($0_1 | 0, -2 | 0);
       $4_1 = $4_1 + 1 | 0;
       i64toi32_i32$0 = 0;
       $9_1 = $4_1;
       $9$hi = i64toi32_i32$0;
       $43($0_1 | 0, 1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
       if ($663($0_1 | 0, -1 | 0, -2 | 0) | 0) {
        continue label$13
       }
       break label$13;
      };
     }
     $5_1 = $5_1 + -1 | 0;
     i64toi32_i32$0 = 0;
     $7_1 = $5_1;
     $7$hi = i64toi32_i32$0;
     $43($0_1 | 0, 1 | 0, $5_1 | 0, i64toi32_i32$0 | 0) | 0;
     label$15 : {
      if (!($663($0_1 | 0, -3 | 0, -1 | 0) | 0)) {
       break label$15
      }
      label$16 : while (1) {
       label$17 : {
        if ($5_1 >>> 0 >= $4_1 >>> 0) {
         break label$17
        }
        $493($0_1 | 0, 10660 | 0, 0 | 0) | 0;
       }
       $7($0_1 | 0, -2 | 0);
       $5_1 = $5_1 + -1 | 0;
       i64toi32_i32$0 = 0;
       $7_1 = $5_1;
       $7$hi = i64toi32_i32$0;
       $43($0_1 | 0, 1 | 0, $5_1 | 0, i64toi32_i32$0 | 0) | 0;
       if ($663($0_1 | 0, -3 | 0, -1 | 0) | 0) {
        continue label$16
       }
       break label$16;
      };
     }
     if ($5_1 >>> 0 >= $4_1 >>> 0) {
      continue label$11
     }
     break label$11;
    };
    $7($0_1 | 0, -2 | 0);
    i64toi32_i32$0 = $8$hi;
    $52($0_1 | 0, 1 | 0, $8_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$0 = $9$hi;
    $52($0_1 | 0, 1 | 0, $9_1 | 0, i64toi32_i32$0 | 0);
    label$18 : {
     label$19 : {
      $5_1 = $4_1 - $1_1 | 0;
      $6_1 = $2_1 - $4_1 | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break label$19
      }
      $662($0_1 | 0, $1_1 | 0, $4_1 + -1 | 0 | 0, $3_1 | 0);
      $1_1 = $4_1 + 1 | 0;
      break label$18;
     }
     $662($0_1 | 0, $4_1 + 1 | 0 | 0, $2_1 | 0, $3_1 | 0);
     $2_1 = $4_1 + -1 | 0;
     $5_1 = $6_1;
    }
    label$20 : {
     if ((($2_1 - $1_1 | 0) >>> 7 | 0) >>> 0 <= $5_1 >>> 0) {
      break label$20
     }
     $3_1 = (fimport$14() | 0) + (fimport$11(0 | 0) | 0) | 0;
    }
    if ($2_1 >>> 0 > $1_1 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $663($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($11($0_1 | 0, 2 | 0) | 0) {
    break label$1
   }
   return $19($0_1 | 0, $1_1 | 0, $2_1 | 0, 1 | 0) | 0 | 0;
  }
  $10($0_1 | 0, 2 | 0);
  $10($0_1 | 0, $1_1 + -1 | 0 | 0);
  $10($0_1 | 0, $2_1 + -2 | 0 | 0);
  $57($0_1 | 0, 2 | 0, 1 | 0, 0 | 0, 0 | 0);
  $1_1 = $23($0_1 | 0, -1 | 0) | 0;
  $7($0_1 | 0, -2 | 0);
  return $1_1 | 0;
 }
 
 function $664($0_1) {
  $0_1 = $0_1 | 0;
  $535($0_1 | 0, +(504.0), 136 | 0);
  $46($0_1 | 0, 0 | 0, 17 | 0);
  $514($0_1 | 0, 10704 | 0, 0 | 0);
  $46($0_1 | 0, 0 | 0, 9 | 0);
  $514($0_1 | 0, 12160 | 0, 0 | 0);
  $33($0_1 | 0, 11297 | 0) | 0;
  $10($0_1 | 0, -2 | 0);
  $55($0_1 | 0, -2 | 0) | 0;
  $7($0_1 | 0, -2 | 0);
  $10($0_1 | 0, -2 | 0);
  $51($0_1 | 0, -2 | 0, 12240 | 0);
  $7($0_1 | 0, -2 | 0);
  return 1 | 0;
 }
 
 function $665($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $8$hi = 0, i64toi32_i32$0 = 0, $2_1 = 0, $8_1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $1_1 = 0, $6_1 = 0, i64toi32_i32$6 = 0, $9$hi = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $3_1 = 0, $29$hi = 0, $30$hi = 0, $9_1 = 0, $52$hi = 0, $7_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 1;
  $3_1 = $506($0_1 | 0, 1 | 0, $1_1 + 12 | 0 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $513($0_1 | 0, 2 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $8_1 = i64toi32_i32$0;
  $8$hi = i64toi32_i32$1;
  $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 1;
    if (($8$hi | 0) < (i64toi32_i32$0 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     break label$2
    }
    i64toi32_i32$2 = $8$hi;
    $2_1 = $8_1;
    break label$1;
   }
   i64toi32_i32$2 = $8$hi;
   if (!($8_1 | i64toi32_i32$2 | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$2 = 0;
   $29$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = $29$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $30$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$3 = $30$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$3 | 0)) {
    $25_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$0 >>> 0) {
      $26_1 = 0
     } else {
      $26_1 = 1
     }
     $27_1 = $26_1;
    } else {
     $27_1 = 0
    }
    $25_1 = $27_1;
   }
   if ($25_1) {
    break label$1
   }
   i64toi32_i32$2 = $8$hi;
   $2_1 = ($4_1 + $8_1 | 0) + 1 | 0;
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$2 = $513($0_1 | 0, 3 | 0, $8_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $8_1 = i64toi32_i32$2;
    $8$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $9_1 = $4_1;
    $9$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$3 = $4_1;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$2 | 0)) {
     $28_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0) {
       $29_1 = 0
      } else {
       $29_1 = 1
      }
      $30_1 = $29_1;
     } else {
      $30_1 = 0
     }
     $28_1 = $30_1;
    }
    if ($28_1) {
     break label$4
    }
    $5_1 = $4_1;
    break label$3;
   }
   label$5 : {
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$3 = $8_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    if (($8$hi | 0) < (i64toi32_i32$5 | 0)) {
     $31_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $32_1 = 0
      } else {
       $32_1 = 1
      }
      $33_1 = $32_1;
     } else {
      $33_1 = 0
     }
     $31_1 = $33_1;
    }
    if ($31_1) {
     break label$5
    }
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$3 = $8$hi;
    $5_1 = $8_1;
    break label$3;
   }
   $5_1 = 0;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$3 = $9$hi;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
   $52$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$3 = $8_1;
   i64toi32_i32$2 = $52$hi;
   i64toi32_i32$5 = i64toi32_i32$1;
   if (($8$hi | 0) < (i64toi32_i32$2 | 0)) {
    $34_1 = 1
   } else {
    if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
      $35_1 = 0
     } else {
      $35_1 = 1
     }
     $36_1 = $35_1;
    } else {
     $36_1 = 0
    }
    $34_1 = $36_1;
   }
   if ($34_1) {
    break label$3
   }
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$3 = $8$hi;
   $5_1 = ($4_1 + $8_1 | 0) + 1 | 0;
  }
  $6_1 = 0;
  label$6 : {
   if ($5_1 >>> 0 < $2_1 >>> 0) {
    break label$6
   }
   label$7 : {
    $5_1 = $5_1 - $2_1 | 0;
    if ($5_1 >>> 0 < 2147483647 >>> 0) {
     break label$7
    }
    $6_1 = $493($0_1 | 0, 10946 | 0, 0 | 0) | 0;
    break label$6;
   }
   $6_1 = $5_1 + 1 | 0;
   $507($0_1 | 0, $6_1 | 0, 10946 | 0);
   $7_1 = $2_1 + -1 | 0;
   $2_1 = 0;
   label$8 : while (1) {
    i64toi32_i32$5 = $3_1 + ($7_1 + $2_1 | 0) | 0;
    i64toi32_i32$3 = HEAPU8[i64toi32_i32$5 >> 0] | 0;
    i64toi32_i32$4 = 0;
    $31($0_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 | 0);
    $4_1 = ($2_1 | 0) != ($5_1 | 0);
    $2_1 = $2_1 + 1 | 0;
    if ($4_1) {
     continue label$8
    }
    break label$8;
   };
  }
  global$0 = $1_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $666($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $6_1 = 0, $6$hi = 0, $5_1 = 0;
  $1_1 = global$0 - 528 | 0;
  global$0 = $1_1;
  $2_1 = 1;
  $3_1 = $6($0_1 | 0) | 0;
  $4_1 = $517($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  label$1 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     i64toi32_i32$0 = $512($0_1 | 0, $2_1 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $6_1 = i64toi32_i32$0;
     $6$hi = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < 256 >>> 0 | 0) | 0) {
      break label$3
     }
     $492($0_1 | 0, $2_1 | 0, 10968 | 0) | 0;
    }
    i64toi32_i32$2 = $6$hi;
    HEAP8[(($2_1 + $4_1 | 0) + -1 | 0) >> 0] = $6_1;
    $5_1 = ($2_1 | 0) != ($3_1 | 0);
    $2_1 = $2_1 + 1 | 0;
    if ($5_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $516($1_1 | 0, $3_1 | 0);
  global$0 = $1_1 + 528 | 0;
  return 1 | 0;
 }
 
 function $667($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 544 | 0;
  global$0 = $1_1;
  $2_1 = 1;
  $3_1 = $23($0_1 | 0, 2 | 0) | 0;
  $508($0_1 | 0, 1 | 0, 6 | 0);
  $7($0_1 | 0, 1 | 0);
  HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!($61($0_1 | 0, 130 | 0, $1_1 + 8 | 0 | 0, $3_1 | 0) | 0)) {
     break label$2
    }
    $2_1 = $493($0_1 | 0, 10987 | 0, 0 | 0) | 0;
    break label$1;
   }
   $491($1_1 + 16 | 0 | 0);
  }
  global$0 = $1_1 + 544 | 0;
  return $2_1 | 0;
 }
 
 function $668($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (HEAP32[$3_1 >> 2] | 0) {
    break label$1
   }
   HEAP32[$3_1 >> 2] = 1;
   $487($0_1 | 0, $3_1 + 8 | 0 | 0);
  }
  $515($3_1 + 8 | 0 | 0, $1_1 | 0, $2_1 | 0);
  return 0 | 0;
 }
 
 function $669($0_1) {
  $0_1 = $0_1 | 0;
  return $670($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $670($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $8_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $10$hi = 0, $10_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $34$hi = 0, $35_1 = 0, $35$hi = 0, $9_1 = 0;
  $2_1 = global$0 - 320 | 0;
  global$0 = $2_1;
  $3_1 = 1;
  $4_1 = $506($0_1 | 0, 1 | 0, $2_1 + 316 | 0 | 0) | 0;
  $5_1 = $506($0_1 | 0, 2 | 0, $2_1 + 312 | 0 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $513($0_1 | 0, 3 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $10_1 = i64toi32_i32$0;
  $10$hi = i64toi32_i32$1;
  $6_1 = HEAP32[($2_1 + 316 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $20_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $21_1 = 0
      } else {
       $21_1 = 1
      }
      $22_1 = $21_1;
     } else {
      $22_1 = 0
     }
     $20_1 = $22_1;
    }
    if ($20_1) {
     break label$2
    }
    i64toi32_i32$2 = $10$hi;
    $3_1 = $10_1;
    break label$1;
   }
   i64toi32_i32$2 = $10$hi;
   if (!($10_1 | i64toi32_i32$2 | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$2 = 0;
   $34$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = $34$hi;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < $6_1 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $35_1 = i64toi32_i32$3 - $6_1 | 0;
   $35$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$3 = $35$hi;
   i64toi32_i32$0 = $35_1;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$3 | 0)) {
    $23_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$0 >>> 0) {
      $24_1 = 0
     } else {
      $24_1 = 1
     }
     $25_1 = $24_1;
    } else {
     $25_1 = 0
    }
    $23_1 = $25_1;
   }
   if ($23_1) {
    break label$1
   }
   i64toi32_i32$2 = $10$hi;
   $3_1 = ($6_1 + $10_1 | 0) + 1 | 0;
  }
  label$3 : {
   label$4 : {
    $7_1 = $3_1 + -1 | 0;
    if ($7_1 >>> 0 > $6_1 >>> 0) {
     break label$4
    }
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     $3_1 = $23($0_1 | 0, 4 | 0) | 0;
     $8_1 = HEAP32[($2_1 + 312 | 0) >> 2] | 0;
     label$6 : {
      if ($3_1) {
       break label$6
      }
      $3_1 = 0;
      label$7 : while (1) {
       $6_1 = $5_1 + $3_1 | 0;
       if ($873($6_1 | 0, 11017 | 0) | 0) {
        break label$5
       }
       $3_1 = ($3_1 + ($961($6_1 | 0) | 0) | 0) + 1 | 0;
       if ($3_1 >>> 0 <= $8_1 >>> 0) {
        continue label$7
       }
       break label$7;
      };
     }
     $1_1 = $4_1 + $7_1 | 0;
     label$8 : {
      label$9 : {
       if (!$8_1) {
        break label$9
       }
       $3_1 = (HEAP32[($2_1 + 316 | 0) >> 2] | 0) - $7_1 | 0;
       if ($8_1 >>> 0 > $3_1 >>> 0) {
        break label$4
       }
       $8_1 = $8_1 + -1 | 0;
       $3_1 = $3_1 - $8_1 | 0;
       if (!$3_1) {
        break label$4
       }
       $9_1 = $5_1 + 1 | 0;
       $7_1 = HEAP8[$5_1 >> 0] | 0;
       $6_1 = $1_1;
       label$10 : while (1) {
        $1_1 = $879($6_1 | 0, $7_1 | 0, $3_1 | 0) | 0;
        if (!$1_1) {
         break label$4
        }
        $5_1 = $1_1 + 1 | 0;
        if (!($874($5_1 | 0, $9_1 | 0, $8_1 | 0) | 0)) {
         break label$8
        }
        $3_1 = $3_1 + $6_1 | 0;
        $6_1 = $5_1;
        $3_1 = $3_1 - $6_1 | 0;
        if (!$3_1) {
         break label$4
        }
        continue label$10;
       };
      }
      if (!$4_1) {
       break label$4
      }
     }
     $3_1 = $1_1 - $4_1 | 0;
     i64toi32_i32$5 = $3_1 + 1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $31($0_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 0;
     $31($0_1 | 0, $3_1 + (HEAP32[($2_1 + 312 | 0) >> 2] | 0) | 0 | 0, i64toi32_i32$2 | 0);
     $5_1 = 2;
     break label$3;
    }
    label$11 : {
     label$12 : {
      $6_1 = HEAPU8[$5_1 >> 0] | 0;
      if (($6_1 | 0) == (94 | 0)) {
       break label$12
      }
      $8_1 = HEAP32[($2_1 + 312 | 0) >> 2] | 0;
      break label$11;
     }
     $8_1 = (HEAP32[($2_1 + 312 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($2_1 + 312 | 0) >> 2] = $8_1;
     $5_1 = $5_1 + 1 | 0;
    }
    $3_1 = $4_1 + $7_1 | 0;
    HEAP32[($2_1 + 48 | 0) >> 2] = 200;
    HEAP32[($2_1 + 44 | 0) >> 2] = $0_1;
    HEAP32[($2_1 + 40 | 0) >> 2] = $5_1 + $8_1 | 0;
    HEAP32[($2_1 + 32 | 0) >> 2] = $4_1;
    HEAP32[($2_1 + 36 | 0) >> 2] = $4_1 + (HEAP32[($2_1 + 316 | 0) >> 2] | 0) | 0;
    $8_1 = ($6_1 | 0) != (94 | 0);
    label$13 : while (1) {
     HEAP8[($2_1 + 52 | 0) >> 0] = 0;
     label$14 : {
      $6_1 = $675($2_1 + 32 | 0 | 0, $3_1 | 0, $5_1 | 0) | 0;
      if (!$6_1) {
       break label$14
      }
      label$15 : {
       if (!$1_1) {
        break label$15
       }
       i64toi32_i32$5 = ($3_1 - $4_1 | 0) + 1 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $31($0_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0);
       i64toi32_i32$5 = $6_1 - $4_1 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
       $31($0_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0);
       $0_1 = HEAPU8[($2_1 + 52 | 0) >> 0] | 0;
       $507(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, $0_1 | 0, 11083 | 0);
       label$16 : {
        if (!$0_1) {
         break label$16
        }
        label$17 : {
         label$18 : {
          label$19 : {
           if (HEAPU8[($2_1 + 52 | 0) >> 0] | 0) {
            break label$19
           }
           $3_1 = 0;
           $6_1 = 0;
           break label$18;
          }
          $3_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
          label$20 : {
           label$21 : {
            $6_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
            switch ($6_1 + 2 | 0 | 0) {
            case 1:
             break label$20;
            case 0:
             break label$21;
            default:
             break label$18;
            };
           }
           i64toi32_i32$5 = ($3_1 - (HEAP32[($2_1 + 32 | 0) >> 2] | 0) | 0) + 1 | 0;
           i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
           $31(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0);
           break label$17;
          }
          $493(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, 11266 | 0, 0 | 0) | 0;
          $6_1 = -1;
         }
         $32(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, $3_1 | 0, $6_1 | 0) | 0;
        }
        $3_1 = 1;
        if (($0_1 | 0) == (1 | 0)) {
         break label$16
        }
        label$22 : while (1) {
         label$23 : {
          label$24 : {
           label$25 : {
            if ($3_1 >>> 0 < (HEAPU8[($2_1 + 52 | 0) >> 0] | 0) >>> 0) {
             break label$25
            }
            HEAP32[($2_1 + 16 | 0) >> 2] = $3_1 + 1 | 0;
            $493(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, 11239 | 0, $2_1 + 16 | 0 | 0) | 0;
            $6_1 = 0;
            $5_1 = 0;
            break label$24;
           }
           $5_1 = ($2_1 + 32 | 0) + ($3_1 << 3 | 0) | 0;
           $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
           label$26 : {
            label$27 : {
             $5_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
             switch ($5_1 + 2 | 0 | 0) {
             case 1:
              break label$26;
             case 0:
              break label$27;
             default:
              break label$24;
             };
            }
            i64toi32_i32$5 = ($6_1 - (HEAP32[($2_1 + 32 | 0) >> 2] | 0) | 0) + 1 | 0;
            i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
            $31(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0);
            break label$23;
           }
           $493(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, 11266 | 0, 0 | 0) | 0;
           $5_1 = -1;
          }
          $32(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, $6_1 | 0, $5_1 | 0) | 0;
         }
         $3_1 = $3_1 + 1 | 0;
         if (($3_1 | 0) != ($0_1 | 0)) {
          continue label$22
         }
         break label$22;
        };
       }
       $5_1 = $0_1 + 2 | 0;
       break label$3;
      }
      $5_1 = HEAPU8[($2_1 + 52 | 0) >> 0] | 0;
      $5_1 = $3_1 ? ($5_1 ? $5_1 : 1) : $5_1;
      $507(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, $5_1 | 0, 11083 | 0);
      label$28 : {
       if ($5_1) {
        break label$28
       }
       $5_1 = 0;
       break label$3;
      }
      $4_1 = $6_1 - $3_1 | 0;
      label$29 : {
       label$30 : {
        label$31 : {
         if (HEAPU8[($2_1 + 52 | 0) >> 0] | 0) {
          break label$31
         }
         $0_1 = $4_1;
         $6_1 = $3_1;
         if (($0_1 | 0) != (-2 | 0)) {
          break label$30
         }
         break label$29;
        }
        $6_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
        label$32 : {
         label$33 : {
          $0_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
          switch ($0_1 + 2 | 0 | 0) {
          case 1:
           break label$32;
          case 0:
           break label$33;
          default:
           break label$30;
          };
         }
         i64toi32_i32$5 = ($6_1 - (HEAP32[($2_1 + 32 | 0) >> 2] | 0) | 0) + 1 | 0;
         i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
         $31(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0);
         break label$29;
        }
        $493(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, 11266 | 0, 0 | 0) | 0;
        $0_1 = -1;
       }
       $32(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, $6_1 | 0, $0_1 | 0) | 0;
      }
      $6_1 = 1;
      if (($5_1 | 0) == (1 | 0)) {
       break label$3
      }
      $7_1 = ($4_1 | 0) == (-2 | 0);
      label$34 : while (1) {
       label$35 : {
        label$36 : {
         label$37 : {
          if ($6_1 >>> 0 < (HEAPU8[($2_1 + 52 | 0) >> 0] | 0) >>> 0) {
           break label$37
          }
          HEAP32[$2_1 >> 2] = $6_1 + 1 | 0;
          $493(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, 11239 | 0, $2_1 | 0) | 0;
          $0_1 = $4_1;
          $8_1 = $3_1;
          if (!$7_1) {
           break label$36
          }
          break label$35;
         }
         $0_1 = ($2_1 + 32 | 0) + ($6_1 << 3 | 0) | 0;
         $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
         label$38 : {
          label$39 : {
           $0_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
           switch ($0_1 + 2 | 0 | 0) {
           case 1:
            break label$38;
           case 0:
            break label$39;
           default:
            break label$36;
           };
          }
          i64toi32_i32$5 = ($8_1 - (HEAP32[($2_1 + 32 | 0) >> 2] | 0) | 0) + 1 | 0;
          i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
          $31(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0);
          break label$35;
         }
         $493(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, 11266 | 0, 0 | 0) | 0;
         $0_1 = -1;
        }
        $32(HEAP32[($2_1 + 44 | 0) >> 2] | 0 | 0, $8_1 | 0, $0_1 | 0) | 0;
       }
       $6_1 = $6_1 + 1 | 0;
       if (($6_1 | 0) == ($5_1 | 0)) {
        break label$3
       }
       continue label$34;
      };
     }
     $6_1 = $3_1 >>> 0 < (HEAP32[($2_1 + 36 | 0) >> 2] | 0) >>> 0;
     $3_1 = $3_1 + 1 | 0;
     if ($6_1 & $8_1 | 0) {
      continue label$13
     }
     break label$13;
    };
   }
   $29($0_1 | 0);
   $5_1 = 1;
  }
  global$0 = $2_1 + 320 | 0;
  return $5_1 | 0;
 }
 
 function $671($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $5_1 = 0, $4_1 = 0, $9_1 = 0, $10_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = 0, i64toi32_i32$3 = 0, $11_1 = 0, i64toi32_i32$2 = 0, $14_1 = 0.0, i64toi32_i32$4 = 0, $13_1 = 0, $3_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $2_1 = 0, $6_1 = 0, $7_1 = 0, $117$hi = 0, $213_1 = 0;
  $1_1 = global$0 - 768 | 0;
  global$0 = $1_1;
  $2_1 = $6($0_1 | 0) | 0;
  $3_1 = 1;
  $4_1 = $506($0_1 | 0, 1 | 0, $1_1 + 748 | 0 | 0) | 0;
  $5_1 = HEAP32[($1_1 + 748 | 0) >> 2] | 0;
  $487($0_1 | 0, $1_1 + 216 | 0 | 0);
  label$1 : {
   label$2 : {
    if (($5_1 | 0) < (1 | 0)) {
     break label$2
    }
    $6_1 = $4_1 + $5_1 | 0;
    $7_1 = $1_1 + 176 | 0 | 1 | 0;
    $8_1 = 1;
    label$3 : while (1) {
     $5_1 = $8_1;
     label$4 : {
      label$5 : {
       $9_1 = HEAPU8[$4_1 >> 0] | 0;
       if (($9_1 | 0) == (37 | 0)) {
        break label$5
       }
       label$6 : {
        $8_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
        if ($8_1 >>> 0 < (HEAP32[($1_1 + 220 | 0) >> 2] | 0) >>> 0) {
         break label$6
        }
        $489($1_1 + 216 | 0 | 0, 1 | 0) | 0;
        $9_1 = HEAPU8[$4_1 >> 0] | 0;
        $8_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
       }
       HEAP32[($1_1 + 224 | 0) >> 2] = $8_1 + 1 | 0;
       HEAP8[((HEAP32[($1_1 + 216 | 0) >> 2] | 0) + $8_1 | 0) >> 0] = $9_1;
       $4_1 = $4_1 + 1 | 0;
       $8_1 = $5_1;
       break label$4;
      }
      $10_1 = $4_1 + 1 | 0;
      label$7 : {
       if ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
        break label$7
       }
       $8_1 = 37;
       label$8 : {
        $9_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
        if ($9_1 >>> 0 < (HEAP32[($1_1 + 220 | 0) >> 2] | 0) >>> 0) {
         break label$8
        }
        $489($1_1 + 216 | 0 | 0, 1 | 0) | 0;
        $8_1 = HEAPU8[$10_1 >> 0] | 0;
        $9_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
       }
       HEAP32[($1_1 + 224 | 0) >> 2] = $9_1 + 1 | 0;
       HEAP8[((HEAP32[($1_1 + 216 | 0) >> 2] | 0) + $9_1 | 0) >> 0] = $8_1;
       $4_1 = $4_1 + 2 | 0;
       $8_1 = $5_1;
       break label$4;
      }
      $8_1 = $5_1 + 1 | 0;
      $11_1 = $489($1_1 + 216 | 0 | 0, 120 | 0) | 0;
      label$9 : {
       if (($5_1 | 0) < ($2_1 | 0)) {
        break label$9
       }
       $3_1 = $492($0_1 | 0, $8_1 | 0, 11285 | 0) | 0;
       break label$1;
      }
      $12_1 = 0;
      $5_1 = $10_1;
      label$10 : {
       label$11 : {
        $4_1 = HEAPU8[$5_1 >> 0] | 0;
        if ($4_1) {
         break label$11
        }
        $5_1 = $10_1;
        break label$10;
       }
       label$12 : while (1) {
        label$13 : {
         if (($4_1 & 255 | 0) >>> 0 <= 63 >>> 0) {
          break label$13
         }
         $12_1 = $4_1;
         break label$10;
        }
        label$14 : {
         i64toi32_i32$0 = 0;
         i64toi32_i32$2 = $4_1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 255;
         i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
         $117$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$0 = 1;
         i64toi32_i32$2 = $117$hi;
         i64toi32_i32$3 = $4_1 & i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
          $22_1 = 0;
         } else {
          i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
          $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         }
         i64toi32_i32$1 = $22_1;
         i64toi32_i32$0 = 75785;
         i64toi32_i32$3 = 1;
         i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
         if (!!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0)) {
          break label$14
         }
         $12_1 = $4_1;
         break label$10;
        }
        $4_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        $9_1 = $5_1 + 1 | 0;
        $5_1 = $9_1;
        if ($4_1) {
         continue label$12
        }
        break label$12;
       };
       $5_1 = $9_1;
      }
      label$15 : {
       if (($5_1 - $10_1 | 0) >>> 0 < 6 >>> 0) {
        break label$15
       }
       $493($0_1 | 0, 11401 | 0, 0 | 0) | 0;
       $12_1 = HEAPU8[$5_1 >> 0] | 0;
      }
      label$16 : {
       $4_1 = (($12_1 & 255 | 0) + -48 | 0) >>> 0 < 10 >>> 0 ? $5_1 + 1 | 0 : $5_1;
       $4_1 = ((HEAPU8[$4_1 >> 0] | 0) + -48 | 0) >>> 0 < 10 >>> 0 ? $4_1 + 1 | 0 : $4_1;
       $5_1 = HEAPU8[$4_1 >> 0] | 0;
       if (($5_1 | 0) != (46 | 0)) {
        break label$16
       }
       $5_1 = ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) + -48 | 0) >>> 0 < 10 >>> 0;
       $9_1 = $5_1 ? $4_1 + 2 | 0 : $4_1 + 1 | 0;
       $4_1 = ((HEAPU8[($4_1 + ($5_1 ? 2 : 1) | 0) >> 0] | 0) + -48 | 0) >>> 0 < 10 >>> 0 ? $9_1 + 1 | 0 : $9_1;
       $5_1 = HEAPU8[$4_1 >> 0] | 0;
      }
      label$17 : {
       if ((($5_1 & 255 | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
        break label$17
       }
       $493($0_1 | 0, 11433 | 0, 0 | 0) | 0;
      }
      HEAP8[($1_1 + 176 | 0) >> 0] = 37;
      $5_1 = ($4_1 - $10_1 | 0) + 1 | 0;
      HEAP8[(($951($7_1 | 0, $10_1 | 0, $5_1 | 0) | 0) + $5_1 | 0) >> 0] = 0;
      $5_1 = 120;
      label$18 : {
       label$19 : {
        switch ((HEAP8[$4_1 >> 0] | 0) + -65 | 0 | 0) {
        case 23:
        case 35:
        case 40:
        case 46:
        case 52:
        case 55:
         i64toi32_i32$0 = $512($0_1 | 0, $8_1 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
         $13_1 = i64toi32_i32$0;
         $5_1 = ($1_1 + 176 | 0) + ($961($1_1 + 176 | 0 | 0) | 0) | 0;
         HEAP8[($5_1 + 2 | 0) >> 0] = 0;
         $213_1 = $5_1 + 1 | 0;
         $5_1 = $5_1 + -1 | 0;
         HEAP8[$213_1 >> 0] = HEAPU8[$5_1 >> 0] | 0;
         $23_1 = 0;
         $24_1 = HEAPU8[($23_1 + 11294 | 0) >> 0] | 0 | ((HEAPU8[($23_1 + 11295 | 0) >> 0] | 0) << 8 | 0) | 0;
         HEAP8[$5_1 >> 0] = $24_1;
         HEAP8[($5_1 + 1 | 0) >> 0] = $24_1 >>> 8 | 0;
         i64toi32_i32$0 = $1_1;
         HEAP32[($1_1 + 32 | 0) >> 2] = $13_1;
         HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$1;
         $5_1 = $832($11_1 | 0, 120 | 0, $1_1 + 176 | 0 | 0, $1_1 + 32 | 0 | 0) | 0;
         break label$18;
        case 0:
        case 32:
         HEAP8[(($1_1 + 176 | 0) + ($961($1_1 + 176 | 0 | 0) | 0) | 0) >> 0] = 0;
         HEAPF64[($1_1 + 48 | 0) >> 3] = +$510($0_1 | 0, $8_1 | 0);
         $5_1 = $832($11_1 | 0, 120 | 0, $1_1 + 176 | 0 | 0, $1_1 + 48 | 0 | 0) | 0;
         break label$18;
        case 37:
         $5_1 = 418;
         $11_1 = $489($1_1 + 216 | 0 | 0, 418 | 0) | 0;
        case 4:
        case 6:
        case 36:
        case 38:
         $14_1 = +$510($0_1 | 0, $8_1 | 0);
         HEAP8[(($1_1 + 176 | 0) + ($961($1_1 + 176 | 0 | 0) | 0) | 0) >> 0] = 0;
         HEAPF64[($1_1 + 64 | 0) >> 3] = $14_1;
         $5_1 = $832($11_1 | 0, $5_1 | 0, $1_1 + 176 | 0 | 0, $1_1 + 64 | 0 | 0) | 0;
         break label$18;
        case 47:
         $5_1 = $28($0_1 | 0, $8_1 | 0) | 0;
         HEAP32[($1_1 + 80 | 0) >> 2] = $5_1 ? $5_1 : 11298;
         $5_1 = $832($11_1 | 0, 120 | 0, $1_1 + 176 | 0 | 0, $1_1 + 80 | 0 | 0) | 0;
         break label$18;
        case 48:
         label$28 : {
          if (!(HEAPU8[($1_1 + 178 | 0) >> 0] | 0)) {
           break label$28
          }
          $3_1 = $493($0_1 | 0, 11305 | 0, 0 | 0) | 0;
          break label$1;
         }
         label$29 : {
          switch ($11($0_1 | 0, $8_1 | 0) | 0 | 0) {
          case 4:
           $5_1 = $24($0_1 | 0, $8_1 | 0, $1_1 + 752 | 0 | 0) | 0;
           $9_1 = HEAP32[($1_1 + 752 | 0) >> 2] | 0;
           label$33 : {
            $10_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
            if ($10_1 >>> 0 < (HEAP32[($1_1 + 220 | 0) >> 2] | 0) >>> 0) {
             break label$33
            }
            $489($1_1 + 216 | 0 | 0, 1 | 0) | 0;
            $10_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
           }
           HEAP32[($1_1 + 224 | 0) >> 2] = $10_1 + 1 | 0;
           HEAP8[((HEAP32[($1_1 + 216 | 0) >> 2] | 0) + $10_1 | 0) >> 0] = 34;
           label$34 : {
            if (!$9_1) {
             break label$34
            }
            label$35 : while (1) {
             $9_1 = $9_1 + -1 | 0;
             label$36 : {
              label$37 : {
               label$38 : {
                $10_1 = HEAPU8[$5_1 >> 0] | 0;
                if (($10_1 | 0) == (10 | 0)) {
                 break label$38
                }
                if (($10_1 | 0) == (92 | 0)) {
                 break label$38
                }
                if (($10_1 | 0) != (34 | 0)) {
                 break label$37
                }
               }
               label$39 : {
                $10_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
                if ($10_1 >>> 0 < (HEAP32[($1_1 + 220 | 0) >> 2] | 0) >>> 0) {
                 break label$39
                }
                $489($1_1 + 216 | 0 | 0, 1 | 0) | 0;
                $10_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
               }
               HEAP32[($1_1 + 224 | 0) >> 2] = $10_1 + 1 | 0;
               HEAP8[((HEAP32[($1_1 + 216 | 0) >> 2] | 0) + $10_1 | 0) >> 0] = 92;
               label$40 : {
                $10_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
                if ($10_1 >>> 0 < (HEAP32[($1_1 + 220 | 0) >> 2] | 0) >>> 0) {
                 break label$40
                }
                $489($1_1 + 216 | 0 | 0, 1 | 0) | 0;
                $10_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
               }
               $12_1 = HEAPU8[$5_1 >> 0] | 0;
               HEAP32[($1_1 + 224 | 0) >> 2] = $10_1 + 1 | 0;
               HEAP8[((HEAP32[($1_1 + 216 | 0) >> 2] | 0) + $10_1 | 0) >> 0] = $12_1;
               break label$36;
              }
              label$41 : {
               if (!($741($10_1 | 0) | 0)) {
                break label$41
               }
               $12_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
               HEAP32[($1_1 + 96 | 0) >> 2] = $10_1;
               $832($1_1 + 756 | 0 | 0, 10 | 0, (($12_1 + -48 | 0) >>> 0 < 10 >>> 0 ? 11520 : 11516) | 0, $1_1 + 96 | 0 | 0) | 0;
               $488($1_1 + 216 | 0 | 0, $1_1 + 756 | 0 | 0);
               break label$36;
              }
              label$42 : {
               $12_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
               if ($12_1 >>> 0 < (HEAP32[($1_1 + 220 | 0) >> 2] | 0) >>> 0) {
                break label$42
               }
               $489($1_1 + 216 | 0 | 0, 1 | 0) | 0;
               $10_1 = HEAPU8[$5_1 >> 0] | 0;
               $12_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
              }
              HEAP32[($1_1 + 224 | 0) >> 2] = $12_1 + 1 | 0;
              HEAP8[((HEAP32[($1_1 + 216 | 0) >> 2] | 0) + $12_1 | 0) >> 0] = $10_1;
             }
             $5_1 = $5_1 + 1 | 0;
             if ($9_1) {
              continue label$35
             }
             break label$35;
            };
           }
           label$43 : {
            $5_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
            if ($5_1 >>> 0 < (HEAP32[($1_1 + 220 | 0) >> 2] | 0) >>> 0) {
             break label$43
            }
            $489($1_1 + 216 | 0 | 0, 1 | 0) | 0;
            $5_1 = HEAP32[($1_1 + 224 | 0) >> 2] | 0;
           }
           HEAP32[($1_1 + 224 | 0) >> 2] = $5_1 + 1 | 0;
           HEAP8[((HEAP32[($1_1 + 216 | 0) >> 2] | 0) + $5_1 | 0) >> 0] = 34;
           $5_1 = 0;
           break label$18;
          case 3:
           $5_1 = $489($1_1 + 216 | 0 | 0, 120 | 0) | 0;
           label$44 : {
            label$45 : {
             if ($14($0_1 | 0, $8_1 | 0) | 0) {
              break label$45
             }
             $9_1 = 11526;
             label$46 : {
              label$47 : {
               $14_1 = +$21($0_1 | 0, $8_1 | 0, 0 | 0);
               if ($14_1 == infinity) {
                break label$47
               }
               $9_1 = 11533;
               if ($14_1 == -infinity) {
                break label$47
               }
               if ($14_1 == $14_1) {
                break label$46
               }
               $9_1 = 11541;
              }
              HEAP32[($1_1 + 112 | 0) >> 2] = $9_1;
              $9_1 = $832($5_1 | 0, 120 | 0, 11550 | 0, $1_1 + 112 | 0 | 0) | 0;
              break label$44;
             }
             HEAPF64[($1_1 + 128 | 0) >> 3] = $14_1;
             $9_1 = $832($5_1 | 0, 120 | 0, 11547 | 0, $1_1 + 128 | 0 | 0) | 0;
             if ($879($5_1 | 0, 46 | 0, $9_1 | 0) | 0) {
              break label$44
             }
             $5_1 = $879($5_1 | 0, HEAP8[(HEAP32[($752() | 0) >> 2] | 0) >> 0] | 0 | 0, $9_1 | 0) | 0;
             if (!$5_1) {
              break label$44
             }
             HEAP8[$5_1 >> 0] = 46;
             break label$44;
            }
            i64toi32_i32$1 = $22($0_1 | 0, $8_1 | 0, 0 | 0) | 0;
            i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
            $13_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $1_1;
            HEAP32[($1_1 + 144 | 0) >> 2] = $13_1;
            HEAP32[($1_1 + 148 | 0) >> 2] = i64toi32_i32$0;
            i64toi32_i32$2 = $13_1;
            i64toi32_i32$1 = -2147483648;
            i64toi32_i32$3 = 0;
            $9_1 = $832($5_1 | 0, 120 | 0, (($13_1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? 11478 : 11485) | 0, $1_1 + 144 | 0 | 0) | 0;
           }
           HEAP32[($1_1 + 224 | 0) >> 2] = (HEAP32[($1_1 + 224 | 0) >> 2] | 0) + $9_1 | 0;
           $5_1 = 0;
           break label$18;
          case 0:
          case 1:
           $5_1 = 0;
           $526($0_1 | 0, $8_1 | 0, 0 | 0) | 0;
           $490($1_1 + 216 | 0 | 0);
           break label$18;
          default:
           break label$29;
          };
         }
         $492($0_1 | 0, $8_1 | 0, 11490 | 0) | 0;
         $5_1 = 0;
         break label$18;
        case 50:
         $5_1 = $526($0_1 | 0, $8_1 | 0, $1_1 + 756 | 0 | 0) | 0;
         label$48 : {
          if (HEAPU8[($1_1 + 178 | 0) >> 0] | 0) {
           break label$48
          }
          $490($1_1 + 216 | 0 | 0);
          $5_1 = 0;
          break label$18;
         }
         label$49 : {
          $9_1 = HEAP32[($1_1 + 756 | 0) >> 2] | 0;
          if (($9_1 | 0) == ($961($5_1 | 0) | 0 | 0)) {
           break label$49
          }
          $492($0_1 | 0, $8_1 | 0, 11343 | 0) | 0;
          $9_1 = HEAP32[($1_1 + 756 | 0) >> 2] | 0;
         }
         label$50 : {
          if ($865($1_1 + 176 | 0 | 0, 46 | 0) | 0) {
           break label$50
          }
          if ($9_1 >>> 0 < 100 >>> 0) {
           break label$50
          }
          $490($1_1 + 216 | 0 | 0);
          $5_1 = 0;
          break label$18;
         }
         HEAP32[($1_1 + 160 | 0) >> 2] = $5_1;
         $5_1 = $832($11_1 | 0, 120 | 0, $1_1 + 176 | 0 | 0, $1_1 + 160 | 0 | 0) | 0;
         $7($0_1 | 0, -2 | 0);
         break label$18;
        default:
         HEAP32[$1_1 >> 2] = $1_1 + 176 | 0;
         $3_1 = $493($0_1 | 0, 11365 | 0, $1_1 | 0) | 0;
         break label$1;
        case 34:
         break label$19;
        };
       }
       i64toi32_i32$2 = $512($0_1 | 0, $8_1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       HEAP32[($1_1 + 16 | 0) >> 2] = i64toi32_i32$2;
       $5_1 = $832($11_1 | 0, 120 | 0, $1_1 + 176 | 0 | 0, $1_1 + 16 | 0 | 0) | 0;
      }
      $4_1 = $4_1 + 1 | 0;
      HEAP32[($1_1 + 224 | 0) >> 2] = (HEAP32[($1_1 + 224 | 0) >> 2] | 0) + $5_1 | 0;
     }
     if ($4_1 >>> 0 < $6_1 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $491($1_1 + 216 | 0 | 0);
  }
  global$0 = $1_1 + 768 | 0;
  return $3_1 | 0;
 }
 
 function $672($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $1_1 = 0, i64toi32_i32$3 = 0, $8$hi = 0, $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $8_1 = 0, $2_1 = 0, $3_1 = 0, $6_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $32$hi = 0, $33_1 = 0, $33$hi = 0, $7_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 1;
  $3_1 = $506($0_1 | 0, 1 | 0, $1_1 + 12 | 0 | 0) | 0;
  $4_1 = $506($0_1 | 0, 2 | 0, $1_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $513($0_1 | 0, 3 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $8_1 = i64toi32_i32$0;
    $8$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $18_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $19_1 = 0
      } else {
       $19_1 = 1
      }
      $20_1 = $19_1;
     } else {
      $20_1 = 0
     }
     $18_1 = $20_1;
    }
    if ($18_1) {
     break label$2
    }
    i64toi32_i32$2 = $8$hi;
    $2_1 = $8_1;
    break label$1;
   }
   i64toi32_i32$2 = $8$hi;
   if (!($8_1 | i64toi32_i32$2 | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $8$hi;
   $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = 0;
   $32$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < $5_1 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $33_1 = i64toi32_i32$3 - $5_1 | 0;
   $33$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$0 = $33_1;
   if (($8$hi | 0) < (i64toi32_i32$3 | 0)) {
    $21_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$0 >>> 0) {
      $22_1 = 0
     } else {
      $22_1 = 1
     }
     $23_1 = $22_1;
    } else {
     $23_1 = 0
    }
    $21_1 = $23_1;
   }
   if ($21_1) {
    break label$1
   }
   i64toi32_i32$2 = $8$hi;
   $2_1 = ($5_1 + $8_1 | 0) + 1 | 0;
  }
  $7($0_1 | 0, 2 | 0);
  $5_1 = $72($0_1 | 0, 292 | 0, 0 | 0) | 0;
  $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $7_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = 200;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $4_1 + $7_1 | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = $3_1 + $6_1 | 0;
  $4_1 = $2_1 + -1 | 0;
  HEAP32[$5_1 >> 2] = $3_1 + ($4_1 >>> 0 > $6_1 >>> 0 ? $6_1 + 1 | 0 : $4_1) | 0;
  $36($0_1 | 0, 131 | 0, 3 | 0);
  global$0 = $1_1 + 16 | 0;
  return 1 | 0;
 }
 
 function $673($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $5_1 = 0, $7_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $4_1 = 0, $8_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $26($0_1 | 0, -1001003 | 0) | 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = $0_1;
  $3_1 = 0;
  label$1 : {
   $0_1 = HEAP32[$2_1 >> 2] | 0;
   if ($0_1 >>> 0 > (HEAP32[($2_1 + 16 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   $4_1 = $2_1 + 12 | 0;
   label$2 : {
    label$3 : while (1) {
     HEAP8[($2_1 + 32 | 0) >> 0] = 0;
     label$4 : {
      $5_1 = $675($4_1 | 0, $0_1 | 0, HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) | 0;
      if (!$5_1) {
       break label$4
      }
      if (($5_1 | 0) == (HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      HEAP32[$2_1 >> 2] = $5_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
      $3_1 = HEAPU8[($2_1 + 32 | 0) >> 0] | 0;
      $3_1 = $0_1 ? ($3_1 ? $3_1 : 1) : $3_1;
      $507(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, $3_1 | 0, 11083 | 0);
      if (!$3_1) {
       break label$2
      }
      $6_1 = $5_1 - $0_1 | 0;
      label$5 : {
       label$6 : {
        label$7 : {
         if (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) {
          break label$7
         }
         $5_1 = $6_1;
         $7_1 = $0_1;
         if (($5_1 | 0) != (-2 | 0)) {
          break label$6
         }
         break label$5;
        }
        $7_1 = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
        label$8 : {
         label$9 : {
          $5_1 = HEAP32[($2_1 + 40 | 0) >> 2] | 0;
          switch ($5_1 + 2 | 0 | 0) {
          case 1:
           break label$8;
          case 0:
           break label$9;
          default:
           break label$6;
          };
         }
         i64toi32_i32$1 = ($7_1 - (HEAP32[($2_1 + 12 | 0) >> 2] | 0) | 0) + 1 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
         $31(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
         break label$5;
        }
        $493(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, 11266 | 0, 0 | 0) | 0;
        $5_1 = -1;
       }
       $32(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, $7_1 | 0, $5_1 | 0) | 0;
      }
      $5_1 = 1;
      if (($3_1 | 0) == (1 | 0)) {
       break label$1
      }
      $8_1 = ($6_1 | 0) == (-2 | 0);
      label$10 : while (1) {
       label$11 : {
        label$12 : {
         label$13 : {
          if ($5_1 >>> 0 < (HEAPU8[($2_1 + 32 | 0) >> 0] | 0) >>> 0) {
           break label$13
          }
          $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
          HEAP32[$1_1 >> 2] = $5_1 + 1 | 0;
          $493($7_1 | 0, 11239 | 0, $1_1 | 0) | 0;
          $7_1 = $6_1;
          $9_1 = $0_1;
          if (!$8_1) {
           break label$12
          }
          break label$11;
         }
         $7_1 = $4_1 + ($5_1 << 3 | 0) | 0;
         $9_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
         label$14 : {
          label$15 : {
           $7_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
           switch ($7_1 + 2 | 0 | 0) {
           case 1:
            break label$14;
           case 0:
            break label$15;
           default:
            break label$12;
           };
          }
          i64toi32_i32$1 = ($9_1 - (HEAP32[($2_1 + 12 | 0) >> 2] | 0) | 0) + 1 | 0;
          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
          $31(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
          break label$11;
         }
         $493(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, 11266 | 0, 0 | 0) | 0;
         $7_1 = -1;
        }
        $32(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0, $9_1 | 0, $7_1 | 0) | 0;
       }
       $5_1 = $5_1 + 1 | 0;
       if (($5_1 | 0) != ($3_1 | 0)) {
        continue label$10
       }
       break label$1;
      };
     }
     $0_1 = $0_1 + 1 | 0;
     if ($0_1 >>> 0 <= (HEAP32[($2_1 + 16 | 0) >> 2] | 0) >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $3_1 = 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $674($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $15$hi = 0, $9_1 = 0, $10_1 = 0, $3_1 = 0, $13_1 = 0, $15_1 = 0, $14$hi = 0, i64toi32_i32$2 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, i64toi32_i32$4 = 0, $14_1 = 0, $7_1 = 0, $8_1 = 0;
  $1_1 = global$0 - 880 | 0;
  global$0 = $1_1;
  $2_1 = $506($0_1 | 0, 1 | 0, $1_1 + 872 | 0 | 0) | 0;
  $3_1 = $506($0_1 | 0, 2 | 0, $1_1 + 868 | 0 | 0) | 0;
  $4_1 = $11($0_1 | 0, 3 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $513($0_1 | 0, 4 | 0, (HEAP32[($1_1 + 872 | 0) >> 2] | 0) + 1 | 0 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $14_1 = i64toi32_i32$0;
  $14$hi = i64toi32_i32$1;
  $5_1 = HEAPU8[$3_1 >> 0] | 0;
  label$1 : {
   if (($4_1 + -3 | 0) >>> 0 < 4 >>> 0) {
    break label$1
   }
   $495($0_1 | 0, 3 | 0, 11553 | 0) | 0;
  }
  $487($0_1 | 0, $1_1 + 56 | 0 | 0);
  label$2 : {
   label$3 : {
    if (($5_1 & 255 | 0 | 0) == (94 | 0)) {
     break label$3
    }
    $6_1 = HEAP32[($1_1 + 868 | 0) >> 2] | 0;
    break label$2;
   }
   $6_1 = (HEAP32[($1_1 + 868 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($1_1 + 868 | 0) >> 2] = $6_1;
   $3_1 = $3_1 + 1 | 0;
  }
  HEAP32[($1_1 + 600 | 0) >> 2] = 200;
  HEAP32[($1_1 + 596 | 0) >> 2] = $0_1;
  HEAP32[($1_1 + 592 | 0) >> 2] = $3_1 + $6_1 | 0;
  HEAP32[($1_1 + 584 | 0) >> 2] = $2_1;
  HEAP32[($1_1 + 588 | 0) >> 2] = $2_1 + (HEAP32[($1_1 + 872 | 0) >> 2] | 0) | 0;
  i64toi32_i32$1 = 0;
  $15_1 = 0;
  $15$hi = i64toi32_i32$1;
  $7_1 = ($5_1 & 255 | 0 | 0) != (94 | 0);
  $8_1 = $4_1 + -5 | 0;
  $5_1 = 0;
  $9_1 = 0;
  label$4 : {
   label$5 : while (1) {
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$2 = $15_1;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$3 = $14_1;
    if (($15$hi | 0) > (i64toi32_i32$0 | 0)) {
     $24_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       $25_1 = 0
      } else {
       $25_1 = 1
      }
      $26_1 = $25_1;
     } else {
      $26_1 = 0
     }
     $24_1 = $26_1;
    }
    if ($24_1) {
     break label$4
    }
    HEAP8[($1_1 + 604 | 0) >> 0] = 0;
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        $10_1 = $675($1_1 + 584 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
        if (!$10_1) {
         break label$9
        }
        if (($10_1 | 0) == ($5_1 | 0)) {
         break label$9
        }
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$3 = $15_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$5 = $15$hi + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $15_1 = i64toi32_i32$4;
        $15$hi = i64toi32_i32$5;
        $11_1 = HEAP32[($1_1 + 596 | 0) >> 2] | 0;
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            switch ($8_1 | 0) {
            case 1:
             $10($11_1 | 0, 3 | 0);
             $4_1 = HEAPU8[($1_1 + 604 | 0) >> 0] | 0;
             $12_1 = $2_1 ? ($4_1 ? $4_1 : 1) : $4_1;
             $507(HEAP32[($1_1 + 596 | 0) >> 2] | 0 | 0, $12_1 | 0, 11083 | 0);
             label$15 : {
              if (!$12_1) {
               break label$15
              }
              $13_1 = $10_1 - $2_1 | 0;
              label$16 : {
               label$17 : {
                label$18 : {
                 if (HEAPU8[($1_1 + 604 | 0) >> 0] | 0) {
                  break label$18
                 }
                 $4_1 = $13_1;
                 $5_1 = $2_1;
                 if (($4_1 | 0) != (-2 | 0)) {
                  break label$17
                 }
                 break label$16;
                }
                $5_1 = HEAP32[($1_1 + 608 | 0) >> 2] | 0;
                label$19 : {
                 label$20 : {
                  $4_1 = HEAP32[($1_1 + 612 | 0) >> 2] | 0;
                  switch ($4_1 + 2 | 0 | 0) {
                  case 1:
                   break label$19;
                  case 0:
                   break label$20;
                  default:
                   break label$17;
                  };
                 }
                 i64toi32_i32$3 = ($5_1 - (HEAP32[($1_1 + 584 | 0) >> 2] | 0) | 0) + 1 | 0;
                 i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
                 $31(HEAP32[($1_1 + 596 | 0) >> 2] | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$5 | 0);
                 break label$16;
                }
                $493(HEAP32[($1_1 + 596 | 0) >> 2] | 0 | 0, 11266 | 0, 0 | 0) | 0;
                $4_1 = -1;
               }
               $32(HEAP32[($1_1 + 596 | 0) >> 2] | 0 | 0, $5_1 | 0, $4_1 | 0) | 0;
              }
              $4_1 = 1;
              if (($12_1 | 0) == (1 | 0)) {
               break label$15
              }
              label$21 : while (1) {
               label$22 : {
                label$23 : {
                 label$24 : {
                  if ($4_1 >>> 0 < (HEAPU8[($1_1 + 604 | 0) >> 0] | 0) >>> 0) {
                   break label$24
                  }
                  HEAP32[($1_1 + 48 | 0) >> 2] = $4_1 + 1 | 0;
                  $493(HEAP32[($1_1 + 596 | 0) >> 2] | 0 | 0, 11239 | 0, $1_1 + 48 | 0 | 0) | 0;
                  $5_1 = $13_1;
                  $6_1 = $2_1;
                  if (($5_1 | 0) != (-2 | 0)) {
                   break label$23
                  }
                  break label$22;
                 }
                 $5_1 = ($1_1 + 584 | 0) + ($4_1 << 3 | 0) | 0;
                 $6_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
                 label$25 : {
                  label$26 : {
                   $5_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
                   switch ($5_1 + 2 | 0 | 0) {
                   case 1:
                    break label$25;
                   case 0:
                    break label$26;
                   default:
                    break label$23;
                   };
                  }
                  i64toi32_i32$3 = ($6_1 - (HEAP32[($1_1 + 584 | 0) >> 2] | 0) | 0) + 1 | 0;
                  i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
                  $31(HEAP32[($1_1 + 596 | 0) >> 2] | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$5 | 0);
                  break label$22;
                 }
                 $493(HEAP32[($1_1 + 596 | 0) >> 2] | 0 | 0, 11266 | 0, 0 | 0) | 0;
                 $5_1 = -1;
                }
                $32(HEAP32[($1_1 + 596 | 0) >> 2] | 0 | 0, $6_1 | 0, $5_1 | 0) | 0;
               }
               $4_1 = $4_1 + 1 | 0;
               if (($4_1 | 0) != ($12_1 | 0)) {
                continue label$21
               }
               break label$21;
              };
             }
             $57($11_1 | 0, $12_1 | 0, 1 | 0, 0 | 0, 0 | 0);
             break label$12;
            case 0:
             break label$13;
            default:
             break label$11;
            };
           }
           label$27 : {
            label$28 : {
             label$29 : {
              if (!(HEAPU8[($1_1 + 604 | 0) >> 0] | 0)) {
               break label$29
              }
              $4_1 = HEAP32[($1_1 + 608 | 0) >> 2] | 0;
              $5_1 = $11_1;
              label$30 : {
               label$31 : {
                $6_1 = HEAP32[($1_1 + 612 | 0) >> 2] | 0;
                switch ($6_1 + 2 | 0 | 0) {
                case 0:
                 break label$30;
                case 1:
                 break label$31;
                default:
                 break label$28;
                };
               }
               $493($11_1 | 0, 11266 | 0, 0 | 0) | 0;
               $6_1 = -1;
               $5_1 = HEAP32[($1_1 + 596 | 0) >> 2] | 0;
               break label$28;
              }
              i64toi32_i32$3 = ($4_1 - (HEAP32[($1_1 + 584 | 0) >> 2] | 0) | 0) + 1 | 0;
              i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
              $31($11_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$5 | 0);
              break label$27;
             }
             $5_1 = $11_1;
             $4_1 = $2_1;
             $6_1 = $10_1 - $4_1 | 0;
             if (($6_1 | 0) == (-2 | 0)) {
              break label$27
             }
            }
            $32($5_1 | 0, $4_1 | 0, $6_1 | 0) | 0;
           }
           $41($11_1 | 0, 3 | 0) | 0;
          }
          if ($23($11_1 | 0, -1 | 0) | 0) {
           break label$10
          }
          $7($11_1 | 0, -2 | 0);
          $515($1_1 + 56 | 0 | 0, $2_1 | 0, $10_1 - $2_1 | 0 | 0);
          $9_1 = 0 | $9_1 | 0;
          break label$7;
         }
         label$32 : {
          $5_1 = $24($11_1 | 0, 3 | 0, $1_1 + 876 | 0 | 0) | 0;
          $6_1 = HEAP32[($1_1 + 876 | 0) >> 2] | 0;
          $4_1 = $879($5_1 | 0, 37 | 0, $6_1 | 0) | 0;
          if (!$4_1) {
           break label$32
          }
          $13_1 = $10_1 - $2_1 | 0;
          label$33 : while (1) {
           $6_1 = $5_1;
           $515($1_1 + 56 | 0 | 0, $5_1 | 0, $4_1 - $5_1 | 0 | 0);
           label$34 : {
            label$35 : {
             label$36 : {
              label$37 : {
               $5_1 = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
               switch ($5_1 + -37 | 0 | 0) {
               case 11:
                break label$36;
               case 0:
                break label$37;
               default:
                break label$35;
               };
              }
              $12_1 = 37;
              label$38 : {
               $5_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
               if ($5_1 >>> 0 < (HEAP32[($1_1 + 60 | 0) >> 2] | 0) >>> 0) {
                break label$38
               }
               $489($1_1 + 56 | 0 | 0, 1 | 0) | 0;
               $12_1 = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
               $5_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
              }
              HEAP32[($1_1 + 64 | 0) >> 2] = $5_1 + 1 | 0;
              HEAP8[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + $5_1 | 0) >> 0] = $12_1;
              break label$34;
             }
             $515($1_1 + 56 | 0 | 0, $2_1 | 0, $13_1 | 0);
             break label$34;
            }
            label$39 : {
             if (($5_1 + -48 | 0) >>> 0 > 9 >>> 0) {
              break label$39
             }
             label$40 : {
              label$41 : {
               label$42 : {
                label$43 : {
                 $12_1 = ($5_1 << 24 | 0) >> 24 | 0;
                 $5_1 = $12_1 + -49 | 0;
                 if (($5_1 | 0) < (HEAPU8[($1_1 + 604 | 0) >> 0] | 0 | 0)) {
                  break label$43
                 }
                 label$44 : {
                  if (!$5_1) {
                   break label$44
                  }
                  HEAP32[$1_1 >> 2] = $12_1 + -48 | 0;
                  $493(HEAP32[($1_1 + 596 | 0) >> 2] | 0 | 0, 11239 | 0, $1_1 | 0) | 0;
                 }
                 $5_1 = $13_1;
                 $12_1 = $2_1;
                 if (($5_1 | 0) == (-2 | 0)) {
                  break label$42
                 }
                 break label$40;
                }
                $5_1 = ($1_1 + 584 | 0) + ($5_1 << 3 | 0) | 0;
                $12_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
                label$45 : {
                 $5_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
                 switch ($5_1 + 2 | 0 | 0) {
                 case 1:
                  break label$41;
                 case 0:
                  break label$45;
                 default:
                  break label$40;
                 };
                }
                i64toi32_i32$3 = ($12_1 - (HEAP32[($1_1 + 584 | 0) >> 2] | 0) | 0) + 1 | 0;
                i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
                $31(HEAP32[($1_1 + 596 | 0) >> 2] | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$5 | 0);
               }
               $490($1_1 + 56 | 0 | 0);
               break label$34;
              }
              $493(HEAP32[($1_1 + 596 | 0) >> 2] | 0 | 0, 11266 | 0, 0 | 0) | 0;
              $5_1 = -1;
             }
             $515($1_1 + 56 | 0 | 0, $12_1 | 0, $5_1 | 0);
             break label$34;
            }
            HEAP32[($1_1 + 16 | 0) >> 2] = 37;
            $493($11_1 | 0, 11608 | 0, $1_1 + 16 | 0 | 0) | 0;
           }
           $5_1 = $4_1 + 2 | 0;
           $6_1 = (HEAP32[($1_1 + 876 | 0) >> 2] | 0) + ($6_1 - $5_1 | 0) | 0;
           HEAP32[($1_1 + 876 | 0) >> 2] = $6_1;
           $4_1 = $879($5_1 | 0, 37 | 0, $6_1 | 0) | 0;
           if ($4_1) {
            continue label$33
           }
           break label$33;
          };
         }
         $515($1_1 + 56 | 0 | 0, $5_1 | 0, $6_1 | 0);
         break label$8;
        }
        label$46 : {
         if ($16($11_1 | 0, -1 | 0) | 0) {
          break label$46
         }
         HEAP32[($1_1 + 32 | 0) >> 2] = $12($11_1 | 0, $11($11_1 | 0, -1 | 0) | 0 | 0) | 0;
         $9_1 = $493($11_1 | 0, 11575 | 0, $1_1 + 32 | 0 | 0) | 0 | $9_1 | 0;
         break label$7;
        }
        $490($1_1 + 56 | 0 | 0);
        break label$8;
       }
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 588 | 0) >> 2] | 0) >>> 0) {
        break label$4
       }
       label$47 : {
        $4_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
        if ($4_1 >>> 0 < (HEAP32[($1_1 + 60 | 0) >> 2] | 0) >>> 0) {
         break label$47
        }
        $489($1_1 + 56 | 0 | 0, 1 | 0) | 0;
        $4_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
       }
       $6_1 = HEAPU8[$2_1 >> 0] | 0;
       HEAP32[($1_1 + 64 | 0) >> 2] = $4_1 + 1 | 0;
       HEAP8[((HEAP32[($1_1 + 56 | 0) >> 2] | 0) + $4_1 | 0) >> 0] = $6_1;
       $2_1 = $2_1 + 1 | 0;
       break label$6;
      }
      $9_1 = 1 | $9_1 | 0;
     }
     $5_1 = $10_1;
     $2_1 = $5_1;
    }
    if ($7_1) {
     continue label$5
    }
    break label$5;
   };
  }
  label$48 : {
   label$49 : {
    if ($9_1) {
     break label$49
    }
    $10($0_1 | 0, 1 | 0);
    break label$48;
   }
   $515($1_1 + 56 | 0 | 0, $2_1 | 0, (HEAP32[($1_1 + 588 | 0) >> 2] | 0) - $2_1 | 0 | 0);
   $491($1_1 + 56 | 0 | 0);
  }
  i64toi32_i32$5 = $15$hi;
  $31($0_1 | 0, $15_1 | 0, $15$hi | 0);
  global$0 = $1_1 + 880 | 0;
  return 2 | 0;
 }
 
 function $675($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $13_1 = 0, $11_1 = 0, $14_1 = 0, $15_1 = 0, $12_1 = 0, $16_1 = 0, $17_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $18_1 = 0, $170_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $4_1 + -1 | 0;
  label$1 : {
   if ($4_1) {
    break label$1
   }
   $493(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 11028 | 0, 0 | 0) | 0;
  }
  label$2 : while (1) {
   $5_1 = $1_1 + 1 | 0;
   $6_1 = $1_1 + -1 | 0;
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      $7_1 = $2_1;
      $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if (($7_1 | 0) != ($4_1 | 0)) {
       break label$5
      }
      $8_1 = $1_1;
      break label$3;
     }
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            $9_1 = HEAPU8[$7_1 >> 0] | 0;
            if (($9_1 | 0) == (37 | 0)) {
             break label$12
            }
            label$13 : {
             switch ((($9_1 << 24 | 0) >> 24 | 0) + -36 | 0 | 0) {
             case 4:
              label$16 : {
               if ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) != (41 | 0)) {
                break label$16
               }
               $9_1 = $7_1 + 2 | 0;
               label$17 : {
                $4_1 = HEAPU8[($0_1 + 20 | 0) >> 0] | 0;
                if ($4_1 >>> 0 < 32 >>> 0) {
                 break label$17
                }
                $493(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 11083 | 0, 0 | 0) | 0;
               }
               $7_1 = $0_1 + ($4_1 << 3 | 0) | 0;
               HEAP32[($7_1 + 28 | 0) >> 2] = -2;
               HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
               HEAP8[($0_1 + 20 | 0) >> 0] = $4_1 + 1 | 0;
               $8_1 = $675($0_1 | 0, $1_1 | 0, $9_1 | 0) | 0;
               if ($8_1) {
                break label$3
               }
               HEAP8[($0_1 + 20 | 0) >> 0] = (HEAPU8[($0_1 + 20 | 0) >> 0] | 0) + -1 | 0;
               $8_1 = 0;
               break label$3;
              }
              $9_1 = $7_1 + 1 | 0;
              label$18 : {
               $4_1 = HEAPU8[($0_1 + 20 | 0) >> 0] | 0;
               if ($4_1 >>> 0 < 32 >>> 0) {
                break label$18
               }
               $493(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 11083 | 0, 0 | 0) | 0;
              }
              $7_1 = $0_1 + ($4_1 << 3 | 0) | 0;
              HEAP32[($7_1 + 28 | 0) >> 2] = -1;
              HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
              HEAP8[($0_1 + 20 | 0) >> 0] = $4_1 + 1 | 0;
              $8_1 = $675($0_1 | 0, $1_1 | 0, $9_1 | 0) | 0;
              if ($8_1) {
               break label$3
              }
              HEAP8[($0_1 + 20 | 0) >> 0] = (HEAPU8[($0_1 + 20 | 0) >> 0] | 0) + -1 | 0;
              $8_1 = 0;
              break label$3;
             case 5:
              $9_1 = $7_1 + 1 | 0;
              $4_1 = HEAPU8[($0_1 + 20 | 0) >> 0] | 0;
              label$19 : {
               label$20 : {
                label$21 : while (1) {
                 if (($4_1 | 0) < (1 | 0)) {
                  break label$20
                 }
                 $4_1 = $4_1 + -1 | 0;
                 if ((HEAP32[(($0_1 + ($4_1 << 3 | 0) | 0) + 28 | 0) >> 2] | 0 | 0) != (-1 | 0)) {
                  continue label$21
                 }
                 break label$19;
                };
               }
               $4_1 = $493(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 11101 | 0, 0 | 0) | 0;
              }
              $4_1 = $0_1 + ($4_1 << 3 | 0) | 0;
              $7_1 = $4_1 + 28 | 0;
              HEAP32[$7_1 >> 2] = $1_1 - (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0;
              $8_1 = $675($0_1 | 0, $1_1 | 0, $9_1 | 0) | 0;
              if ($8_1) {
               break label$3
              }
              HEAP32[$7_1 >> 2] = -1;
              $8_1 = 0;
              break label$3;
             case 0:
              break label$13;
             default:
              break label$11;
             };
            }
            $10_1 = $7_1 + 1 | 0;
            $2_1 = $10_1;
            if (($10_1 | 0) != ($4_1 | 0)) {
             break label$8
            }
            $8_1 = ($1_1 | 0) == (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) ? $1_1 : 0;
            break label$3;
           }
           label$22 : {
            label$23 : {
             $10_1 = HEAP8[($7_1 + 1 | 0) >> 0] | 0;
             $9_1 = $10_1 & 255 | 0;
             if (($9_1 | 0) == (102 | 0)) {
              break label$23
             }
             label$24 : {
              switch ($10_1 + -48 | 0 | 0) {
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
               break label$22;
              case 50:
               break label$24;
              default:
               break label$10;
              };
             }
             label$25 : {
              $170_1 = $4_1 + -1 | 0;
              $4_1 = $7_1 + 2 | 0;
              if ($170_1 >>> 0 > $4_1 >>> 0) {
               break label$25
              }
              $493(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 11125 | 0, 0 | 0) | 0;
             }
             $8_1 = 0;
             $11_1 = HEAPU8[$1_1 >> 0] | 0;
             if (($11_1 | 0) != (HEAPU8[$4_1 >> 0] | 0 | 0)) {
              break label$3
             }
             $9_1 = 1;
             $4_1 = $1_1 + 1 | 0;
             $12_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($4_1 >>> 0 >= $12_1 >>> 0) {
              break label$3
             }
             $13_1 = HEAPU8[($7_1 + 3 | 0) >> 0] | 0;
             label$26 : while (1) {
              label$27 : {
               label$28 : {
                $10_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
                if (($10_1 | 0) != ($13_1 & 255 | 0 | 0)) {
                 break label$28
                }
                $9_1 = $9_1 + -1 | 0;
                if ($9_1) {
                 break label$27
                }
                $2_1 = $7_1 + 4 | 0;
                $1_1 = $1_1 + 2 | 0;
                continue label$2;
               }
               $9_1 = $9_1 + (($10_1 | 0) == ($11_1 | 0)) | 0;
              }
              $1_1 = $4_1;
              $4_1 = $4_1 + 1 | 0;
              if (($4_1 | 0) != ($12_1 | 0)) {
               continue label$26
              }
              break label$3;
             };
            }
            label$29 : {
             if ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0 | 0) != (91 | 0)) {
              break label$29
             }
             $10_1 = $7_1 + 3 | 0;
             break label$7;
            }
            $493(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 11048 | 0, 0 | 0) | 0;
            $10_1 = $7_1 + 3 | 0;
            $4_1 = HEAP8[($7_1 + 2 | 0) >> 0] | 0;
            if (($4_1 | 0) == (91 | 0)) {
             break label$7
            }
            label$30 : {
             if (($4_1 | 0) == (37 | 0)) {
              break label$30
             }
             $2_1 = $10_1;
             break label$6;
            }
            label$31 : {
             if (($10_1 | 0) != (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
              break label$31
             }
             $493(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 11172 | 0, 0 | 0) | 0;
            }
            $2_1 = $7_1 + 4 | 0;
            break label$6;
           }
           label$32 : {
            label$33 : {
             if ($9_1 >>> 0 < 49 >>> 0) {
              break label$33
             }
             $10_1 = $9_1 + -49 | 0;
             if (($10_1 | 0) >= (HEAPU8[($0_1 + 20 | 0) >> 0] | 0 | 0)) {
              break label$33
             }
             $4_1 = HEAP32[(($0_1 + ($10_1 << 3 | 0) | 0) + 28 | 0) >> 2] | 0;
             if (($4_1 | 0) != (-1 | 0)) {
              break label$32
             }
            }
            $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
            HEAP32[$3_1 >> 2] = $9_1 + -48 | 0;
            $10_1 = $493($4_1 | 0, 11239 | 0, $3_1 | 0) | 0;
            $4_1 = HEAP32[(($0_1 + ($10_1 << 3 | 0) | 0) + 28 | 0) >> 2] | 0;
           }
           $8_1 = 0;
           if (((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - $1_1 | 0) >>> 0 < $4_1 >>> 0) {
            break label$3
           }
           $9_1 = $874(HEAP32[(($0_1 + ($10_1 << 3 | 0) | 0) + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $4_1 | 0) | 0;
           if (!$1_1) {
            break label$3
           }
           if ($9_1) {
            break label$3
           }
           $2_1 = $7_1 + 2 | 0;
           $1_1 = $1_1 + $4_1 | 0;
           continue label$2;
          }
          $10_1 = $7_1 + 1 | 0;
          if (($9_1 | 0) == (91 | 0)) {
           break label$9
          }
          $2_1 = $10_1;
          break label$8;
         }
         label$34 : {
          $10_1 = $7_1 + 1 | 0;
          if (($10_1 | 0) != ($4_1 | 0)) {
           break label$34
          }
          $493(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 11172 | 0, 0 | 0) | 0;
         }
         $2_1 = $7_1 + 2 | 0;
         break label$8;
        }
        $9_1 = (HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) == (94 | 0) ? $7_1 + 2 | 0 : $10_1;
        label$35 : while (1) {
         label$36 : {
          if (($9_1 | 0) != ($4_1 | 0)) {
           break label$36
          }
          $493(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 11207 | 0, 0 | 0) | 0;
         }
         $4_1 = $9_1 + 1 | 0;
         label$37 : {
          label$38 : {
           if ((HEAPU8[$9_1 >> 0] | 0 | 0) == (37 | 0)) {
            break label$38
           }
           $9_1 = $4_1;
           break label$37;
          }
          $9_1 = $4_1 >>> 0 < (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0 ? $9_1 + 2 | 0 : $4_1;
         }
         label$39 : {
          if ((HEAPU8[$9_1 >> 0] | 0 | 0) == (93 | 0)) {
           break label$39
          }
          $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          continue label$35;
         }
         break label$35;
        };
        $2_1 = $9_1 + 1 | 0;
       }
       label$40 : {
        label$41 : {
         $12_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($12_1 >>> 0 <= $1_1 >>> 0) {
          break label$41
         }
         $9_1 = HEAPU8[$1_1 >> 0] | 0;
         label$42 : {
          label$43 : {
           label$44 : {
            label$45 : {
             label$46 : {
              $14_1 = HEAP8[$7_1 >> 0] | 0;
              switch ($14_1 + -37 | 0 | 0) {
              case 9:
               break label$40;
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
               break label$44;
              case 0:
               break label$46;
              default:
               break label$45;
              };
             }
             $8_1 = $687($9_1 | 0, HEAPU8[$10_1 >> 0] | 0 | 0) | 0;
             break label$42;
            }
            if (($14_1 | 0) == (91 | 0)) {
             break label$43
            }
           }
           $8_1 = ($14_1 & 255 | 0 | 0) == ($9_1 | 0);
           break label$42;
          }
          $13_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
          $8_1 = ($13_1 | 0) == (94 | 0);
          $4_1 = $8_1 ? $10_1 : $7_1;
          $15_1 = $4_1 + 1 | 0;
          $16_1 = $2_1 + -1 | 0;
          if ($15_1 >>> 0 >= $16_1 >>> 0) {
           break label$42
          }
          $17_1 = ($13_1 | 0) != (94 | 0);
          label$47 : while (1) {
           $13_1 = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
           label$48 : {
            label$49 : {
             label$50 : {
              $11_1 = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
              if (($11_1 | 0) != (37 | 0)) {
               break label$50
              }
              if (!($687($9_1 | 0, $13_1 | 0) | 0)) {
               break label$49
              }
              $8_1 = $17_1;
              break label$42;
             }
             label$51 : {
              if (($13_1 | 0) != (45 | 0)) {
               break label$51
              }
              $4_1 = $4_1 + 3 | 0;
              if ($4_1 >>> 0 >= $16_1 >>> 0) {
               break label$51
              }
              if ($11_1 >>> 0 > $9_1 >>> 0) {
               break label$48
              }
              if ((HEAPU8[$4_1 >> 0] | 0) >>> 0 < $9_1 >>> 0) {
               break label$48
              }
              $8_1 = $17_1;
              break label$42;
             }
             $4_1 = $15_1;
             if (($11_1 | 0) != ($9_1 | 0)) {
              break label$48
             }
             $8_1 = $17_1;
             break label$42;
            }
            $4_1 = $4_1 + 2 | 0;
           }
           $15_1 = $4_1 + 1 | 0;
           if ($15_1 >>> 0 < $16_1 >>> 0) {
            continue label$47
           }
           break label$47;
          };
         }
         if ($8_1) {
          break label$40
         }
        }
        $8_1 = 0;
        $4_1 = (HEAPU8[$2_1 >> 0] | 0) + -42 | 0;
        if ($4_1 >>> 0 > 21 >>> 0) {
         break label$3
        }
        if (!((1 << $4_1 | 0) & 2097161 | 0)) {
         break label$3
        }
        $2_1 = $2_1 + 1 | 0;
        continue label$4;
       }
       label$52 : {
        label$53 : {
         label$54 : {
          label$55 : {
           $4_1 = HEAP8[$2_1 >> 0] | 0;
           if (($4_1 | 0) == (63 | 0)) {
            break label$55
           }
           label$56 : {
            switch ($4_1 + -42 | 0 | 0) {
            case 0:
             break label$52;
            case 1:
             break label$53;
            case 3:
             break label$56;
            default:
             break label$54;
            };
           }
           $14_1 = $2_1 + 1 | 0;
           $8_1 = $675($0_1 | 0, $1_1 | 0, $14_1 | 0) | 0;
           if ($8_1) {
            break label$3
           }
           $15_1 = $2_1 + -1 | 0;
           label$57 : while (1) {
            $8_1 = 0;
            if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0 <= $1_1 >>> 0) {
             break label$3
            }
            $9_1 = HEAPU8[$1_1 >> 0] | 0;
            label$58 : {
             label$59 : {
              label$60 : {
               label$61 : {
                label$62 : {
                 label$63 : {
                  $4_1 = HEAP8[$7_1 >> 0] | 0;
                  switch ($4_1 + -37 | 0 | 0) {
                  case 9:
                   break label$58;
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                   break label$61;
                  case 0:
                   break label$63;
                  default:
                   break label$62;
                  };
                 }
                 $2_1 = $687($9_1 | 0, HEAPU8[$10_1 >> 0] | 0 | 0) | 0;
                 break label$59;
                }
                if (($4_1 | 0) == (91 | 0)) {
                 break label$60
                }
               }
               $2_1 = ($4_1 & 255 | 0 | 0) == ($9_1 | 0);
               break label$59;
              }
              $13_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
              $2_1 = ($13_1 | 0) == (94 | 0);
              $4_1 = $2_1 ? $10_1 : $7_1;
              $11_1 = $4_1 + 1 | 0;
              if ($11_1 >>> 0 >= $15_1 >>> 0) {
               break label$59
              }
              $16_1 = ($13_1 | 0) != (94 | 0);
              label$64 : while (1) {
               $13_1 = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
               label$65 : {
                label$66 : {
                 label$67 : {
                  $12_1 = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
                  if (($12_1 | 0) != (37 | 0)) {
                   break label$67
                  }
                  if (!($687($9_1 | 0, $13_1 | 0) | 0)) {
                   break label$66
                  }
                  $2_1 = $16_1;
                  break label$59;
                 }
                 label$68 : {
                  if (($13_1 | 0) != (45 | 0)) {
                   break label$68
                  }
                  $4_1 = $4_1 + 3 | 0;
                  if ($4_1 >>> 0 >= $15_1 >>> 0) {
                   break label$68
                  }
                  if ($12_1 >>> 0 > $9_1 >>> 0) {
                   break label$65
                  }
                  if ((HEAPU8[$4_1 >> 0] | 0) >>> 0 < $9_1 >>> 0) {
                   break label$65
                  }
                  $2_1 = $16_1;
                  break label$59;
                 }
                 $4_1 = $11_1;
                 if (($12_1 | 0) != ($9_1 | 0)) {
                  break label$65
                 }
                 $2_1 = $16_1;
                 break label$59;
                }
                $4_1 = $4_1 + 2 | 0;
               }
               $11_1 = $4_1 + 1 | 0;
               if ($11_1 >>> 0 < $15_1 >>> 0) {
                continue label$64
               }
               break label$64;
              };
             }
             if (!$2_1) {
              break label$3
             }
            }
            $1_1 = $1_1 + 1 | 0;
            $8_1 = $675($0_1 | 0, $1_1 | 0, $14_1 | 0) | 0;
            if (!$8_1) {
             continue label$57
            }
            break label$3;
           };
          }
          $2_1 = $2_1 + 1 | 0;
          $8_1 = $675($0_1 | 0, $5_1 | 0, $2_1 | 0) | 0;
          if (!$8_1) {
           continue label$4
          }
          break label$3;
         }
         $1_1 = $5_1;
         continue label$2;
        }
        $1_1 = $1_1 + 1 | 0;
       }
       $4_1 = 0;
       label$69 : {
        if ($12_1 >>> 0 <= $1_1 >>> 0) {
         break label$69
        }
        $16_1 = $2_1 + -1 | 0;
        $6_1 = $14_1 + -37 | 0;
        $5_1 = ($14_1 | 0) == (91 | 0);
        $17_1 = $14_1 & 255 | 0;
        $9_1 = $1_1;
        label$70 : while (1) {
         $13_1 = HEAPU8[$9_1 >> 0] | 0;
         label$71 : {
          label$72 : {
           label$73 : {
            label$74 : {
             switch ($6_1 | 0) {
             case 0:
              $8_1 = $687($13_1 | 0, HEAPU8[$10_1 >> 0] | 0 | 0) | 0;
              break label$72;
             default:
              if ($5_1) {
               break label$73
              }
              break;
             case 9:
              break label$71;
             case 1:
             case 2:
             case 3:
             case 4:
             case 5:
             case 6:
             case 7:
             case 8:
              break label$74;
             };
            }
            $8_1 = ($17_1 | 0) == ($13_1 | 0);
            break label$72;
           }
           $11_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
           $8_1 = ($11_1 | 0) == (94 | 0);
           $9_1 = $8_1 ? $10_1 : $7_1;
           $14_1 = $9_1 + 1 | 0;
           if ($14_1 >>> 0 >= $16_1 >>> 0) {
            break label$72
           }
           $18_1 = ($11_1 | 0) != (94 | 0);
           label$77 : while (1) {
            $11_1 = HEAPU8[($9_1 + 2 | 0) >> 0] | 0;
            label$78 : {
             label$79 : {
              label$80 : {
               $15_1 = HEAPU8[($9_1 + 1 | 0) >> 0] | 0;
               if (($15_1 | 0) != (37 | 0)) {
                break label$80
               }
               if (!($687($13_1 | 0, $11_1 | 0) | 0)) {
                break label$79
               }
               $8_1 = $18_1;
               break label$72;
              }
              label$81 : {
               if (($11_1 | 0) != (45 | 0)) {
                break label$81
               }
               $9_1 = $9_1 + 3 | 0;
               if ($9_1 >>> 0 >= $16_1 >>> 0) {
                break label$81
               }
               if ($15_1 >>> 0 > $13_1 >>> 0) {
                break label$78
               }
               if ((HEAPU8[$9_1 >> 0] | 0) >>> 0 < $13_1 >>> 0) {
                break label$78
               }
               $8_1 = $18_1;
               break label$72;
              }
              $9_1 = $14_1;
              if (($15_1 | 0) != ($13_1 | 0)) {
               break label$78
              }
              $8_1 = $18_1;
              break label$72;
             }
             $9_1 = $9_1 + 2 | 0;
            }
            $14_1 = $9_1 + 1 | 0;
            if ($14_1 >>> 0 < $16_1 >>> 0) {
             continue label$77
            }
            break label$77;
           };
          }
          if (!$8_1) {
           break label$69
          }
         }
         $4_1 = $4_1 + 1 | 0;
         $9_1 = $1_1 + $4_1 | 0;
         if ($12_1 >>> 0 > $9_1 >>> 0) {
          continue label$70
         }
         break label$70;
        };
       }
       $7_1 = $2_1 + 1 | 0;
       label$82 : while (1) {
        $8_1 = 0;
        if (($4_1 | 0) < (0 | 0)) {
         break label$3
        }
        $9_1 = $1_1 + $4_1 | 0;
        $4_1 = $4_1 + -1 | 0;
        $8_1 = $675($0_1 | 0, $9_1 | 0, $7_1 | 0) | 0;
        if (!$8_1) {
         continue label$82
        }
        break label$3;
       };
      }
      $4_1 = (HEAPU8[($7_1 + 3 | 0) >> 0] | 0 | 0) == (94 | 0) ? $7_1 + 4 | 0 : $10_1;
      label$83 : while (1) {
       label$84 : {
        if (($4_1 | 0) != (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
         break label$84
        }
        $493(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 11207 | 0, 0 | 0) | 0;
       }
       $9_1 = $4_1 + 1 | 0;
       label$85 : {
        label$86 : {
         if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (37 | 0)) {
          break label$86
         }
         $4_1 = $9_1;
         break label$85;
        }
        $4_1 = $9_1 >>> 0 < (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0 ? $4_1 + 2 | 0 : $9_1;
       }
       if ((HEAPU8[$4_1 >> 0] | 0 | 0) != (93 | 0)) {
        continue label$83
       }
       break label$83;
      };
      $2_1 = $4_1 + 1 | 0;
     }
     $9_1 = $7_1 + 2 | 0;
     $8_1 = 0;
     $4_1 = 0;
     label$87 : {
      if (($1_1 | 0) == (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$87
      }
      $4_1 = HEAPU8[$6_1 >> 0] | 0;
     }
     $13_1 = HEAPU8[$10_1 >> 0] | 0;
     $16_1 = ($13_1 | 0) == (94 | 0);
     $9_1 = $16_1 ? $10_1 : $9_1;
     $12_1 = $9_1 + 1 | 0;
     $7_1 = $2_1 + -1 | 0;
     if ($12_1 >>> 0 >= $7_1 >>> 0) {
      break label$3
     }
     $15_1 = $4_1 & 255 | 0;
     $14_1 = ($13_1 | 0) != (94 | 0);
     $11_1 = $12_1;
     $4_1 = $9_1;
     label$88 : {
      label$89 : while (1) {
       $10_1 = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
       label$90 : {
        label$91 : {
         label$92 : {
          $13_1 = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
          if (($13_1 | 0) != (37 | 0)) {
           break label$92
          }
          if (!($687($15_1 | 0, $10_1 | 0) | 0)) {
           break label$91
          }
          $4_1 = $14_1;
          break label$88;
         }
         label$93 : {
          if (($10_1 | 0) != (45 | 0)) {
           break label$93
          }
          $4_1 = $4_1 + 3 | 0;
          if ($4_1 >>> 0 >= $7_1 >>> 0) {
           break label$93
          }
          if ($13_1 >>> 0 > $15_1 >>> 0) {
           break label$90
          }
          if ((HEAPU8[$4_1 >> 0] | 0) >>> 0 < $15_1 >>> 0) {
           break label$90
          }
          $4_1 = $14_1;
          break label$88;
         }
         $4_1 = $11_1;
         if (($13_1 | 0) != ($15_1 | 0)) {
          break label$90
         }
         $4_1 = $14_1;
         break label$88;
        }
        $4_1 = $4_1 + 2 | 0;
       }
       $11_1 = $4_1 + 1 | 0;
       if ($11_1 >>> 0 < $7_1 >>> 0) {
        continue label$89
       }
       break label$89;
      };
      $4_1 = $16_1;
     }
     if ($4_1) {
      break label$3
     }
     $13_1 = HEAPU8[$1_1 >> 0] | 0;
     label$94 : {
      label$95 : while (1) {
       $4_1 = HEAPU8[($9_1 + 2 | 0) >> 0] | 0;
       label$96 : {
        label$97 : {
         $10_1 = HEAPU8[($9_1 + 1 | 0) >> 0] | 0;
         if (($10_1 | 0) != (37 | 0)) {
          break label$97
         }
         if ($687($13_1 | 0, $4_1 | 0) | 0) {
          break label$94
         }
         $9_1 = $9_1 + 2 | 0;
         break label$96;
        }
        label$98 : {
         if (($4_1 | 0) != (45 | 0)) {
          break label$98
         }
         $9_1 = $9_1 + 3 | 0;
         if ($9_1 >>> 0 >= $7_1 >>> 0) {
          break label$98
         }
         if ($10_1 >>> 0 > $13_1 >>> 0) {
          break label$96
         }
         if ((HEAPU8[$9_1 >> 0] | 0) >>> 0 < $13_1 >>> 0) {
          break label$96
         }
         break label$94;
        }
        $9_1 = $12_1;
        if (($10_1 | 0) == ($13_1 | 0)) {
         break label$94
        }
       }
       $12_1 = $9_1 + 1 | 0;
       if ($12_1 >>> 0 < $7_1 >>> 0) {
        continue label$95
       }
       break label$95;
      };
      $14_1 = $16_1;
     }
     if ($14_1) {
      continue label$4
     }
     break label$4;
    };
   }
   break label$2;
  };
  HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $676($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $506($0_1 | 0, 1 | 0, $1_1 + 12 | 0 | 0) | 0;
  i64toi32_i32$1 = 0;
  $31($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0);
  global$0 = $1_1 + 16 | 0;
  return 1 | 0;
 }
 
 function $677($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 544 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  $3_1 = $506($0_1 | 0, 1 | 0, $1_1 + 540 | 0 | 0) | 0;
  $4_1 = $517($0_1 | 0, $1_1 + 8 | 0 | 0, HEAP32[($1_1 + 540 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($1_1 + 540 | 0) >> 2] | 0) {
     break label$2
    }
    $0_1 = 0;
    break label$1;
   }
   label$3 : while (1) {
    HEAP8[($4_1 + $2_1 | 0) >> 0] = $740(HEAPU8[($3_1 + $2_1 | 0) >> 0] | 0 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    $0_1 = HEAP32[($1_1 + 540 | 0) >> 2] | 0;
    if ($2_1 >>> 0 < $0_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  $516($1_1 + 8 | 0 | 0, $0_1 | 0);
  global$0 = $1_1 + 544 | 0;
  return 1 | 0;
 }
 
 function $678($0_1) {
  $0_1 = $0_1 | 0;
  return $670($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $679($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $6_1 = 0, $7_1 = 0, $7$hi = 0, i64toi32_i32$5 = 0, $3_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $5_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $36$hi = 0, $38$hi = 0;
  $1_1 = global$0 - 544 | 0;
  global$0 = $1_1;
  $2_1 = 1;
  $3_1 = $506($0_1 | 0, 1 | 0, $1_1 + 540 | 0 | 0) | 0;
  i64toi32_i32$0 = $512($0_1 | 0, 2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  $4_1 = $505($0_1 | 0, 3 | 0, 11297 | 0, $1_1 + 536 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $17_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $18_1 = 0
      } else {
       $18_1 = 1
      }
      $19_1 = $18_1;
     } else {
      $19_1 = 0
     }
     $17_1 = $19_1;
    }
    if ($17_1) {
     break label$2
    }
    $33($0_1 | 0, 11297 | 0) | 0;
    break label$1;
   }
   label$3 : {
    label$4 : {
     $2_1 = HEAP32[($1_1 + 536 | 0) >> 2] | 0;
     $5_1 = HEAP32[($1_1 + 540 | 0) >> 2] | 0;
     $6_1 = $2_1 + $5_1 | 0;
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$4
     }
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = __wasm_i64_udiv(2147483647 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $36$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $38$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $36$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$1 = $38$hi;
     i64toi32_i32$0 = $6_1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$3
     }
    }
    $2_1 = $493($0_1 | 0, 11650 | 0, 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$3 = $7$hi;
   $6_1 = $7_1;
   $6_1 = Math_imul($2_1, $6_1 + -1 | 0) + Math_imul($5_1, $6_1) | 0;
   $0_1 = $517($0_1 | 0, $1_1 + 8 | 0 | 0, $6_1 | 0) | 0;
   label$5 : {
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 2;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
     $20_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $21_1 = 0
      } else {
       $21_1 = 1
      }
      $22_1 = $21_1;
     } else {
      $22_1 = 0
     }
     $20_1 = $22_1;
    }
    if ($20_1) {
     break label$5
    }
    label$6 : while (1) {
     $0_1 = ($951($0_1 | 0, $3_1 | 0, HEAP32[($1_1 + 540 | 0) >> 2] | 0 | 0) | 0) + (HEAP32[($1_1 + 540 | 0) >> 2] | 0) | 0;
     label$7 : {
      $2_1 = HEAP32[($1_1 + 536 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = ($951($0_1 | 0, $4_1 | 0, $2_1 | 0) | 0) + (HEAP32[($1_1 + 536 | 0) >> 2] | 0) | 0;
     }
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 2;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
      $23_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
        $24_1 = 0
       } else {
        $24_1 = 1
       }
       $25_1 = $24_1;
      } else {
       $25_1 = 0
      }
      $23_1 = $25_1;
     }
     $2_1 = $23_1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $7_1 = i64toi32_i32$4;
     $7$hi = i64toi32_i32$5;
     if ($2_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $951($0_1 | 0, $3_1 | 0, HEAP32[($1_1 + 540 | 0) >> 2] | 0 | 0) | 0;
   $516($1_1 + 8 | 0 | 0, $6_1 | 0);
   $2_1 = 1;
  }
  global$0 = $1_1 + 544 | 0;
  return $2_1 | 0;
 }
 
 function $680($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 544 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  $3_1 = $506($0_1 | 0, 1 | 0, $1_1 + 540 | 0 | 0) | 0;
  $4_1 = $517($0_1 | 0, $1_1 + 8 | 0 | 0, HEAP32[($1_1 + 540 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    $0_1 = HEAP32[($1_1 + 540 | 0) >> 2] | 0;
    if ($0_1) {
     break label$2
    }
    $0_1 = 0;
    break label$1;
   }
   label$3 : while (1) {
    HEAP8[($4_1 + $2_1 | 0) >> 0] = HEAPU8[($3_1 + ($0_1 + ($2_1 ^ -1 | 0) | 0) | 0) >> 0] | 0;
    $0_1 = HEAP32[($1_1 + 540 | 0) >> 2] | 0;
    $2_1 = $2_1 + 1 | 0;
    if ($0_1 >>> 0 > $2_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  $516($1_1 + 8 | 0 | 0, $0_1 | 0);
  global$0 = $1_1 + 544 | 0;
  return 1 | 0;
 }
 
 function $681($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $6$hi = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $1_1 = 0, i64toi32_i32$6 = 0, $7$hi = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $3_1 = 0, $27$hi = 0, $28$hi = 0, $7_1 = 0, $49$hi = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 1;
  $3_1 = $506($0_1 | 0, 1 | 0, $1_1 + 12 | 0 | 0) | 0;
  i64toi32_i32$0 = $512($0_1 | 0, 2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $6_1 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 1;
    if (($6$hi | 0) < (i64toi32_i32$0 | 0)) {
     $20_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $21_1 = 0
      } else {
       $21_1 = 1
      }
      $22_1 = $21_1;
     } else {
      $22_1 = 0
     }
     $20_1 = $22_1;
    }
    if ($20_1) {
     break label$2
    }
    i64toi32_i32$2 = $6$hi;
    $2_1 = $6_1;
    break label$1;
   }
   i64toi32_i32$2 = $6$hi;
   if (!($6_1 | i64toi32_i32$2 | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$2 = 0;
   $27$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = $27$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $28$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$3 = $28$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$3 | 0)) {
    $23_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$0 >>> 0) {
      $24_1 = 0
     } else {
      $24_1 = 1
     }
     $25_1 = $24_1;
    } else {
     $25_1 = 0
    }
    $23_1 = $25_1;
   }
   if ($23_1) {
    break label$1
   }
   i64toi32_i32$2 = $6$hi;
   $2_1 = ($4_1 + $6_1 | 0) + 1 | 0;
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$2 = -1;
    i64toi32_i32$2 = $513($0_1 | 0, 3 | 0, -1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $6_1 = i64toi32_i32$2;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $7_1 = $4_1;
    $7$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$3 = $4_1;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$2 | 0)) {
     $26_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0) {
       $27_1 = 0
      } else {
       $27_1 = 1
      }
      $28_1 = $27_1;
     } else {
      $28_1 = 0
     }
     $26_1 = $28_1;
    }
    if ($26_1) {
     break label$4
    }
    $5_1 = $4_1;
    break label$3;
   }
   label$5 : {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    if (($6$hi | 0) < (i64toi32_i32$5 | 0)) {
     $29_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $30_1 = 0
      } else {
       $30_1 = 1
      }
      $31_1 = $30_1;
     } else {
      $31_1 = 0
     }
     $29_1 = $31_1;
    }
    if ($29_1) {
     break label$5
    }
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $6$hi;
    $5_1 = $6_1;
    break label$3;
   }
   $5_1 = 0;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
   $49$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$2 = $49$hi;
   i64toi32_i32$5 = i64toi32_i32$1;
   if (($6$hi | 0) < (i64toi32_i32$2 | 0)) {
    $32_1 = 1
   } else {
    if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
      $33_1 = 0
     } else {
      $33_1 = 1
     }
     $34_1 = $33_1;
    } else {
     $34_1 = 0
    }
    $32_1 = $34_1;
   }
   if ($32_1) {
    break label$3
   }
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $6$hi;
   $5_1 = ($4_1 + $6_1 | 0) + 1 | 0;
  }
  label$6 : {
   label$7 : {
    if ($5_1 >>> 0 < $2_1 >>> 0) {
     break label$7
    }
    $32($0_1 | 0, ($3_1 + $2_1 | 0) + -1 | 0 | 0, ($5_1 - $2_1 | 0) + 1 | 0 | 0) | 0;
    break label$6;
   }
   $33($0_1 | 0, 11297 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return 1 | 0;
 }
 
 function $682($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 544 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  $3_1 = $506($0_1 | 0, 1 | 0, $1_1 + 540 | 0 | 0) | 0;
  $4_1 = $517($0_1 | 0, $1_1 + 8 | 0 | 0, HEAP32[($1_1 + 540 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($1_1 + 540 | 0) >> 2] | 0) {
     break label$2
    }
    $0_1 = 0;
    break label$1;
   }
   label$3 : while (1) {
    HEAP8[($4_1 + $2_1 | 0) >> 0] = $736(HEAPU8[($3_1 + $2_1 | 0) >> 0] | 0 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    $0_1 = HEAP32[($1_1 + 540 | 0) >> 2] | 0;
    if ($2_1 >>> 0 < $0_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  $516($1_1 + 8 | 0 | 0, $0_1 | 0);
  global$0 = $1_1 + 544 | 0;
  return 1 | 0;
 }
 
 function $683($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $3_1 = 0, $11_1 = 0, $6_1 = 0, $11$hi = 0, $4_1 = 0, $8_1 = 0, i64toi32_i32$4 = 0, $10_1 = 0, $10$hi = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $12_1 = 0.0, $42_1 = 0, $89_1 = 0, $89$hi = 0, $93$hi = 0, $96$hi = 0, $128_1 = 0, $167$hi = 0, $196_1 = 0, $9_1 = 0, $361_1 = 0;
  $1_1 = global$0 - 608 | 0;
  global$0 = $1_1;
  $2_1 = $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 1;
  HEAP32[($1_1 + 68 | 0) >> 2] = 1;
  HEAP32[($1_1 + 72 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 64 | 0) >> 2] = $0_1;
  HEAP32[($1_1 + 60 | 0) >> 2] = $2_1;
  $29($0_1 | 0);
  $487($0_1 | 0, $1_1 + 80 | 0 | 0);
  label$1 : {
   if (!(HEAPU8[$2_1 >> 0] | 0)) {
    break label$1
   }
   $3_1 = 1;
   $4_1 = 0;
   label$2 : while (1) {
    $5_1 = $3_1;
    $6_1 = $684($1_1 + 64 | 0 | 0, $4_1 | 0, $1_1 + 60 | 0 | 0, $1_1 + 56 | 0 | 0, $1_1 + 52 | 0 | 0) | 0;
    $2_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
    $3_1 = $2_1 + -1 | 0;
    HEAP32[($1_1 + 52 | 0) >> 2] = $3_1;
    $4_1 = $2_1 + $4_1 | 0;
    $7_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
    label$3 : {
     if (($2_1 | 0) < (1 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
       if ($2_1 >>> 0 < (HEAP32[($1_1 + 84 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       $489($1_1 + 80 | 0 | 0, 1 | 0) | 0;
       $2_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
      }
      HEAP32[($1_1 + 88 | 0) >> 2] = $2_1 + 1 | 0;
      HEAP8[((HEAP32[($1_1 + 80 | 0) >> 2] | 0) + $2_1 | 0) >> 0] = 0;
      $2_1 = ($3_1 | 0) > (0 | 0);
      $3_1 = $3_1 + -1 | 0;
      if ($2_1) {
       continue label$4
      }
      break label$4;
     };
     HEAP32[($1_1 + 52 | 0) >> 2] = -1;
    }
    $4_1 = $4_1 + $7_1 | 0;
    $3_1 = $5_1 + 1 | 0;
    label$6 : {
     label$7 : {
      switch ($6_1 | 0) {
      case 0:
       i64toi32_i32$0 = $512($0_1 | 0, $3_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$1;
       label$15 : {
        if (($7_1 | 0) > (7 | 0)) {
         break label$15
        }
        label$16 : {
         i64toi32_i32$1 = $10$hi;
         $89_1 = $10_1;
         $89$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $93$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$2 = 1;
         i64toi32_i32$0 = $93$hi;
         i64toi32_i32$3 = ($7_1 << 3 | 0) + -1 | 0;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          $29_1 = 0;
         } else {
          i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
          $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         }
         $11_1 = $29_1;
         $11$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$1 = 0;
         i64toi32_i32$2 = $11$hi;
         i64toi32_i32$3 = $11_1;
         i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
         i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
         i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
         $96$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $89$hi;
         i64toi32_i32$0 = $89_1;
         i64toi32_i32$1 = $96$hi;
         i64toi32_i32$3 = i64toi32_i32$4;
         if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
          $30_1 = 1
         } else {
          if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
            $31_1 = 0
           } else {
            $31_1 = 1
           }
           $32_1 = $31_1;
          } else {
           $32_1 = 0
          }
          $30_1 = $32_1;
         }
         if ($30_1) {
          break label$16
         }
         i64toi32_i32$0 = $10$hi;
         i64toi32_i32$0 = $11$hi;
         i64toi32_i32$0 = $10$hi;
         i64toi32_i32$3 = $10_1;
         i64toi32_i32$5 = $11$hi;
         i64toi32_i32$1 = $11_1;
         if ((i64toi32_i32$0 | 0) < (i64toi32_i32$5 | 0)) {
          $33_1 = 1
         } else {
          if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
           if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0) {
            $34_1 = 0
           } else {
            $34_1 = 1
           }
           $35_1 = $34_1;
          } else {
           $35_1 = 0
          }
          $33_1 = $35_1;
         }
         if ($33_1) {
          break label$15
         }
        }
        $492($0_1 | 0, $3_1 | 0, 11677 | 0) | 0;
       }
       $5_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
       $6_1 = $489($1_1 + 80 | 0 | 0, $7_1 | 0) | 0;
       $8_1 = $7_1 + -1 | 0;
       i64toi32_i32$3 = $10$hi;
       HEAP8[($6_1 + ($5_1 ? 0 : $8_1) | 0) >> 0] = $10_1;
       $2_1 = 1;
       $11_1 = $10_1;
       $11$hi = i64toi32_i32$3;
       label$17 : {
        if (($7_1 | 0) < (2 | 0)) {
         break label$17
        }
        label$18 : while (1) {
         $128_1 = $6_1 + ($5_1 ? $2_1 : $8_1 - $2_1 | 0) | 0;
         i64toi32_i32$3 = $11$hi;
         i64toi32_i32$1 = $11_1;
         i64toi32_i32$0 = 0;
         i64toi32_i32$5 = 8;
         i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $36_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
         } else {
          i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
          $36_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
         }
         $11_1 = $36_1;
         $11$hi = i64toi32_i32$0;
         HEAP8[$128_1 >> 0] = $11_1;
         $2_1 = $2_1 + 1 | 0;
         if (($2_1 | 0) != ($7_1 | 0)) {
          continue label$18
         }
         break label$18;
        };
        if (($7_1 | 0) < (9 | 0)) {
         break label$17
        }
        $2_1 = 8;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$3 = $10_1;
        i64toi32_i32$1 = -1;
        i64toi32_i32$5 = -1;
        if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
         $37_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$5 >>> 0) {
           $38_1 = 0
          } else {
           $38_1 = 1
          }
          $39_1 = $38_1;
         } else {
          $39_1 = 0
         }
         $37_1 = $39_1;
        }
        if ($37_1) {
         break label$17
        }
        label$19 : while (1) {
         HEAP8[($6_1 + ($5_1 ? $2_1 : $8_1 - $2_1 | 0) | 0) >> 0] = 255;
         $2_1 = $2_1 + 1 | 0;
         if (($2_1 | 0) != ($7_1 | 0)) {
          continue label$19
         }
         break label$19;
        };
       }
       HEAP32[($1_1 + 88 | 0) >> 2] = (HEAP32[($1_1 + 88 | 0) >> 2] | 0) + $7_1 | 0;
       break label$6;
      case 1:
       i64toi32_i32$3 = $512($0_1 | 0, $3_1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $11_1 = i64toi32_i32$3;
       $11$hi = i64toi32_i32$0;
       label$20 : {
        if (($7_1 | 0) > (7 | 0)) {
         break label$20
        }
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$0 = 0;
        $167$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $11$hi;
        i64toi32_i32$5 = $11_1;
        i64toi32_i32$3 = $167$hi;
        i64toi32_i32$1 = $7_1 << 3 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
         i64toi32_i32$3 = 0;
         $40_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
        } else {
         i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
         $40_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
        }
        if (!($40_1 | i64toi32_i32$3 | 0)) {
         break label$20
        }
        $492($0_1 | 0, $3_1 | 0, 11694 | 0) | 0;
       }
       $5_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
       $6_1 = $489($1_1 + 80 | 0 | 0, $7_1 | 0) | 0;
       $8_1 = $7_1 + -1 | 0;
       i64toi32_i32$3 = $11$hi;
       HEAP8[($6_1 + ($5_1 ? 0 : $8_1) | 0) >> 0] = $11_1;
       $2_1 = 1;
       label$21 : {
        if (($7_1 | 0) < (2 | 0)) {
         break label$21
        }
        label$22 : while (1) {
         $196_1 = $6_1 + ($5_1 ? $2_1 : $8_1 - $2_1 | 0) | 0;
         i64toi32_i32$3 = $11$hi;
         i64toi32_i32$0 = $11_1;
         i64toi32_i32$5 = 0;
         i64toi32_i32$1 = 8;
         i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = 0;
          $41_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
         } else {
          i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
          $41_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
         }
         $11_1 = $41_1;
         $11$hi = i64toi32_i32$5;
         HEAP8[$196_1 >> 0] = $11_1;
         $2_1 = $2_1 + 1 | 0;
         if (($2_1 | 0) != ($7_1 | 0)) {
          continue label$22
         }
         break label$22;
        };
       }
       HEAP32[($1_1 + 88 | 0) >> 2] = (HEAP32[($1_1 + 88 | 0) >> 2] | 0) + $7_1 | 0;
       break label$6;
      case 2:
       $2_1 = $489($1_1 + 80 | 0 | 0, $7_1 | 0) | 0;
       $12_1 = +$510($0_1 | 0, $3_1 | 0);
       label$23 : {
        label$24 : {
         switch ($7_1 + -4 | 0 | 0) {
         case 0:
          HEAPF32[($1_1 + 8 | 0) >> 2] = Math_fround($12_1);
          break label$23;
         default:
          break label$24;
         };
        }
        HEAPF64[($1_1 + 8 | 0) >> 3] = $12_1;
       }
       label$26 : {
        label$27 : {
         if ((HEAP32[($1_1 + 68 | 0) >> 2] | 0 | 0) != (1 | 0)) {
          break label$27
         }
         $5_1 = $1_1 + 8 | 0;
         $6_1 = $7_1;
         label$28 : {
          if ($7_1) {
           break label$28
          }
          $7_1 = 0;
          break label$26;
         }
         label$29 : while (1) {
          HEAP8[$2_1 >> 0] = HEAPU8[$5_1 >> 0] | 0;
          $2_1 = $2_1 + 1 | 0;
          $5_1 = $5_1 + 1 | 0;
          $6_1 = $6_1 + -1 | 0;
          if ($6_1) {
           continue label$29
          }
          break label$26;
         };
        }
        label$30 : {
         if ($7_1) {
          break label$30
         }
         $7_1 = 0;
         break label$26;
        }
        $2_1 = ($7_1 + $2_1 | 0) + -1 | 0;
        $5_1 = $1_1 + 8 | 0;
        label$31 : while (1) {
         HEAP8[$2_1 >> 0] = HEAPU8[$5_1 >> 0] | 0;
         $2_1 = $2_1 + -1 | 0;
         $5_1 = $5_1 + 1 | 0;
         $7_1 = $7_1 + -1 | 0;
         if ($7_1) {
          continue label$31
         }
         break label$31;
        };
        $7_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
       }
       HEAP32[($1_1 + 88 | 0) >> 2] = (HEAP32[($1_1 + 88 | 0) >> 2] | 0) + $7_1 | 0;
       break label$6;
      case 3:
       $5_1 = $506($0_1 | 0, $3_1 | 0, $1_1 + 8 | 0 | 0) | 0;
       label$32 : {
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        if ($2_1 >>> 0 <= $7_1 >>> 0) {
         break label$32
        }
        $492($0_1 | 0, $3_1 | 0, 11712 | 0) | 0;
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       }
       $515($1_1 + 80 | 0 | 0, $5_1 | 0, $2_1 | 0);
       $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       HEAP32[($1_1 + 8 | 0) >> 2] = $2_1 + 1 | 0;
       if ($2_1 >>> 0 >= $7_1 >>> 0) {
        break label$6
       }
       label$33 : while (1) {
        label$34 : {
         $2_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
         if ($2_1 >>> 0 < (HEAP32[($1_1 + 84 | 0) >> 2] | 0) >>> 0) {
          break label$34
         }
         $489($1_1 + 80 | 0 | 0, 1 | 0) | 0;
         $2_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
        }
        HEAP32[($1_1 + 88 | 0) >> 2] = $2_1 + 1 | 0;
        HEAP8[((HEAP32[($1_1 + 80 | 0) >> 2] | 0) + $2_1 | 0) >> 0] = 0;
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        HEAP32[($1_1 + 8 | 0) >> 2] = $2_1 + 1 | 0;
        if ($2_1 >>> 0 < $7_1 >>> 0) {
         continue label$33
        }
        break label$6;
       };
      case 4:
       $9_1 = $506($0_1 | 0, $3_1 | 0, $1_1 + 8 | 0 | 0) | 0;
       label$35 : {
        if (($7_1 | 0) > (3 | 0)) {
         break label$35
        }
        if (!((HEAP32[($1_1 + 8 | 0) >> 2] | 0) >>> ($7_1 << 3 | 0) | 0)) {
         break label$35
        }
        $492($0_1 | 0, $3_1 | 0, 11742 | 0) | 0;
       }
       $5_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
       $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       $6_1 = $489($1_1 + 80 | 0 | 0, $7_1 | 0) | 0;
       $8_1 = $7_1 + -1 | 0;
       HEAP8[($6_1 + ($5_1 ? 0 : $8_1) | 0) >> 0] = $2_1;
       label$36 : {
        if (($7_1 | 0) < (2 | 0)) {
         break label$36
        }
        i64toi32_i32$5 = 0;
        $11_1 = $2_1;
        $11$hi = i64toi32_i32$5;
        $2_1 = 1;
        label$37 : while (1) {
         $361_1 = $6_1 + ($5_1 ? $2_1 : $8_1 - $2_1 | 0) | 0;
         i64toi32_i32$5 = $11$hi;
         i64toi32_i32$3 = $11_1;
         i64toi32_i32$0 = 0;
         i64toi32_i32$1 = 8;
         i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = 0;
          $42_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
         } else {
          i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
          $42_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
         }
         $11_1 = $42_1;
         $11$hi = i64toi32_i32$0;
         HEAP8[$361_1 >> 0] = $11_1;
         $2_1 = $2_1 + 1 | 0;
         if (($2_1 | 0) != ($7_1 | 0)) {
          continue label$37
         }
         break label$37;
        };
       }
       HEAP32[($1_1 + 88 | 0) >> 2] = (HEAP32[($1_1 + 88 | 0) >> 2] | 0) + $7_1 | 0;
       $515($1_1 + 80 | 0 | 0, $9_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0);
       $4_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + $4_1 | 0;
       break label$6;
      case 5:
       label$38 : {
        $7_1 = $506($0_1 | 0, $3_1 | 0, $1_1 + 8 | 0 | 0) | 0;
        $2_1 = $961($7_1 | 0) | 0;
        if (($2_1 | 0) == (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
         break label$38
        }
        $492($0_1 | 0, $3_1 | 0, 11343 | 0) | 0;
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       }
       $515($1_1 + 80 | 0 | 0, $7_1 | 0, $2_1 | 0);
       label$39 : {
        $2_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
        if ($2_1 >>> 0 < (HEAP32[($1_1 + 84 | 0) >> 2] | 0) >>> 0) {
         break label$39
        }
        $489($1_1 + 80 | 0 | 0, 1 | 0) | 0;
        $2_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
       }
       HEAP32[($1_1 + 88 | 0) >> 2] = $2_1 + 1 | 0;
       HEAP8[((HEAP32[($1_1 + 80 | 0) >> 2] | 0) + $2_1 | 0) >> 0] = 0;
       $4_1 = ($4_1 + (HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0) + 1 | 0;
       break label$6;
      case 6:
       label$40 : {
        $2_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
        if ($2_1 >>> 0 < (HEAP32[($1_1 + 84 | 0) >> 2] | 0) >>> 0) {
         break label$40
        }
        $489($1_1 + 80 | 0 | 0, 1 | 0) | 0;
        $2_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
       }
       HEAP32[($1_1 + 88 | 0) >> 2] = $2_1 + 1 | 0;
       HEAP8[((HEAP32[($1_1 + 80 | 0) >> 2] | 0) + $2_1 | 0) >> 0] = 0;
       break;
      case 7:
      case 8:
       break label$7;
      default:
       break label$6;
      };
     }
     $3_1 = $5_1;
    }
    if (HEAPU8[(HEAP32[($1_1 + 60 | 0) >> 2] | 0) >> 0] | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  $491($1_1 + 80 | 0 | 0);
  global$0 = $1_1 + 608 | 0;
  return 1 | 0;
 }
 
 function $684($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = $688($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $3_1 = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
  label$1 : {
   if (($6_1 | 0) != (7 | 0)) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[(HEAP32[$2_1 >> 2] | 0) >> 0] | 0)) {
     break label$2
    }
    $2_1 = $688($0_1 | 0, $2_1 | 0, $5_1 + 12 | 0 | 0) | 0;
    $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    if (($2_1 | 0) == (3 | 0)) {
     break label$2
    }
    if ($3_1) {
     break label$1
    }
   }
   $492(HEAP32[$0_1 >> 2] | 0 | 0, 1 | 0, 11783 | 0) | 0;
  }
  $2_1 = 0;
  label$3 : {
   if (($6_1 | 0) == (3 | 0)) {
    break label$3
   }
   if (($3_1 | 0) < (2 | 0)) {
    break label$3
   }
   label$4 : {
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($3_1 | 0) <= ($2_1 | 0)) {
     break label$4
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
    $3_1 = $2_1;
   }
   label$5 : {
    $2_1 = $3_1 + -1 | 0;
    if (!($3_1 & $2_1 | 0)) {
     break label$5
    }
    $492(HEAP32[$0_1 >> 2] | 0 | 0, 1 | 0, 11818 | 0) | 0;
   }
   $2_1 = ($3_1 - ($2_1 & $1_1 | 0) | 0) & $2_1 | 0;
  }
  HEAP32[$4_1 >> 2] = $2_1;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $685($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  $3_1 = $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
  i64toi32_i32$0 = 1;
  HEAP32[($1_1 + 20 | 0) >> 2] = 1;
  HEAP32[($1_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 16 | 0) >> 2] = $0_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (HEAPU8[$3_1 >> 0] | 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$3 : while (1) {
    label$4 : {
     if ((($684($1_1 + 16 | 0 | 0, $2_1 | 0, $1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0, $1_1 + 4 | 0 | 0) | 0) & -2 | 0 | 0) != (4 | 0)) {
      break label$4
     }
     $492($0_1 | 0, 1 | 0, 11961 | 0) | 0;
    }
    $3_1 = (HEAP32[($1_1 + 8 | 0) >> 2] | 0) + (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
    label$5 : {
     if ($2_1 >>> 0 <= (2147483647 - $3_1 | 0) >>> 0) {
      break label$5
     }
     $492($0_1 | 0, 1 | 0, 11984 | 0) | 0;
    }
    $2_1 = $3_1 + $2_1 | 0;
    if (HEAPU8[(HEAP32[($1_1 + 12 | 0) >> 2] | 0) >> 0] | 0) {
     continue label$3
    }
    break label$3;
   };
   i64toi32_i32$0 = 0;
   $4_1 = $2_1;
   $4$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $4$hi;
  $31($0_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
  global$0 = $1_1 + 32 | 0;
  return 1 | 0;
 }
 
 function $686($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, i64toi32_i32$5 = 0, $1_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $12$hi = 0, $3_1 = 0, $12_1 = 0, $9_1 = 0, $11_1 = 0, $4_1 = 0, $7_1 = 0, $10_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $13$hi = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $37$hi = 0, $38$hi = 0, $101$hi = 0, $112_1 = 0, $112$hi = 0, $121_1 = 0, $122_1 = 0, $122$hi = 0, $126$hi = 0, $129$hi = 0, $135_1 = 0, $228$hi = 0, $239_1 = 0, $239$hi = 0;
  $1_1 = global$0 - 96 | 0;
  global$0 = $1_1;
  $2_1 = 1;
  $3_1 = $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
  HEAP32[($1_1 + 76 | 0) >> 2] = $3_1;
  $4_1 = $506($0_1 | 0, 2 | 0, $1_1 + 72 | 0 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $513($0_1 | 0, 3 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  $5_1 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $36_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $37_1 = 0
      } else {
       $37_1 = 1
      }
      $38_1 = $37_1;
     } else {
      $38_1 = 0
     }
     $36_1 = $38_1;
    }
    if ($36_1) {
     break label$2
    }
    i64toi32_i32$2 = $12$hi;
    $2_1 = $12_1;
    break label$1;
   }
   i64toi32_i32$2 = $12$hi;
   if (!($12_1 | i64toi32_i32$2 | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $12$hi;
   i64toi32_i32$2 = 0;
   $37$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = $37$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$3 = $38$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$3 | 0)) {
    $39_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$0 >>> 0) {
      $40_1 = 0
     } else {
      $40_1 = 1
     }
     $41_1 = $40_1;
    } else {
     $41_1 = 0
    }
    $39_1 = $41_1;
   }
   if ($39_1) {
    break label$1
   }
   i64toi32_i32$2 = $12$hi;
   $2_1 = ($5_1 + $12_1 | 0) + 1 | 0;
  }
  label$3 : {
   $6_1 = $2_1 + -1 | 0;
   if ($6_1 >>> 0 <= $5_1 >>> 0) {
    break label$3
   }
   $492($0_1 | 0, 3 | 0, 12008 | 0) | 0;
  }
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$2 = 1;
  HEAP32[($1_1 + 84 | 0) >> 2] = 1;
  HEAP32[($1_1 + 88 | 0) >> 2] = i64toi32_i32$2;
  HEAP32[($1_1 + 80 | 0) >> 2] = $0_1;
  label$4 : {
   label$5 : {
    if (HEAPU8[$3_1 >> 0] | 0) {
     break label$5
    }
    $7_1 = 0;
    break label$4;
   }
   $7_1 = 0;
   label$6 : while (1) {
    $5_1 = $7_1;
    $8_1 = $684($1_1 + 80 | 0 | 0, $6_1 | 0, $1_1 + 76 | 0 | 0, $1_1 + 68 | 0 | 0, $1_1 + 64 | 0 | 0) | 0;
    label$7 : {
     $2_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
     $3_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
     if (($2_1 + $3_1 | 0) >>> 0 <= ((HEAP32[($1_1 + 72 | 0) >> 2] | 0) - $6_1 | 0) >>> 0) {
      break label$7
     }
     $492($0_1 | 0, 2 | 0, 12039 | 0) | 0;
    }
    $507($0_1 | 0, 2 | 0, 12061 | 0);
    $7_1 = $5_1 + 1 | 0;
    $9_1 = $3_1 + $6_1 | 0;
    label$8 : {
     label$9 : {
      switch ($8_1 | 0) {
      case 0:
      case 1:
       $10_1 = $4_1 + $9_1 | 0;
       $11_1 = HEAP32[($1_1 + 84 | 0) >> 2] | 0;
       label$15 : {
        label$16 : {
         if (($2_1 | 0) >= (1 | 0)) {
          break label$16
         }
         i64toi32_i32$2 = 0;
         $12_1 = 0;
         $12$hi = i64toi32_i32$2;
         break label$15;
        }
        $6_1 = ($2_1 | 0) < (8 | 0) ? $2_1 : 8;
        i64toi32_i32$2 = 0;
        $12_1 = 0;
        $12$hi = i64toi32_i32$2;
        label$17 : while (1) {
         i64toi32_i32$2 = $12$hi;
         i64toi32_i32$0 = $12_1;
         i64toi32_i32$5 = 0;
         i64toi32_i32$3 = 8;
         i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
          $42_1 = 0;
         } else {
          i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
          $42_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
         }
         $101$hi = i64toi32_i32$5;
         $5_1 = $6_1 + -1 | 0;
         i64toi32_i32$2 = $10_1 + ($11_1 ? $5_1 : $2_1 - $6_1 | 0) | 0;
         i64toi32_i32$5 = HEAPU8[i64toi32_i32$2 >> 0] | 0;
         i64toi32_i32$0 = 0;
         $112_1 = i64toi32_i32$5;
         $112$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $101$hi;
         i64toi32_i32$2 = $42_1;
         i64toi32_i32$5 = $112$hi;
         i64toi32_i32$3 = $112_1;
         i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
         $12_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
         $12$hi = i64toi32_i32$5;
         $3_1 = ($6_1 | 0) > (1 | 0);
         $6_1 = $5_1;
         if ($3_1) {
          continue label$17
         }
         break label$17;
        };
       }
       label$18 : {
        label$19 : {
         if (($2_1 | 0) > (7 | 0)) {
          break label$19
         }
         if ($8_1) {
          break label$18
         }
         $121_1 = $0_1;
         i64toi32_i32$5 = $12$hi;
         $122_1 = $12_1;
         $122$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $126$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         i64toi32_i32$0 = 1;
         i64toi32_i32$2 = $126$hi;
         i64toi32_i32$3 = ($2_1 << 3 | 0) + -1 | 0;
         i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
          $43_1 = 0;
         } else {
          i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
          $43_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
         }
         $13$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $122$hi;
         i64toi32_i32$5 = $122_1;
         i64toi32_i32$0 = $13$hi;
         i64toi32_i32$3 = $43_1;
         i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
         $129$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $13$hi;
         i64toi32_i32$0 = $129$hi;
         i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
         i64toi32_i32$5 = $13$hi;
         i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
         i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
         i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
         i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
         $31($121_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 | 0);
         break label$8;
        }
        if (($2_1 | 0) == (8 | 0)) {
         break label$18
        }
        $135_1 = $8_1 ? 0 : 255;
        i64toi32_i32$4 = $12$hi;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        if (($12$hi | 0) > (i64toi32_i32$2 | 0)) {
         $44_1 = 1
        } else {
         if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $45_1 = 0
          } else {
           $45_1 = 1
          }
          $46_1 = $45_1;
         } else {
          $46_1 = 0
         }
         $44_1 = $46_1;
        }
        $5_1 = $44_1 ? 0 : $135_1;
        $6_1 = 8;
        label$20 : while (1) {
         label$21 : {
          if (($5_1 | 0) == (HEAPU8[($10_1 + ($11_1 ? $6_1 : $2_1 + ($6_1 ^ -1 | 0) | 0) | 0) >> 0] | 0 | 0)) {
           break label$21
          }
          HEAP32[$1_1 >> 2] = $2_1;
          $493($0_1 | 0, 12111 | 0, $1_1 | 0) | 0;
         }
         $6_1 = $6_1 + 1 | 0;
         if (($6_1 | 0) != ($2_1 | 0)) {
          continue label$20
         }
         break label$20;
        };
       }
       i64toi32_i32$0 = $12$hi;
       $31($0_1 | 0, $12_1 | 0, i64toi32_i32$0 | 0);
       break label$8;
      case 2:
       $6_1 = $4_1 + $9_1 | 0;
       label$22 : {
        label$23 : {
         label$24 : {
          if ((HEAP32[($1_1 + 84 | 0) >> 2] | 0 | 0) != (1 | 0)) {
           break label$24
          }
          $5_1 = $1_1 + 24 | 0;
          $3_1 = $2_1;
          label$25 : {
           if ($2_1) {
            break label$25
           }
           $2_1 = 0;
           break label$22;
          }
          label$26 : while (1) {
           HEAP8[$5_1 >> 0] = HEAPU8[$6_1 >> 0] | 0;
           $5_1 = $5_1 + 1 | 0;
           $6_1 = $6_1 + 1 | 0;
           $3_1 = $3_1 + -1 | 0;
           if ($3_1) {
            continue label$26
           }
           break label$23;
          };
         }
         label$27 : {
          if ($2_1) {
           break label$27
          }
          $2_1 = 0;
          break label$22;
         }
         $5_1 = ($2_1 + ($1_1 + 24 | 0) | 0) + -1 | 0;
         label$28 : while (1) {
          HEAP8[$5_1 >> 0] = HEAPU8[$6_1 >> 0] | 0;
          $5_1 = $5_1 + -1 | 0;
          $6_1 = $6_1 + 1 | 0;
          $2_1 = $2_1 + -1 | 0;
          if ($2_1) {
           continue label$28
          }
          break label$28;
         };
         $2_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
        }
        label$29 : {
         switch ($2_1 + -4 | 0 | 0) {
         case 0:
          $2_1 = 4;
          $30($0_1 | 0, +(+Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2])));
          break label$8;
         case 4:
          break label$29;
         default:
          break label$22;
         };
        }
        $2_1 = 8;
       }
       $30($0_1 | 0, +(+HEAPF64[($1_1 + 24 | 0) >> 3]));
       break label$8;
      case 3:
       $32($0_1 | 0, $4_1 + $9_1 | 0 | 0, $2_1 | 0) | 0;
       break label$8;
      case 4:
       $11_1 = $4_1 + $9_1 | 0;
       label$31 : {
        label$32 : {
         if (($2_1 | 0) >= (1 | 0)) {
          break label$32
         }
         i64toi32_i32$0 = 0;
         $12_1 = 0;
         $12$hi = i64toi32_i32$0;
         break label$31;
        }
        $10_1 = HEAP32[($1_1 + 84 | 0) >> 2] | 0;
        $6_1 = ($2_1 | 0) < (8 | 0) ? $2_1 : 8;
        i64toi32_i32$0 = 0;
        $12_1 = 0;
        $12$hi = i64toi32_i32$0;
        label$33 : while (1) {
         i64toi32_i32$0 = $12$hi;
         i64toi32_i32$3 = $12_1;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = 8;
         i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
          $47_1 = 0;
         } else {
          i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
          $47_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
         }
         $228$hi = i64toi32_i32$4;
         $5_1 = $6_1 + -1 | 0;
         i64toi32_i32$0 = $11_1 + ($10_1 ? $5_1 : $2_1 - $6_1 | 0) | 0;
         i64toi32_i32$4 = HEAPU8[i64toi32_i32$0 >> 0] | 0;
         i64toi32_i32$3 = 0;
         $239_1 = i64toi32_i32$4;
         $239$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $228$hi;
         i64toi32_i32$0 = $47_1;
         i64toi32_i32$4 = $239$hi;
         i64toi32_i32$2 = $239_1;
         i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
         $12_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
         $12$hi = i64toi32_i32$4;
         $3_1 = ($6_1 | 0) > (1 | 0);
         $6_1 = $5_1;
         if ($3_1) {
          continue label$33
         }
         break label$33;
        };
        if (($2_1 | 0) < (9 | 0)) {
         break label$31
        }
        $6_1 = 8;
        label$34 : while (1) {
         label$35 : {
          if (!(HEAPU8[($11_1 + ($10_1 ? $6_1 : $2_1 + ($6_1 ^ -1 | 0) | 0) | 0) >> 0] | 0)) {
           break label$35
          }
          HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
          $493($0_1 | 0, 12111 | 0, $1_1 + 16 | 0 | 0) | 0;
         }
         $6_1 = $6_1 + 1 | 0;
         if (($6_1 | 0) != ($2_1 | 0)) {
          continue label$34
         }
         break label$34;
        };
       }
       label$36 : {
        i64toi32_i32$4 = $12$hi;
        $6_1 = $12_1;
        if (((HEAP32[($1_1 + 72 | 0) >> 2] | 0) - ($2_1 + $9_1 | 0) | 0) >>> 0 >= $6_1 >>> 0) {
         break label$36
        }
        $492($0_1 | 0, 2 | 0, 12039 | 0) | 0;
       }
       $32($0_1 | 0, $11_1 + $2_1 | 0 | 0, $6_1 | 0) | 0;
       $9_1 = $9_1 + $6_1 | 0;
       break label$8;
      case 5:
       label$37 : {
        $6_1 = $4_1 + $9_1 | 0;
        $5_1 = $961($6_1 | 0) | 0;
        $3_1 = $5_1 + $9_1 | 0;
        if ($3_1 >>> 0 < (HEAP32[($1_1 + 72 | 0) >> 2] | 0) >>> 0) {
         break label$37
        }
        $492($0_1 | 0, 2 | 0, 12078 | 0) | 0;
       }
       $32($0_1 | 0, $6_1 | 0, $5_1 | 0) | 0;
       $9_1 = $3_1 + 1 | 0;
       break label$8;
      case 6:
      case 7:
      case 8:
       break label$9;
      default:
       break label$8;
      };
     }
     $7_1 = $5_1;
    }
    $6_1 = $2_1 + $9_1 | 0;
    if (HEAPU8[(HEAP32[($1_1 + 76 | 0) >> 2] | 0) >> 0] | 0) {
     continue label$6
    }
    break label$6;
   };
  }
  i64toi32_i32$4 = 0;
  $31($0_1 | 0, $6_1 + 1 | 0 | 0, i64toi32_i32$4 | 0);
  global$0 = $1_1 + 96 | 0;
  return $7_1 + 1 | 0 | 0;
 }
 
 function $687($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    switch (($740($1_1 | 0) | 0) + -97 | 0 | 0) {
    case 2:
     $0_1 = $741($0_1 | 0) | 0;
     break label$1;
    case 3:
     $0_1 = ($0_1 + -48 | 0) >>> 0 < 10 >>> 0;
     break label$1;
    case 6:
     $0_1 = $738($0_1 | 0) | 0;
     break label$1;
    case 11:
     $0_1 = $737($0_1 | 0) | 0;
     break label$1;
    case 15:
     $0_1 = $734($0_1 | 0) | 0;
     break label$1;
    case 18:
     $0_1 = $742($0_1 | 0) | 0;
     break label$1;
    case 20:
     $0_1 = $739($0_1 | 0) | 0;
     break label$1;
    case 22:
     $0_1 = $743($0_1 | 0) | 0;
     break label$1;
    case 23:
     $0_1 = $733($0_1 | 0) | 0;
     break label$1;
    case 25:
     $0_1 = !$0_1;
     break label$1;
    default:
     return ($1_1 | 0) == ($0_1 | 0) | 0;
    case 0:
     break label$2;
    };
   }
   $0_1 = $735($0_1 | 0) | 0;
  }
  return ($737($1_1 | 0) | 0 ? $0_1 : !$0_1) | 0;
 }
 
 function $688($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $3_1 = 0, $6_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $5_1 = $4_1 + 1 | 0;
  HEAP32[$1_1 >> 2] = $5_1;
  $6_1 = HEAP8[$4_1 >> 0] | 0;
  $7_1 = 0;
  HEAP32[$2_1 >> 2] = 0;
  $4_1 = 5;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       switch ($6_1 + -32 | 0 | 0) {
       case 66:
        HEAP32[$2_1 >> 2] = 1;
        $4_1 = 0;
        break label$1;
       case 34:
        $4_1 = 1;
        HEAP32[$2_1 >> 2] = 1;
        break label$1;
       case 72:
        HEAP32[$2_1 >> 2] = 2;
        $4_1 = 0;
        break label$1;
       case 40:
        HEAP32[$2_1 >> 2] = 2;
        $4_1 = 1;
        break label$1;
       case 76:
        HEAP32[$2_1 >> 2] = 4;
        $4_1 = 0;
        break label$1;
       case 44:
        HEAP32[$2_1 >> 2] = 4;
        $4_1 = 1;
        break label$1;
       case 74:
        HEAP32[$2_1 >> 2] = 8;
        $4_1 = 0;
        break label$1;
       case 42:
        HEAP32[$2_1 >> 2] = 8;
        $4_1 = 1;
        break label$1;
       case 52:
        HEAP32[$2_1 >> 2] = 4;
        $4_1 = 1;
        break label$1;
       case 70:
        HEAP32[$2_1 >> 2] = 4;
        $4_1 = 2;
        break label$1;
       case 68:
        HEAP32[$2_1 >> 2] = 8;
        $4_1 = 2;
        break label$1;
       case 78:
        HEAP32[$2_1 >> 2] = 8;
        $4_1 = 2;
        break label$1;
       case 73:
        $4_1 = 4;
        label$28 : {
         if (((HEAP8[$5_1 >> 0] | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
          break label$28
         }
         $4_1 = 0;
         label$29 : {
          label$30 : while (1) {
           $7_1 = $5_1 + 1 | 0;
           HEAP32[$1_1 >> 2] = $7_1;
           $4_1 = (Math_imul($4_1, 10) + (HEAP8[$5_1 >> 0] | 0) | 0) + -48 | 0;
           if (($4_1 | 0) > (214748363 | 0)) {
            break label$29
           }
           $6_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
           $5_1 = $7_1;
           if (($6_1 + -48 | 0) >>> 0 < 10 >>> 0) {
            continue label$30
           }
           break label$30;
          };
         }
         if (($4_1 + -1 | 0) >>> 0 < 16 >>> 0) {
          break label$28
         }
         $5_1 = HEAP32[$0_1 >> 2] | 0;
         HEAP32[($3_1 + 20 | 0) >> 2] = 16;
         HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
         $4_1 = $493($5_1 | 0, 11921 | 0, $3_1 + 16 | 0 | 0) | 0;
        }
        HEAP32[$2_1 >> 2] = $4_1;
        $4_1 = 0;
        break label$1;
       case 41:
        $4_1 = 4;
        label$31 : {
         if (((HEAP8[$5_1 >> 0] | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
          break label$31
         }
         $4_1 = 0;
         label$32 : {
          label$33 : while (1) {
           $7_1 = $5_1 + 1 | 0;
           HEAP32[$1_1 >> 2] = $7_1;
           $4_1 = (Math_imul($4_1, 10) + (HEAP8[$5_1 >> 0] | 0) | 0) + -48 | 0;
           if (($4_1 | 0) > (214748363 | 0)) {
            break label$32
           }
           $6_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
           $5_1 = $7_1;
           if (($6_1 + -48 | 0) >>> 0 < 10 >>> 0) {
            continue label$33
           }
           break label$33;
          };
         }
         if (($4_1 + -1 | 0) >>> 0 < 16 >>> 0) {
          break label$31
         }
         $5_1 = HEAP32[$0_1 >> 2] | 0;
         HEAP32[($3_1 + 36 | 0) >> 2] = 16;
         HEAP32[($3_1 + 32 | 0) >> 2] = $4_1;
         $4_1 = $493($5_1 | 0, 11921 | 0, $3_1 + 32 | 0 | 0) | 0;
        }
        HEAP32[$2_1 >> 2] = $4_1;
        $4_1 = 1;
        break label$1;
       case 83:
        $4_1 = 4;
        $6_1 = 4;
        label$34 : {
         if (((HEAP8[$5_1 >> 0] | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
          break label$34
         }
         label$35 : {
          label$36 : while (1) {
           $6_1 = $5_1 + 1 | 0;
           HEAP32[$1_1 >> 2] = $6_1;
           $7_1 = (Math_imul($7_1, 10) + (HEAP8[$5_1 >> 0] | 0) | 0) + -48 | 0;
           if (($7_1 | 0) > (214748363 | 0)) {
            break label$35
           }
           $8_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
           $5_1 = $6_1;
           if (($8_1 + -48 | 0) >>> 0 < 10 >>> 0) {
            continue label$36
           }
           break label$36;
          };
         }
         label$37 : {
          if (($7_1 + -1 | 0) >>> 0 >= 16 >>> 0) {
           break label$37
          }
          HEAP32[$2_1 >> 2] = $7_1;
          break label$1;
         }
         $5_1 = HEAP32[$0_1 >> 2] | 0;
         HEAP32[($3_1 + 52 | 0) >> 2] = 16;
         HEAP32[($3_1 + 48 | 0) >> 2] = $7_1;
         $6_1 = $493($5_1 | 0, 11921 | 0, $3_1 + 48 | 0 | 0) | 0;
        }
        HEAP32[$2_1 >> 2] = $6_1;
        break label$1;
       case 67:
        if (((HEAP8[$5_1 >> 0] | 0) + -48 | 0) >>> 0 >= 10 >>> 0) {
         break label$3
        }
        $7_1 = 0;
        label$38 : {
         label$39 : while (1) {
          $4_1 = $5_1 + 1 | 0;
          HEAP32[$1_1 >> 2] = $4_1;
          $7_1 = (Math_imul($7_1, 10) + (HEAP8[$5_1 >> 0] | 0) | 0) + -48 | 0;
          if (($7_1 | 0) > (214748363 | 0)) {
           break label$38
          }
          $6_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
          $5_1 = $4_1;
          if (($6_1 + -48 | 0) >>> 0 < 10 >>> 0) {
           continue label$39
          }
          break label$39;
         };
        }
        HEAP32[$2_1 >> 2] = $7_1;
        $4_1 = 3;
        if (($7_1 | 0) != (-1 | 0)) {
         break label$1
        }
        break label$2;
       case 88:
        HEAP32[$2_1 >> 2] = 1;
        $4_1 = 6;
        break label$1;
       case 56:
        $4_1 = 7;
        break label$1;
       case 28:
        HEAP32[($0_1 + 4 | 0) >> 2] = 1;
        break label$4;
       case 30:
        HEAP32[($0_1 + 4 | 0) >> 2] = 0;
        break label$4;
       case 29:
        HEAP32[($0_1 + 4 | 0) >> 2] = 1;
        break label$4;
       case 1:
        $4_1 = 8;
        label$40 : {
         if (((HEAP8[$5_1 >> 0] | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
          break label$40
         }
         $4_1 = 0;
         label$41 : {
          label$42 : while (1) {
           $2_1 = $5_1 + 1 | 0;
           HEAP32[$1_1 >> 2] = $2_1;
           $4_1 = (Math_imul($4_1, 10) + (HEAP8[$5_1 >> 0] | 0) | 0) + -48 | 0;
           if (($4_1 | 0) > (214748363 | 0)) {
            break label$41
           }
           $7_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
           $5_1 = $2_1;
           if (($7_1 + -48 | 0) >>> 0 < 10 >>> 0) {
            continue label$42
           }
           break label$42;
          };
         }
         if (($4_1 + -1 | 0) >>> 0 < 16 >>> 0) {
          break label$40
         }
         $5_1 = HEAP32[$0_1 >> 2] | 0;
         HEAP32[($3_1 + 68 | 0) >> 2] = 16;
         HEAP32[($3_1 + 64 | 0) >> 2] = $4_1;
         $4_1 = $493($5_1 | 0, 11921 | 0, $3_1 + 64 | 0 | 0) | 0;
        }
        HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
        break label$4;
       case 90:
        break label$1;
       case 0:
        break label$4;
       default:
        break label$5;
       };
      }
      $5_1 = HEAP32[$0_1 >> 2] | 0;
      HEAP32[$3_1 >> 2] = $6_1;
      $493($5_1 | 0, 11894 | 0, $3_1 | 0) | 0;
     }
     $4_1 = 8;
     break label$1;
    }
    HEAP32[$2_1 >> 2] = -1;
   }
   $493(HEAP32[$0_1 >> 2] | 0 | 0, 11859 | 0, 0 | 0) | 0;
   $4_1 = 3;
  }
  global$0 = $3_1 + 80 | 0;
  return $4_1 | 0;
 }
 
 function $689($0_1) {
  $0_1 = $0_1 | 0;
  $690($0_1 | 0, 0 | 0, 12248 | 0);
  return 1 | 0;
 }
 
 function $690($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($11($0_1 | 0, 1 | 0) | 0 | 0) != (3 | 0)) {
       break label$4
      }
      $10($0_1 | 0, 1 | 0);
      break label$3;
     }
     $4_1 = $24($0_1 | 0, 1 | 0, $3_1 + 12 | 0 | 0) | 0;
     if (!$4_1) {
      break label$2
     }
     if (($20($0_1 | 0, $4_1 | 0) | 0 | 0) != ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0 | 0)) {
      break label$2
     }
    }
    label$5 : {
     if (($11($0_1 | 0, 2 | 0) | 0 | 0) != (3 | 0)) {
      break label$5
     }
     $10($0_1 | 0, 2 | 0);
     $18($0_1 | 0, $1_1 | 0);
     break label$1;
    }
    $4_1 = $24($0_1 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0;
    if (!$4_1) {
     break label$2
    }
    if (($20($0_1 | 0, $4_1 | 0) | 0 | 0) != ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0 | 0)) {
     break label$2
    }
    $18($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   $7($0_1 | 0, 2 | 0);
   label$6 : {
    label$7 : {
     if (($11($0_1 | 0, 2 | 0) | 0 | 0) == (4 | 0)) {
      break label$7
     }
     if ($496($0_1 | 0, 2 | 0, $2_1 | 0) | 0) {
      break label$6
     }
    }
    $1_1 = $12($0_1 | 0, $11($0_1 | 0, -2 | 0) | 0 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $12($0_1 | 0, $11($0_1 | 0, -1 | 0) | 0 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
    HEAP32[$3_1 >> 2] = $2_1 + 2 | 0;
    $493($0_1 | 0, 12297 | 0, $3_1 | 0) | 0;
   }
   $8($0_1 | 0, -3 | 0, 1 | 0);
   $57($0_1 | 0, 2 | 0, 1 | 0, 0 | 0, 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $691($0_1) {
  $0_1 = $0_1 | 0;
  $690($0_1 | 0, 1 | 0, 12254 | 0);
  return 1 | 0;
 }
 
 function $692($0_1) {
  $0_1 = $0_1 | 0;
  $690($0_1 | 0, 2 | 0, 12260 | 0);
  return 1 | 0;
 }
 
 function $693($0_1) {
  $0_1 = $0_1 | 0;
  $690($0_1 | 0, 3 | 0, 12266 | 0);
  return 1 | 0;
 }
 
 function $694($0_1) {
  $0_1 = $0_1 | 0;
  $690($0_1 | 0, 4 | 0, 12272 | 0);
  return 1 | 0;
 }
 
 function $695($0_1) {
  $0_1 = $0_1 | 0;
  $690($0_1 | 0, 5 | 0, 12278 | 0);
  return 1 | 0;
 }
 
 function $696($0_1) {
  $0_1 = $0_1 | 0;
  $690($0_1 | 0, 6 | 0, 12284 | 0);
  return 1 | 0;
 }
 
 function $697($0_1) {
  $0_1 = $0_1 | 0;
  $690($0_1 | 0, 12 | 0, 12291 | 0);
  return 1 | 0;
 }
 
 function $698($0_1) {
  $0_1 = $0_1 | 0;
  $535($0_1 | 0, +(504.0), 136 | 0);
  $46($0_1 | 0, 0 | 0, 6 | 0);
  $514($0_1 | 0, 12336 | 0, 0 | 0);
  $32($0_1 | 0, 12392 | 0, 14 | 0) | 0;
  $51($0_1 | 0, -2 | 0, 12407 | 0);
  return 1 | 0;
 }
 
 function $699($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $6$hi = 0, $6_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0, $1_1 = 0, $7_1 = 0, $7$hi = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $17_1 = 0, $21_1 = 0, $21$hi = 0, $37$hi = 0, $47$hi = 0, $94_1 = 0, $94$hi = 0, $99_1 = 0, $116_1 = 0, $134_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $506($0_1 | 0, 1 | 0, $1_1 + 12 | 0 | 0) | 0;
  i64toi32_i32$0 = $512($0_1 | 0, 2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  $17_1 = $0_1;
  i64toi32_i32$1 = 0;
  $21_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  $21$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$3 = -1;
  if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
   $28_1 = 1
  } else {
   if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $29_1 = 0
    } else {
     $29_1 = 1
    }
    $30_1 = $29_1;
   } else {
    $30_1 = 0
   }
   $28_1 = $30_1;
  }
  i64toi32_i32$4 = $28_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$0 = i64toi32_i32$4 ? 1 : $21_1;
  i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
  i64toi32_i32$3 = $513($17_1 | 0, 3 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$3;
  $5$hi = i64toi32_i32$0;
  $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
      $31_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
       if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$2 >>> 0) {
        $32_1 = 0
       } else {
        $32_1 = 1
       }
       $33_1 = $32_1;
      } else {
       $33_1 = 0
      }
      $31_1 = $33_1;
     }
     if ($31_1) {
      break label$3
     }
     i64toi32_i32$4 = 0;
     $6_1 = 0;
     $6$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $5$hi;
     if ($3_1 >>> 0 < (0 - $5_1 | 0) >>> 0) {
      break label$2
     }
     i64toi32_i32$4 = $5$hi;
     i64toi32_i32$4 = 0;
     $37$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $5$hi;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$0 = $37$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$1;
    }
    label$4 : {
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
      $34_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        $35_1 = 0
       } else {
        $35_1 = 1
       }
       $36_1 = $35_1;
      } else {
       $36_1 = 0
      }
      $34_1 = $36_1;
     }
     if ($34_1) {
      break label$4
     }
     i64toi32_i32$5 = $5$hi;
     $6_1 = $5_1;
     $6$hi = i64toi32_i32$5;
     break label$2;
    }
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$4 = -1;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $6_1 = i64toi32_i32$2;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $47$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$3 = $47$hi;
    i64toi32_i32$4 = $3_1;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$3 | 0)) {
     $37_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$3 | 0)) {
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0) {
       $38_1 = 0
      } else {
       $38_1 = 1
      }
      $39_1 = $38_1;
     } else {
      $39_1 = 0
     }
     $37_1 = $39_1;
    }
    if ($37_1) {
     break label$1
    }
   }
   $492($0_1 | 0, 3 | 0, 12451 | 0) | 0;
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$4 = $4_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
        break label$9
       }
       i64toi32_i32$4 = $6$hi;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$0 = 1;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
        $40_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
         if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $41_1 = 0
         } else {
          $41_1 = 1
         }
         $42_1 = $41_1;
        } else {
         $42_1 = 0
        }
        $40_1 = $42_1;
       }
       if ($40_1) {
        break label$8
       }
       label$10 : while (1) {
        i64toi32_i32$3 = $6$hi;
        if (((HEAPU8[($2_1 + $6_1 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
         break label$8
        }
        i64toi32_i32$3 = $6$hi;
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$5 = 1;
        if ((i64toi32_i32$3 | 0) > (i64toi32_i32$4 | 0)) {
         $43_1 = 1
        } else {
         if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$5 >>> 0) {
           $44_1 = 0
          } else {
           $44_1 = 1
          }
          $45_1 = $44_1;
         } else {
          $45_1 = 0
         }
         $43_1 = $45_1;
        }
        $3_1 = $43_1;
        i64toi32_i32$0 = $6$hi;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$4 = -1;
        i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $6_1 = i64toi32_i32$1;
        $6$hi = i64toi32_i32$2;
        if ($3_1) {
         continue label$10
        }
        break label$10;
       };
       i64toi32_i32$2 = 0;
       $6_1 = 0;
       $6$hi = i64toi32_i32$2;
       break label$8;
      }
      label$11 : {
       i64toi32_i32$2 = $6$hi;
       if (((HEAPU8[($2_1 + $6_1 | 0) >> 0] | 0) & 192 | 0 | 0) != (128 | 0)) {
        break label$11
       }
       $2_1 = $493($0_1 | 0, 12473 | 0, 0 | 0) | 0;
       break label$5;
      }
      label$12 : {
       label$13 : {
        label$14 : {
         i64toi32_i32$2 = $4$hi;
         i64toi32_i32$0 = $4_1;
         i64toi32_i32$5 = 0;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
          $46_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$4 >>> 0) {
            $47_1 = 0
           } else {
            $47_1 = 1
           }
           $48_1 = $47_1;
          } else {
           $48_1 = 0
          }
          $46_1 = $48_1;
         }
         if ($46_1) {
          break label$14
         }
         i64toi32_i32$0 = $4$hi;
         i64toi32_i32$4 = $4_1;
         i64toi32_i32$2 = -1;
         i64toi32_i32$5 = -1;
         i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
         }
         $7_1 = i64toi32_i32$3;
         $7$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $4$hi;
         i64toi32_i32$0 = $4_1;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 2;
         if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
          $49_1 = 1
         } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
            $50_1 = 0
           } else {
            $50_1 = 1
           }
           $51_1 = $50_1;
          } else {
           $51_1 = 0
          }
          $49_1 = $51_1;
         }
         if ($49_1) {
          break label$12
         }
         i64toi32_i32$0 = $6$hi;
         i64toi32_i32$5 = $1_1;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
         i64toi32_i32$1 = 0;
         $4_1 = i64toi32_i32$0;
         $4$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $6$hi;
         i64toi32_i32$5 = $6_1;
         i64toi32_i32$0 = $4$hi;
         i64toi32_i32$4 = $4_1;
         if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
          $52_1 = 1
         } else {
          if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
           if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
            $53_1 = 0
           } else {
            $53_1 = 1
           }
           $54_1 = $53_1;
          } else {
           $54_1 = 0
          }
          $52_1 = $54_1;
         }
         if ($52_1) {
          break label$12
         }
         break label$13;
        }
        i64toi32_i32$5 = $6$hi;
        i64toi32_i32$4 = $6_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
         $55_1 = 1
        } else {
         if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$0 >>> 0) {
           $56_1 = 0
          } else {
           $56_1 = 1
          }
          $57_1 = $56_1;
         } else {
          $57_1 = 0
         }
         $55_1 = $57_1;
        }
        if ($55_1) {
         break label$7
        }
        i64toi32_i32$4 = $6$hi;
        $5_1 = $6_1;
        $5$hi = i64toi32_i32$4;
        label$15 : while (1) {
         label$16 : {
          i64toi32_i32$4 = $6$hi;
          i64toi32_i32$0 = $6_1;
          i64toi32_i32$5 = 0;
          i64toi32_i32$1 = 1;
          if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
           $58_1 = 1
          } else {
           if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
            if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$1 >>> 0) {
             $59_1 = 0
            } else {
             $59_1 = 1
            }
            $60_1 = $59_1;
           } else {
            $60_1 = 0
           }
           $58_1 = $60_1;
          }
          if ($58_1) {
           break label$16
          }
          i64toi32_i32$0 = $4$hi;
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$4 = 0;
          i64toi32_i32$5 = 1;
          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
          i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
           i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
          }
          $7_1 = i64toi32_i32$2;
          $7$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $5$hi;
          $94_1 = $5_1;
          $94$hi = i64toi32_i32$3;
          i64toi32_i32$0 = $5_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$5 = 1;
          if ((i64toi32_i32$3 | 0) < (i64toi32_i32$1 | 0)) {
           $61_1 = 1
          } else {
           if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$1 | 0)) {
            if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
             $62_1 = 0
            } else {
             $62_1 = 1
            }
            $63_1 = $62_1;
           } else {
            $63_1 = 0
           }
           $61_1 = $63_1;
          }
          i64toi32_i32$4 = $61_1;
          i64toi32_i32$0 = $94$hi;
          i64toi32_i32$3 = 0;
          i64toi32_i32$1 = i64toi32_i32$4 ? $94_1 : 1;
          i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$3;
          i64toi32_i32$4 = i64toi32_i32$1;
          i64toi32_i32$1 = -1;
          i64toi32_i32$0 = -1;
          i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
          i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
           i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
          }
          $6_1 = i64toi32_i32$3;
          $6$hi = i64toi32_i32$2;
          break label$12;
         }
         $99_1 = $2_1;
         i64toi32_i32$2 = $6$hi;
         i64toi32_i32$5 = $6_1;
         i64toi32_i32$4 = -1;
         i64toi32_i32$0 = -1;
         i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
         i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
         }
         $6_1 = i64toi32_i32$1;
         $6$hi = i64toi32_i32$3;
         if (((HEAPU8[($99_1 + i64toi32_i32$1 | 0) >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) {
          continue label$15
         }
         i64toi32_i32$3 = $4$hi;
         i64toi32_i32$2 = $4_1;
         i64toi32_i32$5 = -1;
         i64toi32_i32$0 = -1;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$5 | 0)) {
          $64_1 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$5 | 0)) {
           if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$0 >>> 0) {
            $65_1 = 0
           } else {
            $65_1 = 1
           }
           $66_1 = $65_1;
          } else {
           $66_1 = 0
          }
          $64_1 = $66_1;
         }
         $3_1 = $64_1;
         i64toi32_i32$2 = $6$hi;
         $5_1 = $6_1;
         $5$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $4$hi;
         i64toi32_i32$0 = $4_1;
         i64toi32_i32$3 = 0;
         i64toi32_i32$5 = 1;
         i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
         i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
         }
         $7_1 = i64toi32_i32$4;
         $7$hi = i64toi32_i32$1;
         $4_1 = i64toi32_i32$4;
         $4$hi = i64toi32_i32$1;
         if ($3_1) {
          continue label$15
         }
         break label$12;
        };
       }
       label$17 : while (1) {
        i64toi32_i32$1 = $7$hi;
        $5_1 = $7_1;
        $5$hi = i64toi32_i32$1;
        label$18 : while (1) {
         $116_1 = $2_1;
         i64toi32_i32$1 = $6$hi;
         i64toi32_i32$2 = $6_1;
         i64toi32_i32$0 = 0;
         i64toi32_i32$5 = 1;
         i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
         i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $6_1 = i64toi32_i32$3;
         $6$hi = i64toi32_i32$4;
         if (((HEAPU8[($116_1 + i64toi32_i32$3 | 0) >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) {
          continue label$18
         }
         break label$18;
        };
        i64toi32_i32$4 = $5$hi;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
        }
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $5$hi;
        i64toi32_i32$4 = $5_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 2;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$1 | 0)) {
         $67_1 = 1
        } else {
         if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$5 >>> 0) {
           $68_1 = 0
          } else {
           $68_1 = 1
          }
          $69_1 = $68_1;
         } else {
          $69_1 = 0
         }
         $67_1 = $69_1;
        }
        if ($67_1) {
         break label$12
        }
        i64toi32_i32$4 = $6$hi;
        i64toi32_i32$4 = $4$hi;
        i64toi32_i32$4 = $6$hi;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$3 = $4$hi;
        i64toi32_i32$1 = $4_1;
        if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
         $70_1 = 1
        } else {
         if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $71_1 = 0
          } else {
           $71_1 = 1
          }
          $72_1 = $71_1;
         } else {
          $72_1 = 0
         }
         $70_1 = $72_1;
        }
        if ($70_1) {
         continue label$17
        }
        break label$17;
       };
      }
      i64toi32_i32$5 = $7$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
       break label$7
      }
     }
     $134_1 = $0_1;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$3 = $6_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $31($134_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 | 0);
     break label$6;
    }
    $29($0_1 | 0);
   }
   $2_1 = 1;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $700($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $10$hi = 0, $10_1 = 0, $11$hi = 0, $11_1 = 0, $8_1 = 0, $1_1 = 0, $12$hi = 0, $5_1 = 0, $12_1 = 0, $6_1 = 0, $9_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $34$hi = 0, $52$hi = 0, $4_1 = 0, $63_1 = 0, $63$hi = 0, $7_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $506($0_1 | 0, 1 | 0, $1_1 + 12 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $513($0_1 | 0, 2 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $26_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
       $27_1 = 0
      } else {
       $27_1 = 1
      }
      $28_1 = $27_1;
     } else {
      $28_1 = 0
     }
     $26_1 = $28_1;
    }
    if ($26_1) {
     break label$2
    }
    i64toi32_i32$2 = $10$hi;
    $11_1 = $10_1;
    $11$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$2;
   $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $10$hi;
   if ($3_1 >>> 0 < (0 - $10_1 | 0) >>> 0) {
    break label$1
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$2 = 0;
   $34$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$1 = $34$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 + $3_1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < $3_1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$4;
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $513($0_1 | 0, 3 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = -1;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$4 | 0)) {
     $29_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0) {
       $30_1 = 0
      } else {
       $30_1 = 1
      }
      $31_1 = $30_1;
     } else {
      $31_1 = 0
     }
     $29_1 = $31_1;
    }
    if ($29_1) {
     break label$4
    }
    i64toi32_i32$5 = $12$hi;
    $10_1 = $12_1;
    $10$hi = i64toi32_i32$5;
    break label$3;
   }
   i64toi32_i32$5 = 0;
   $10_1 = 0;
   $10$hi = i64toi32_i32$5;
   $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$5 = $12$hi;
   if ($3_1 >>> 0 < (0 - $12_1 | 0) >>> 0) {
    break label$3
   }
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = 0;
   $52$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$0 = $12_1;
   i64toi32_i32$2 = $52$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   i64toi32_i32$5 = i64toi32_i32$3;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $10_1 = i64toi32_i32$2;
   $10$hi = i64toi32_i32$3;
  }
  $4_1 = $23($0_1 | 0, 4 | 0) | 0;
  label$5 : {
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$1 = $11_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = 0;
   if ((i64toi32_i32$3 | 0) > (i64toi32_i32$5 | 0)) {
    $32_1 = 1
   } else {
    if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$4 >>> 0) {
      $33_1 = 0
     } else {
      $33_1 = 1
     }
     $34_1 = $33_1;
    } else {
     $34_1 = 0
    }
    $32_1 = $34_1;
   }
   if ($32_1) {
    break label$5
   }
   $492($0_1 | 0, 2 | 0, 12513 | 0) | 0;
  }
  label$6 : {
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
   i64toi32_i32$3 = 0;
   $63_1 = i64toi32_i32$1;
   $63$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$4 = $10_1;
   i64toi32_i32$1 = $63$hi;
   i64toi32_i32$5 = $63_1;
   if ((i64toi32_i32$3 | 0) < (i64toi32_i32$1 | 0)) {
    $35_1 = 1
   } else {
    if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0) {
      $36_1 = 0
     } else {
      $36_1 = 1
     }
     $37_1 = $36_1;
    } else {
     $37_1 = 0
    }
    $35_1 = $37_1;
   }
   if ($35_1) {
    break label$6
   }
   $492($0_1 | 0, 3 | 0, 12513 | 0) | 0;
  }
  $5_1 = 0;
  label$7 : {
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$5 = $10_1;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$1 = $11_1;
   if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
    $38_1 = 1
   } else {
    if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$1 >>> 0) {
      $39_1 = 0
     } else {
      $39_1 = 1
     }
     $40_1 = $39_1;
    } else {
     $40_1 = 0
    }
    $38_1 = $40_1;
   }
   if ($38_1) {
    break label$7
   }
   label$8 : {
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    i64toi32_i32$2 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    $12_1 = i64toi32_i32$0;
    $12$hi = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 2147483647;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
     $41_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $42_1 = 0
      } else {
       $42_1 = 1
      }
      $43_1 = $42_1;
     } else {
      $43_1 = 0
     }
     $41_1 = $43_1;
    }
    if ($41_1) {
     break label$8
    }
    $5_1 = $493($0_1 | 0, 12526 | 0, 0 | 0) | 0;
    break label$7;
   }
   i64toi32_i32$5 = $12$hi;
   $507($0_1 | 0, $12_1 + 1 | 0 | 0, 12526 | 0);
   i64toi32_i32$5 = $11$hi;
   $3_1 = $11_1 + -1 | 0;
   i64toi32_i32$5 = $10$hi;
   $6_1 = $10_1;
   if (($3_1 | 0) >= ($10_1 | 0)) {
    break label$7
   }
   $7_1 = $2_1 + $6_1 | 0;
   $8_1 = $2_1 + $3_1 | 0;
   $5_1 = 0;
   label$9 : while (1) {
    $3_1 = HEAP8[$8_1 >> 0] | 0;
    $2_1 = $3_1 & 255 | 0;
    label$10 : {
     label$11 : {
      label$12 : {
       if (($3_1 | 0) > (-1 | 0)) {
        break label$12
       }
       $3_1 = 0;
       $6_1 = 0;
       label$13 : {
        if (!($2_1 & 64 | 0)) {
         break label$13
        }
        label$14 : while (1) {
         $3_1 = $3_1 + 1 | 0;
         $9_1 = HEAPU8[($8_1 + $3_1 | 0) >> 0] | 0;
         if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$11
         }
         $6_1 = $9_1 & 63 | 0 | ($6_1 << 6 | 0) | 0;
         $9_1 = $2_1 & 32 | 0;
         $2_1 = $2_1 << 1 | 0;
         if ($9_1) {
          continue label$14
         }
         break label$14;
        };
       }
       if ($3_1 >>> 0 > 5 >>> 0) {
        break label$11
       }
       $2_1 = ($2_1 & 127 | 0) << Math_imul($3_1, 5) | 0 | $6_1 | 0;
       if (($2_1 | 0) < (0 | 0)) {
        break label$11
       }
       if ($2_1 >>> 0 < (HEAP32[(($3_1 << 2 | 0) + 12576 | 0) >> 2] | 0) >>> 0) {
        break label$11
       }
       $8_1 = $8_1 + $3_1 | 0;
      }
      if ($4_1) {
       break label$10
      }
      if ($2_1 >>> 0 > 1114111 >>> 0) {
       break label$11
      }
      if (($2_1 & -2048 | 0 | 0) != (55296 | 0)) {
       break label$10
      }
     }
     $5_1 = $493($0_1 | 0, 12548 | 0, 0 | 0) | 0;
     break label$7;
    }
    i64toi32_i32$5 = 0;
    $31($0_1 | 0, $2_1 | 0, i64toi32_i32$5 | 0);
    $5_1 = $5_1 + 1 | 0;
    $8_1 = $8_1 + 1 | 0;
    if ($8_1 >>> 0 < $7_1 >>> 0) {
     continue label$9
    }
    break label$9;
   };
  }
  global$0 = $1_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $701($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $5_1 = 0, $5$hi = 0, $4_1 = 0;
  $1_1 = global$0 - 560 | 0;
  global$0 = $1_1;
  $2_1 = 1;
  label$1 : {
   label$2 : {
    $3_1 = $6($0_1 | 0) | 0;
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    label$3 : {
     i64toi32_i32$0 = $512($0_1 | 0, 1 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = -2147483648;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$3
     }
     $492($0_1 | 0, 1 | 0, 12600 | 0) | 0;
    }
    i64toi32_i32$2 = $5$hi;
    HEAP32[$1_1 >> 2] = $5_1;
    $35($0_1 | 0, 12619 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   $487($0_1 | 0, $1_1 + 32 | 0 | 0);
   label$4 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$4
    }
    label$5 : while (1) {
     label$6 : {
      i64toi32_i32$2 = $512($0_1 | 0, $2_1 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $5_1 = i64toi32_i32$2;
      $5$hi = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = -2147483648;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$6
      }
      $492($0_1 | 0, $2_1 | 0, 12600 | 0) | 0;
     }
     i64toi32_i32$3 = $5$hi;
     HEAP32[($1_1 + 16 | 0) >> 2] = $5_1;
     $35($0_1 | 0, 12619 | 0, $1_1 + 16 | 0 | 0) | 0;
     $4_1 = ($2_1 | 0) != ($3_1 | 0);
     $490($1_1 + 32 | 0 | 0);
     $2_1 = $2_1 + 1 | 0;
     if ($4_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $491($1_1 + 32 | 0 | 0);
  }
  global$0 = $1_1 + 560 | 0;
  return 1 | 0;
 }
 
 function $702($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $9$hi = 0, $3_1 = 0, $9_1 = 0, $10$hi = 0, $10_1 = 0, $6_1 = 0, $11$hi = 0, $1_1 = 0, $11_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0, $2_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $33$hi = 0, $50$hi = 0, $4_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $506($0_1 | 0, 1 | 0, $1_1 + 12 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = $513($0_1 | 0, 2 | 0, 1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $9_1 = i64toi32_i32$0;
    $9$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $23_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
       $24_1 = 0
      } else {
       $24_1 = 1
      }
      $25_1 = $24_1;
     } else {
      $25_1 = 0
     }
     $23_1 = $25_1;
    }
    if ($23_1) {
     break label$2
    }
    i64toi32_i32$2 = $9$hi;
    $10_1 = $9_1;
    $10$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $10_1 = 0;
   $10$hi = i64toi32_i32$2;
   $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $9$hi;
   if ($3_1 >>> 0 < (0 - $9_1 | 0) >>> 0) {
    break label$1
   }
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$2 = 0;
   $33$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$3 = $9_1;
   i64toi32_i32$1 = $33$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$4;
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$4 = -1;
    i64toi32_i32$4 = $513($0_1 | 0, 3 | 0, -1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $9_1 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = -1;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$4 | 0)) {
     $26_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0) {
       $27_1 = 0
      } else {
       $27_1 = 1
      }
      $28_1 = $27_1;
     } else {
      $28_1 = 0
     }
     $26_1 = $28_1;
    }
    if ($26_1) {
     break label$4
    }
    i64toi32_i32$5 = $9$hi;
    $11_1 = $9_1;
    $11$hi = i64toi32_i32$5;
    break label$3;
   }
   i64toi32_i32$5 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$5;
   $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$5 = $9$hi;
   if ($3_1 >>> 0 < (0 - $9_1 | 0) >>> 0) {
    break label$3
   }
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = 0;
   $50$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$2 = $50$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   i64toi32_i32$5 = i64toi32_i32$3;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $11_1 = i64toi32_i32$2;
   $11$hi = i64toi32_i32$3;
  }
  $4_1 = $23($0_1 | 0, 4 | 0) | 0;
  label$5 : {
   label$6 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$5 | 0)) {
     $29_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $30_1 = 0
      } else {
       $30_1 = 1
      }
      $31_1 = $30_1;
     } else {
      $31_1 = 0
     }
     $29_1 = $31_1;
    }
    if ($29_1) {
     break label$6
    }
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$4 = $10_1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$5 = -1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$4 = 0;
    $9_1 = i64toi32_i32$2;
    $9$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$5 = $9_1;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
     $32_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0) {
       $33_1 = 0
      } else {
       $33_1 = 1
      }
      $34_1 = $33_1;
     } else {
      $34_1 = 0
     }
     $32_1 = $34_1;
    }
    if ($32_1) {
     break label$5
    }
   }
   $492($0_1 | 0, 2 | 0, 12622 | 0) | 0;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
   i64toi32_i32$4 = 0;
   $9_1 = i64toi32_i32$1;
   $9$hi = i64toi32_i32$4;
  }
  label$7 : {
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$2 = $9_1;
   if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
    $35_1 = 1
   } else {
    if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0) {
      $36_1 = 0
     } else {
      $36_1 = 1
     }
     $37_1 = $36_1;
    } else {
     $37_1 = 0
    }
    $35_1 = $37_1;
   }
   if ($35_1) {
    break label$7
   }
   $492($0_1 | 0, 3 | 0, 12653 | 0) | 0;
  }
  label$8 : {
   label$9 : {
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$1 = $11_1;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$4 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $40_1 = $39_1;
     } else {
      $40_1 = 0
     }
     $38_1 = $40_1;
    }
    if ($38_1) {
     break label$9
    }
    $3_1 = 1;
    i64toi32_i32$2 = 0;
    $9_1 = 0;
    $9$hi = i64toi32_i32$2;
    break label$8;
   }
   i64toi32_i32$2 = 0;
   $9_1 = 0;
   $9$hi = i64toi32_i32$2;
   label$10 : while (1) {
    i64toi32_i32$2 = $10$hi;
    $5_1 = $2_1 + $10_1 | 0;
    $6_1 = HEAP8[$5_1 >> 0] | 0;
    $3_1 = $6_1 & 255 | 0;
    label$11 : {
     label$12 : {
      label$13 : {
       if (($6_1 | 0) > (-1 | 0)) {
        break label$13
       }
       $6_1 = 0;
       $7_1 = 0;
       label$14 : {
        if (!($3_1 & 64 | 0)) {
         break label$14
        }
        label$15 : while (1) {
         $6_1 = $6_1 + 1 | 0;
         $8_1 = HEAPU8[($5_1 + $6_1 | 0) >> 0] | 0;
         if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$12
         }
         $7_1 = $8_1 & 63 | 0 | ($7_1 << 6 | 0) | 0;
         $8_1 = $3_1 & 32 | 0;
         $3_1 = $3_1 << 1 | 0;
         if ($8_1) {
          continue label$15
         }
         break label$15;
        };
       }
       if ($6_1 >>> 0 > 5 >>> 0) {
        break label$12
       }
       $3_1 = ($3_1 & 127 | 0) << Math_imul($6_1, 5) | 0 | $7_1 | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$12
       }
       if ($3_1 >>> 0 < (HEAP32[(($6_1 << 2 | 0) + 12576 | 0) >> 2] | 0) >>> 0) {
        break label$12
       }
       $5_1 = $5_1 + $6_1 | 0;
      }
      if ($4_1) {
       break label$11
      }
      if ($3_1 >>> 0 > 1114111 >>> 0) {
       break label$12
      }
      if (($3_1 & -2048 | 0 | 0) != (55296 | 0)) {
       break label$11
      }
     }
     $29($0_1 | 0);
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $9_1 = i64toi32_i32$3;
     $9$hi = i64toi32_i32$0;
     $3_1 = 2;
     break label$8;
    }
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $9_1 = i64toi32_i32$5;
    $9$hi = i64toi32_i32$3;
    $3_1 = 1;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$2 = ($5_1 - $2_1 | 0) + 1 | 0;
    i64toi32_i32$3 = i64toi32_i32$2 >> 31 | 0;
    $10_1 = i64toi32_i32$2;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$0 = $11_1;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$4 = $10_1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$2 | 0)) {
     $41_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $42_1 = 0
      } else {
       $42_1 = 1
      }
      $43_1 = $42_1;
     } else {
      $43_1 = 0
     }
     $41_1 = $43_1;
    }
    if ($41_1) {
     continue label$10
    }
    break label$10;
   };
  }
  i64toi32_i32$0 = $9$hi;
  $31($0_1 | 0, $9_1 | 0, i64toi32_i32$0 | 0);
  global$0 = $1_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $703($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $23($0_1 | 0, 2 | 0) | 0;
  $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
  $36($0_1 | 0, ($1_1 ? 157 : 158) | 0, 0 | 0);
  $10($0_1 | 0, 1 | 0);
  $31($0_1 | 0, 0 | 0, 0 | 0);
  return 3 | 0;
 }
 
 function $704($0_1) {
  $0_1 = $0_1 | 0;
  return $706($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $705($0_1) {
  $0_1 = $0_1 | 0;
  return $706($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $706($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $4_1 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $9$hi = 0, $2_1 = 0, $10$hi = 0, $10_1 = 0, $11$hi = 0, $7_1 = 0, $8_1 = 0, $11_1 = 0, $6_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $5_1 = 0, $104_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = 0;
  $9_1 = 0;
  $9$hi = i64toi32_i32$0;
  $3_1 = $506($0_1 | 0, 1 | 0, $2_1 + 12 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $22($0_1 | 0, 2 | 0, 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     break label$2
    }
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = 0;
    $11_1 = i64toi32_i32$2;
    $11$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
    i64toi32_i32$2 = 0;
    $11_1 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$0 = $11_1;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
     $25_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0) {
       $26_1 = 0
      } else {
       $26_1 = 1
      }
      $27_1 = $26_1;
     } else {
      $27_1 = 0
     }
     $25_1 = $27_1;
    }
    if ($25_1) {
     break label$3
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
    break label$1;
   }
   label$4 : while (1) {
    i64toi32_i32$5 = $10$hi;
    $9_1 = $10_1;
    $9$hi = i64toi32_i32$5;
    i64toi32_i32$3 = $9_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $10_1 = i64toi32_i32$2;
    $10$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $9$hi;
    if (((HEAPU8[($3_1 + $9_1 | 0) >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  $4_1 = 0;
  label$5 : {
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$1 = $11_1;
   if ((i64toi32_i32$4 | 0) > (i64toi32_i32$3 | 0)) {
    $28_1 = 1
   } else {
    if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      $29_1 = 0
     } else {
      $29_1 = 1
     }
     $30_1 = $29_1;
    } else {
     $30_1 = 0
    }
    $28_1 = $30_1;
   }
   if ($28_1) {
    break label$5
   }
   i64toi32_i32$5 = $9$hi;
   $5_1 = $3_1 + $9_1 | 0;
   $4_1 = HEAP8[$5_1 >> 0] | 0;
   $3_1 = $4_1 & 255 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      if (($4_1 | 0) > (-1 | 0)) {
       break label$8
      }
      $4_1 = 0;
      label$9 : {
       label$10 : {
        if ($3_1 & 64 | 0) {
         break label$10
        }
        $6_1 = $3_1;
        $7_1 = 0;
        break label$9;
       }
       $7_1 = 0;
       label$11 : while (1) {
        $4_1 = $4_1 + 1 | 0;
        $8_1 = HEAPU8[($5_1 + $4_1 | 0) >> 0] | 0;
        if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$7
        }
        $7_1 = $8_1 & 63 | 0 | ($7_1 << 6 | 0) | 0;
        $8_1 = $3_1 & 32 | 0;
        $6_1 = $3_1 << 1 | 0;
        $3_1 = $6_1;
        if ($8_1) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($4_1 >>> 0 > 5 >>> 0) {
       break label$7
      }
      $3_1 = ($6_1 & 127 | 0) << Math_imul($4_1, 5) | 0 | $7_1 | 0;
      if (($3_1 | 0) < (0 | 0)) {
       break label$7
      }
      if ($3_1 >>> 0 < (HEAP32[(($4_1 << 2 | 0) + 12576 | 0) >> 2] | 0) >>> 0) {
       break label$7
      }
     }
     if (!$1_1) {
      break label$6
     }
     if ($3_1 >>> 0 > 1114111 >>> 0) {
      break label$7
     }
     if (($3_1 & -2048 | 0 | 0) != (55296 | 0)) {
      break label$6
     }
    }
    $4_1 = $493($0_1 | 0, 12548 | 0, 0 | 0) | 0;
    break label$5;
   }
   $104_1 = $0_1;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $31($104_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = 0;
   $31($0_1 | 0, $3_1 | 0, i64toi32_i32$2 | 0);
   $4_1 = 2;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $707($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0;
  $527($0_1 | 0, -1001e3 | 0, 13072 | 0) | 0;
  $46($0_1 | 0, 0 | 0, 1 | 0);
  $36($0_1 | 0, 164 | 0, 0 | 0);
  $51($0_1 | 0, -2 | 0, 13079 | 0);
  $55($0_1 | 0, -2 | 0) | 0;
  $535($0_1 | 0, +(504.0), 136 | 0);
  $46($0_1 | 0, 0 | 0, 7 | 0);
  $514($0_1 | 0, 12688 | 0, 0 | 0);
  $46($0_1 | 0, 4 | 0, 0 | 0);
  $10($0_1 | 0, -2 | 0);
  $36($0_1 | 0, 165 | 0, 1 | 0);
  i64toi32_i32$0 = 0;
  $54($0_1 | 0, -2 | 0, 1 | 0, i64toi32_i32$0 | 0);
  $10($0_1 | 0, -2 | 0);
  $36($0_1 | 0, 166 | 0, 1 | 0);
  i64toi32_i32$0 = 0;
  $54($0_1 | 0, -2 | 0, 2 | 0, i64toi32_i32$0 | 0);
  $10($0_1 | 0, -2 | 0);
  $36($0_1 | 0, 167 | 0, 1 | 0);
  i64toi32_i32$0 = 0;
  $54($0_1 | 0, -2 | 0, 3 | 0, i64toi32_i32$0 | 0);
  $10($0_1 | 0, -2 | 0);
  $36($0_1 | 0, 168 | 0, 1 | 0);
  i64toi32_i32$0 = 0;
  $54($0_1 | 0, -2 | 0, 4 | 0, i64toi32_i32$0 | 0);
  $51($0_1 | 0, -2 | 0, 13103 | 0);
  $713($0_1 | 0, 12752 | 0, 12757 | 0, 12766 | 0);
  $713($0_1 | 0, 12917 | 0, 12923 | 0, 12933 | 0);
  $33($0_1 | 0, 13002 | 0) | 0;
  $51($0_1 | 0, -2 | 0, 13013 | 0);
  $527($0_1 | 0, -1001e3 | 0, 13020 | 0) | 0;
  $51($0_1 | 0, -2 | 0, 13028 | 0);
  $527($0_1 | 0, -1001e3 | 0, 13035 | 0) | 0;
  $51($0_1 | 0, -2 | 0, 13044 | 0);
  i64toi32_i32$0 = 0;
  $45($0_1 | 0, -1001e3 | 0, 2 | 0, i64toi32_i32$0 | 0) | 0;
  $10($0_1 | 0, -2 | 0);
  $514($0_1 | 0, 13056 | 0, 1 | 0);
  $7($0_1 | 0, -2 | 0);
  return 1 | 0;
 }
 
 function $708($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $2$hi = 0, i64toi32_i32$5 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, i64toi32_i32$4 = 0, $1_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $525($0_1 | 0, 1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 1;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $10_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $11_1 = 0
     } else {
      $11_1 = 1
     }
     $12_1 = $11_1;
    } else {
     $12_1 = 0
    }
    $10_1 = $12_1;
   }
   if ($10_1) {
    break label$1
   }
   label$2 : while (1) {
    i64toi32_i32$2 = $2$hi;
    $45($0_1 | 0, 1 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
    fimport$22($26($0_1 | 0, -1 | 0) | 0 | 0) | 0;
    $7($0_1 | 0, -2 | 0);
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $13_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $14_1 = 0
      } else {
       $14_1 = 1
      }
      $15_1 = $14_1;
     } else {
      $15_1 = 0
     }
     $13_1 = $15_1;
    }
    $1_1 = $13_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $2_1 = i64toi32_i32$4;
    $2$hi = i64toi32_i32$5;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return 0 | 0;
 }
 
 function $709($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 1;
  $3_1 = $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
  $42($0_1 | 0, -1001e3 | 0, 13035 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($42($0_1 | 0, -1 | 0, $3_1 | 0) | 0) {
     break label$2
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $35($0_1 | 0, 13158 | 0, $1_1 | 0) | 0;
    break label$1;
   }
   $33($0_1 | 0, 13189 | 0) | 0;
   $2_1 = 2;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $710($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $2_1 = 1;
  $3_1 = $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
  $42($0_1 | 0, -1001001 | 0, 12752 | 0) | 0;
  label$1 : {
   $4_1 = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 12752;
   $493($0_1 | 0, 13199 | 0, $1_1 + 16 | 0 | 0) | 0;
  }
  label$2 : {
   $3_1 = $717($0_1 | 0, $3_1 | 0, $4_1 | 0, 13123 | 0, 13125 | 0) | 0;
   if (!$3_1) {
    break label$2
   }
   label$3 : {
    if ($519($0_1 | 0, $3_1 | 0, 0 | 0) | 0) {
     break label$3
    }
    $33($0_1 | 0, $3_1 | 0) | 0;
    $2_1 = 2;
    break label$2;
   }
   $2_1 = $24($0_1 | 0, 1 | 0, 0 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[$1_1 >> 2] = $2_1;
   $2_1 = $493($0_1 | 0, 13229 | 0, $1_1 | 0) | 0;
  }
  global$0 = $1_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $711($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $2_1 = 1;
  $3_1 = $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
  $42($0_1 | 0, -1001001 | 0, 12917 | 0) | 0;
  label$1 : {
   $4_1 = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 12917;
   $493($0_1 | 0, 13199 | 0, $1_1 + 16 | 0 | 0) | 0;
  }
  label$2 : {
   $4_1 = $717($0_1 | 0, $3_1 | 0, $4_1 | 0, 13123 | 0, 13125 | 0) | 0;
   if (!$4_1) {
    break label$2
   }
   label$3 : {
    if ($718($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0) {
     break label$3
    }
    $33($0_1 | 0, $4_1 | 0) | 0;
    $2_1 = 2;
    break label$2;
   }
   $2_1 = $24($0_1 | 0, 1 | 0, 0 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[$1_1 >> 2] = $2_1;
   $2_1 = $493($0_1 | 0, 13229 | 0, $1_1 | 0) | 0;
  }
  global$0 = $1_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $712($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   $3_1 = $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
   $4_1 = $865($3_1 | 0, 46 | 0) | 0;
   if (!$4_1) {
    break label$1
   }
   $32($0_1 | 0, $3_1 | 0, $4_1 - $3_1 | 0 | 0) | 0;
   $4_1 = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
   $42($0_1 | 0, -1001001 | 0, 12917 | 0) | 0;
   label$2 : {
    $5_1 = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
    if ($5_1) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 12917;
    $493($0_1 | 0, 13199 | 0, $1_1 + 32 | 0 | 0) | 0;
   }
   $2_1 = 1;
   $4_1 = $717($0_1 | 0, $4_1 | 0, $5_1 | 0, 13123 | 0, 13125 | 0) | 0;
   if (!$4_1) {
    break label$1
   }
   label$3 : {
    switch ($718($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0 | 0) {
    default:
     $2_1 = $24($0_1 | 0, 1 | 0, 0 | 0) | 0;
     HEAP32[($1_1 + 8 | 0) >> 2] = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $4_1;
     HEAP32[$1_1 >> 2] = $2_1;
     $2_1 = $493($0_1 | 0, 13229 | 0, $1_1 | 0) | 0;
     break label$1;
    case 2:
     HEAP32[($1_1 + 20 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $3_1;
     $35($0_1 | 0, 13288 | 0, $1_1 + 16 | 0 | 0) | 0;
     break label$1;
    case 0:
     break label$3;
    };
   }
   $33($0_1 | 0, $4_1 | 0) | 0;
   $2_1 = 2;
  }
  global$0 = $1_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $713($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 544 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 13321;
  HEAP32[$4_1 >> 2] = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $5_1 = $885($35($0_1 | 0, 13316 | 0, $4_1 | 0) | 0 | 0) | 0;
      if ($5_1) {
       break label$4
      }
      $5_1 = $885($2_1 | 0) | 0;
      if (!$5_1) {
       break label$3
      }
     }
     $42($0_1 | 0, -1001e3 | 0, 13329 | 0) | 0;
     $2_1 = $23($0_1 | 0, -1 | 0) | 0;
     $7($0_1 | 0, -2 | 0);
     if (!$2_1) {
      break label$2
     }
    }
    $33($0_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   label$5 : {
    $2_1 = $867($5_1 | 0, 13326 | 0) | 0;
    if ($2_1) {
     break label$5
    }
    $33($0_1 | 0, $5_1 | 0) | 0;
    break label$1;
   }
   $6_1 = $961($5_1 | 0) | 0;
   $487($0_1 | 0, $4_1 + 16 | 0 | 0);
   label$6 : {
    if ($5_1 >>> 0 >= $2_1 >>> 0) {
     break label$6
    }
    $515($4_1 + 16 | 0 | 0, $5_1 | 0, $2_1 - $5_1 | 0 | 0);
    label$7 : {
     $7_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     if ($7_1 >>> 0 < (HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     $489($4_1 + 16 | 0 | 0, 1 | 0) | 0;
     $7_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = $7_1 + 1 | 0;
    HEAP8[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + $7_1 | 0) >> 0] = 59;
   }
   $488($4_1 + 16 | 0 | 0, $3_1 | 0);
   label$8 : {
    $3_1 = ($5_1 + $6_1 | 0) + -2 | 0;
    if ($2_1 >>> 0 >= $3_1 >>> 0) {
     break label$8
    }
    label$9 : {
     $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
     if ($5_1 >>> 0 < (HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0) {
      break label$9
     }
     $489($4_1 + 16 | 0 | 0, 1 | 0) | 0;
     $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 24 | 0) >> 2] = $5_1 + 1 | 0;
    HEAP8[((HEAP32[($4_1 + 16 | 0) >> 2] | 0) + $5_1 | 0) >> 0] = 59;
    $515($4_1 + 16 | 0 | 0, $2_1 + 2 | 0 | 0, $3_1 - $2_1 | 0 | 0);
   }
   $491($4_1 + 16 | 0 | 0);
  }
  $51($0_1 | 0, -3 | 0, $1_1 | 0);
  $7($0_1 | 0, -2 | 0);
  global$0 = $4_1 + 544 | 0;
 }
 
 function $714($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = 1;
  label$1 : {
   $2_1 = $715($0_1 | 0, $506($0_1 | 0, 1 | 0, 0 | 0) | 0 | 0, $506($0_1 | 0, 2 | 0, 0 | 0) | 0 | 0) | 0;
   if (!$2_1) {
    break label$1
   }
   $29($0_1 | 0);
   $8($0_1 | 0, -2 | 0, 1 | 0);
   $33($0_1 | 0, (($2_1 | 0) == (1 | 0) ? 13113 : 13118) | 0) | 0;
   $1_1 = 3;
  }
  return $1_1 | 0;
 }
 
 function $715($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $30_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0;
  $42($0_1 | 0, -1001e3 | 0, 13072 | 0) | 0;
  $42($0_1 | 0, -1 | 0, $1_1 | 0) | 0;
  $3_1 = $26($0_1 | 0, -1 | 0) | 0;
  $7($0_1 | 0, -3 | 0);
  label$1 : {
   if ($3_1) {
    break label$1
   }
   label$2 : {
    $3_1 = fimport$23($1_1 | 0, ((HEAPU8[$2_1 >> 0] | 0 | 0) == (42 | 0) ? 258 : 2) | 0) | 0;
    if ($3_1) {
     break label$2
    }
    $33($0_1 | 0, fimport$24() | 0 | 0) | 0;
    return 1 | 0;
   }
   $42($0_1 | 0, -1001e3 | 0, 13072 | 0) | 0;
   $38($0_1 | 0, $3_1 | 0);
   $10($0_1 | 0, -1 | 0);
   $51($0_1 | 0, -3 | 0, $1_1 | 0);
   $30_1 = $0_1;
   i64toi32_i32$0 = $525($0_1 | 0, -2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $54($30_1 | 0, -2 | 0, i64toi32_i32$4 | 0, i64toi32_i32$5 | 0);
   $7($0_1 | 0, -2 | 0);
  }
  label$3 : {
   if ((HEAPU8[$2_1 >> 0] | 0 | 0) != (42 | 0)) {
    break label$3
   }
   $37($0_1 | 0, 1 | 0);
   return 0 | 0;
  }
  label$4 : {
   $3_1 = fimport$25($3_1 | 0, $2_1 | 0) | 0;
   if ($3_1) {
    break label$4
   }
   $33($0_1 | 0, fimport$24() | 0 | 0) | 0;
   return 2 | 0;
  }
  $36($0_1 | 0, $3_1 | 0, 0 | 0);
  return 0 | 0;
 }
 
 function $716($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1;
  label$1 : {
   if ($717($0_1 | 0, $506($0_1 | 0, 1 | 0, 0 | 0) | 0 | 0, $506($0_1 | 0, 2 | 0, 0 | 0) | 0 | 0, $505($0_1 | 0, 3 | 0, 13123 | 0, 0 | 0) | 0 | 0, $505($0_1 | 0, 4 | 0, 13125 | 0, 0 | 0) | 0 | 0) | 0) {
    break label$1
   }
   $29($0_1 | 0);
   $8($0_1 | 0, -2 | 0, 1 | 0);
   $1_1 = 2;
  }
  return $1_1 | 0;
 }
 
 function $717($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 1056 | 0;
  global$0 = $5_1;
  label$1 : {
   $6_1 = HEAP8[$3_1 >> 0] | 0;
   if (!$6_1) {
    break label$1
   }
   if (!($865($1_1 | 0, $6_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = $530($0_1 | 0, $1_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  }
  $487($0_1 | 0, $5_1 | 0);
  $529($5_1 | 0, $2_1 | 0, 13127 | 0, $1_1 | 0);
  label$2 : {
   $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 < (HEAP32[($5_1 + 4 | 0) >> 2] | 0) >>> 0) {
    break label$2
   }
   $489($5_1 | 0, 1 | 0) | 0;
   $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1 + 1 | 0;
  HEAP8[((HEAP32[$5_1 >> 2] | 0) + $1_1 | 0) >> 0] = 0;
  $1_1 = HEAP32[$5_1 >> 2] | 0;
  $2_1 = ($1_1 + (HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0) + -1 | 0;
  label$3 : {
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     label$6 : {
      label$7 : {
       if (!(HEAPU8[$1_1 >> 0] | 0)) {
        break label$7
       }
       $3_1 = $1_1;
       break label$6;
      }
      HEAP8[$1_1 >> 0] = 59;
      $3_1 = $1_1 + 1 | 0;
     }
     $1_1 = $865($3_1 | 0, 59 | 0) | 0;
     $1_1 = $1_1 ? $1_1 : $2_1;
     HEAP8[$1_1 >> 0] = 0;
     $6_1 = $798($3_1 | 0, 13131 | 0) | 0;
     if (!$6_1) {
      continue label$5
     }
     break label$5;
    };
    $852($6_1 | 0) | 0;
    $1_1 = $33($0_1 | 0, $3_1 | 0) | 0;
    break label$3;
   }
   $491($5_1 | 0);
   $1_1 = 0;
   $3_1 = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
   $487($0_1 | 0, $5_1 + 528 | 0 | 0);
   $488($5_1 + 528 | 0 | 0, 13133 | 0);
   $529($5_1 + 528 | 0 | 0, $3_1 | 0, 13129 | 0, 13143 | 0);
   $488($5_1 + 528 | 0 | 0, 13156 | 0);
   $491($5_1 + 528 | 0 | 0);
  }
  global$0 = $5_1 + 1056 | 0;
  return $1_1 | 0;
 }
 
 function $718($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $2_1 = $530($0_1 | 0, $2_1 | 0, 13123 | 0, 13275 | 0) | 0;
    $4_1 = $865($2_1 | 0, 45 | 0) | 0;
    if (!$4_1) {
     break label$2
    }
    HEAP32[($3_1 + 16 | 0) >> 2] = $32($0_1 | 0, $2_1 | 0, $4_1 - $2_1 | 0 | 0) | 0;
    $2_1 = $715($0_1 | 0, $1_1 | 0, $35($0_1 | 0, 13277 | 0, $3_1 + 16 | 0 | 0) | 0 | 0) | 0;
    if (($2_1 | 0) != (2 | 0)) {
     break label$1
    }
    $2_1 = $4_1 + 1 | 0;
   }
   HEAP32[$3_1 >> 2] = $2_1;
   $2_1 = $715($0_1 | 0, $1_1 | 0, $35($0_1 | 0, 13277 | 0, $3_1 | 0) | 0 | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $719($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $2_1 = 0;
  $1_1 = global$0 - 544 | 0;
  global$0 = $1_1;
  $2_1 = 1;
  $3_1 = $506($0_1 | 0, 1 | 0, 0 | 0) | 0;
  $7($0_1 | 0, 1 | 0);
  $42($0_1 | 0, -1001e3 | 0, 13020 | 0) | 0;
  $42($0_1 | 0, 2 | 0, $3_1 | 0) | 0;
  label$1 : {
   if ($23($0_1 | 0, -1 | 0) | 0) {
    break label$1
   }
   $7($0_1 | 0, -2 | 0);
   label$2 : {
    if (($42($0_1 | 0, -1001001 | 0, 13103 | 0) | 0 | 0) == (5 | 0)) {
     break label$2
    }
    $493($0_1 | 0, 13347 | 0, 0 | 0) | 0;
   }
   $487($0_1 | 0, $1_1 + 16 | 0 | 0);
   i64toi32_i32$0 = 0;
   $4_1 = 1;
   $4$hi = i64toi32_i32$0;
   label$3 : while (1) {
    $488($1_1 + 16 | 0 | 0, 13383 | 0);
    label$4 : {
     i64toi32_i32$0 = $4$hi;
     if ($45($0_1 | 0, 3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0) {
      break label$4
     }
     $7($0_1 | 0, -2 | 0);
     HEAP32[($1_1 + 24 | 0) >> 2] = (HEAP32[($1_1 + 24 | 0) >> 2] | 0) + -2 | 0;
     $491($1_1 + 16 | 0 | 0);
     HEAP32[($1_1 + 4 | 0) >> 2] = $24($0_1 | 0, -1 | 0, 0 | 0) | 0;
     HEAP32[$1_1 >> 2] = $3_1;
     $493($0_1 | 0, 13386 | 0, $1_1 | 0) | 0;
    }
    $33($0_1 | 0, $3_1 | 0) | 0;
    $57($0_1 | 0, 1 | 0, 2 | 0, 0 | 0, 0 | 0);
    label$5 : {
     if (($11($0_1 | 0, -2 | 0) | 0 | 0) == (6 | 0)) {
      break label$5
     }
     label$6 : {
      if (!($16($0_1 | 0, -2 | 0) | 0)) {
       break label$6
      }
      $7($0_1 | 0, -2 | 0);
      $490($1_1 + 16 | 0 | 0);
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$4 = $4_1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$5;
      continue label$3;
     }
     $7($0_1 | 0, -3 | 0);
     HEAP32[($1_1 + 24 | 0) >> 2] = (HEAP32[($1_1 + 24 | 0) >> 2] | 0) + -2 | 0;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = $4_1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = $4$hi + 0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$4;
     continue label$3;
    }
    break label$3;
   };
   $8($0_1 | 0, -2 | 0, 1 | 0);
   $10($0_1 | 0, 1 | 0);
   $10($0_1 | 0, -3 | 0);
   $57($0_1 | 0, 2 | 0, 1 | 0, 0 | 0, 0 | 0);
   label$7 : {
    label$8 : {
     if (!($11($0_1 | 0, -1 | 0) | 0)) {
      break label$8
     }
     $51($0_1 | 0, 2 | 0, $3_1 | 0);
     break label$7;
    }
    $7($0_1 | 0, -2 | 0);
   }
   $2_1 = 2;
   label$9 : {
    if ($42($0_1 | 0, 2 | 0, $3_1 | 0) | 0) {
     break label$9
    }
    $37($0_1 | 0, 1 | 0);
    $9($0_1 | 0, -1 | 0, -2 | 0);
    $51($0_1 | 0, 2 | 0, $3_1 | 0);
   }
   $8($0_1 | 0, -2 | 0, 1 | 0);
  }
  global$0 = $1_1 + 544 | 0;
  return $2_1 | 0;
 }
 
 function $720($0_1) {
  $0_1 = $0_1 | 0;
  $535($0_1 | 0, +(504.0), 136 | 0);
  $46($0_1 | 0, 0 | 0, 8 | 0);
  $514($0_1 | 0, 13424 | 0, 0 | 0);
  return 1 | 0;
 }
 
 function $721($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $508($0_1 | 0, 1 | 0, 6 | 0);
  $1_1 = $402($0_1 | 0) | 0;
  $10($0_1 | 0, 1 | 0);
  $2($0_1 | 0, $1_1 | 0, 1 | 0);
  return 1 | 0;
 }
 
 function $722($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = $27($0_1 | 0, 1 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   $495($0_1 | 0, 1 | 0, 13554 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    $1_1 = $723($0_1 | 0, $1_1 | 0, ($6($0_1 | 0) | 0) + -1 | 0 | 0) | 0;
    if (($1_1 | 0) > (-1 | 0)) {
     break label$3
    }
    $37($0_1 | 0, 0 | 0);
    $2_1 = 2;
    $1_1 = -2;
    break label$2;
   }
   $37($0_1 | 0, 1 | 0);
   $2_1 = $1_1 + 1 | 0;
   $1_1 = $1_1 ^ -1 | 0;
  }
  $8($0_1 | 0, $1_1 | 0, 1 | 0);
  return $2_1 | 0;
 }
 
 function $723($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1($1_1 | 0, $2_1 | 0) | 0) {
      break label$3
     }
     $33($0_1 | 0, 13561 | 0) | 0;
     break label$2;
    }
    $2($0_1 | 0, $1_1 | 0, $2_1 | 0);
    label$4 : {
     if (($210($1_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 + 12 | 0 | 0) | 0) >>> 0 > 1 >>> 0) {
      break label$4
     }
     $2_1 = $1($0_1 | 0, (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
     $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     label$5 : {
      if ($2_1) {
       break label$5
      }
      $2_1 = -1;
      $7($1_1 | 0, $4_1 ^ -1 | 0 | 0);
      $33($0_1 | 0, 13590 | 0) | 0;
      break label$1;
     }
     $2($1_1 | 0, $0_1 | 0, $4_1 | 0);
     $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     break label$1;
    }
    $2($1_1 | 0, $0_1 | 0, 1 | 0);
   }
   $2_1 = -1;
  }
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $724($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0, $39($0_1 | 0) | 0 | 0);
  return 2 | 0;
 }
 
 function $725($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0;
  $1_1 = global$0 - 112 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = $27($0_1 | 0, 1 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   $495($0_1 | 0, 1 | 0, 13554 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    if (($2_1 | 0) != ($0_1 | 0)) {
     break label$3
    }
    $3_1 = 0;
    break label$2;
   }
   $3_1 = 2;
   label$4 : {
    switch ($62($2_1 | 0) | 0 | 0) {
    case 0:
     $3_1 = 3;
     if ($179($2_1 | 0, 0 | 0, $1_1 | 0) | 0) {
      break label$2
     }
     $3_1 = $6($2_1 | 0) | 0 ? 2 : 1;
     break label$2;
    case 1:
     break label$2;
    default:
     break label$4;
    };
   }
   $3_1 = 1;
  }
  $33($0_1 | 0, HEAP32[(($3_1 << 2 | 0) + 13632 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $1_1 + 112 | 0;
  return 1 | 0;
 }
 
 function $726($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $508($0_1 | 0, 1 | 0, 6 | 0);
  $1_1 = $402($0_1 | 0) | 0;
  $10($0_1 | 0, 1 | 0);
  $2($0_1 | 0, $1_1 | 0, 1 | 0);
  $36($0_1 | 0, 172 | 0, 1 | 0);
  return 1 | 0;
 }
 
 function $727($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   $1_1 = $27($0_1 | 0, -1001001 | 0) | 0;
   $2_1 = $723($0_1 | 0, $1_1 | 0, $6($0_1 | 0) | 0 | 0) | 0;
   if (($2_1 | 0) > (-1 | 0)) {
    break label$1
   }
   label$2 : {
    if (($62($1_1 | 0) | 0) >>> 0 < 2 >>> 0) {
     break label$2
    }
    $404($1_1 | 0) | 0;
   }
   label$3 : {
    if (($11($0_1 | 0, -1 | 0) | 0 | 0) != (4 | 0)) {
     break label$3
    }
    $497($0_1 | 0, 1 | 0);
    $8($0_1 | 0, -2 | 0, 1 | 0);
    $67($0_1 | 0, 2 | 0);
   }
   $2_1 = $64($0_1 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $728($0_1) {
  $0_1 = $0_1 | 0;
  return $212($0_1 | 0, $6($0_1 | 0) | 0 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function $729($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   if (($11($0_1 | 0, 1 | 0) | 0 | 0) == (-1 | 0)) {
    break label$1
   }
   $1_1 = $27($0_1 | 0, 1 | 0) | 0;
   if ($1_1) {
    break label$1
   }
   $495($0_1 | 0, 1 | 0, 13554 | 0) | 0;
   $1_1 = 0;
  }
  $37($0_1 | 0, $211($1_1 | 0) | 0 | 0);
  return 1 | 0;
 }
 
 function $730($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = global$0 - 128 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = $27($0_1 | 0, 1 | 0) | 0;
   if ($2_1) {
    break label$1
   }
   $495($0_1 | 0, 1 | 0, 13554 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       if (($2_1 | 0) != ($0_1 | 0)) {
        break label$6
       }
       $2_1 = 0;
       break label$5;
      }
      if ($62($2_1 | 0) | 0) {
       break label$3
      }
      if (!($179($2_1 | 0, 0 | 0, $1_1 + 16 | 0 | 0) | 0)) {
       break label$4
      }
      $2_1 = 3;
     }
     HEAP32[$1_1 >> 2] = HEAP32[(($2_1 << 2 | 0) + 13632 | 0) >> 2] | 0;
     $2_1 = $493($0_1 | 0, 13670 | 0, $1_1 | 0) | 0;
     break label$2;
    }
    $6($2_1 | 0) | 0;
   }
   label$7 : {
    if ($404($2_1 | 0) | 0) {
     break label$7
    }
    $2_1 = 1;
    $37($0_1 | 0, 1 | 0);
    break label$2;
   }
   $37($0_1 | 0, 0 | 0);
   $2($2_1 | 0, $0_1 | 0, 1 | 0);
   $2_1 = 2;
  }
  global$0 = $1_1 + 128 | 0;
  return $2_1 | 0;
 }
 
 function $731($0_1) {
  $0_1 = $0_1 | 0;
  $528($0_1 | 0, 13698 | 0, 181 | 0, 1 | 0);
  $7($0_1 | 0, -2 | 0);
  $528($0_1 | 0, 13701 | 0, 182 | 0, 1 | 0);
  $7($0_1 | 0, -2 | 0);
  $528($0_1 | 0, 13709 | 0, 183 | 0, 1 | 0);
  $7($0_1 | 0, -2 | 0);
  $528($0_1 | 0, 13719 | 0, 184 | 0, 1 | 0);
  $7($0_1 | 0, -2 | 0);
  $528($0_1 | 0, 13725 | 0, 185 | 0, 1 | 0);
  $7($0_1 | 0, -2 | 0);
  $528($0_1 | 0, 13728 | 0, 186 | 0, 1 | 0);
  $7($0_1 | 0, -2 | 0);
  $528($0_1 | 0, 13731 | 0, 187 | 0, 1 | 0);
  $7($0_1 | 0, -2 | 0);
  $528($0_1 | 0, 13738 | 0, 188 | 0, 1 | 0);
  $7($0_1 | 0, -2 | 0);
  $528($0_1 | 0, 13743 | 0, 189 | 0, 1 | 0);
  $7($0_1 | 0, -2 | 0);
  $528($0_1 | 0, 13748 | 0, 190 | 0, 1 | 0);
  $7($0_1 | 0, -2 | 0);
 }
 
 function $732($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $733($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 | 32 | 0) + -97 | 0) >>> 0 < 6 >>> 0 | ($732($0_1 | 0) | 0 | 0) != (0 | 0) | 0 | 0;
 }
 
 function $734($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($738($0_1 | 0) | 0) {
    break label$1
   }
   return 0 | 0;
  }
  return !($743($0_1 | 0) | 0) | 0;
 }
 
 function $735($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 | 32 | 0) + -97 | 0) >>> 0 < 26 >>> 0 | 0;
 }
 
 function $736($0_1) {
  $0_1 = $0_1 | 0;
  return ($737($0_1 | 0) | 0 ? $0_1 & 95 | 0 : $0_1) | 0;
 }
 
 function $737($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -97 | 0) >>> 0 < 26 >>> 0 | 0;
 }
 
 function $738($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -33 | 0) >>> 0 < 94 >>> 0 | 0;
 }
 
 function $739($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -65 | 0) >>> 0 < 26 >>> 0 | 0;
 }
 
 function $740($0_1) {
  $0_1 = $0_1 | 0;
  return ($739($0_1 | 0) | 0 ? $0_1 | 32 | 0 : $0_1) | 0;
 }
 
 function $741($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 < 32 >>> 0 | ($0_1 | 0) == (127 | 0) | 0 | 0;
 }
 
 function $742($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $743($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1;
  label$1 : {
   if ($735($0_1 | 0) | 0) {
    break label$1
   }
   $1_1 = ($732($0_1 | 0) | 0 | 0) != (0 | 0);
  }
  return $1_1 | 0;
 }
 
 function $744() {
  return 21056 | 0;
 }
 
 function $745() {
  return 20376 | 0;
 }
 
 function $746($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      if ((HEAPU8[($2_1 + 13760 | 0) >> 0] | 0 | 0) == ($0_1 | 0)) {
       break label$3
      }
      $3_1 = 87;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != (87 | 0)) {
       continue label$4
      }
      break label$2;
     };
    }
    $3_1 = $2_1;
    if ($2_1) {
     break label$2
    }
    $4_1 = 13856;
    break label$1;
   }
   $2_1 = 13856;
   label$5 : while (1) {
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    $4_1 = $2_1 + 1 | 0;
    $2_1 = $4_1;
    if ($0_1) {
     continue label$5
    }
    $2_1 = $4_1;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $760($4_1 | 0, HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $747($0_1) {
  $0_1 = $0_1 | 0;
  return $746($0_1 | 0, HEAP32[(($748() | 0) + 176 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $748() {
  return $745() | 0 | 0;
 }
 
 function $749($0_1) {
  $0_1 = $0_1 | 0;
  return $751($0_1 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function $750($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  fimport$26(0 | 0, $1_1 + 8 | 0 | 0) | 0;
  $3_1 = Math_imul(HEAP32[($1_1 + 12 | 0) >> 2] | 0, 65537) ^ ((($1_1 + 8 | 0) >>> 4 | 0) + $0_1 | 0) | 0;
  label$1 : while (1) {
   HEAP8[($0_1 + $2_1 | 0) >> 0] = ($3_1 & 15 | 0 | (($3_1 << 1 | 0) & 32 | 0) | 0) + 65 | 0;
   $3_1 = $3_1 >>> 5 | 0;
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (6 | 0)) {
    continue label$1
   }
   break label$1;
  };
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $751($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $4_1 = $961($0_1 | 0) | 0;
      if ($4_1 >>> 0 < 6 >>> 0) {
       break label$4
      }
      if (($4_1 + -6 | 0) >>> 0 < $1_1 >>> 0) {
       break label$4
      }
      $5_1 = (($0_1 + $4_1 | 0) - $1_1 | 0) + -6 | 0;
      if (!($874($5_1 | 0, 15660 | 0, 6 | 0) | 0)) {
       break label$3
      }
     }
     HEAP32[($744() | 0) >> 2] = 28;
     break label$2;
    }
    $2_1 = $2_1 & -2097348 | 0 | 194 | 0;
    $1_1 = 100;
    label$5 : while (1) {
     $750($5_1 | 0) | 0;
     HEAP32[$3_1 >> 2] = 384;
     $4_1 = $883($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
     if (($4_1 | 0) > (-1 | 0)) {
      break label$1
     }
     label$6 : {
      $1_1 = $1_1 + -1 | 0;
      if (!$1_1) {
       break label$6
      }
      if ((HEAP32[($744() | 0) >> 2] | 0 | 0) == (20 | 0)) {
       continue label$5
      }
     }
     break label$5;
    };
    $951($5_1 | 0, 15660 | 0, 6 | 0) | 0;
   }
   $4_1 = -1;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $752() {
  return 15668 | 0;
 }
 
 function $753($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $876($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $754($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755() | 0;
  return $753($0_1 | 0, $1_1 | 0, $0_1 | 0) | 0 | 0;
 }
 
 function $755() {
  return $745() | 0 | 0;
 }
 
 function $756($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $17_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   if ($0_1 >>> 0 > 6 >>> 0) {
    break label$1
   }
   $889(21060 | 0);
   label$2 : {
    if (($0_1 | 0) != (6 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$1_1) {
      break label$3
     }
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 15736 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 15740 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[($2_1 + 8 | 0) >> 2] = $15_1;
     HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 15728 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 15732 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[$2_1 >> 2] = $17_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $0_1 = 0;
     label$4 : while (1) {
      label$5 : {
       $3_1 = $864($1_1 | 0, 59 | 0) | 0;
       $4_1 = $3_1 - $1_1 | 0;
       if (($4_1 | 0) > (15 | 0)) {
        break label$5
       }
       $951($2_1 | 0, $1_1 | 0, $4_1 | 0) | 0;
       HEAP8[($2_1 + $4_1 | 0) >> 0] = 0;
       $1_1 = HEAPU8[$3_1 >> 0] | 0 ? $3_1 + 1 | 0 : $1_1;
      }
      $757($0_1 | 0, $2_1 | 0) | 0;
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) != (6 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    $1_1 = 21072;
    $0_1 = 0;
    label$6 : while (1) {
     $3_1 = HEAP32[(($0_1 << 2 | 0) + 21220 | 0) >> 2] | 0;
     $3_1 = $3_1 ? $3_1 + 8 | 0 : 15744;
     $4_1 = $961($3_1 | 0) | 0;
     $951($1_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
     $3_1 = $1_1 + $4_1 | 0;
     HEAP8[$3_1 >> 0] = 59;
     $1_1 = $3_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     if (($0_1 | 0) != (6 | 0)) {
      continue label$6
     }
     break label$6;
    };
    HEAP8[$3_1 >> 0] = 0;
    $890(21060 | 0);
    $3_1 = 21072;
    break label$1;
   }
   $3_1 = $757($0_1 | 0, $1_1 | 0) | 0;
   $890(21060 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $757($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $6_1 = 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    $6_1 = ($0_1 << 2 | 0) + 21220 | 0;
    $0_1 = $759($0_1 | 0, $1_1 | 0) | 0;
    HEAP32[$6_1 >> 2] = $0_1;
    break label$1;
   }
   $0_1 = HEAP32[(($0_1 << 2 | 0) + 21220 | 0) >> 2] | 0;
  }
  return ($0_1 ? $0_1 + 8 | 0 : 15744) | 0;
 }
 
 function $758($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $761(HEAP32[$1_1 >> 2] | 0 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, $0_1 | 0) | 0;
  }
  return ($1_1 ? $1_1 : $0_1) | 0;
 }
 
 function $759($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   if (HEAPU8[$1_1 >> 0] | 0) {
    break label$1
   }
   label$2 : {
    $1_1 = $885(15746 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = $885(Math_imul($0_1, 12) + 15760 | 0 | 0) | 0;
    if (!$1_1) {
     break label$3
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$4 : {
    $1_1 = $885(15832 | 0) | 0;
    if (!$1_1) {
     break label$4
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   $1_1 = 15837;
  }
  $2_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : while (1) {
     $3_1 = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
     if (!$3_1) {
      break label$6
     }
     if (($3_1 | 0) == (47 | 0)) {
      break label$6
     }
     $3_1 = 15;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != (15 | 0)) {
      continue label$7
     }
     break label$5;
    };
   }
   $3_1 = $2_1;
  }
  $4_1 = 15837;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       $2_1 = HEAPU8[$1_1 >> 0] | 0;
       if (($2_1 | 0) == (46 | 0)) {
        break label$12
       }
       if (HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0) {
        break label$12
       }
       $4_1 = $1_1;
       if (($2_1 | 0) != (67 | 0)) {
        break label$11
       }
      }
      if (!(HEAPU8[($4_1 + 1 | 0) >> 0] | 0)) {
       break label$10
      }
     }
     if (!($876($4_1 | 0, 15837 | 0) | 0)) {
      break label$10
     }
     if ($876($4_1 | 0, 15845 | 0) | 0) {
      break label$9
     }
    }
    label$13 : {
     if ($0_1) {
      break label$13
     }
     $2_1 = 15876;
     if ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0 | 0) == (46 | 0)) {
      break label$8
     }
    }
    return 0 | 0;
   }
   label$14 : {
    $2_1 = HEAP32[(0 + 21176 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$14
    }
    label$15 : while (1) {
     if (!($876($4_1 | 0, $2_1 + 8 | 0 | 0) | 0)) {
      break label$8
     }
     $2_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$15
     }
     break label$15;
    };
   }
   $889(21168 | 0);
   label$16 : {
    $2_1 = HEAP32[(0 + 21176 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$16
    }
    label$17 : while (1) {
     label$18 : {
      if ($876($4_1 | 0, $2_1 + 8 | 0 | 0) | 0) {
       break label$18
      }
      $890(21168 | 0);
      return $2_1 | 0;
     }
     $2_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$17
     }
     break label$17;
    };
   }
   label$19 : {
    label$20 : {
     $2_1 = $939(28 | 0) | 0;
     if ($2_1) {
      break label$20
     }
     $2_1 = 0;
     break label$19;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 15880 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = HEAP32[(i64toi32_i32$2 + 15876 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1_1 = $2_1 + 8 | 0;
    $951($1_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    HEAP8[($1_1 + $3_1 | 0) >> 0] = 0;
    HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[(0 + 21176 | 0) >> 2] | 0;
    HEAP32[(0 + 21176 | 0) >> 2] = $2_1;
   }
   $890(21168 | 0);
   $2_1 = $0_1 | $2_1 | 0 ? $2_1 : 15876;
  }
  return $2_1 | 0;
 }
 
 function $760($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $758($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $761($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $9_1 = 0, $10_1 = 0;
  $3_1 = (HEAP32[$0_1 >> 2] | 0) + 1794895138 | 0;
  $4_1 = $762(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
  $5_1 = $762(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
  $6_1 = 0;
  $7_1 = $762(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
  label$1 : {
   if ($4_1 >>> 0 >= ($1_1 >>> 2 | 0) >>> 0) {
    break label$1
   }
   $8_1 = $1_1 - ($4_1 << 2 | 0) | 0;
   if ($5_1 >>> 0 >= $8_1 >>> 0) {
    break label$1
   }
   if ($7_1 >>> 0 >= $8_1 >>> 0) {
    break label$1
   }
   if (($7_1 | $5_1 | 0) & 3 | 0) {
    break label$1
   }
   $9_1 = $7_1 >>> 2 | 0;
   $10_1 = $5_1 >>> 2 | 0;
   $6_1 = 0;
   $8_1 = 0;
   label$2 : while (1) {
    $11_1 = $4_1 >>> 1 | 0;
    $12_1 = $8_1 + $11_1 | 0;
    $13_1 = $12_1 << 1 | 0;
    $5_1 = $0_1 + (($13_1 + $10_1 | 0) << 2 | 0) | 0;
    $7_1 = $762(HEAP32[$5_1 >> 2] | 0 | 0, $3_1 | 0) | 0;
    $5_1 = $762(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
    if ($1_1 >>> 0 <= $5_1 >>> 0) {
     break label$1
    }
    if ($7_1 >>> 0 >= ($1_1 - $5_1 | 0) >>> 0) {
     break label$1
    }
    if (HEAPU8[($0_1 + ($5_1 + $7_1 | 0) | 0) >> 0] | 0) {
     break label$1
    }
    label$3 : {
     $5_1 = $876($2_1 | 0, $0_1 + $5_1 | 0 | 0) | 0;
     if ($5_1) {
      break label$3
     }
     $4_1 = $0_1 + (($13_1 + $9_1 | 0) << 2 | 0) | 0;
     $5_1 = $762(HEAP32[$4_1 >> 2] | 0 | 0, $3_1 | 0) | 0;
     $4_1 = $762(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
     if ($1_1 >>> 0 <= $4_1 >>> 0) {
      break label$1
     }
     if ($5_1 >>> 0 >= ($1_1 - $4_1 | 0) >>> 0) {
      break label$1
     }
     $6_1 = HEAPU8[($0_1 + ($4_1 + $5_1 | 0) | 0) >> 0] | 0 ? 0 : $0_1 + $4_1 | 0;
     break label$1;
    }
    if (($4_1 | 0) == (1 | 0)) {
     break label$1
    }
    $5_1 = ($5_1 | 0) < (0 | 0);
    $4_1 = $5_1 ? $11_1 : $4_1 - $11_1 | 0;
    $8_1 = $5_1 ? $8_1 : $12_1;
    continue label$2;
   };
  }
  return $6_1 | 0;
 }
 
 function $762($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 ? $0_1 << 24 | 0 | (($0_1 << 8 | 0) & 16711680 | 0) | 0 | (($0_1 >>> 8 | 0) & 65280 | 0 | ($0_1 >>> 24 | 0) | 0) | 0 : $0_1) | 0;
 }
 
 function $763($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $764($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = fimport$27($763($0_1 | 0) | 0 | 0) | 0;
  return $891((($0_1 | 0) == (27 | 0) ? 0 : $0_1) | 0) | 0 | 0;
 }
 
 function $765($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $5_1 = 0.0, $4_1 = 0, $1_1 = 0, $4$hi = 0, $2_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $3_1 = 0, $27_1 = 0, $28_1 = 0, $6_1 = 0.0, $50_1 = 0.0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $61_1 = 0.0, $63_1 = 0.0, $68_1 = 0.0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       wasm2js_scratch_store_f64(+$0_1);
       i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
       $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
       $4$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $20_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $21_1 = 0
         } else {
          $21_1 = 1
         }
         $22_1 = $21_1;
        } else {
         $22_1 = 0
        }
        $20_1 = $22_1;
       }
       if ($20_1) {
        break label$5
       }
       i64toi32_i32$2 = $4$hi;
       i64toi32_i32$3 = $4_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $23_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
       }
       $1_1 = $23_1;
       if ($1_1 >>> 0 > 1048575 >>> 0) {
        break label$4
       }
      }
      label$6 : {
       i64toi32_i32$0 = $4$hi;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$3 = 2147483647;
       i64toi32_i32$1 = -1;
       i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
        break label$6
       }
       return +(-1.0 / ($0_1 * $0_1));
      }
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
       $24_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
         $25_1 = 0
        } else {
         $25_1 = 1
        }
        $26_1 = $25_1;
       } else {
        $26_1 = 0
       }
       $24_1 = $26_1;
      }
      if ($24_1) {
       break label$3
      }
      return +(($0_1 - $0_1) / 0.0);
     }
     if ($1_1 >>> 0 > 2146435071 >>> 0) {
      break label$1
     }
     $2_1 = 1072693248;
     $3_1 = -1023;
     label$7 : {
      if (($1_1 | 0) == (1072693248 | 0)) {
       break label$7
      }
      $2_1 = $1_1;
      break label$2;
     }
     i64toi32_i32$1 = $4$hi;
     if ($4_1) {
      break label$2
     }
     return +(0.0);
    }
    wasm2js_scratch_store_f64(+($0_1 * 18014398509481984.0));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $27_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $27_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $27_1;
    $3_1 = -1077;
   }
   $1_1 = $2_1 + 614242 | 0;
   $5_1 = +($3_1 + ($1_1 >>> 20 | 0) | 0 | 0);
   $50_1 = $5_1 * .6931471803691238;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = ($1_1 & 1048575 | 0) + 1072079006 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $28_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $28_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $55$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $57_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   $57$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $55$hi;
   i64toi32_i32$2 = $28_1;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$3 = $57_1;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64() + -1.0;
   $61_1 = $0_1;
   $63_1 = $5_1 * 1.9082149292705877e-10;
   $5_1 = $0_1 / ($0_1 + 2.0);
   $68_1 = $5_1;
   $6_1 = $0_1 * ($0_1 * .5);
   $5_1 = $5_1 * $5_1;
   $0_1 = $5_1 * $5_1;
   $0_1 = $50_1 + ($61_1 + ($63_1 + $68_1 * ($6_1 + ($0_1 * ($0_1 * ($0_1 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $5_1 * ($0_1 * ($0_1 * ($0_1 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735))) - $6_1));
  }
  return +$0_1;
 }
 
 function $766($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $10_1 = 0, $3$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $10_1 & 2047 | 0;
   if (($2_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($2_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $2_1 = 0;
      break label$3;
     }
     $0_1 = +$766(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $2_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $2_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1022 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $767($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, i64toi32_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $8_1 & 2147483647 | 0;
    if ($2_1 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    if ($2_1 >>> 0 < 1045430272 >>> 0) {
     break label$1
    }
    $0_1 = +$783(+$0_1, +(0.0), 0 | 0);
    break label$1;
   }
   label$3 : {
    if ($2_1 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $0_1 = $0_1 - $0_1;
    break label$1;
   }
   label$4 : {
    switch (($776(+$0_1, $1_1 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $0_1 = +$783(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), 1 | 0);
     break label$1;
    case 1:
     $0_1 = +$786(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]));
     break label$1;
    case 2:
     $0_1 = -+$783(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), 1 | 0);
     break label$1;
    default:
     break label$4;
    };
   }
   $0_1 = -+$786(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]));
  }
  global$0 = $1_1 + 16 | 0;
  return +$0_1;
 }
 
 function $768($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0, $3_1 = 0.0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $9_1 = 0, i64toi32_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $9_1 & 2147483647 | 0;
    if ($2_1 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    $3_1 = 1.0;
    if ($2_1 >>> 0 < 1044816030 >>> 0) {
     break label$1
    }
    $3_1 = +$786(+$0_1, +(0.0));
    break label$1;
   }
   label$3 : {
    if ($2_1 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $3_1 = $0_1 - $0_1;
    break label$1;
   }
   label$4 : {
    switch (($776(+$0_1, $1_1 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $3_1 = +$786(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]));
     break label$1;
    case 1:
     $3_1 = -+$783(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), 1 | 0);
     break label$1;
    case 2:
     $3_1 = -+$786(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]));
     break label$1;
    default:
     break label$4;
    };
   }
   $3_1 = +$783(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), 1 | 0);
  }
  global$0 = $1_1 + 16 | 0;
  return +$3_1;
 }
 
 function $769($0_1) {
  $0_1 = +$0_1;
  var $4_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6_1 = 0.0, $1_1 = 0, $5_1 = 0.0, $3_1 = 0, $13_1 = 0, $14_1 = 0, $3$hi = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $3$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $13_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $1_1 = $13_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          i64toi32_i32$1 = $3$hi;
          i64toi32_i32$0 = $3_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 32;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
           i64toi32_i32$2 = 0;
           $14_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          } else {
           i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
           $14_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
          }
          $2_1 = $14_1 & 2147483647 | 0;
          if ($2_1 >>> 0 < 1082532651 >>> 0) {
           break label$8
          }
          label$9 : {
           i64toi32_i32$2 = $770(+$0_1) | 0;
           i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
           i64toi32_i32$1 = i64toi32_i32$2;
           i64toi32_i32$2 = 2147483647;
           i64toi32_i32$3 = -1;
           i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
           i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
           i64toi32_i32$1 = 2146435072;
           i64toi32_i32$3 = 0;
           if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0 | 0) | 0) {
            break label$9
           }
           return +$0_1;
          }
          label$10 : {
           if ($0_1 > 709.782712893384 ^ 1 | 0) {
            break label$10
           }
           return +($0_1 * 8988465674311579538646525.0e283);
          }
          if ($0_1 < -708.3964185322641 ^ 1 | 0) {
           break label$7
          }
          $4_1 = 0.0;
          if (!($0_1 < -745.1332191019411)) {
           break label$7
          }
          break label$2;
         }
         if ($2_1 >>> 0 < 1071001155 >>> 0) {
          break label$4
         }
         if ($2_1 >>> 0 < 1072734898 >>> 0) {
          break label$6
         }
        }
        label$11 : {
         $4_1 = $0_1 * 1.4426950408889634 + +HEAPF64[(($1_1 << 3 | 0) + 15904 | 0) >> 3];
         if (!(Math_abs($4_1) < 2147483648.0)) {
          break label$11
         }
         $2_1 = ~~$4_1;
         break label$5;
        }
        $2_1 = -2147483648;
        break label$5;
       }
       $2_1 = ($1_1 ^ 1 | 0) - $1_1 | 0;
      }
      $4_1 = +($2_1 | 0);
      $0_1 = $0_1 + $4_1 * -.6931471803691238;
      $5_1 = $4_1 * 1.9082149292705877e-10;
      $6_1 = $0_1 - $5_1;
      break label$3;
     }
     if ($2_1 >>> 0 <= 1043333120 >>> 0) {
      break label$1
     }
     $2_1 = 0;
     $5_1 = 0.0;
     $6_1 = $0_1;
    }
    $4_1 = $6_1 * $6_1;
    $4_1 = $6_1 - $4_1 * ($4_1 * ($4_1 * ($4_1 * ($4_1 * 4.1381367970572385e-08 + -1.6533902205465252e-06) + 6.613756321437934e-05) + -2.7777777777015593e-03) + .16666666666666602);
    $4_1 = $0_1 + ($6_1 * $4_1 / (2.0 - $4_1) - $5_1) + 1.0;
    if (!$2_1) {
     break label$2
    }
    $4_1 = +$949(+$4_1, $2_1 | 0);
   }
   return +$4_1;
  }
  return +($0_1 + 1.0);
 }
 
 function $770($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $771($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $5_1 = 0.0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0.0, $3_1 = 0, $20_1 = 0, $6_1 = 0.0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $3$hi = 0, $110_1 = 0.0, $112_1 = 0.0, $119_1 = 0, $119$hi = 0, $122_1 = 0, $122$hi = 0, $124_1 = 0.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $3_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $20_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $1_1 = $20_1 & 2147483647 | 0;
   if ($1_1 >>> 0 >= 1141899264 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1_1 >>> 0 > 1071382527 >>> 0) {
       break label$4
      }
      if ($1_1 >>> 0 < 1044381696 >>> 0) {
       break label$2
      }
      $2_1 = -1;
      $1_1 = 1;
      break label$3;
     }
     $0_1 = +$775(+$0_1);
     label$5 : {
      label$6 : {
       if ($1_1 >>> 0 > 1072889855 >>> 0) {
        break label$6
       }
       label$7 : {
        if ($1_1 >>> 0 > 1072037887 >>> 0) {
         break label$7
        }
        $0_1 = ($0_1 + $0_1 + -1.0) / ($0_1 + 2.0);
        $1_1 = 0;
        $2_1 = 0;
        break label$3;
       }
       $0_1 = ($0_1 + -1.0) / ($0_1 + 1.0);
       $2_1 = 1;
       break label$5;
      }
      label$8 : {
       if ($1_1 >>> 0 > 1073971199 >>> 0) {
        break label$8
       }
       $0_1 = ($0_1 + -1.5) / ($0_1 * 1.5 + 1.0);
       $2_1 = 2;
       break label$5;
      }
      $0_1 = -1.0 / $0_1;
      $2_1 = 3;
     }
     $1_1 = 0;
    }
    $4_1 = $0_1 * $0_1;
    $5_1 = $4_1 * $4_1;
    $6_1 = $5_1 * ($5_1 * ($5_1 * ($5_1 * ($5_1 * -.036531572744216916 + -.058335701337905735) + -.0769187620504483) + -.11111110405462356) + -.19999999999876483);
    $5_1 = $4_1 * ($5_1 * ($5_1 * ($5_1 * ($5_1 * ($5_1 * .016285820115365782 + .049768779946159324) + .06661073137387531) + .09090887133436507) + .14285714272503466) + .3333333333333293);
    label$9 : {
     if (!$1_1) {
      break label$9
     }
     return +($0_1 - $0_1 * ($6_1 + $5_1));
    }
    $1_1 = $2_1 << 3 | 0;
    $0_1 = +HEAPF64[($1_1 + 15920 | 0) >> 3] - ($0_1 * ($6_1 + $5_1) - +HEAPF64[($1_1 + 15952 | 0) >> 3] - $0_1);
    $110_1 = $0_1;
    $112_1 = -$0_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $21_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $22_1 = 0
      } else {
       $22_1 = 1
      }
      $23_1 = $22_1;
     } else {
      $23_1 = 0
     }
     $21_1 = $23_1;
    }
    $0_1 = $21_1 ? $110_1 : $112_1;
   }
   return +$0_1;
  }
  wasm2js_scratch_store_f64(+(1.5707963267948966));
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$2 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $119_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
  $119$hi = i64toi32_i32$1;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $122_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
  $122$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $119$hi;
  i64toi32_i32$1 = $119_1;
  i64toi32_i32$0 = $122$hi;
  i64toi32_i32$2 = $122_1;
  i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$2 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  $124_1 = +wasm2js_scratch_load_f64();
  i64toi32_i32$0 = $772(+$0_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$3 = i64toi32_i32$0;
  i64toi32_i32$0 = 2147483647;
  i64toi32_i32$2 = -1;
  i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
  i64toi32_i32$3 = 2146435072;
  i64toi32_i32$2 = 0;
  return +(i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0 ? $0_1 : $124_1);
 }
 
 function $772($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $773($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $2_1 = 0, $8_1 = 0.0, $7$hi = 0, $6_1 = 0, $5_1 = 0, $24_1 = 0, $25_1 = 0, $4_1 = 0, $26_1 = 0, $27_1 = 0, $3_1 = 0, $37_1 = 0, $60_1 = 0, $60$hi = 0, $63_1 = 0, $63$hi = 0, $81_1 = 0, $81$hi = 0, $84_1 = 0, $84$hi = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $774(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $774(+$0_1) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$2 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$2 = 1;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$1
    }
   }
   return +($0_1 + $1_1);
  }
  label$3 : {
   wasm2js_scratch_store_f64(+$1_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $24_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $24_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $24_1;
   i64toi32_i32$1 = $7$hi;
   $3_1 = $7_1;
   if ($2_1 + -1072693248 | 0 | $7_1 | 0) {
    break label$3
   }
   return +(+$771(+$0_1));
  }
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$0 = $7_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 62;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $25_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $25_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $4_1 = $25_1 & 2 | 0;
  $37_1 = $4_1;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $26_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $26_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $5_1 = $37_1 | $26_1 | 0;
  label$4 : {
   label$5 : {
    label$6 : {
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $27_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $27_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $6_1 = $27_1 & 2147483647 | 0;
     i64toi32_i32$1 = $7$hi;
     if ($6_1 | $7_1 | 0) {
      break label$6
     }
     $8_1 = $0_1;
     label$7 : {
      switch ($5_1 | 0) {
      case 2:
       break label$5;
      case 3:
       break label$7;
      default:
       break label$4;
      };
     }
     return +(-3.141592653589793);
    }
    label$8 : {
     $2_1 = $2_1 & 2147483647 | 0;
     if ($2_1 | $3_1 | 0) {
      break label$8
     }
     wasm2js_scratch_store_f64(+(1.5707963267948966));
     i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $60_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $60$hi = i64toi32_i32$2;
     wasm2js_scratch_store_f64(+$0_1);
     i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $63_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $63$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $60$hi;
     i64toi32_i32$2 = $60_1;
     i64toi32_i32$1 = $63$hi;
     i64toi32_i32$3 = $63_1;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 | i64toi32_i32$3 | 0 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
     return +(+wasm2js_scratch_load_f64());
    }
    label$9 : {
     label$10 : {
      if (($2_1 | 0) != (2146435072 | 0)) {
       break label$10
      }
      if (($6_1 | 0) != (2146435072 | 0)) {
       break label$9
      }
      return +(+HEAPF64[(($5_1 << 3 | 0) + 15984 | 0) >> 3]);
     }
     label$11 : {
      label$12 : {
       if (($6_1 | 0) == (2146435072 | 0)) {
        break label$12
       }
       if (($2_1 + 67108864 | 0) >>> 0 >= $6_1 >>> 0) {
        break label$11
       }
      }
      wasm2js_scratch_store_f64(+(1.5707963267948966));
      i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $81_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $81$hi = i64toi32_i32$2;
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = -2147483648;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
      $84_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $84$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $81$hi;
      i64toi32_i32$2 = $81_1;
      i64toi32_i32$1 = $84$hi;
      i64toi32_i32$3 = $84_1;
      i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
      wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 | i64toi32_i32$3 | 0 | 0);
      wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
      return +(+wasm2js_scratch_load_f64());
     }
     label$13 : {
      label$14 : {
       if (!$4_1) {
        break label$14
       }
       $8_1 = 0.0;
       if (($6_1 + 67108864 | 0) >>> 0 < $2_1 >>> 0) {
        break label$13
       }
      }
      $8_1 = +$771(+(+$775(+($0_1 / $1_1))));
     }
     label$15 : {
      switch ($5_1 | 0) {
      case 1:
       return +-$8_1;
      case 2:
       return +(3.141592653589793 - ($8_1 + -1.2246467991473532e-16));
      case 0:
       break label$4;
      default:
       break label$15;
      };
     }
     return +($8_1 + -1.2246467991473532e-16 + -3.141592653589793);
    }
    return +(+HEAPF64[(($5_1 << 3 | 0) + 16016 | 0) >> 3]);
   }
   $8_1 = 3.141592653589793;
  }
  return +$8_1;
 }
 
 function $774($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $775($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $776($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $8_1 = 0.0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $9_1 = 0.0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $7$hi = 0, $10_1 = 0.0, $11_1 = 0.0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $152_1 = 0, $185_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $20_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3_1 = $20_1;
      $4_1 = $3_1 & 2147483647 | 0;
      if ($4_1 >>> 0 > 1074752122 >>> 0) {
       break label$4
      }
      if (($3_1 & 1048575 | 0 | 0) == (598523 | 0)) {
       break label$3
      }
      label$5 : {
       if ($4_1 >>> 0 > 1073928572 >>> 0) {
        break label$5
       }
       label$6 : {
        i64toi32_i32$1 = $7$hi;
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $21_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $22_1 = 0
          } else {
           $22_1 = 1
          }
          $23_1 = $22_1;
         } else {
          $23_1 = 0
         }
         $21_1 = $23_1;
        }
        if ($21_1) {
         break label$6
        }
        $0_1 = $0_1 + -1.5707963267341256;
        $8_1 = $0_1 + -6.077100506506192e-11;
        HEAPF64[$1_1 >> 3] = $8_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -6.077100506506192e-11;
        $3_1 = 1;
        break label$1;
       }
       $0_1 = $0_1 + 1.5707963267341256;
       $8_1 = $0_1 + 6.077100506506192e-11;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 6.077100506506192e-11;
       $3_1 = -1;
       break label$1;
      }
      label$7 : {
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$3 = $7_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $24_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $25_1 = 0
         } else {
          $25_1 = 1
         }
         $26_1 = $25_1;
        } else {
         $26_1 = 0
        }
        $24_1 = $26_1;
       }
       if ($24_1) {
        break label$7
       }
       $0_1 = $0_1 + -3.1415926534682512;
       $8_1 = $0_1 + -1.2154201013012384e-10;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -1.2154201013012384e-10;
       $3_1 = 2;
       break label$1;
      }
      $0_1 = $0_1 + 3.1415926534682512;
      $8_1 = $0_1 + 1.2154201013012384e-10;
      HEAPF64[$1_1 >> 3] = $8_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 1.2154201013012384e-10;
      $3_1 = -2;
      break label$1;
     }
     label$8 : {
      if ($4_1 >>> 0 > 1075594811 >>> 0) {
       break label$8
      }
      label$9 : {
       if ($4_1 >>> 0 > 1075183036 >>> 0) {
        break label$9
       }
       if (($4_1 | 0) == (1074977148 | 0)) {
        break label$3
       }
       label$10 : {
        i64toi32_i32$3 = $7$hi;
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
         $27_1 = 1
        } else {
         if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $28_1 = 0
          } else {
           $28_1 = 1
          }
          $29_1 = $28_1;
         } else {
          $29_1 = 0
         }
         $27_1 = $29_1;
        }
        if ($27_1) {
         break label$10
        }
        $0_1 = $0_1 + -4.712388980202377;
        $8_1 = $0_1 + -1.8231301519518578e-10;
        HEAPF64[$1_1 >> 3] = $8_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -1.8231301519518578e-10;
        $3_1 = 3;
        break label$1;
       }
       $0_1 = $0_1 + 4.712388980202377;
       $8_1 = $0_1 + 1.8231301519518578e-10;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 1.8231301519518578e-10;
       $3_1 = -3;
       break label$1;
      }
      if (($4_1 | 0) == (1075388923 | 0)) {
       break label$3
      }
      label$11 : {
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
        $30_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $31_1 = 0
         } else {
          $31_1 = 1
         }
         $32_1 = $31_1;
        } else {
         $32_1 = 0
        }
        $30_1 = $32_1;
       }
       if ($30_1) {
        break label$11
       }
       $0_1 = $0_1 + -6.2831853069365025;
       $8_1 = $0_1 + -2.430840202602477e-10;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -2.430840202602477e-10;
       $3_1 = 4;
       break label$1;
      }
      $0_1 = $0_1 + 6.2831853069365025;
      $8_1 = $0_1 + 2.430840202602477e-10;
      HEAPF64[$1_1 >> 3] = $8_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 2.430840202602477e-10;
      $3_1 = -4;
      break label$1;
     }
     if ($4_1 >>> 0 > 1094263290 >>> 0) {
      break label$2
     }
    }
    $8_1 = $0_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $9_1 = $0_1 + $8_1 * -1.5707963267341256;
    $10_1 = $8_1 * 6.077100506506192e-11;
    $0_1 = $9_1 - $10_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    $5_1 = $4_1 >>> 20 | 0;
    $152_1 = $5_1;
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $33_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $33_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = ($152_1 - ($33_1 & 2047 | 0) | 0 | 0) < (17 | 0);
    label$12 : {
     label$13 : {
      if (!(Math_abs($8_1) < 2147483648.0)) {
       break label$13
      }
      $3_1 = ~~$8_1;
      break label$12;
     }
     $3_1 = -2147483648;
    }
    label$14 : {
     if ($6_1) {
      break label$14
     }
     $0_1 = $8_1 * 6.077100506303966e-11;
     $11_1 = $9_1 - $0_1;
     $10_1 = $8_1 * 2.0222662487959506e-21 - ($9_1 - $11_1 - $0_1);
     $0_1 = $11_1 - $10_1;
     HEAPF64[$1_1 >> 3] = $0_1;
     label$15 : {
      $185_1 = $5_1;
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 52;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $34_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $34_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      if (($185_1 - ($34_1 & 2047 | 0) | 0 | 0) >= (50 | 0)) {
       break label$15
      }
      $9_1 = $11_1;
      break label$14;
     }
     $0_1 = $8_1 * 2.0222662487111665e-21;
     $9_1 = $11_1 - $0_1;
     $10_1 = $8_1 * 8.4784276603689e-32 - ($11_1 - $9_1 - $0_1);
     $0_1 = $9_1 - $10_1;
     HEAPF64[$1_1 >> 3] = $0_1;
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $9_1 - $0_1 - $10_1;
    break label$1;
   }
   label$16 : {
    if ($4_1 >>> 0 < 2146435072 >>> 0) {
     break label$16
    }
    $0_1 = $0_1 - $0_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
    $3_1 = 0;
    break label$1;
   }
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 1096810496;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $3_1 = 0;
   $6_1 = 1;
   label$17 : while (1) {
    $3_1 = ($2_1 + 16 | 0) + ($3_1 << 3 | 0) | 0;
    label$18 : {
     label$19 : {
      if (!(Math_abs($0_1) < 2147483648.0)) {
       break label$19
      }
      $5_1 = ~~$0_1;
      break label$18;
     }
     $5_1 = -2147483648;
    }
    $8_1 = +($5_1 | 0);
    HEAPF64[$3_1 >> 3] = $8_1;
    $0_1 = ($0_1 - $8_1) * 16777216.0;
    $3_1 = 1;
    $5_1 = $6_1 & 1 | 0;
    $6_1 = 0;
    if ($5_1) {
     continue label$17
    }
    break label$17;
   };
   HEAPF64[($2_1 + 32 | 0) >> 3] = $0_1;
   label$20 : {
    label$21 : {
     if ($0_1 == 0.0) {
      break label$21
     }
     $3_1 = 2;
     break label$20;
    }
    $6_1 = 1;
    label$22 : while (1) {
     $3_1 = $6_1;
     $6_1 = $3_1 + -1 | 0;
     if (+HEAPF64[(($2_1 + 16 | 0) + ($3_1 << 3 | 0) | 0) >> 3] == 0.0) {
      continue label$22
     }
     break label$22;
    };
   }
   $3_1 = $785($2_1 + 16 | 0 | 0, $2_1 | 0, ($4_1 >>> 20 | 0) + -1046 | 0 | 0, $3_1 + 1 | 0 | 0, 1 | 0) | 0;
   $0_1 = +HEAPF64[$2_1 >> 3];
   label$23 : {
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$23
    }
    HEAPF64[$1_1 >> 3] = -$0_1;
    HEAPF64[($1_1 + 8 | 0) >> 3] = -+HEAPF64[($2_1 + 8 | 0) >> 3];
    $3_1 = 0 - $3_1 | 0;
    break label$1;
   }
   HEAPF64[$1_1 >> 3] = $0_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = +HEAPF64[($2_1 + 8 | 0) >> 3];
  }
  global$0 = $2_1 + 48 | 0;
  return $3_1 | 0;
 }
 
 function $777($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $13_1 = 0.0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $15_1 = 0.0, $16_1 = 0.0, $7_1 = 0, $11_1 = 0, $14_1 = 0.0, $8_1 = 0, $9_1 = 0, $11$hi = 0, $17_1 = 0.0, $18_1 = 0.0, $6_1 = 0, $46_1 = 0, $12_1 = 0, $47_1 = 0, $10_1 = 0, $48_1 = 0, $49_1 = 0, $19_1 = 0.0, $20_1 = 0.0, $50_1 = 0, $21_1 = 0.0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $12$hi = 0, $275_1 = 0.0, $278$hi = 0, $281_1 = 0, $281$hi = 0, $301_1 = 0.0, $306_1 = 0.0, $309_1 = 0.0, $310_1 = 0.0, $311_1 = 0.0, $312_1 = 0.0, $510_1 = 0.0, $511_1 = 0.0, $525_1 = 0, $568_1 = 0.0, $595$hi = 0, $597_1 = 0, $597$hi = 0;
  $13_1 = 1.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$1_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $11_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $46_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $46_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $46_1;
   $3_1 = $2_1 & 2147483647 | 0;
   i64toi32_i32$1 = $11$hi;
   $4_1 = $11_1;
   if (!($3_1 | $4_1 | 0)) {
    break label$1
   }
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $12_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $12_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $47_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $47_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $5_1 = $47_1;
   label$2 : {
    i64toi32_i32$2 = $12$hi;
    $6_1 = $12_1;
    if ($6_1) {
     break label$2
    }
    if (($5_1 | 0) == (1072693248 | 0)) {
     break label$1
    }
   }
   label$3 : {
    label$4 : {
     $7_1 = $5_1 & 2147483647 | 0;
     if ($7_1 >>> 0 > 2146435072 >>> 0) {
      break label$4
     }
     if (($6_1 | 0) != (0 | 0) & ($7_1 | 0) == (2146435072 | 0) | 0) {
      break label$4
     }
     if ($3_1 >>> 0 > 2146435072 >>> 0) {
      break label$4
     }
     if (!$4_1) {
      break label$3
     }
     if (($3_1 | 0) != (2146435072 | 0)) {
      break label$3
     }
    }
    return +($0_1 + $1_1);
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (($5_1 | 0) > (-1 | 0)) {
        break label$8
       }
       $8_1 = 2;
       if ($3_1 >>> 0 > 1128267775 >>> 0) {
        break label$7
       }
       if ($3_1 >>> 0 < 1072693248 >>> 0) {
        break label$8
       }
       $9_1 = $3_1 >>> 20 | 0;
       label$9 : {
        if ($3_1 >>> 0 < 1094713344 >>> 0) {
         break label$9
        }
        $8_1 = 0;
        $9_1 = 1075 - $9_1 | 0;
        $10_1 = $4_1 >>> $9_1 | 0;
        if (($10_1 << $9_1 | 0 | 0) != ($4_1 | 0)) {
         break label$7
        }
        $8_1 = 2 - ($10_1 & 1 | 0) | 0;
        break label$7;
       }
       $8_1 = 0;
       if ($4_1) {
        break label$5
       }
       $8_1 = 0;
       $4_1 = 1043 - $9_1 | 0;
       $9_1 = $3_1 >>> $4_1 | 0;
       if (($9_1 << $4_1 | 0 | 0) != ($3_1 | 0)) {
        break label$6
       }
       $8_1 = 2 - ($9_1 & 1 | 0) | 0;
       break label$6;
      }
      $8_1 = 0;
     }
     if ($4_1) {
      break label$5
     }
    }
    label$10 : {
     if (($3_1 | 0) != (2146435072 | 0)) {
      break label$10
     }
     if (!($7_1 + -1072693248 | 0 | $6_1 | 0)) {
      break label$1
     }
     label$11 : {
      if ($7_1 >>> 0 < 1072693248 >>> 0) {
       break label$11
      }
      return +(($2_1 | 0) > (-1 | 0) ? $1_1 : 0.0);
     }
     return +(($2_1 | 0) > (-1 | 0) ? 0.0 : -$1_1);
    }
    label$12 : {
     if (($3_1 | 0) != (1072693248 | 0)) {
      break label$12
     }
     label$13 : {
      if (($2_1 | 0) <= (-1 | 0)) {
       break label$13
      }
      return +$0_1;
     }
     return +(1.0 / $0_1);
    }
    label$14 : {
     if (($2_1 | 0) != (1073741824 | 0)) {
      break label$14
     }
     return +($0_1 * $0_1);
    }
    if (($5_1 | 0) < (0 | 0)) {
     break label$5
    }
    if (($2_1 | 0) != (1071644672 | 0)) {
     break label$5
    }
    return +(+$778(+$0_1));
   }
   $13_1 = +$775(+$0_1);
   label$15 : {
    if ($6_1) {
     break label$15
    }
    label$16 : {
     if (($5_1 & 1073741823 | 0 | 0) == (1072693248 | 0)) {
      break label$16
     }
     if ($7_1) {
      break label$15
     }
    }
    $13_1 = ($2_1 | 0) < (0 | 0) ? 1.0 / $13_1 : $13_1;
    if (($5_1 | 0) > (-1 | 0)) {
     break label$1
    }
    label$17 : {
     if ($8_1 | ($7_1 + -1072693248 | 0) | 0) {
      break label$17
     }
     $1_1 = $13_1 - $13_1;
     return +($1_1 / $1_1);
    }
    return +(($8_1 | 0) == (1 | 0) ? -$13_1 : $13_1);
   }
   $14_1 = 1.0;
   label$18 : {
    if (($5_1 | 0) > (-1 | 0)) {
     break label$18
    }
    label$19 : {
     switch ($8_1 | 0) {
     case 0:
      $1_1 = $0_1 - $0_1;
      return +($1_1 / $1_1);
     case 1:
      break label$19;
     default:
      break label$18;
     };
    }
    $14_1 = -1.0;
   }
   label$21 : {
    label$22 : {
     if ($3_1 >>> 0 < 1105199105 >>> 0) {
      break label$22
     }
     label$23 : {
      if ($3_1 >>> 0 < 1139802113 >>> 0) {
       break label$23
      }
      label$24 : {
       if ($7_1 >>> 0 > 1072693247 >>> 0) {
        break label$24
       }
       return +(($2_1 | 0) < (0 | 0) ? infinity : 0.0);
      }
      return +(($2_1 | 0) > (0 | 0) ? infinity : 0.0);
     }
     label$25 : {
      if ($7_1 >>> 0 > 1072693246 >>> 0) {
       break label$25
      }
      return +(($2_1 | 0) < (0 | 0) ? $14_1 * 1.e+300 * 1.e+300 : $14_1 * 1.0e-300 * 1.0e-300);
     }
     label$26 : {
      if ($7_1 >>> 0 < 1072693249 >>> 0) {
       break label$26
      }
      return +(($2_1 | 0) > (0 | 0) ? $14_1 * 1.e+300 * 1.e+300 : $14_1 * 1.0e-300 * 1.0e-300);
     }
     $0_1 = $13_1 + -1.0;
     $13_1 = $0_1 * 1.4426950216293335;
     $15_1 = $0_1 * 1.9259629911266175e-08 + $0_1 * $0_1 * (.5 - $0_1 * ($0_1 * -.25 + .3333333333333333)) * -1.4426950408889634;
     wasm2js_scratch_store_f64(+($13_1 + $15_1));
     i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$3 | 0 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
     $0_1 = +wasm2js_scratch_load_f64();
     $16_1 = $0_1 - $13_1;
     break label$21;
    }
    $0_1 = $13_1 * 9007199254740992.0;
    $3_1 = $7_1 >>> 0 < 1048576 >>> 0;
    $13_1 = $3_1 ? $0_1 : $13_1;
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $48_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $48_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $3_1 ? $48_1 : $7_1;
    $4_1 = $2_1 & 1048575 | 0;
    $5_1 = $4_1 | 1072693248 | 0;
    $2_1 = ($3_1 ? -1076 : -1023) + ($2_1 >> 20 | 0) | 0;
    $3_1 = 0;
    label$27 : {
     if ($4_1 >>> 0 < 235663 >>> 0) {
      break label$27
     }
     label$28 : {
      if ($4_1 >>> 0 >= 767610 >>> 0) {
       break label$28
      }
      $3_1 = 1;
      break label$27;
     }
     $5_1 = $5_1 + -1048576 | 0;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = $3_1 << 3 | 0;
    $17_1 = +HEAPF64[($4_1 + 16080 | 0) >> 3];
    $275_1 = $17_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $278$hi = i64toi32_i32$2;
    wasm2js_scratch_store_f64(+$13_1);
    i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $281_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $281$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $278$hi;
    i64toi32_i32$2 = $49_1;
    i64toi32_i32$1 = $281$hi;
    i64toi32_i32$3 = $281_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 | i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    $15_1 = +wasm2js_scratch_load_f64();
    $16_1 = +HEAPF64[($4_1 + 16048 | 0) >> 3];
    $18_1 = $15_1 - $16_1;
    $19_1 = 1.0 / ($16_1 + $15_1);
    $13_1 = $18_1 * $19_1;
    wasm2js_scratch_store_f64(+$13_1);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $301_1 = $0_1;
    $20_1 = $0_1 * $0_1;
    $306_1 = $20_1 + 3.0;
    $309_1 = $13_1 + $0_1;
    $310_1 = $19_1;
    $311_1 = $18_1;
    $312_1 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = (($5_1 >> 1 | 0 | 536870912 | 0) + ($3_1 << 18 | 0) | 0) + 524288 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $50_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $50_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    wasm2js_scratch_store_i32(0 | 0, $50_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $21_1 = +wasm2js_scratch_load_f64();
    $15_1 = $310_1 * ($311_1 - $312_1 * $21_1 - $0_1 * ($15_1 - ($21_1 - $16_1)));
    $0_1 = $13_1 * $13_1;
    $16_1 = $309_1 * $15_1 + $0_1 * $0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * .20697501780033842 + .23066074577556175) + .272728123808534) + .33333332981837743) + .4285714285785502) + .5999999999999946);
    wasm2js_scratch_store_f64(+($306_1 + $16_1));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $18_1 = $301_1 * $0_1;
    $13_1 = $15_1 * $0_1 + $13_1 * ($16_1 - ($0_1 + -3.0 - $20_1));
    wasm2js_scratch_store_f64(+($18_1 + $13_1));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $16_1 = $0_1 * .9617967009544373;
    $15_1 = +HEAPF64[($4_1 + 16064 | 0) >> 3] + (($13_1 - ($0_1 - $18_1)) * .9617966939259756 + $0_1 * -7.028461650952758e-09);
    $13_1 = +($2_1 | 0);
    wasm2js_scratch_store_f64(+($275_1 + ($16_1 + $15_1) + $13_1));
    i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $16_1 = $0_1 - $13_1 - $17_1 - $16_1;
   }
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
   $17_1 = +wasm2js_scratch_load_f64();
   $13_1 = $0_1 * $17_1;
   $1_1 = ($15_1 - $16_1) * $1_1 + ($1_1 - $17_1) * $0_1;
   $0_1 = $13_1 + $1_1;
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $11_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $11$hi = i64toi32_i32$1;
   $3_1 = $11_1;
   label$29 : {
    label$30 : {
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $51_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $51_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $5_1 = $51_1;
     if (($5_1 | 0) < (1083179008 | 0)) {
      break label$30
     }
     label$31 : {
      if (!($5_1 + -1083179008 | 0 | $3_1 | 0)) {
       break label$31
      }
      return +($14_1 * 1.e+300 * 1.e+300);
     }
     if ($1_1 + 8.008566259537294e-17 > $0_1 - $13_1 ^ 1 | 0) {
      break label$29
     }
     return +($14_1 * 1.e+300 * 1.e+300);
    }
    if (($5_1 & 2147482624 | 0) >>> 0 < 1083231232 >>> 0) {
     break label$29
    }
    label$32 : {
     if (!($5_1 + 1064252416 | 0 | $3_1 | 0)) {
      break label$32
     }
     return +($14_1 * 1.0e-300 * 1.0e-300);
    }
    if ($1_1 <= $0_1 - $13_1 ^ 1 | 0) {
     break label$29
    }
    return +($14_1 * 1.0e-300 * 1.0e-300);
   }
   $3_1 = 0;
   label$33 : {
    $4_1 = $5_1 & 2147483647 | 0;
    if ($4_1 >>> 0 < 1071644673 >>> 0) {
     break label$33
    }
    $4_1 = (1048576 >>> (($4_1 >>> 20 | 0) + -1022 | 0) | 0) + $5_1 | 0;
    $2_1 = ($4_1 >>> 20 | 0) & 2047 | 0;
    $3_1 = ($4_1 & 1048575 | 0 | 1048576 | 0) >>> (1043 - $2_1 | 0) | 0;
    $3_1 = ($5_1 | 0) < (0 | 0) ? 0 - $3_1 | 0 : $3_1;
    $510_1 = $1_1;
    $511_1 = $13_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = (-1048576 >> ($2_1 + -1023 | 0) | 0) & $4_1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $52_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $52_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    wasm2js_scratch_store_i32(0 | 0, $52_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $13_1 = $511_1 - +wasm2js_scratch_load_f64();
    wasm2js_scratch_store_f64(+($510_1 + $13_1));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $11_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $11$hi = i64toi32_i32$0;
   }
   label$34 : {
    label$35 : {
     $525_1 = $3_1 << 20 | 0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$3 | 0 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
     $0_1 = +wasm2js_scratch_load_f64();
     $15_1 = $0_1 * .6931471824645996;
     $13_1 = ($1_1 - ($0_1 - $13_1)) * .6931471805599453 + $0_1 * -1.904654299957768e-09;
     $1_1 = $15_1 + $13_1;
     $0_1 = $1_1 * $1_1;
     $0_1 = $1_1 - $0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * 4.1381367970572385e-08 + -1.6533902205465252e-06) + 6.613756321437934e-05) + -2.7777777777015593e-03) + .16666666666666602);
     $568_1 = $1_1 * $0_1 / ($0_1 + -2.0);
     $0_1 = $13_1 - ($1_1 - $15_1);
     $1_1 = $1_1 - ($568_1 - ($0_1 + $1_1 * $0_1)) + 1.0;
     wasm2js_scratch_store_f64(+$1_1);
     i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
     $11_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $53_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $53_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $5_1 = $525_1 + $53_1 | 0;
     if (($5_1 | 0) > (1048575 | 0)) {
      break label$35
     }
     $1_1 = +$949(+$1_1, $3_1 | 0);
     break label$34;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $54_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $54_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $595$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$2 = $11_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $597_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $597$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $595$hi;
    i64toi32_i32$0 = $54_1;
    i64toi32_i32$2 = $597$hi;
    i64toi32_i32$3 = $597_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
    $1_1 = +wasm2js_scratch_load_f64();
   }
   $13_1 = $14_1 * $1_1;
  }
  return +$13_1;
 }
 
 function $778($0_1) {
  $0_1 = +$0_1;
  return +Math_sqrt($0_1);
 }
 
 function $779($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $3_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $1_1 = 0, $2$hi = 0, $4_1 = 0.0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $63_1 = 0.0;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $12_1 & 2147483647 | 0;
    if ($1_1 >>> 0 < 1072693248 >>> 0) {
     break label$2
    }
    i64toi32_i32$1 = $2$hi;
    if (!($1_1 + -1072693248 | 0 | $2_1 | 0)) {
     break label$1
    }
    return +(0.0 / ($0_1 - $0_1));
   }
   label$3 : {
    label$4 : {
     if ($1_1 >>> 0 > 1071644671 >>> 0) {
      break label$4
     }
     $3_1 = 1.5707963267948966;
     if ($1_1 >>> 0 < 1012924417 >>> 0) {
      break label$3
     }
     return +(6.123233995736766e-17 - +$780(+($0_1 * $0_1)) * $0_1 - $0_1 + 1.5707963267948966);
    }
    label$5 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $13_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $14_1 = 0
       } else {
        $14_1 = 1
       }
       $15_1 = $14_1;
      } else {
       $15_1 = 0
      }
      $13_1 = $15_1;
     }
     if ($13_1) {
      break label$5
     }
     $0_1 = ($0_1 + 1.0) * .5;
     $3_1 = +$778(+$0_1);
     $0_1 = 1.5707963267948966 - ($3_1 + ($3_1 * +$780(+$0_1) + -6.123233995736766e-17));
     return +($0_1 + $0_1);
    }
    $3_1 = (1.0 - $0_1) * .5;
    $4_1 = +$778(+$3_1);
    $63_1 = $4_1 * +$780(+$3_1);
    wasm2js_scratch_store_f64(+$4_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $0_1 = $63_1 + ($3_1 - $0_1 * $0_1) / ($4_1 + $0_1) + $0_1;
    $3_1 = $0_1 + $0_1;
   }
   return +$3_1;
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = -1;
  if ((i64toi32_i32$1 | 0) > (i64toi32_i32$3 | 0)) {
   $16_1 = 1
  } else {
   if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$3 | 0)) {
    if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0) {
     $17_1 = 0
    } else {
     $17_1 = 1
    }
    $18_1 = $17_1;
   } else {
    $18_1 = 0
   }
   $16_1 = $18_1;
  }
  return +($16_1 ? 0.0 : 3.141592653589793);
 }
 
 function $780($0_1) {
  $0_1 = +$0_1;
  return +(((((($0_1 * 3.479331075960212e-05 + 7.915349942898145e-04) * $0_1 + -.04005553450067941) * $0_1 + .20121253213486293) * $0_1 + -.3255658186224009) * $0_1 + .16666666666666666) * $0_1 / (((($0_1 * .07703815055590194 + -.6882839716054533) * $0_1 + 2.0209457602335057) * $0_1 + -2.403394911734414) * $0_1 + 1.0));
 }
 
 function $781($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $1_1 = 0, $5_1 = 0.0, $2_1 = 0, $3_1 = 0.0, $2$hi = 0, $15_1 = 0, $4_1 = 0.0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $67_1 = 0.0, $84_1 = 0.0, $86_1 = 0.0;
  label$1 : {
   label$2 : {
    label$3 : {
     wasm2js_scratch_store_f64(+$0_1);
     i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
     $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $15_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $15_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $1_1 = $15_1 & 2147483647 | 0;
     if ($1_1 >>> 0 < 1072693248 >>> 0) {
      break label$3
     }
     i64toi32_i32$1 = $2$hi;
     if ($1_1 + -1072693248 | 0 | $2_1 | 0) {
      break label$2
     }
     return +($0_1 * 1.5707963267948966 + 7.52316384526264e-37);
    }
    label$4 : {
     if ($1_1 >>> 0 > 1071644671 >>> 0) {
      break label$4
     }
     if (($1_1 + -1048576 | 0) >>> 0 < 1044381696 >>> 0) {
      break label$1
     }
     return +(+$782(+($0_1 * $0_1)) * $0_1 + $0_1);
    }
    $3_1 = (1.0 - +$775(+$0_1)) * .5;
    $0_1 = +$778(+$3_1);
    $4_1 = +$782(+$3_1);
    label$5 : {
     label$6 : {
      if ($1_1 >>> 0 < 1072640819 >>> 0) {
       break label$6
      }
      $0_1 = $0_1 + $0_1 * $4_1;
      $0_1 = 1.5707963267948966 - ($0_1 + $0_1 + -6.123233995736766e-17);
      break label$5;
     }
     wasm2js_scratch_store_f64(+$0_1);
     i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$3 | 0 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
     $5_1 = +wasm2js_scratch_load_f64();
     $67_1 = ($0_1 + $0_1) * $4_1;
     $0_1 = ($3_1 - $5_1 * $5_1) / ($0_1 + $5_1);
     $0_1 = .7853981633974483 - ($5_1 + $5_1) - ($67_1 - (6.123233995736766e-17 - ($0_1 + $0_1))) + .7853981633974483;
    }
    $84_1 = $0_1;
    $86_1 = -$0_1;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
     $16_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $17_1 = 0
      } else {
       $17_1 = 1
      }
      $18_1 = $17_1;
     } else {
      $18_1 = 0
     }
     $16_1 = $18_1;
    }
    return +($16_1 ? $84_1 : $86_1);
   }
   $0_1 = 0.0 / ($0_1 - $0_1);
  }
  return +$0_1;
 }
 
 function $782($0_1) {
  $0_1 = +$0_1;
  return +(((((($0_1 * 3.479331075960212e-05 + 7.915349942898145e-04) * $0_1 + -.04005553450067941) * $0_1 + .20121253213486293) * $0_1 + -.3255658186224009) * $0_1 + .16666666666666666) * $0_1 / (((($0_1 * .07703815055590194 + -.6882839716054533) * $0_1 + 2.0209457602335057) * $0_1 + -2.403394911734414) * $0_1 + 1.0));
 }
 
 function $783($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $3_1 = 0.0, $5_1 = 0.0, $4_1 = 0.0;
  $3_1 = $0_1 * $0_1;
  $4_1 = $3_1 * ($3_1 * $3_1) * ($3_1 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3_1 * ($3_1 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $5_1 = $3_1 * $0_1;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return +($5_1 * ($3_1 * $4_1 + -.16666666666666632) + $0_1);
  }
  return +($0_1 - ($3_1 * ($1_1 * .5 - $5_1 * $4_1) - $1_1 + $5_1 * .16666666666666632));
 }
 
 function $784($0_1) {
  $0_1 = +$0_1;
  return +Math_floor($0_1);
 }
 
 function $785($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $21_1 = 0.0, $11_1 = 0, $6_1 = 0, $5_1 = 0, $22_1 = 0.0, $13_1 = 0, $14_1 = 0, $9_1 = 0, $20_1 = 0, $8_1 = 0, $10_1 = 0, $12_1 = 0, $18_1 = 0, $23_1 = 0.0, $7_1 = 0, $16_1 = 0, $19_1 = 0, $15_1 = 0, $17_1 = 0, $206_1 = 0, $209_1 = 0, $538_1 = 0.0, $576_1 = 0.0;
  $5_1 = global$0 - 560 | 0;
  global$0 = $5_1;
  $6_1 = ($2_1 + -3 | 0 | 0) / (24 | 0) | 0;
  $7_1 = ($6_1 | 0) > (0 | 0) ? $6_1 : 0;
  $8_1 = Math_imul($7_1, -24) + $2_1 | 0;
  label$1 : {
   $9_1 = HEAP32[(($4_1 << 2 | 0) + 16096 | 0) >> 2] | 0;
   $10_1 = $3_1 + -1 | 0;
   if (($9_1 + $10_1 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $11_1 = $9_1 + $3_1 | 0;
   $2_1 = $7_1 - $10_1 | 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) >= (0 | 0)) {
       break label$4
      }
      $21_1 = 0.0;
      break label$3;
     }
     $21_1 = +(HEAP32[(($2_1 << 2 | 0) + 16112 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = $21_1;
    $2_1 = $2_1 + 1 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($11_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $12_1 = $8_1 + -24 | 0;
  $11_1 = 0;
  $13_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
  $14_1 = ($3_1 | 0) < (1 | 0);
  label$5 : while (1) {
   label$6 : {
    label$7 : {
     if (!$14_1) {
      break label$7
     }
     $21_1 = 0.0;
     break label$6;
    }
    $6_1 = $11_1 + $10_1 | 0;
    $2_1 = 0;
    $21_1 = 0.0;
    label$8 : while (1) {
     $21_1 = $21_1 + +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3];
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$8
     }
     break label$8;
    };
   }
   HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $21_1;
   $2_1 = ($11_1 | 0) == ($13_1 | 0);
   $11_1 = $11_1 + 1 | 0;
   if (!$2_1) {
    continue label$5
   }
   break label$5;
  };
  $15_1 = 47 - $8_1 | 0;
  $16_1 = 48 - $8_1 | 0;
  $17_1 = $8_1 + -25 | 0;
  $11_1 = $9_1;
  label$9 : {
   label$10 : while (1) {
    $21_1 = +HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3];
    $2_1 = 0;
    $6_1 = $11_1;
    label$11 : {
     $10_1 = ($11_1 | 0) < (1 | 0);
     if ($10_1) {
      break label$11
     }
     label$12 : while (1) {
      $13_1 = $2_1 << 2 | 0;
      label$13 : {
       label$14 : {
        $22_1 = $21_1 * 5.9604644775390625e-08;
        if (!(Math_abs($22_1) < 2147483648.0)) {
         break label$14
        }
        $14_1 = ~~$22_1;
        break label$13;
       }
       $14_1 = -2147483648;
      }
      $13_1 = ($5_1 + 480 | 0) + $13_1 | 0;
      label$15 : {
       label$16 : {
        $22_1 = +($14_1 | 0);
        $21_1 = $21_1 + $22_1 * -16777216.0;
        if (!(Math_abs($21_1) < 2147483648.0)) {
         break label$16
        }
        $14_1 = ~~$21_1;
        break label$15;
       }
       $14_1 = -2147483648;
      }
      HEAP32[$13_1 >> 2] = $14_1;
      $6_1 = $6_1 + -1 | 0;
      $21_1 = +HEAPF64[($5_1 + ($6_1 << 3 | 0) | 0) >> 3] + $22_1;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($11_1 | 0)) {
       continue label$12
      }
      break label$12;
     };
    }
    $21_1 = +$949(+$21_1, $12_1 | 0);
    label$17 : {
     label$18 : {
      $21_1 = $21_1 + +$784(+($21_1 * .125)) * -8.0;
      if (!(Math_abs($21_1) < 2147483648.0)) {
       break label$18
      }
      $18_1 = ~~$21_1;
      break label$17;
     }
     $18_1 = -2147483648;
    }
    $21_1 = $21_1 - +($18_1 | 0);
    label$19 : {
     label$20 : {
      label$21 : {
       label$22 : {
        label$23 : {
         $19_1 = ($12_1 | 0) < (1 | 0);
         if ($19_1) {
          break label$23
         }
         $2_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
         $206_1 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         $209_1 = $2_1;
         $2_1 = $2_1 >> $16_1 | 0;
         $6_1 = $209_1 - ($2_1 << $16_1 | 0) | 0;
         HEAP32[$206_1 >> 2] = $6_1;
         $20_1 = $6_1 >> $15_1 | 0;
         $18_1 = $2_1 + $18_1 | 0;
         break label$22;
        }
        if ($12_1) {
         break label$21
        }
        $20_1 = (HEAP32[((($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($20_1 | 0) < (1 | 0)) {
        break label$19
       }
       break label$20;
      }
      $20_1 = 2;
      if (!($21_1 >= .5 ^ 1 | 0)) {
       break label$20
      }
      $20_1 = 0;
      break label$19;
     }
     $2_1 = 0;
     $14_1 = 0;
     label$24 : {
      if ($10_1) {
       break label$24
      }
      label$25 : while (1) {
       $10_1 = ($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0;
       $6_1 = HEAP32[$10_1 >> 2] | 0;
       $13_1 = 16777215;
       label$26 : {
        label$27 : {
         if ($14_1) {
          break label$27
         }
         $13_1 = 16777216;
         if ($6_1) {
          break label$27
         }
         $14_1 = 0;
         break label$26;
        }
        HEAP32[$10_1 >> 2] = $13_1 - $6_1 | 0;
        $14_1 = 1;
       }
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) != ($11_1 | 0)) {
        continue label$25
       }
       break label$25;
      };
     }
     label$28 : {
      if ($19_1) {
       break label$28
      }
      label$29 : {
       switch ($17_1 | 0) {
       case 0:
        $2_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
        HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) & 8388607 | 0;
        break label$28;
       case 1:
        break label$29;
       default:
        break label$28;
       };
      }
      $2_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) & 4194303 | 0;
     }
     $18_1 = $18_1 + 1 | 0;
     if (($20_1 | 0) != (2 | 0)) {
      break label$19
     }
     $21_1 = 1.0 - $21_1;
     $20_1 = 2;
     if (!$14_1) {
      break label$19
     }
     $21_1 = $21_1 - +$949(+(1.0), $12_1 | 0);
    }
    label$31 : {
     if ($21_1 != 0.0) {
      break label$31
     }
     $6_1 = 0;
     $2_1 = $11_1;
     label$32 : {
      if (($2_1 | 0) <= ($9_1 | 0)) {
       break label$32
      }
      label$33 : while (1) {
       $2_1 = $2_1 + -1 | 0;
       $6_1 = HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | $6_1 | 0;
       if (($2_1 | 0) > ($9_1 | 0)) {
        continue label$33
       }
       break label$33;
      };
      if (!$6_1) {
       break label$32
      }
      $8_1 = $12_1;
      label$34 : while (1) {
       $8_1 = $8_1 + -24 | 0;
       $11_1 = $11_1 + -1 | 0;
       if (!(HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0)) {
        continue label$34
       }
       break label$9;
      };
     }
     $2_1 = 1;
     label$35 : while (1) {
      $6_1 = $2_1;
      $2_1 = $2_1 + 1 | 0;
      if (!(HEAP32[(($5_1 + 480 | 0) + (($9_1 - $6_1 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label$35
      }
      break label$35;
     };
     $13_1 = $6_1 + $11_1 | 0;
     label$36 : while (1) {
      $6_1 = $11_1 + $3_1 | 0;
      $11_1 = $11_1 + 1 | 0;
      HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11_1 + $7_1 | 0) << 2 | 0) + 16112 | 0) >> 2] | 0 | 0);
      $2_1 = 0;
      $21_1 = 0.0;
      label$37 : {
       if (($3_1 | 0) < (1 | 0)) {
        break label$37
       }
       label$38 : while (1) {
        $21_1 = $21_1 + +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3];
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != ($3_1 | 0)) {
         continue label$38
        }
        break label$38;
       };
      }
      HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $21_1;
      if (($11_1 | 0) < ($13_1 | 0)) {
       continue label$36
      }
      break label$36;
     };
     $11_1 = $13_1;
     continue label$10;
    }
    break label$10;
   };
   label$39 : {
    label$40 : {
     $21_1 = +$949(+$21_1, 0 - $12_1 | 0 | 0);
     if ($21_1 >= 16777216.0 ^ 1 | 0) {
      break label$40
     }
     $3_1 = $11_1 << 2 | 0;
     label$41 : {
      label$42 : {
       $22_1 = $21_1 * 5.9604644775390625e-08;
       if (!(Math_abs($22_1) < 2147483648.0)) {
        break label$42
       }
       $2_1 = ~~$22_1;
       break label$41;
      }
      $2_1 = -2147483648;
     }
     $3_1 = ($5_1 + 480 | 0) + $3_1 | 0;
     label$43 : {
      label$44 : {
       $21_1 = $21_1 + +($2_1 | 0) * -16777216.0;
       if (!(Math_abs($21_1) < 2147483648.0)) {
        break label$44
       }
       $6_1 = ~~$21_1;
       break label$43;
      }
      $6_1 = -2147483648;
     }
     HEAP32[$3_1 >> 2] = $6_1;
     $11_1 = $11_1 + 1 | 0;
     break label$39;
    }
    label$45 : {
     label$46 : {
      if (!(Math_abs($21_1) < 2147483648.0)) {
       break label$46
      }
      $2_1 = ~~$21_1;
      break label$45;
     }
     $2_1 = -2147483648;
    }
    $8_1 = $12_1;
   }
   HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
  $21_1 = +$949(+(1.0), $8_1 | 0);
  label$47 : {
   if (($11_1 | 0) <= (-1 | 0)) {
    break label$47
   }
   $2_1 = $11_1;
   label$48 : while (1) {
    HEAPF64[($5_1 + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 * +(HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
    $21_1 = $21_1 * 5.9604644775390625e-08;
    $3_1 = ($2_1 | 0) > (0 | 0);
    $2_1 = $2_1 + -1 | 0;
    if ($3_1) {
     continue label$48
    }
    break label$48;
   };
   $13_1 = 0;
   if (($11_1 | 0) < (0 | 0)) {
    break label$47
   }
   $9_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
   $6_1 = $11_1;
   label$49 : while (1) {
    $0_1 = $9_1 >>> 0 < $13_1 >>> 0 ? $9_1 : $13_1;
    $14_1 = $11_1 - $6_1 | 0;
    $2_1 = 0;
    $21_1 = 0.0;
    label$50 : while (1) {
     $21_1 = $21_1 + +HEAPF64[(($2_1 << 3 | 0) + 18880 | 0) >> 3] * +HEAPF64[($5_1 + (($2_1 + $6_1 | 0) << 3 | 0) | 0) >> 3];
     $3_1 = ($2_1 | 0) != ($0_1 | 0);
     $2_1 = $2_1 + 1 | 0;
     if ($3_1) {
      continue label$50
     }
     break label$50;
    };
    HEAPF64[(($5_1 + 160 | 0) + ($14_1 << 3 | 0) | 0) >> 3] = $21_1;
    $6_1 = $6_1 + -1 | 0;
    $2_1 = ($13_1 | 0) != ($11_1 | 0);
    $13_1 = $13_1 + 1 | 0;
    if ($2_1) {
     continue label$49
    }
    break label$49;
   };
  }
  label$51 : {
   label$52 : {
    label$53 : {
     switch ($4_1 | 0) {
     case 3:
      $23_1 = 0.0;
      label$56 : {
       if (($11_1 | 0) < (1 | 0)) {
        break label$56
       }
       $21_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$57 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $22_1 = +HEAPF64[$6_1 >> 3];
        $538_1 = $22_1;
        $22_1 = $22_1 + $21_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 + ($538_1 - $22_1);
        HEAPF64[$6_1 >> 3] = $22_1;
        $6_1 = ($2_1 | 0) > (1 | 0);
        $21_1 = $22_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$57
        }
        break label$57;
       };
       if (($11_1 | 0) < (2 | 0)) {
        break label$56
       }
       $21_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$58 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $22_1 = +HEAPF64[$6_1 >> 3];
        $576_1 = $22_1;
        $22_1 = $22_1 + $21_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 + ($576_1 - $22_1);
        HEAPF64[$6_1 >> 3] = $22_1;
        $6_1 = ($2_1 | 0) > (2 | 0);
        $21_1 = $22_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$58
        }
        break label$58;
       };
       $23_1 = 0.0;
       if (($11_1 | 0) <= (1 | 0)) {
        break label$56
       }
       label$59 : while (1) {
        $23_1 = $23_1 + +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
        $2_1 = ($11_1 | 0) > (2 | 0);
        $11_1 = $11_1 + -1 | 0;
        if ($2_1) {
         continue label$59
        }
        break label$59;
       };
      }
      $21_1 = +HEAPF64[($5_1 + 160 | 0) >> 3];
      if ($20_1) {
       break label$52
      }
      HEAPF64[$1_1 >> 3] = $21_1;
      $21_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
      HEAPF64[($1_1 + 16 | 0) >> 3] = $23_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $21_1;
      break label$51;
     case 0:
      $21_1 = 0.0;
      label$60 : {
       if (($11_1 | 0) < (0 | 0)) {
        break label$60
       }
       label$61 : while (1) {
        $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
        $2_1 = ($11_1 | 0) > (0 | 0);
        $11_1 = $11_1 + -1 | 0;
        if ($2_1) {
         continue label$61
        }
        break label$61;
       };
      }
      HEAPF64[$1_1 >> 3] = $20_1 ? -$21_1 : $21_1;
      break label$51;
     case 1:
     case 2:
      break label$53;
     default:
      break label$51;
     };
    }
    $21_1 = 0.0;
    label$62 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$62
     }
     $2_1 = $11_1;
     label$63 : while (1) {
      $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      $3_1 = ($2_1 | 0) > (0 | 0);
      $2_1 = $2_1 + -1 | 0;
      if ($3_1) {
       continue label$63
      }
      break label$63;
     };
    }
    HEAPF64[$1_1 >> 3] = $20_1 ? -$21_1 : $21_1;
    $21_1 = +HEAPF64[($5_1 + 160 | 0) >> 3] - $21_1;
    $2_1 = 1;
    label$64 : {
     if (($11_1 | 0) < (1 | 0)) {
      break label$64
     }
     label$65 : while (1) {
      $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      $3_1 = ($2_1 | 0) != ($11_1 | 0);
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label$65
      }
      break label$65;
     };
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $20_1 ? -$21_1 : $21_1;
    break label$51;
   }
   HEAPF64[$1_1 >> 3] = -$21_1;
   $21_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
   HEAPF64[($1_1 + 16 | 0) >> 3] = -$23_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = -$21_1;
  }
  global$0 = $5_1 + 560 | 0;
  return $18_1 & 7 | 0 | 0;
 }
 
 function $786($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $2_1 = 0.0, $3_1 = 0.0, $4_1 = 0.0, $16_1 = 0.0;
  $2_1 = $0_1 * $0_1;
  $3_1 = $2_1 * .5;
  $4_1 = 1.0 - $3_1;
  $16_1 = 1.0 - $4_1 - $3_1;
  $3_1 = $2_1 * $2_1;
  return +($4_1 + ($16_1 + ($2_1 * ($2_1 * ($2_1 * ($2_1 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3_1 * $3_1 * ($2_1 * ($2_1 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0_1 * $1_1)));
 }
 
 function $787($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $8_1 = 0.0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6_1 = 0.0, i64toi32_i32$4 = 0, $7_1 = 0.0, $4_1 = 0, $5_1 = 0, $5$hi = 0, $3_1 = 0, $17_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $16_1 = 0.0, $18_1 = 0.0;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $5_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = 2147483640;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 1072010279;
    i64toi32_i32$3 = 1;
    $3_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    if (!$3_1) {
     break label$2
    }
    break label$1;
   }
   $16_1 = $0_1;
   $18_1 = -$0_1;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $17_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
      $19_1 = 0
     } else {
      $19_1 = 1
     }
     $20_1 = $19_1;
    } else {
     $20_1 = 0
    }
    $17_1 = $20_1;
   }
   $4_1 = $17_1;
   $0_1 = .7853981633974483 - ($4_1 ? $16_1 : $18_1) + (3.061616997868383e-17 - ($4_1 ? $1_1 : -$1_1));
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $4_1 = $21_1;
   $1_1 = 0.0;
  }
  $6_1 = $0_1 * $0_1;
  $7_1 = $0_1 * $6_1;
  $8_1 = $6_1 * $6_1;
  $6_1 = $7_1 * .3333333333333341 + ($1_1 + $6_1 * ($1_1 + $7_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * -1.8558637485527546e-05 + 7.817944429395571e-05) + 5.880412408202641e-04) + 3.5920791075913124e-03) + .021869488294859542) + .13333333333320124 + $6_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * ($8_1 * 2.590730518636337e-05 + 7.140724913826082e-05) + 2.464631348184699e-04) + 1.4562094543252903e-03) + .0088632398235993) + .05396825397622605))));
  $8_1 = $0_1 + $6_1;
  label$3 : {
   if ($3_1) {
    break label$3
   }
   $1_1 = +(1 - ($2_1 << 1 | 0) | 0 | 0);
   $8_1 = $0_1 + ($6_1 - $8_1 * $8_1 / ($8_1 + $1_1));
   $8_1 = $1_1 - ($8_1 + $8_1);
   return +($4_1 ? -$8_1 : $8_1);
  }
  label$4 : {
   if (!$2_1) {
    break label$4
   }
   $1_1 = -1.0 / $8_1;
   wasm2js_scratch_store_f64(+$8_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 & i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $7_1 = +wasm2js_scratch_load_f64();
   wasm2js_scratch_store_f64(+$1_1);
   i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$1 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
   $8_1 = +wasm2js_scratch_load_f64();
   $8_1 = $1_1 * ($7_1 * $8_1 + 1.0 + ($6_1 - ($7_1 - $0_1)) * $8_1) + $8_1;
  }
  return +$8_1;
 }
 
 function $788($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, i64toi32_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $8_1 & 2147483647 | 0;
    if ($2_1 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    if ($2_1 >>> 0 < 1044381696 >>> 0) {
     break label$1
    }
    $0_1 = +$787(+$0_1, +(0.0), 0 | 0);
    break label$1;
   }
   label$3 : {
    if ($2_1 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $0_1 = $0_1 - $0_1;
    break label$1;
   }
   $2_1 = $776(+$0_1, $1_1 | 0) | 0;
   $0_1 = +$787(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), $2_1 & 1 | 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
  return +$0_1;
 }
 
 function $789($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   HEAP32[($744() | 0) >> 2] = 0 - $0_1 | 0;
   $0_1 = -1;
  }
  return $0_1 | 0;
 }
 
 function $790($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = -28;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!($2_1 & 524288 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $3_1 = fimport$29($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
     if (($3_1 | 0) == (-10 | 0)) {
      continue label$3
     }
     break label$3;
    };
    if (($3_1 | 0) != (-52 | 0)) {
     break label$1
    }
   }
   label$4 : while (1) {
    $3_1 = fimport$30($0_1 | 0, $1_1 | 0) | 0;
    if (($3_1 | 0) == (-10 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  return $789($3_1 | 0) | 0 | 0;
 }
 
 function $791($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $835($1_1 | 0) | 0;
  $5_1 = 0;
  label$1 : {
   if ((HEAP32[($2_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $959($2_1 | 0) | 0;
  }
  $795($2_1 | 0) | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       if ($0_1) {
        break label$6
       }
       $0_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
       HEAP32[$3_1 >> 2] = $4_1 & -524481 | 0;
       if (($789(fimport$28($0_1 | 0, 4 | 0, $3_1 | 0) | 0 | 0) | 0 | 0) >= (0 | 0)) {
        break label$5
       }
       break label$3;
      }
      $0_1 = $798($0_1 | 0, $1_1 | 0) | 0;
      if (!$0_1) {
       break label$3
      }
      label$7 : {
       label$8 : {
        $1_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
        $6_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
        if (($1_1 | 0) != ($6_1 | 0)) {
         break label$8
        }
        HEAP32[($0_1 + 60 | 0) >> 2] = -1;
        break label$7;
       }
       if (($790($1_1 | 0, $6_1 | 0, $4_1 & 524288 | 0 | 0) | 0 | 0) < (0 | 0)) {
        break label$4
       }
      }
      HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) & 1 | 0 | (HEAP32[$0_1 >> 2] | 0) | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $852($0_1 | 0) | 0;
     }
     if (!$5_1) {
      break label$2
     }
     $960($2_1 | 0);
     break label$2;
    }
    $852($0_1 | 0) | 0;
   }
   $852($2_1 | 0) | 0;
   $2_1 = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $792($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   if (($1_1 | 0) != (1 | 0)) {
    break label$1
   }
   $828($0_1 | 0);
   HEAP32[($0_1 + 68 | 0) >> 2] = 0;
   $960($0_1 | 0);
   return;
  }
  HEAP32[($0_1 + 68 | 0) >> 2] = $1_1 + -1 | 0;
 }
 
 function $793($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    $1_1 = $959($0_1 | 0) | 0;
    HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -49 | 0;
    if (!$1_1) {
     break label$1
    }
    $960($0_1 | 0);
    return;
   }
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -49 | 0;
  }
 }
 
 function $794($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    if ($891($969(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = -1;
   $1_1 = -1;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = -1;
   HEAP32[($3_1 + 8 | 0) >> 2] = -1;
   HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  }
  global$0 = $3_1 + 16 | 0;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $795($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $796($0_1 | 0) | 0 | 0;
    }
    $1_1 = $959($0_1 | 0) | 0;
    $2_1 = $796($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $960($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 21040 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $795(HEAP32[(0 + 21040 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($807() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $959($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $796($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $960($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $808();
  }
  return $2_1 | 0;
 }
 
 function $796($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $797($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $789(fimport$31($0_1 | 0, $1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $798($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($865(18948 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[($744() | 0) >> 2] = 28;
     break label$2;
    }
    $3_1 = $835($1_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = 438;
    $4_1 = 0;
    $0_1 = $789(fimport$32($0_1 | 0, $3_1 | 32768 | 0 | 0, $2_1 | 0) | 0 | 0) | 0;
    if (($0_1 | 0) < (0 | 0)) {
     break label$1
    }
    $4_1 = $841($0_1 | 0, $1_1 | 0) | 0;
    if ($4_1) {
     break label$1
    }
    fimport$27($0_1 | 0) | 0;
   }
   $4_1 = 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $799($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$27($763(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $800($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $11_1 = 0, $11$hi = 0;
  label$1 : {
   if (($2_1 | 0) != (1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$5;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$5 = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1, i64toi32_i32$5, $2_1) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $13_1 = 0
     } else {
      $13_1 = 1
     }
     $14_1 = $13_1;
    } else {
     $14_1 = 0
    }
    $12_1 = $14_1;
   }
   if ($12_1) {
    break label$2
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -17 | 0;
   return 0 | 0;
  }
  return -1 | 0;
 }
 
 function $801($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   return $800($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
  }
  $3_1 = $959($0_1 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $800($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   $960($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $802($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP8[($0_1 + 75 | 0) >> 0] = 255;
  label$1 : {
   label$2 : {
    switch ($2_1 + -1 | 0 | 0) {
    case 1:
     HEAP32[($0_1 + 48 | 0) >> 2] = 0;
     break label$1;
    case 0:
     break label$2;
    default:
     break label$1;
    };
   }
   HEAP8[($0_1 + 75 | 0) >> 0] = 10;
  }
  HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 64 | 0;
  return 0 | 0;
 }
 
 function $803($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($891(fimport$33(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$4
      }
      label$5 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($4_1 | 0)) {
        break label$3
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$2
       }
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
       $9_1 = $1_1 + ($5_1 << 3 | 0) | 0;
       $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $8_1 | 0;
       $9_1 = $1_1 + ($5_1 ? 12 : 4) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $4_1 | 0;
       $1_1 = $5_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $7_1 - $5_1 | 0;
       if (!($891(fimport$33(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = -1;
     if (($6_1 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$1;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $804($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0;
  label$1 : {
   if (!($829($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = $0_1 + 80 | 0;
   $2_1 = $0_1 + 76 | 0;
   label$2 : while (1) {
    label$3 : {
     $3_1 = HEAP32[$2_1 >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     fimport$34($2_1 | 0, $1_1 | 0, $3_1 | 0, 1 | 0);
    }
    if ($829($0_1 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $805($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = -1;
  label$1 : {
   if (($0_1 | 0) == (-1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   label$2 : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    $3_1 = $959($1_1 | 0) | 0;
   }
   label$3 : {
    label$4 : {
     label$5 : {
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($4_1) {
       break label$5
      }
      $848($1_1 | 0) | 0;
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$4
      }
     }
     if ($4_1 >>> 0 > ((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + -8 | 0) >>> 0) {
      break label$3
     }
    }
    if (!$3_1) {
     break label$1
    }
    $960($1_1 | 0);
    return -1 | 0;
   }
   $2_1 = $4_1 + -1 | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   HEAP8[$2_1 >> 0] = $0_1;
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
   label$6 : {
    if (!$3_1) {
     break label$6
    }
    $960($1_1 | 0);
   }
   $2_1 = $0_1;
  }
  return $2_1 | 0;
 }
 
 function $806($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
   return HEAPU8[$1_1 >> 0] | 0 | 0;
  }
  return $837($0_1 | 0) | 0 | 0;
 }
 
 function $807() {
  $889(21252 | 0);
  return 21260 | 0;
 }
 
 function $808() {
  $890(21252 | 0);
 }
 
 function $809($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $952($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($810(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $2_1 = $959($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$6
     }
     $1_1 = $810($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$5;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $810($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$1
   }
   $960($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $1_1 | 0;
 }
 
 function $810($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $19_1 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $20_1 = 0, i64toi32_i32$0 = 0, $17_1 = 0, $11_1 = 0, $18_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $10_1 = 0, $21_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $8_1 = 0, $275_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
       break label$4
      }
      HEAP32[($744() | 0) >> 2] = 61;
      $11_1 = -1;
      break label$3;
     }
     $11_1 = $1_1 + $11_1 | 0;
    }
    $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
    $1_1 = $12_1;
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $13_1 = HEAPU8[$1_1 >> 0] | 0;
         if (!$13_1) {
          break label$9
         }
         label$10 : while (1) {
          label$11 : {
           label$12 : {
            label$13 : {
             $13_1 = $13_1 & 255 | 0;
             if ($13_1) {
              break label$13
             }
             $13_1 = $1_1;
             break label$12;
            }
            if (($13_1 | 0) != (37 | 0)) {
             break label$11
            }
            $13_1 = $1_1;
            label$14 : while (1) {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
              break label$12
             }
             $14_1 = $1_1 + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
             $13_1 = $13_1 + 1 | 0;
             $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
             $1_1 = $14_1;
             if (($15_1 | 0) == (37 | 0)) {
              continue label$14
             }
             break label$14;
            };
           }
           $1_1 = $13_1 - $12_1 | 0;
           label$15 : {
            if (!$0_1) {
             break label$15
            }
            $811($0_1 | 0, $12_1 | 0, $1_1 | 0);
           }
           if ($1_1) {
            continue label$2
           }
           $1_1 = $732(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
           $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           label$16 : {
            label$17 : {
             if (!$1_1) {
              break label$17
             }
             if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
              break label$17
             }
             $1_1 = $13_1 + 3 | 0;
             $16_1 = (HEAP8[($13_1 + 1 | 0) >> 0] | 0) + -48 | 0;
             $10_1 = 1;
             break label$16;
            }
            $1_1 = $13_1 + 1 | 0;
            $16_1 = -1;
           }
           HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
           $17_1 = 0;
           label$18 : {
            label$19 : {
             $15_1 = HEAP8[$1_1 >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 <= 31 >>> 0) {
              break label$19
             }
             $13_1 = $1_1;
             break label$18;
            }
            $17_1 = 0;
            $13_1 = $1_1;
            $14_1 = 1 << $14_1 | 0;
            if (!($14_1 & 75913 | 0)) {
             break label$18
            }
            label$20 : while (1) {
             $13_1 = $1_1 + 1 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $13_1;
             $17_1 = $14_1 | $17_1 | 0;
             $15_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 >= 32 >>> 0) {
              break label$18
             }
             $1_1 = $13_1;
             $14_1 = 1 << $14_1 | 0;
             if ($14_1 & 75913 | 0) {
              continue label$20
             }
             break label$20;
            };
           }
           label$21 : {
            label$22 : {
             if (($15_1 | 0) != (42 | 0)) {
              break label$22
             }
             label$23 : {
              label$24 : {
               if (!($732(HEAP8[($13_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$24
               }
               $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
               if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$24
               }
               HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
               $1_1 = $13_1 + 3 | 0;
               $18_1 = HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
               $10_1 = 1;
               break label$23;
              }
              if ($10_1) {
               break label$8
              }
              $10_1 = 0;
              $18_1 = 0;
              label$25 : {
               if (!$0_1) {
                break label$25
               }
               $1_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
               $18_1 = HEAP32[$1_1 >> 2] | 0;
              }
              $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
             }
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             if (($18_1 | 0) > (-1 | 0)) {
              break label$21
             }
             $18_1 = 0 - $18_1 | 0;
             $17_1 = $17_1 | 8192 | 0;
             break label$21;
            }
            $18_1 = $812($7_1 + 76 | 0 | 0) | 0;
            if (($18_1 | 0) < (0 | 0)) {
             break label$8
            }
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $19_1 = -1;
           label$26 : {
            if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
             break label$26
            }
            label$27 : {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
              break label$27
             }
             label$28 : {
              if (!($732(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
               break label$28
              }
              $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$28
              }
              HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
              $19_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
              $1_1 = $1_1 + 4 | 0;
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              break label$26;
             }
             if ($10_1) {
              break label$8
             }
             label$29 : {
              label$30 : {
               if ($0_1) {
                break label$30
               }
               $19_1 = 0;
               break label$29;
              }
              $1_1 = HEAP32[$2_1 >> 2] | 0;
              HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
              $19_1 = HEAP32[$1_1 >> 2] | 0;
             }
             $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             break label$26;
            }
            HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
            $19_1 = $812($7_1 + 76 | 0 | 0) | 0;
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $13_1 = 0;
           label$31 : while (1) {
            $14_1 = $13_1;
            $20_1 = -1;
            if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
             break label$1
            }
            $15_1 = $1_1 + 1 | 0;
            HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
            $13_1 = HEAP8[$1_1 >> 0] | 0;
            $1_1 = $15_1;
            $13_1 = HEAPU8[(($13_1 + Math_imul($14_1, 58) | 0) + 18911 | 0) >> 0] | 0;
            if (($13_1 + -1 | 0) >>> 0 < 8 >>> 0) {
             continue label$31
            }
            break label$31;
           };
           label$32 : {
            label$33 : {
             label$34 : {
              if (($13_1 | 0) == (19 | 0)) {
               break label$34
              }
              if (!$13_1) {
               break label$1
              }
              label$35 : {
               if (($16_1 | 0) < (0 | 0)) {
                break label$35
               }
               HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $13_1;
               i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $275_1 = i64toi32_i32$0;
               i64toi32_i32$0 = $7_1;
               HEAP32[($7_1 + 64 | 0) >> 2] = $275_1;
               HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
               break label$33;
              }
              if (!$0_1) {
               break label$5
              }
              $813($7_1 + 64 | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
              $15_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              break label$32;
             }
             $20_1 = -1;
             if (($16_1 | 0) > (-1 | 0)) {
              break label$1
             }
            }
            $1_1 = 0;
            if (!$0_1) {
             continue label$2
            }
           }
           $21_1 = $17_1 & -65537 | 0;
           $13_1 = $17_1 & 8192 | 0 ? $21_1 : $17_1;
           $20_1 = 0;
           $16_1 = 18952;
           $17_1 = $9_1;
           label$36 : {
            label$37 : {
             label$38 : {
              label$39 : {
               label$40 : {
                label$41 : {
                 label$42 : {
                  label$43 : {
                   label$44 : {
                    label$45 : {
                     label$46 : {
                      label$47 : {
                       label$48 : {
                        label$49 : {
                         label$50 : {
                          label$51 : {
                           $1_1 = HEAP8[($15_1 + -1 | 0) >> 0] | 0;
                           $1_1 = $14_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                           switch ($1_1 + -88 | 0 | 0) {
                           case 11:
                            break label$36;
                           case 9:
                           case 13:
                           case 14:
                           case 15:
                            break label$37;
                           case 27:
                            break label$42;
                           case 12:
                           case 17:
                            break label$45;
                           case 23:
                            break label$46;
                           case 0:
                           case 32:
                            break label$47;
                           case 24:
                            break label$48;
                           case 22:
                            break label$49;
                           case 29:
                            break label$50;
                           case 1:
                           case 2:
                           case 3:
                           case 4:
                           case 5:
                           case 6:
                           case 7:
                           case 8:
                           case 10:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 25:
                           case 26:
                           case 28:
                           case 30:
                           case 31:
                            break label$6;
                           default:
                            break label$51;
                           };
                          }
                          $17_1 = $9_1;
                          label$52 : {
                           switch ($1_1 + -65 | 0 | 0) {
                           case 0:
                           case 4:
                           case 5:
                           case 6:
                            break label$37;
                           case 2:
                            break label$40;
                           case 1:
                           case 3:
                            break label$6;
                           default:
                            break label$52;
                           };
                          }
                          if (($1_1 | 0) == (83 | 0)) {
                           break label$41
                          }
                          break label$7;
                         }
                         $20_1 = 0;
                         $16_1 = 18952;
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         $22_1 = i64toi32_i32$1;
                         $22$hi = i64toi32_i32$0;
                         break label$44;
                        }
                        $1_1 = 0;
                        label$53 : {
                         switch ($14_1 & 255 | 0 | 0) {
                         case 0:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 1:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 2:
                          i64toi32_i32$1 = $11_1;
                          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                          i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                          HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          continue label$2;
                         case 3:
                          HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                          continue label$2;
                         case 4:
                          HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                          continue label$2;
                         case 6:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 7:
                          break label$53;
                         default:
                          continue label$2;
                         };
                        }
                        i64toi32_i32$1 = $11_1;
                        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                        continue label$2;
                       }
                       $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
                       $13_1 = $13_1 | 8 | 0;
                       $1_1 = 120;
                      }
                      $20_1 = 0;
                      $16_1 = 18952;
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      $12_1 = $814(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
                      if (!($13_1 & 8 | 0)) {
                       break label$43
                      }
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                       break label$43
                      }
                      $16_1 = ($1_1 >>> 4 | 0) + 18952 | 0;
                      $20_1 = 2;
                      break label$43;
                     }
                     $20_1 = 0;
                     $16_1 = 18952;
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $12_1 = $815(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                     if (!($13_1 & 8 | 0)) {
                      break label$43
                     }
                     $1_1 = $9_1 - $12_1 | 0;
                     $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1 + 1 | 0;
                     break label$43;
                    }
                    label$60 : {
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $22_1 = i64toi32_i32$1;
                     $22$hi = i64toi32_i32$0;
                     i64toi32_i32$2 = i64toi32_i32$1;
                     i64toi32_i32$1 = -1;
                     i64toi32_i32$3 = -1;
                     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                      $30_1 = 1
                     } else {
                      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                        $31_1 = 0
                       } else {
                        $31_1 = 1
                       }
                       $32_1 = $31_1;
                      } else {
                       $32_1 = 0
                      }
                      $30_1 = $32_1;
                     }
                     if ($30_1) {
                      break label$60
                     }
                     i64toi32_i32$2 = $22$hi;
                     i64toi32_i32$2 = 0;
                     i64toi32_i32$3 = 0;
                     i64toi32_i32$0 = $22$hi;
                     i64toi32_i32$1 = $22_1;
                     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                     $22_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                     $22$hi = i64toi32_i32$5;
                     i64toi32_i32$3 = $7_1;
                     HEAP32[($7_1 + 64 | 0) >> 2] = $22_1;
                     HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                     $20_1 = 1;
                     $16_1 = 18952;
                     break label$44;
                    }
                    label$61 : {
                     if (!($13_1 & 2048 | 0)) {
                      break label$61
                     }
                     $20_1 = 1;
                     $16_1 = 18953;
                     break label$44;
                    }
                    $20_1 = $13_1 & 1 | 0;
                    $16_1 = $20_1 ? 18954 : 18952;
                   }
                   i64toi32_i32$5 = $22$hi;
                   $12_1 = $816($22_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                  }
                  $13_1 = ($19_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
                  i64toi32_i32$2 = $7_1;
                  i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                  $22_1 = i64toi32_i32$5;
                  $22$hi = i64toi32_i32$3;
                  label$62 : {
                   if ($19_1) {
                    break label$62
                   }
                   i64toi32_i32$3 = $22$hi;
                   if (!!($22_1 | i64toi32_i32$3 | 0)) {
                    break label$62
                   }
                   $19_1 = 0;
                   $12_1 = $9_1;
                   break label$7;
                  }
                  i64toi32_i32$3 = $22$hi;
                  $1_1 = ($9_1 - $12_1 | 0) + !($22_1 | i64toi32_i32$3 | 0) | 0;
                  $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
                  break label$7;
                 }
                 $20_1 = 0;
                 $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 $12_1 = $1_1 ? $1_1 : 18962;
                 $1_1 = $879($12_1 | 0, 0 | 0, $19_1 | 0) | 0;
                 $17_1 = $1_1 ? $1_1 : $12_1 + $19_1 | 0;
                 $13_1 = $21_1;
                 $19_1 = $1_1 ? $1_1 - $12_1 | 0 : $19_1;
                 break label$6;
                }
                label$63 : {
                 if (!$19_1) {
                  break label$63
                 }
                 $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 break label$39;
                }
                $1_1 = 0;
                $817($0_1 | 0, 32 | 0, $18_1 | 0, 0 | 0, $13_1 | 0);
                break label$38;
               }
               HEAP32[($7_1 + 12 | 0) >> 2] = 0;
               i64toi32_i32$2 = $7_1;
               i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$5 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$3;
               HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
               $19_1 = -1;
               $14_1 = $7_1 + 8 | 0;
              }
              $1_1 = 0;
              label$64 : {
               label$65 : while (1) {
                $15_1 = HEAP32[$14_1 >> 2] | 0;
                if (!$15_1) {
                 break label$64
                }
                label$66 : {
                 $15_1 = $880($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                 $12_1 = ($15_1 | 0) < (0 | 0);
                 if ($12_1) {
                  break label$66
                 }
                 if ($15_1 >>> 0 > ($19_1 - $1_1 | 0) >>> 0) {
                  break label$66
                 }
                 $14_1 = $14_1 + 4 | 0;
                 $1_1 = $15_1 + $1_1 | 0;
                 if ($19_1 >>> 0 > $1_1 >>> 0) {
                  continue label$65
                 }
                 break label$64;
                }
                break label$65;
               };
               $20_1 = -1;
               if ($12_1) {
                break label$1
               }
              }
              $817($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 | 0);
              label$67 : {
               if ($1_1) {
                break label$67
               }
               $1_1 = 0;
               break label$38;
              }
              $15_1 = 0;
              $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              label$68 : while (1) {
               $12_1 = HEAP32[$14_1 >> 2] | 0;
               if (!$12_1) {
                break label$38
               }
               $12_1 = $880($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
               $15_1 = $12_1 + $15_1 | 0;
               if (($15_1 | 0) > ($1_1 | 0)) {
                break label$38
               }
               $811($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
               $14_1 = $14_1 + 4 | 0;
               if ($15_1 >>> 0 < $1_1 >>> 0) {
                continue label$68
               }
               break label$68;
              };
             }
             $817($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
             $1_1 = ($18_1 | 0) > ($1_1 | 0) ? $18_1 : $1_1;
             continue label$2;
            }
            $1_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $18_1, $19_1, $13_1, $1_1) | 0;
            continue label$2;
           }
           i64toi32_i32$2 = $7_1;
           i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$5;
           $19_1 = 1;
           $12_1 = $8_1;
           $17_1 = $9_1;
           $13_1 = $21_1;
           break label$6;
          }
          $14_1 = $1_1 + 1 | 0;
          HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
          $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
          $1_1 = $14_1;
          continue label$10;
         };
        }
        $20_1 = $11_1;
        if ($0_1) {
         break label$1
        }
        if (!$10_1) {
         break label$5
        }
        $1_1 = 1;
        label$69 : {
         label$70 : while (1) {
          $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
          if (!$13_1) {
           break label$69
          }
          $813($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
          $20_1 = 1;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (10 | 0)) {
           continue label$70
          }
          break label$1;
         };
        }
        $20_1 = 1;
        if ($1_1 >>> 0 >= 10 >>> 0) {
         break label$1
        }
        label$71 : while (1) {
         if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
          break label$8
         }
         $20_1 = 1;
         $1_1 = $1_1 + 1 | 0;
         if (($1_1 | 0) == (10 | 0)) {
          break label$1
         }
         continue label$71;
        };
       }
       $20_1 = -1;
       break label$1;
      }
      $17_1 = $9_1;
     }
     $15_1 = $17_1 - $12_1 | 0;
     $17_1 = ($19_1 | 0) < ($15_1 | 0) ? $15_1 : $19_1;
     $14_1 = $20_1 + $17_1 | 0;
     $1_1 = ($18_1 | 0) < ($14_1 | 0) ? $14_1 : $18_1;
     $817($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
     $811($0_1 | 0, $16_1 | 0, $20_1 | 0);
     $817($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
     $817($0_1 | 0, 48 | 0, $17_1 | 0, $15_1 | 0, 0 | 0);
     $811($0_1 | 0, $12_1 | 0, $15_1 | 0);
     $817($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
     continue label$2;
    }
    break label$2;
   };
   $20_1 = 0;
  }
  global$0 = $7_1 + 80 | 0;
  return $20_1 | 0;
 }
 
 function $811($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $955($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $812($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!($732(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($3_1 + Math_imul($1_1, 10) | 0) + -48 | 0;
    if ($732(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $813($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $23_1 = 0, $31_1 = 0, $41_1 = 0, $49_1 = 0, $57_1 = 0, $65_1 = 0, $73_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -9 | 0 | 0) {
    case 0:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $23_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $57_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $57_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $65_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $73_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
  }
 }
 
 function $814($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $9_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 19440 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $9_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $815($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $8_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 3;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $8_1;
    $0$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $816($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $5$hi = 0, $3_1 = 0, $16_1 = 0, $16$hi = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $5_1 = $0_1;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $2_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $5$hi;
    $0_1 = $5_1;
    $0$hi = i64toi32_i32$2;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $5$hi;
   $2_1 = $5_1;
   if (!$2_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $3_1 = ($2_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $2_1 - Math_imul($3_1, 10) | 0 | 48 | 0;
    $4_1 = $2_1 >>> 0 > 9 >>> 0;
    $2_1 = $3_1;
    if ($4_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $817($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256 >>> 0;
   $952($5_1 | 0, $1_1 & 255 | 0 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : while (1) {
     $811($0_1 | 0, $5_1 | 0, 256 | 0);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $811($0_1 | 0, $5_1 | 0, $2_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $818($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $809($0_1 | 0, $1_1 | 0, $2_1 | 0, 194 | 0, 195 | 0) | 0 | 0;
 }
 
 function $819($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $11_1 = 0, $18_1 = 0, $17_1 = 0, $23_1 = 0, $6_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $21_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $22_1 = 0, $16_1 = 0, $12_1 = 0, $19_1 = 0, $26_1 = 0.0, $24_1 = 0, $9_1 = 0, $24$hi = 0, $8_1 = 0, $13_1 = 0, $15_1 = 0, $20_1 = 0, $7_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $25$hi = 0, $47_1 = 0, $25_1 = 0, $158_1 = 0, $160$hi = 0, $162$hi = 0, $164_1 = 0, $164$hi = 0, $166$hi = 0, $170_1 = 0, $170$hi = 0, $818_1 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $821(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $44_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $45_1 = 0
      } else {
       $45_1 = 1
      }
      $46_1 = $45_1;
     } else {
      $46_1 = 0
     }
     $44_1 = $46_1;
    }
    if ($44_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 19456;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $821(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   $8_1 = 1;
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $9_1 = 19459;
    break label$1;
   }
   $9_1 = 19462;
   if ($4_1 & 1 | 0) {
    break label$1
   }
   $8_1 = 0;
   $7_1 = 1;
   $9_1 = 19457;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $817($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $811($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $811($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 19483 : 19487) : $11_1 ? 19475 : 19479) | 0, 3 | 0);
    $817($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $12_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$766(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $11_1 + -1 | 0;
       $13_1 = $5_1 | 32 | 0;
       if (($13_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $13_1 = $5_1 | 32 | 0;
      if (($13_1 | 0) == (97 | 0)) {
       break label$6
      }
      $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $15_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $15_1 = $11_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $15_1;
     $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $16_1 = ($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $17_1 = $16_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $11_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $11_1 = 0;
     }
     HEAP32[$17_1 >> 2] = $11_1;
     $17_1 = $17_1 + 4 | 0;
     $1_1 = ($1_1 - +($11_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($15_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $15_1;
      $11_1 = $17_1;
      $18_1 = $16_1;
      break label$13;
     }
     $18_1 = $16_1;
     $3_1 = $15_1;
     label$15 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$16 : {
       $11_1 = $17_1 + -4 | 0;
       if ($11_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $158_1 = $11_1;
        i64toi32_i32$0 = $11_1;
        i64toi32_i32$1 = HEAP32[$11_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $160$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $160$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $47_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $47_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $162$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $164_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $164$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $162$hi;
        i64toi32_i32$1 = $47_1;
        i64toi32_i32$2 = $164$hi;
        i64toi32_i32$3 = $164_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $24_1 = i64toi32_i32$4;
        $24$hi = i64toi32_i32$5;
        $166$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $170_1 = i64toi32_i32$1;
        $170$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $166$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $170$hi;
        i64toi32_i32$3 = $170_1;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$158_1 >> 2] = i64toi32_i32$2;
        $11_1 = $11_1 + -4 | 0;
        if ($11_1 >>> 0 >= $18_1 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $24$hi;
       $11_1 = $24_1;
       if (!$11_1) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       HEAP32[$18_1 >> 2] = $11_1;
      }
      label$18 : {
       label$19 : while (1) {
        $11_1 = $17_1;
        if ($11_1 >>> 0 <= $18_1 >>> 0) {
         break label$18
        }
        $17_1 = $11_1 + -4 | 0;
        if (!(HEAP32[$17_1 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $11_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$20
     }
     $19_1 = (($14_1 + 25 | 0 | 0) / (9 | 0) | 0) + 1 | 0;
     $20_1 = ($13_1 | 0) == (102 | 0);
     label$21 : while (1) {
      $10_1 = ($3_1 | 0) < (-9 | 0) ? 9 : 0 - $3_1 | 0;
      label$22 : {
       label$23 : {
        if ($18_1 >>> 0 < $11_1 >>> 0) {
         break label$23
        }
        $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
        break label$22;
       }
       $21_1 = 1e9 >>> $10_1 | 0;
       $22_1 = (-1 << $10_1 | 0) ^ -1 | 0;
       $3_1 = 0;
       $17_1 = $18_1;
       label$24 : while (1) {
        $23_1 = HEAP32[$17_1 >> 2] | 0;
        HEAP32[$17_1 >> 2] = ($23_1 >>> $10_1 | 0) + $3_1 | 0;
        $3_1 = Math_imul($23_1 & $22_1 | 0, $21_1);
        $17_1 = $17_1 + 4 | 0;
        if ($17_1 >>> 0 < $11_1 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $18_1 = HEAP32[$18_1 >> 2] | 0 ? $18_1 : $18_1 + 4 | 0;
       if (!$3_1) {
        break label$22
       }
       HEAP32[$11_1 >> 2] = $3_1;
       $11_1 = $11_1 + 4 | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $10_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $20_1 ? $16_1 : $18_1;
      $11_1 = (($11_1 - $17_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $17_1 + ($19_1 << 2 | 0) | 0 : $11_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $17_1 = 0;
    label$25 : {
     if ($18_1 >>> 0 >= $11_1 >>> 0) {
      break label$25
     }
     $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
     $3_1 = 10;
     $23_1 = HEAP32[$18_1 >> 2] | 0;
     if ($23_1 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $17_1 = $17_1 + 1 | 0;
      $3_1 = Math_imul($3_1, 10);
      if ($23_1 >>> 0 >= $3_1 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $3_1 = ($14_1 - (($13_1 | 0) == (102 | 0) ? 0 : $17_1) | 0) - (($14_1 | 0) != (0 | 0) & ($13_1 | 0) == (103 | 0) | 0) | 0;
     if (($3_1 | 0) >= (Math_imul(($11_1 - $16_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $23_1 = $3_1 + 9216 | 0;
     $21_1 = ($23_1 | 0) / (9 | 0) | 0;
     $10_1 = (($21_1 << 2 | 0) + (($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 | 4 | 0 : $6_1 + 340 | 0) | 0) + -4096 | 0;
     $3_1 = 10;
     label$28 : {
      $23_1 = $23_1 - Math_imul($21_1, 9) | 0;
      if (($23_1 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $3_1 = Math_imul($3_1, 10);
       $23_1 = $23_1 + 1 | 0;
       if (($23_1 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $21_1 = HEAP32[$10_1 >> 2] | 0;
     $22_1 = ($21_1 >>> 0) / ($3_1 >>> 0) | 0;
     $23_1 = $21_1 - Math_imul($22_1, $3_1) | 0;
     label$30 : {
      label$31 : {
       $19_1 = $10_1 + 4 | 0;
       if (($19_1 | 0) != ($11_1 | 0)) {
        break label$31
       }
       if (!$23_1) {
        break label$30
       }
      }
      $20_1 = $3_1 >>> 1 | 0;
      $26_1 = $23_1 >>> 0 < $20_1 >>> 0 ? .5 : ($19_1 | 0) == ($11_1 | 0) ? (($23_1 | 0) == ($20_1 | 0) ? 1.0 : 1.5) : 1.5;
      $1_1 = $22_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$32 : {
       if ($7_1) {
        break label$32
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$32
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $23_1 = $21_1 - $23_1 | 0;
      HEAP32[$10_1 >> 2] = $23_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$30
      }
      $17_1 = $23_1 + $3_1 | 0;
      HEAP32[$10_1 >> 2] = $17_1;
      label$33 : {
       if ($17_1 >>> 0 < 1e9 >>> 0) {
        break label$33
       }
       label$34 : while (1) {
        HEAP32[$10_1 >> 2] = 0;
        label$35 : {
         $10_1 = $10_1 + -4 | 0;
         if ($10_1 >>> 0 >= $18_1 >>> 0) {
          break label$35
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $17_1 = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
        HEAP32[$10_1 >> 2] = $17_1;
        if ($17_1 >>> 0 > 999999999 >>> 0) {
         continue label$34
        }
        break label$34;
       };
      }
      $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
      $3_1 = 10;
      $23_1 = HEAP32[$18_1 >> 2] | 0;
      if ($23_1 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$36 : while (1) {
       $17_1 = $17_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if ($23_1 >>> 0 >= $3_1 >>> 0) {
        continue label$36
       }
       break label$36;
      };
     }
     $3_1 = $10_1 + 4 | 0;
     $11_1 = $11_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $11_1;
    }
    label$37 : {
     label$38 : while (1) {
      $3_1 = $11_1;
      $23_1 = $11_1 >>> 0 <= $18_1 >>> 0;
      if ($23_1) {
       break label$37
      }
      $11_1 = $3_1 + -4 | 0;
      if (!(HEAP32[$11_1 >> 2] | 0)) {
       continue label$38
      }
      break label$38;
     };
    }
    label$39 : {
     label$40 : {
      if (($13_1 | 0) == (103 | 0)) {
       break label$40
      }
      $22_1 = $4_1 & 8 | 0;
      break label$39;
     }
     $11_1 = $14_1 ? $14_1 : 1;
     $10_1 = ($11_1 | 0) > ($17_1 | 0) & ($17_1 | 0) > (-5 | 0) | 0;
     $14_1 = ($10_1 ? $17_1 ^ -1 | 0 : -1) + $11_1 | 0;
     $5_1 = ($10_1 ? -1 : -2) + $5_1 | 0;
     $22_1 = $4_1 & 8 | 0;
     if ($22_1) {
      break label$39
     }
     $11_1 = -9;
     label$41 : {
      if ($23_1) {
       break label$41
      }
      $10_1 = HEAP32[($3_1 + -4 | 0) >> 2] | 0;
      if (!$10_1) {
       break label$41
      }
      $23_1 = 10;
      $11_1 = 0;
      if (($10_1 >>> 0) % (10 >>> 0) | 0) {
       break label$41
      }
      label$42 : while (1) {
       $21_1 = $11_1;
       $11_1 = $11_1 + 1 | 0;
       $23_1 = Math_imul($23_1, 10);
       if (!(($10_1 >>> 0) % ($23_1 >>> 0) | 0)) {
        continue label$42
       }
       break label$42;
      };
      $11_1 = $21_1 ^ -1 | 0;
     }
     $23_1 = Math_imul(($3_1 - $16_1 | 0) >> 2 | 0, 9);
     label$43 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$43
      }
      $22_1 = 0;
      $11_1 = ($23_1 + $11_1 | 0) + -9 | 0;
      $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
      $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
      break label$39;
     }
     $22_1 = 0;
     $11_1 = (($17_1 + $23_1 | 0) + $11_1 | 0) + -9 | 0;
     $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
     $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
    }
    $20_1 = $14_1 | $22_1 | 0;
    $23_1 = ($20_1 | 0) != (0 | 0);
    label$44 : {
     label$45 : {
      $21_1 = $5_1 & -33 | 0;
      if (($21_1 | 0) != (70 | 0)) {
       break label$45
      }
      $11_1 = ($17_1 | 0) > (0 | 0) ? $17_1 : 0;
      break label$44;
     }
     label$46 : {
      $11_1 = $17_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $11_1 = $816(($17_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$4 | 0, $12_1 | 0) | 0;
      if (($12_1 - $11_1 | 0 | 0) > (1 | 0)) {
       break label$46
      }
      label$47 : while (1) {
       $11_1 = $11_1 + -1 | 0;
       HEAP8[$11_1 >> 0] = 48;
       if (($12_1 - $11_1 | 0 | 0) < (2 | 0)) {
        continue label$47
       }
       break label$47;
      };
     }
     $19_1 = $11_1 + -2 | 0;
     HEAP8[$19_1 >> 0] = $5_1;
     HEAP8[($11_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
     $11_1 = $12_1 - $19_1 | 0;
    }
    $10_1 = ((($8_1 + $14_1 | 0) + $23_1 | 0) + $11_1 | 0) + 1 | 0;
    $817($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
    $811($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $817($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$48 : {
     label$49 : {
      label$50 : {
       label$51 : {
        if (($21_1 | 0) != (70 | 0)) {
         break label$51
        }
        $21_1 = $6_1 + 16 | 0 | 8 | 0;
        $17_1 = $6_1 + 16 | 0 | 9 | 0;
        $23_1 = $18_1 >>> 0 > $16_1 >>> 0 ? $16_1 : $18_1;
        $18_1 = $23_1;
        label$52 : while (1) {
         i64toi32_i32$5 = $18_1;
         i64toi32_i32$4 = HEAP32[$18_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $11_1 = $816(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $17_1 | 0) | 0;
         label$53 : {
          label$54 : {
           if (($18_1 | 0) == ($23_1 | 0)) {
            break label$54
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$53
           }
           label$55 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$55
            }
            break label$53;
           };
          }
          if (($11_1 | 0) != ($17_1 | 0)) {
           break label$53
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $21_1;
         }
         $811($0_1 | 0, $11_1 | 0, $17_1 - $11_1 | 0 | 0);
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 <= $16_1 >>> 0) {
          continue label$52
         }
         break label$52;
        };
        label$56 : {
         if (!$20_1) {
          break label$56
         }
         $811($0_1 | 0, 19491 | 0, 1 | 0);
        }
        if ($18_1 >>> 0 >= $3_1 >>> 0) {
         break label$50
        }
        if (($14_1 | 0) < (1 | 0)) {
         break label$50
        }
        label$57 : while (1) {
         label$58 : {
          i64toi32_i32$5 = $18_1;
          i64toi32_i32$0 = HEAP32[$18_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $11_1 = $816(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $17_1 | 0) | 0;
          if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$58
          }
          label$59 : while (1) {
           $11_1 = $11_1 + -1 | 0;
           HEAP8[$11_1 >> 0] = 48;
           if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$59
           }
           break label$59;
          };
         }
         $811($0_1 | 0, $11_1 | 0, (($14_1 | 0) < (9 | 0) ? $14_1 : 9) | 0);
         $11_1 = $14_1 + -9 | 0;
         $18_1 = $18_1 + 4 | 0;
         if ($18_1 >>> 0 >= $3_1 >>> 0) {
          break label$49
         }
         $23_1 = ($14_1 | 0) > (9 | 0);
         $14_1 = $11_1;
         if ($23_1) {
          continue label$57
         }
         break label$49;
        };
       }
       label$60 : {
        if (($14_1 | 0) < (0 | 0)) {
         break label$60
        }
        $21_1 = $3_1 >>> 0 > $18_1 >>> 0 ? $3_1 : $18_1 + 4 | 0;
        $16_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $17_1 = $18_1;
        label$61 : while (1) {
         label$62 : {
          i64toi32_i32$5 = $17_1;
          i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $11_1 = $816(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
          if (($11_1 | 0) != ($3_1 | 0)) {
           break label$62
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $16_1;
         }
         label$63 : {
          label$64 : {
           if (($17_1 | 0) == ($18_1 | 0)) {
            break label$64
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$63
           }
           label$65 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$65
            }
            break label$63;
           };
          }
          $811($0_1 | 0, $11_1 | 0, 1 | 0);
          $11_1 = $11_1 + 1 | 0;
          label$66 : {
           if ($22_1) {
            break label$66
           }
           if (($14_1 | 0) < (1 | 0)) {
            break label$63
           }
          }
          $811($0_1 | 0, 19491 | 0, 1 | 0);
         }
         $23_1 = $3_1 - $11_1 | 0;
         $811($0_1 | 0, $11_1 | 0, (($14_1 | 0) > ($23_1 | 0) ? $23_1 : $14_1) | 0);
         $14_1 = $14_1 - $23_1 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $21_1 >>> 0) {
          break label$60
         }
         if (($14_1 | 0) > (-1 | 0)) {
          continue label$61
         }
         break label$61;
        };
       }
       $817($0_1 | 0, 48 | 0, $14_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $811($0_1 | 0, $19_1 | 0, $12_1 - $19_1 | 0 | 0);
       break label$48;
      }
      $11_1 = $14_1;
     }
     $817($0_1 | 0, 48 | 0, $11_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $817($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $17_1 = $5_1 & 32 | 0;
   $14_1 = $17_1 ? $9_1 + 9 | 0 : $9_1;
   label$67 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$67
    }
    $11_1 = 12 - $3_1 | 0;
    if (!$11_1) {
     break label$67
    }
    $26_1 = 8.0;
    label$68 : while (1) {
     $26_1 = $26_1 * 16.0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$68
     }
     break label$68;
    };
    label$69 : {
     if ((HEAPU8[$14_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$69
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$67;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$70 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $818_1 = $11_1;
    $11_1 = $11_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $11_1 = $816(($818_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$0 | 0, $12_1 | 0) | 0;
    if (($11_1 | 0) != ($12_1 | 0)) {
     break label$70
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $11_1 = $6_1 + 15 | 0;
   }
   $22_1 = $8_1 | 2 | 0;
   $18_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $21_1 = $11_1 + -2 | 0;
   HEAP8[$21_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($11_1 + -1 | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
   $23_1 = $4_1 & 8 | 0;
   $18_1 = $6_1 + 16 | 0;
   label$71 : while (1) {
    $11_1 = $18_1;
    label$72 : {
     label$73 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$73
      }
      $18_1 = ~~$1_1;
      break label$72;
     }
     $18_1 = -2147483648;
    }
    HEAP8[$11_1 >> 0] = HEAPU8[($18_1 + 19440 | 0) >> 0] | 0 | $17_1 | 0;
    $1_1 = ($1_1 - +($18_1 | 0)) * 16.0;
    label$74 : {
     $18_1 = $11_1 + 1 | 0;
     if (($18_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$74
     }
     label$75 : {
      if ($23_1) {
       break label$75
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$75
      }
      if ($1_1 == 0.0) {
       break label$74
      }
     }
     HEAP8[($11_1 + 1 | 0) >> 0] = 46;
     $18_1 = $11_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$71
    }
    break label$71;
   };
   label$76 : {
    label$77 : {
     if (!$3_1) {
      break label$77
     }
     if ((($18_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$77
     }
     $11_1 = (($3_1 + $12_1 | 0) - $21_1 | 0) + 2 | 0;
     break label$76;
    }
    $11_1 = (($12_1 - ($6_1 + 16 | 0) | 0) - $21_1 | 0) + $18_1 | 0;
   }
   $10_1 = $11_1 + $22_1 | 0;
   $817($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
   $811($0_1 | 0, $14_1 | 0, $22_1 | 0);
   $817($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $18_1 = $18_1 - ($6_1 + 16 | 0) | 0;
   $811($0_1 | 0, $6_1 + 16 | 0 | 0, $18_1 | 0);
   $17_1 = $12_1 - $21_1 | 0;
   $817($0_1 | 0, 48 | 0, $11_1 - ($18_1 + $17_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $811($0_1 | 0, $21_1 | 0, $17_1 | 0);
   $817($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  global$0 = $6_1 + 560 | 0;
  return (($10_1 | 0) < ($2_1 | 0) ? $2_1 : $10_1) | 0;
 }
 
 function $820($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 15 | 0) & -16 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  HEAPF64[$0_1 >> 3] = +$898($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $821($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $822($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $809($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function $823($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $809($0_1 | 0, $1_1 | 0, $2_1 | 0, 194 | 0, 0 | 0) | 0 | 0;
 }
 
 function $824($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $822($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $825($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $823($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $826() {
  var $0_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $11_1 = 0, $13_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 48 | 0;
  global$0 = $0_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = HEAP32[(0 + 19520 | 0) >> 2] | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 19512 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 19516 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = $11_1;
  HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 19504 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 19508 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $13_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $1_1 = $0_1 + 16 | 0 | 13 | 0;
  $2_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      $750($1_1 | 0) | 0;
      HEAP32[$0_1 >> 2] = 384;
      $3_1 = $789(fimport$32($0_1 + 16 | 0 | 0, 32962 | 0, $0_1 | 0) | 0 | 0) | 0;
      if (($3_1 | 0) >= (0 | 0)) {
       break label$3
      }
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) == (100 | 0)) {
       break label$2
      }
      continue label$4;
     };
    }
    fimport$35($0_1 + 16 | 0 | 0) | 0;
    $2_1 = $841($3_1 | 0, 19524 | 0) | 0;
    if ($2_1) {
     break label$1
    }
    fimport$27($3_1 | 0) | 0;
   }
   $2_1 = 0;
  }
  global$0 = $0_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $827() {
  return $745() | 0 | 0;
 }
 
 function $828($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if (!(HEAP32[($0_1 + 68 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    $1_1 = HEAP32[($0_1 + 132 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    HEAP32[($1_1 + 128 | 0) >> 2] = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
   }
   label$3 : {
    label$4 : {
     $0_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$4
     }
     $0_1 = $0_1 + 132 | 0;
     break label$3;
    }
    $0_1 = ($827() | 0) + 220 | 0;
   }
   HEAP32[$0_1 >> 2] = $1_1;
  }
 }
 
 function $829($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $1_1 = 0, $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $1_1 = $827() | 0;
    $2_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
    if (($2_1 | 0) != (HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $3_1 = -1;
    $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
    if (($1_1 | 0) == (2147483647 | 0)) {
     break label$1
    }
    HEAP32[($0_1 + 68 | 0) >> 2] = $1_1 + 1 | 0;
    return 0 | 0;
   }
   $3_1 = -1;
   label$3 : {
    $4_1 = $0_1 + 76 | 0;
    if ((HEAP32[$4_1 >> 2] | 0 | 0) > (-1 | 0)) {
     break label$3
    }
    HEAP32[$4_1 >> 2] = 0;
   }
   if (HEAP32[$4_1 >> 2] | 0) {
    break label$1
   }
   $830($4_1 | 0, $2_1 | 0);
   $3_1 = 0;
   HEAP32[($0_1 + 128 | 0) >> 2] = 0;
   HEAP32[($0_1 + 68 | 0) >> 2] = 1;
   $4_1 = HEAP32[($1_1 + 220 | 0) >> 2] | 0;
   HEAP32[($0_1 + 132 | 0) >> 2] = $4_1;
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    HEAP32[($4_1 + 128 | 0) >> 2] = $0_1;
   }
   HEAP32[($1_1 + 220 | 0) >> 2] = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $830($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1;
  }
 }
 
 function $831($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    break label$1;
   }
   $2_1 = $959($0_1 | 0) | 0;
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $960($0_1 | 0);
  }
  return ($1_1 >>> 4 | 0) & 1 | 0 | 0;
 }
 
 function $832($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $849($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $833($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $1_1 = HEAP32[$0_1 >> 2] | 0;
    break label$1;
   }
   $2_1 = $959($0_1 | 0) | 0;
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $960($0_1 | 0);
  }
  return ($1_1 >>> 5 | 0) & 1 | 0 | 0;
 }
 
 function $834($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if ($959($0_1 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    return HEAPU8[$1_1 >> 0] | 0 | 0;
   }
   return $837($0_1 | 0) | 0 | 0;
  }
  label$4 : {
   label$5 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    $1_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$4;
   }
   $1_1 = $837($0_1 | 0) | 0;
  }
  $960($0_1 | 0);
  return $1_1 | 0;
 }
 
 function $835($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 2;
  label$1 : {
   if ($865($0_1 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1_1 = (HEAPU8[$0_1 >> 0] | 0 | 0) != (114 | 0);
  }
  $1_1 = $865($0_1 | 0, 120 | 0) | 0 ? $1_1 | 128 | 0 : $1_1;
  $1_1 = $865($0_1 | 0, 101 | 0) | 0 ? $1_1 | 524288 | 0 : $1_1;
  $0_1 = HEAPU8[$0_1 >> 0] | 0;
  $1_1 = ($0_1 | 0) == (114 | 0) ? $1_1 : $1_1 | 64 | 0;
  $1_1 = ($0_1 | 0) == (119 | 0) ? $1_1 | 512 | 0 : $1_1;
  return (($0_1 | 0) == (97 | 0) ? $1_1 | 1024 | 0 : $1_1) | 0;
 }
 
 function $836($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $959($3_1 | 0) | 0;
  }
  $5_1 = Math_imul($2_1, $1_1);
  $6_1 = HEAPU8[($3_1 + 74 | 0) >> 0] | 0;
  HEAP8[($3_1 + 74 | 0) >> 0] = $6_1 + -1 | 0 | $6_1 | 0;
  label$2 : {
   label$3 : {
    $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $6_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) - $7_1 | 0;
    if (($6_1 | 0) >= (1 | 0)) {
     break label$3
    }
    $6_1 = $5_1;
    break label$2;
   }
   $8_1 = $6_1 >>> 0 < $5_1 >>> 0 ? $6_1 : $5_1;
   $951($0_1 | 0, $7_1 | 0, $8_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $8_1 | 0;
   $6_1 = $5_1 - $8_1 | 0;
   $0_1 = $0_1 + $8_1 | 0;
  }
  label$4 : {
   if (!$6_1) {
    break label$4
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      if ($848($3_1 | 0) | 0) {
       break label$7
      }
      $8_1 = FUNCTION_TABLE[HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0]($3_1, $0_1, $6_1) | 0;
      if (($8_1 + 1 | 0) >>> 0 > 1 >>> 0) {
       break label$6
      }
     }
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      $960($3_1 | 0);
     }
     return (($5_1 - $6_1 | 0) >>> 0) / ($1_1 >>> 0) | 0 | 0;
    }
    $0_1 = $0_1 + $8_1 | 0;
    $6_1 = $6_1 - $8_1 | 0;
    if ($6_1) {
     continue label$5
    }
    break label$5;
   };
  }
  $0_1 = $1_1 ? $2_1 : 0;
  label$9 : {
   if (!$4_1) {
    break label$9
   }
   $960($3_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $837($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($848($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $838($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $839($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $840($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if ($959($1_1 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP8[($1_1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$3
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if ($3_1 >>> 0 >= (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    return $2_1 | 0;
   }
   return $954($1_1 | 0, $0_1 | 0) | 0 | 0;
  }
  label$4 : {
   label$5 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP8[($1_1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$5
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if ($3_1 >>> 0 >= (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    break label$4;
   }
   $2_1 = $954($1_1 | 0, $0_1 | 0) | 0;
  }
  $960($1_1 | 0);
  return $2_1 | 0;
 }
 
 function $841($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($865(19536 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
       break label$4
      }
      HEAP32[($744() | 0) >> 2] = 28;
      break label$3;
     }
     $3_1 = $939(1176 | 0) | 0;
     if ($3_1) {
      break label$2
     }
    }
    $3_1 = 0;
    break label$1;
   }
   $952($3_1 | 0, 0 | 0, 144 | 0) | 0;
   label$5 : {
    if ($865($1_1 | 0, 43 | 0) | 0) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = (HEAPU8[$1_1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$6 : {
    label$7 : {
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$7
     }
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     break label$6;
    }
    label$8 : {
     $1_1 = fimport$28($0_1 | 0, 3 | 0, 0 | 0) | 0;
     if ($1_1 & 1024 | 0) {
      break label$8
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $1_1 | 1024 | 0;
     fimport$28($0_1 | 0, 4 | 0, $2_1 + 16 | 0 | 0) | 0;
    }
    $1_1 = HEAP32[$3_1 >> 2] | 0 | 128 | 0;
    HEAP32[$3_1 >> 2] = $1_1;
   }
   HEAP8[($3_1 + 75 | 0) >> 0] = 255;
   HEAP32[($3_1 + 48 | 0) >> 2] = 1024;
   HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $3_1 + 152 | 0;
   label$9 : {
    if ($1_1 & 8 | 0) {
     break label$9
    }
    HEAP32[$2_1 >> 2] = $2_1 + 24 | 0;
    if (fimport$36($0_1 | 0, 21523 | 0, $2_1 | 0) | 0) {
     break label$9
    }
    HEAP8[($3_1 + 75 | 0) >> 0] = 10;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = 193;
   HEAP32[($3_1 + 36 | 0) >> 2] = 192;
   HEAP32[($3_1 + 32 | 0) >> 2] = 196;
   HEAP32[($3_1 + 12 | 0) >> 2] = 191;
   label$10 : {
    if (HEAP32[(0 + 21184 | 0) >> 2] | 0) {
     break label$10
    }
    HEAP32[($3_1 + 76 | 0) >> 2] = -1;
   }
   $3_1 = $845($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $842($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($4_1 | 0) != (0 | 0)) | 0;
  $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!($891(fimport$37(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
       break label$4
      }
      $2_1 = -1;
      HEAP32[($3_1 + 12 | 0) >> 2] = -1;
      break label$3;
     }
     $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($4_1 | 0) > (0 | 0)) {
      break label$2
     }
     $2_1 = $4_1;
    }
    HEAP32[$0_1 >> 2] = ($2_1 & 48 | 0) ^ 16 | 0 | (HEAP32[$0_1 >> 2] | 0) | 0;
    break label$1;
   }
   label$5 : {
    $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    if ($4_1 >>> 0 > $6_1 >>> 0) {
     break label$5
    }
    $2_1 = $4_1;
    break label$1;
   }
   $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $5_1 + ($4_1 - $6_1 | 0) | 0;
   if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
   HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $843($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  $852($0_1 | 0) | 0;
  label$1 : while (1) {
   $0_1 = fimport$38($2_1 | 0, $1_1 + 12 | 0 | 0, 0 | 0, 0 | 0) | 0;
   if (($0_1 | 0) == (-27 | 0)) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   label$3 : {
    if (($0_1 | 0) > (-1 | 0)) {
     break label$3
    }
    $0_1 = $789($0_1 | 0) | 0;
    break label$2;
   }
   $0_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $844($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = fimport$35($0_1 | 0) | 0;
   if (($1_1 | 0) != (-31 | 0)) {
    break label$1
   }
   $1_1 = fimport$39($0_1 | 0) | 0;
  }
  return $789($1_1 | 0) | 0 | 0;
 }
 
 function $845($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $807() | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP32[($2_1 + 52 | 0) >> 2] = $0_1;
  }
  HEAP32[$1_1 >> 2] = $0_1;
  $808();
  return $0_1 | 0;
 }
 
 function $846($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $3$hi = 0, $3_1 = 0, $2_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $1_1 = 0, $28_1 = 0, $28$hi = 0, $29$hi = 0, $35_1 = 0, $35$hi = 0;
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $2_1 = 1;
  label$1 : {
   if (!((HEAPU8[$0_1 >> 0] | 0) & 128 | 0)) {
    break label$1
   }
   $2_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0 ? 2 : 1;
  }
  label$2 : {
   i64toi32_i32$0 = 0;
   i64toi32_i32$0 = FUNCTION_TABLE[$1_1 | 0]($0_1, 0, i64toi32_i32$0, $2_1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $16_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $17_1 = 0
     } else {
      $17_1 = 1
     }
     $18_1 = $17_1;
    } else {
     $18_1 = 0
    }
    $16_1 = $18_1;
   }
   if ($16_1) {
    break label$2
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $28_1 = i64toi32_i32$1;
   $28$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $28$hi;
   i64toi32_i32$0 = $28_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $29$hi = i64toi32_i32$5;
   i64toi32_i32$3 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - (HEAP32[($0_1 + 28 | 0) >> 2] | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
   $35_1 = i64toi32_i32$3;
   $35$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $29$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$3 = $35$hi;
   i64toi32_i32$0 = $35_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
  return i64toi32_i32$2 | 0;
 }
 
 function $847($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $2$hi = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $846($0_1 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
   return i64toi32_i32$0 | 0;
  }
  $1_1 = $959($0_1 | 0) | 0;
  i64toi32_i32$0 = $846($0_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  label$2 : {
   if (!$1_1) {
    break label$2
   }
   $960($0_1 | 0);
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $848($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $849($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $951($4_1 + 8 | 0 | 0, 19544 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 + -1 | 0) >>> 0 < 2147483647 >>> 0) {
      break label$3
     }
     if ($1_1) {
      break label$2
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $818($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$1;
   }
   HEAP32[($744() | 0) >> 2] = 61;
   $0_1 = -1;
  }
  global$0 = $4_1 + 160 | 0;
  return $0_1 | 0;
 }
 
 function $850($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = $3_1;
  $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) - $3_1 | 0;
  $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $951($6_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
  return $2_1 | 0;
 }
 
 function $851($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $7_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = 0;
  label$1 : {
   if ((HEAP32[($2_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = $959($2_1 | 0) | 0;
  }
  $4_1 = $1_1 + -1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 | 0) < (2 | 0)) {
     break label$3
    }
    $1_1 = $0_1;
    label$4 : {
     label$5 : {
      label$6 : while (1) {
       if (!$4_1) {
        break label$5
       }
       label$7 : {
        label$8 : {
         $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         $6_1 = $879($5_1 | 0, 10 | 0, (HEAP32[($2_1 + 8 | 0) >> 2] | 0) - $5_1 | 0 | 0) | 0;
         if (!$6_1) {
          break label$8
         }
         $7_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
         $5_1 = ($6_1 - $7_1 | 0) + 1 | 0;
         break label$7;
        }
        $7_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        $5_1 = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) - $7_1 | 0;
       }
       $5_1 = $5_1 >>> 0 < $4_1 >>> 0 ? $5_1 : $4_1;
       $951($1_1 | 0, $7_1 | 0, $5_1 | 0) | 0;
       $7_1 = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) + $5_1 | 0;
       HEAP32[($2_1 + 4 | 0) >> 2] = $7_1;
       $1_1 = $1_1 + $5_1 | 0;
       if ($6_1) {
        break label$5
       }
       $4_1 = $4_1 - $5_1 | 0;
       if (!$4_1) {
        break label$5
       }
       label$9 : {
        label$10 : {
         if ($7_1 >>> 0 >= (HEAP32[($2_1 + 8 | 0) >> 2] | 0) >>> 0) {
          break label$10
         }
         HEAP32[($2_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
         $5_1 = HEAPU8[$7_1 >> 0] | 0;
         break label$9;
        }
        $5_1 = $837($2_1 | 0) | 0;
        if (($5_1 | 0) > (-1 | 0)) {
         break label$9
        }
        $5_1 = 0;
        if (($1_1 | 0) == ($0_1 | 0)) {
         break label$4
        }
        if (!((HEAPU8[$2_1 >> 0] | 0) & 16 | 0)) {
         break label$4
        }
        break label$5;
       }
       HEAP8[$1_1 >> 0] = $5_1;
       $1_1 = $1_1 + 1 | 0;
       $4_1 = $4_1 + -1 | 0;
       if (($5_1 & 255 | 0 | 0) != (10 | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     label$11 : {
      if ($0_1) {
       break label$11
      }
      $5_1 = 0;
      break label$4;
     }
     HEAP8[$1_1 >> 0] = 0;
     $5_1 = $0_1;
    }
    if (!$3_1) {
     break label$2
    }
    $960($2_1 | 0);
    break label$2;
   }
   $1_1 = HEAPU8[($2_1 + 74 | 0) >> 0] | 0;
   HEAP8[($2_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
   label$12 : {
    if (!$3_1) {
     break label$12
    }
    $960($2_1 | 0);
   }
   $5_1 = 0;
   if ($4_1) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 0;
   return $0_1 | 0;
  }
  return $5_1 | 0;
 }
 
 function $852($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = $959($0_1 | 0) | 0;
  }
  $828($0_1 | 0);
  label$2 : {
   $2_1 = (HEAP32[$0_1 >> 2] | 0) & 1 | 0;
   if ($2_1) {
    break label$2
   }
   $3_1 = $807() | 0;
   label$3 : {
    $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   }
   label$4 : {
    $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = $4_1;
   }
   label$5 : {
    if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = $5_1;
   }
   $808();
  }
  $3_1 = $795($0_1 | 0) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0]($0_1) | 0;
  label$6 : {
   $5_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$6
   }
   $940($5_1 | 0);
  }
  label$7 : {
   label$8 : {
    if ($2_1) {
     break label$8
    }
    $940($0_1 | 0);
    break label$7;
   }
   if (!$1_1) {
    break label$7
   }
   $960($0_1 | 0);
  }
  return $4_1 | $3_1 | 0 | 0;
 }
 
 function $853($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $21_1 = 0, $22_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2_1 - $3_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $1$hi;
  $21_1 = $3_1 + $1_1 | 0;
  $22_1 = $2_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$3 = $1_1;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
   $14_1 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $15_1 = 0
    } else {
     $15_1 = 1
    }
    $16_1 = $15_1;
   } else {
    $16_1 = 0
   }
   $14_1 = $16_1;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  HEAP32[($17_1 + 104 | 0) >> 2] = ($1_1 | 0) != (i64toi32_i32$1 | 0) | ($1$hi | 0) != (i64toi32_i32$0 | 0) | 0 ? ($14_1 ? $21_1 : $22_1) : $2_1;
 }
 
 function $854($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $5$hi = 0, i64toi32_i32$4 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $1_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $4_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $11$hi = 0, $30_1 = 0, $30$hi = 0, $38_1 = 0, $38$hi = 0, $50_1 = 0, $52_1 = 0, $52$hi = 0, $57_1 = 0, $57$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $23_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $24_1 = 0
       } else {
        $24_1 = 1
       }
       $25_1 = $24_1;
      } else {
       $25_1 = 0
      }
      $23_1 = $25_1;
     }
     if ($23_1) {
      break label$2
     }
    }
    $1_1 = $837($0_1 | 0) | 0;
    if (($1_1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $3_1 = $2_1;
  label$4 : {
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$2 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$2;
   $5$hi = i64toi32_i32$0;
   if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
    break label$4
   }
   $3_1 = $2_1;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $30_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $30$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = $30$hi;
   i64toi32_i32$1 = $30_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $5_1 = i64toi32_i32$4;
   $5$hi = i64toi32_i32$5;
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = $2_1 - $4_1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
   $38_1 = i64toi32_i32$2;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $38$hi;
   i64toi32_i32$1 = $38_1;
   if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
    $26_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      $27_1 = 0
     } else {
      $27_1 = 1
     }
     $28_1 = $27_1;
    } else {
     $28_1 = 0
    }
    $26_1 = $28_1;
   }
   if ($26_1) {
    break label$4
   }
   i64toi32_i32$0 = $5$hi;
   $3_1 = $4_1 + $5_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
  $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   $50_1 = $0_1;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $52_1 = i64toi32_i32$0;
   $52$hi = i64toi32_i32$5;
   i64toi32_i32$0 = ($2_1 - $3_1 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
   $57_1 = i64toi32_i32$0;
   $57$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $52$hi;
   i64toi32_i32$1 = $52_1;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$2 = $57_1;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$1 = $50_1;
   HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = i64toi32_i32$3;
   HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$6 : {
   $0_1 = $3_1 + -1 | 0;
   if (($1_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
    break label$6
   }
   HEAP8[$0_1 >> 0] = $1_1;
  }
  return $1_1 | 0;
 }
 
 function $855($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $856($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $899($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if (($3_1 | 0) >= (32767 | 0)) {
      break label$3
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $899($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   $899($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if (($3_1 | 0) <= (-32765 | 0)) {
     break label$4
    }
    $3_1 = $3_1 + 16382 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   $899($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-49146 | 0) ? $3_1 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $71_1 = $1_1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72_1 = $2_1;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  $899($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $857($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $858($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $9_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $10_1 = 0, $10$hi = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2 | 0;
    $6_1 = HEAP32[($2_1 + 19772 | 0) >> 2] | 0;
    $7_1 = HEAP32[($2_1 + 19760 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $854($1_1 | 0) | 0;
     }
     if ($742($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $8_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $8_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $854($1_1 | 0) | 0;
    }
    $9_1 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 19688 | 0) >> 0] | 0 | 0)) {
         break label$11
        }
        label$13 : {
         if ($9_1 >>> 0 > 6 >>> 0) {
          break label$13
         }
         label$14 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$14
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$13;
         }
         $2_1 = $854($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$10;
       };
      }
      label$15 : {
       if (($9_1 | 0) == (3 | 0)) {
        break label$15
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
       if (!$3_1) {
        break label$9
       }
       if ($9_1 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       $1_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$16
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$10
      }
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$10
      }
      label$17 : while (1) {
       label$18 : {
        if (!$1_1) {
         break label$18
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       $9_1 = $9_1 + -1 | 0;
       if ($9_1 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     $892($4_1 | 0, Math_fround(Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($9_1) {
        break label$21
       }
       $9_1 = 0;
       label$22 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 19697 | 0) >> 0] | 0 | 0)) {
         break label$21
        }
        label$23 : {
         if ($9_1 >>> 0 > 1 >>> 0) {
          break label$23
         }
         label$24 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$24
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$23;
         }
         $2_1 = $854($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (3 | 0)) {
         continue label$22
        }
        break label$20;
       };
      }
      label$25 : {
       switch ($9_1 | 0) {
       case 0:
        label$27 : {
         if (($2_1 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $9_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($9_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$29
           }
           HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
           $9_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$28;
          }
          $9_1 = $854($1_1 | 0) | 0;
         }
         label$30 : {
          if (($9_1 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          $859($4_1 + 16 | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
          $11_1 = i64toi32_i32$0;
          $11$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$1;
          $10$hi = i64toi32_i32$0;
          break label$1;
         }
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$27
         }
         HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
        }
        $860($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$1;
        $10$hi = i64toi32_i32$0;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      label$31 : {
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$31
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      HEAP32[($744() | 0) >> 2] = 28;
      break label$19;
     }
     label$32 : {
      label$33 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$33
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$32;
      }
      $2_1 = $854($1_1 | 0) | 0;
     }
     label$34 : {
      label$35 : {
       if (($2_1 | 0) != (40 | 0)) {
        break label$35
       }
       $9_1 = 1;
       break label$34;
      }
      i64toi32_i32$0 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$38
        }
        HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$37;
       }
       $2_1 = $854($1_1 | 0) | 0;
      }
      $8_1 = $2_1 + -65 | 0;
      label$39 : {
       label$40 : {
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$40
        }
        if ($8_1 >>> 0 < 26 >>> 0) {
         break label$40
        }
        $8_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         break label$40
        }
        if ($8_1 >>> 0 >= 26 >>> 0) {
         break label$39
        }
       }
       $9_1 = $9_1 + 1 | 0;
       continue label$36;
      }
      break label$36;
     };
     i64toi32_i32$0 = 2147450880;
     $11_1 = 0;
     $11$hi = i64toi32_i32$0;
     if (($2_1 | 0) == (41 | 0)) {
      break label$1
     }
     label$41 : {
      $2_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$41
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
     }
     label$42 : {
      if (!$3_1) {
       break label$42
      }
      if (!$9_1) {
       break label$1
      }
      label$43 : while (1) {
       $9_1 = $9_1 + -1 | 0;
       label$44 : {
        if (!$2_1) {
         break label$44
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       if ($9_1) {
        continue label$43
       }
       break label$1;
      };
     }
     HEAP32[($744() | 0) >> 2] = 28;
    }
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $853($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $859($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $16_1 = 0, $19_1 = 0, $15$hi = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $20_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $106_1 = 0, $107_1 = 0, $108_1 = 0, $109_1 = 0, $110_1 = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $133_1 = 0, $133$hi = 0, $137_1 = 0, $137$hi = 0, $142_1 = 0, $142$hi = 0, $146_1 = 0, $146$hi = 0, $164_1 = 0, $164$hi = 0, $168_1 = 0, $168$hi = 0, $258$hi = 0, $265$hi = 0, $274_1 = 0, $274$hi = 0, $278_1 = 0, $278$hi = 0, $282_1 = 0, $282$hi = 0, $286_1 = 0, $286$hi = 0, $296_1 = 0, $296$hi = 0, $313_1 = 0, $313$hi = 0, $317_1 = 0, $317$hi = 0, $322_1 = 0, $322$hi = 0, $324_1 = 0, $324$hi = 0, $342$hi = 0, $350_1 = 0, $351_1 = 0, $354$hi = 0, $378_1 = 0, $378$hi = 0, $382_1 = 0, $382$hi = 0, $416_1 = 0, $416$hi = 0, $420_1 = 0, $420$hi = 0, $424_1 = 0, $424$hi = 0, $428_1 = 0, $428$hi = 0, $435_1 = 0, $435$hi = 0, $438_1 = 0, $438$hi = 0, $444_1 = 0, $444$hi = 0, $448_1 = 0, $448$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $458_1 = 0, $458$hi = 0, $462_1 = 0, $462$hi = 0, $492_1 = 0, $492$hi = 0, $496_1 = 0, $496$hi = 0, $500_1 = 0, $500$hi = 0, $504_1 = 0, $504$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   $7_1 = $854($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$6;
      }
      $9_1 = 1;
      $7_1 = $854($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $7_1 = $854($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   if (($7_1 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$10;
     }
     $7_1 = $854($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : while (1) {
    $12_1 = $7_1 | 32 | 0;
    label$14 : {
     label$15 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break label$15
      }
      label$16 : {
       if (($7_1 | 0) == (46 | 0)) {
        break label$16
       }
       if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
        break label$12
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break label$15
      }
      if ($8_1) {
       break label$12
      }
      $8_1 = 1;
      i64toi32_i32$5 = $19$hi;
      $14_1 = $19_1;
      $14$hi = i64toi32_i32$5;
      break label$14;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     label$17 : {
      label$18 : {
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$0 = $19_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $106_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $107_1 = 0
         } else {
          $107_1 = 1
         }
         $108_1 = $107_1;
        } else {
         $108_1 = 0
        }
        $106_1 = $108_1;
       }
       if ($106_1) {
        break label$18
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break label$17;
      }
      label$19 : {
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = $19_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
        $109_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $110_1 = 0
         } else {
          $110_1 = 1
         }
         $111_1 = $110_1;
        } else {
         $111_1 = 0
        }
        $109_1 = $111_1;
       }
       if ($109_1) {
        break label$19
       }
       $893($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $899($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $133_1 = i64toi32_i32$5;
       $133$hi = i64toi32_i32$2;
       i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $137_1 = i64toi32_i32$2;
       $137$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$2 = $15$hi;
       i64toi32_i32$0 = $133$hi;
       i64toi32_i32$3 = $137$hi;
       $899($6_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, $133_1 | 0, i64toi32_i32$0 | 0, $137_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
       $142_1 = i64toi32_i32$3;
       $142$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $146_1 = i64toi32_i32$0;
       $146$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = $142$hi;
       i64toi32_i32$5 = $146$hi;
       $896($6_1 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $142_1 | 0, i64toi32_i32$2 | 0, $146_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1 + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
       break label$17;
      }
      if ($11_1) {
       break label$17
      }
      if (!$7_1) {
       break label$17
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $899($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
      $164_1 = i64toi32_i32$3;
      $164$hi = i64toi32_i32$0;
      i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $168_1 = i64toi32_i32$0;
      $168$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$2 = $164$hi;
      i64toi32_i32$5 = $168$hi;
      $896($6_1 + 64 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $164_1 | 0, i64toi32_i32$2 | 0, $168_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    label$20 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$20
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label$13;
    }
    $7_1 = $854($1_1 | 0) | 0;
    continue label$13;
   };
  }
  label$21 : {
   label$22 : {
    label$23 : {
     label$24 : {
      if ($9_1) {
       break label$24
      }
      label$25 : {
       if (HEAP32[($1_1 + 104 | 0) >> 2] | 0) {
        break label$25
       }
       if ($5_1) {
        break label$22
       }
       break label$23;
      }
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
      if (!$5_1) {
       break label$23
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
      if (!$8_1) {
       break label$22
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
      break label$22;
     }
     label$26 : {
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 7;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
       $112_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $113_1 = 0
        } else {
         $113_1 = 1
        }
        $114_1 = $113_1;
       } else {
        $114_1 = 0
       }
       $112_1 = $114_1;
      }
      if ($112_1) {
       break label$26
      }
      i64toi32_i32$5 = $19$hi;
      $15_1 = $19_1;
      $15$hi = i64toi32_i32$5;
      label$27 : while (1) {
       $10_1 = $10_1 << 4 | 0;
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$3 = $15_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 8;
       if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        continue label$27
       }
       break label$27;
      };
     }
     label$28 : {
      label$29 : {
       if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
        break label$29
       }
       i64toi32_i32$5 = $861($1_1 | 0, $5_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $15_1 = i64toi32_i32$5;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$5 = -2147483648;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
        break label$28
       }
       label$30 : {
        if (!$5_1) {
         break label$30
        }
        i64toi32_i32$0 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$0;
        if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
         break label$28
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        break label$28;
       }
       i64toi32_i32$0 = 0;
       $16_1 = 0;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $853($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
       i64toi32_i32$0 = 0;
       $19_1 = 0;
       $19$hi = i64toi32_i32$0;
       break label$21;
      }
      i64toi32_i32$0 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$28
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     label$31 : {
      if ($10_1) {
       break label$31
      }
      $906($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
      i64toi32_i32$3 = $6_1 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$0;
      break label$21;
     }
     label$32 : {
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $14_1 : $19_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $115_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
       $115_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $258$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $258$hi;
      i64toi32_i32$3 = $115_1;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -32;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $265$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $265$hi;
      i64toi32_i32$0 = 0 - $3_1 | 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
       $116_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
         $117_1 = 0
        } else {
         $117_1 = 1
        }
        $118_1 = $117_1;
       } else {
        $118_1 = 0
       }
       $116_1 = $118_1;
      }
      if ($116_1) {
       break label$32
      }
      HEAP32[($744() | 0) >> 2] = 68;
      $893($6_1 + 160 | 0 | 0, $4_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
      $274_1 = i64toi32_i32$2;
      $274$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 160 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $278_1 = i64toi32_i32$1;
      $278$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $274$hi;
      i64toi32_i32$1 = $278$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = 2147418111;
      $899($6_1 + 144 | 0 | 0, $274_1 | 0, i64toi32_i32$2 | 0, $278_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
      $282_1 = i64toi32_i32$5;
      $282$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $286_1 = i64toi32_i32$0;
      $286$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $282$hi;
      i64toi32_i32$0 = $286$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = 2147418111;
      $899($6_1 + 128 | 0 | 0, $282_1 | 0, i64toi32_i32$5 | 0, $286_1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$0 = ($6_1 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$2;
      break label$21;
     }
     label$33 : {
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$1 = $3_1 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $296_1 = i64toi32_i32$1;
      $296$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$1 = $296$hi;
      i64toi32_i32$5 = $296_1;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $119_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $120_1 = 0
        } else {
         $120_1 = 1
        }
        $121_1 = $120_1;
       } else {
        $121_1 = 0
       }
       $119_1 = $121_1;
      }
      if ($119_1) {
       break label$33
      }
      label$34 : {
       if (($10_1 | 0) <= (-1 | 0)) {
        break label$34
       }
       label$35 : while (1) {
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = -1073807360;
        $896($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1073610752;
        $7_1 = $904($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$5;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $313_1 = i64toi32_i32$0;
        $313$hi = i64toi32_i32$2;
        $1_1 = ($7_1 | 0) < (0 | 0);
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $313$hi;
        i64toi32_i32$1 = i64toi32_i32$3 ? $16_1 : $313_1;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
        $317_1 = i64toi32_i32$1;
        $317$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$3 = ($6_1 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $322_1 = i64toi32_i32$5;
        $322$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$5 = $322$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ? $17_1 : $322_1;
        i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
        $324_1 = i64toi32_i32$2;
        $324$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $317$hi;
        i64toi32_i32$1 = $324$hi;
        $896($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, $317_1 | 0, i64toi32_i32$0 | 0, $324_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$2 = $19_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $19_1 = i64toi32_i32$5;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$4;
        $17$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $6_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$4;
        $10_1 = $10_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
        if (($10_1 | 0) > (-1 | 0)) {
         continue label$35
        }
        break label$35;
       };
      }
      label$36 : {
       label$37 : {
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $342$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$1 = $19_1;
        i64toi32_i32$2 = $342$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $14_1 = i64toi32_i32$2;
        $14$hi = i64toi32_i32$0;
        $7_1 = i64toi32_i32$2;
        $350_1 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
        $351_1 = $2_1;
        i64toi32_i32$0 = 0;
        $354$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$4 = $354$hi;
        i64toi32_i32$3 = $2_1;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
         $122_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $123_1 = 0
          } else {
           $123_1 = 1
          }
          $124_1 = $123_1;
         } else {
          $124_1 = 0
         }
         $122_1 = $124_1;
        }
        $7_1 = $122_1 ? $350_1 : $351_1;
        if (($7_1 | 0) < (113 | 0)) {
         break label$37
        }
        $893($6_1 + 384 | 0 | 0, $4_1 | 0);
        i64toi32_i32$3 = $6_1 + 392 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $14_1 = i64toi32_i32$5;
        $14$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $20_1 = 0;
        $20$hi = i64toi32_i32$5;
        break label$36;
       }
       $906($6_1 + 352 | 0 | 0, +(+$949(+(1.0), 144 - $7_1 | 0 | 0)));
       $893($6_1 + 336 | 0 | 0, $4_1 | 0);
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
       $378_1 = i64toi32_i32$5;
       $378$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $382_1 = i64toi32_i32$0;
       $382$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $14_1 = i64toi32_i32$0;
       $14$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $378$hi;
       i64toi32_i32$0 = $382$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$4 = $14$hi;
       $855($6_1 + 368 | 0 | 0, $378_1 | 0, i64toi32_i32$5 | 0, $382_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 376 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 380 | 0) >> 2] | 0;
       $20_1 = i64toi32_i32$4;
       $20$hi = i64toi32_i32$3;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 368 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$4;
      }
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      $7_1 = !($10_1 & 1 | 0) & (($903($16_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) & ($7_1 | 0) < (32 | 0) | 0) | 0;
      $905($6_1 + 320 | 0 | 0, $10_1 + $7_1 | 0 | 0);
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $14$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
      $416_1 = i64toi32_i32$5;
      $416$hi = i64toi32_i32$0;
      i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $420_1 = i64toi32_i32$0;
      $420$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$3 = $416$hi;
      i64toi32_i32$4 = $420$hi;
      $899($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$0 | 0, $416_1 | 0, i64toi32_i32$3 | 0, $420_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 304 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 308 | 0) >> 2] | 0;
      $424_1 = i64toi32_i32$4;
      $424$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 304 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $428_1 = i64toi32_i32$3;
      $428$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $424$hi;
      i64toi32_i32$3 = $428$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$5 = $20$hi;
      $896($6_1 + 272 | 0 | 0, $424_1 | 0, i64toi32_i32$4 | 0, $428_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $16_1;
      i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$0;
      $435_1 = i64toi32_i32$4;
      $435$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $17_1;
      i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
      $438_1 = i64toi32_i32$5;
      $438$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $435$hi;
      i64toi32_i32$5 = $438$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $14$hi;
      $899($6_1 + 288 | 0 | 0, $435_1 | 0, i64toi32_i32$1 | 0, $438_1 | 0, i64toi32_i32$5 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
      $444_1 = i64toi32_i32$3;
      $444$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 288 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $448_1 = i64toi32_i32$0;
      $448$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
      $450_1 = i64toi32_i32$3;
      $450$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $454_1 = i64toi32_i32$0;
      $454$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $444$hi;
      i64toi32_i32$0 = $448$hi;
      i64toi32_i32$5 = $450$hi;
      i64toi32_i32$1 = $454$hi;
      $896($6_1 + 256 | 0 | 0, $444_1 | 0, i64toi32_i32$3 | 0, $448_1 | 0, i64toi32_i32$0 | 0, $450_1 | 0, i64toi32_i32$5 | 0, $454_1 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $458_1 = i64toi32_i32$1;
      $458$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $462_1 = i64toi32_i32$5;
      $462$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $458$hi;
      i64toi32_i32$5 = $462$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$3 = $20$hi;
      $907($6_1 + 240 | 0 | 0, $458_1 | 0, i64toi32_i32$1 | 0, $462_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
      label$38 : {
       i64toi32_i32$5 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$3;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$0;
       $17$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 0;
       if ($903($16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
        break label$38
       }
       HEAP32[($744() | 0) >> 2] = 68;
      }
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      $856($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 232 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 236 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$5;
      break label$21;
     }
     HEAP32[($744() | 0) >> 2] = 68;
     $893($6_1 + 208 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
     $492_1 = i64toi32_i32$5;
     $492$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $496_1 = i64toi32_i32$1;
     $496$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $492$hi;
     i64toi32_i32$1 = $496$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 65536;
     $899($6_1 + 192 | 0 | 0, $492_1 | 0, i64toi32_i32$5 | 0, $496_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
     $500_1 = i64toi32_i32$3;
     $500$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $504_1 = i64toi32_i32$0;
     $504$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $500$hi;
     i64toi32_i32$0 = $504$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 65536;
     $899($6_1 + 176 | 0 | 0, $500_1 | 0, i64toi32_i32$3 | 0, $504_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$0 = ($6_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     break label$21;
    }
    i64toi32_i32$5 = 0;
    $853($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
   }
   $906($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
   i64toi32_i32$0 = $6_1 + 104 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $16$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $860($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $19$hi = 0, $11_1 = 0, $19_1 = 0, $20$hi = 0, $14_1 = 0, i64toi32_i32$0 = 0, $20_1 = 0, $8_1 = 0, $13_1 = 0, $15_1 = 0, $22$hi = 0, $16_1 = 0, $21$hi = 0, $22_1 = 0, $21_1 = 0, $12_1 = 0, $17_1 = 0, $23$hi = 0, $24$hi = 0, $23_1 = 0, $24_1 = 0, $9_1 = 0, $168_1 = 0, $169_1 = 0, $170_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $176_1 = 0, $177_1 = 0, $18_1 = 0, $25_1 = 0.0, $10_1 = 0, $127_1 = 0, $235_1 = 0, $235$hi = 0, $239_1 = 0, $239$hi = 0, $241_1 = 0, $241$hi = 0, $245_1 = 0, $245$hi = 0, $255$hi = 0, $264_1 = 0, $264$hi = 0, $268_1 = 0, $268$hi = 0, $272_1 = 0, $272$hi = 0, $276_1 = 0, $276$hi = 0, $286_1 = 0, $286$hi = 0, $295_1 = 0, $295$hi = 0, $299_1 = 0, $299$hi = 0, $303_1 = 0, $303$hi = 0, $307_1 = 0, $307$hi = 0, $356_1 = 0, $356$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $362$hi = 0, $366_1 = 0, $366$hi = 0, $385_1 = 0, $385$hi = 0, $389_1 = 0, $389$hi = 0, $391_1 = 0, $391$hi = 0, $395_1 = 0, $395$hi = 0, $406_1 = 0, $406$hi = 0, $410_1 = 0, $410$hi = 0, $412_1 = 0, $412$hi = 0, $416_1 = 0, $416$hi = 0, $444_1 = 0, $444$hi = 0, $448_1 = 0, $448$hi = 0, $450_1 = 0, $450$hi = 0, $454_1 = 0, $454$hi = 0, $464_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $470_1 = 0, $470$hi = 0, $474_1 = 0, $474$hi = 0, $513_1 = 0, $591$hi = 0, $593$hi = 0, $601_1 = 0, $601$hi = 0, $742_1 = 0, $742$hi = 0, $746_1 = 0, $746$hi = 0, $748_1 = 0, $748$hi = 0, $752_1 = 0, $752$hi = 0, $771_1 = 0, $771$hi = 0, $775_1 = 0, $775$hi = 0, $817_1 = 0, $879_1 = 0, $879$hi = 0, $883_1 = 0, $883$hi = 0, $900_1 = 0, $900$hi = 0, $904_1 = 0, $904$hi = 0, $920_1 = 0, $920$hi = 0, $924_1 = 0, $924$hi = 0, $961_1 = 0, $961$hi = 0, $965_1 = 0, $965$hi = 0, $984 = 0, $984$hi = 0, $988 = 0, $988$hi = 0, $1011 = 0, $1011$hi = 0, $1015 = 0, $1015$hi = 0, $1031 = 0, $1031$hi = 0, $1035 = 0, $1035$hi = 0, $1049 = 0, $1049$hi = 0, $1051 = 0, $1051$hi = 0, $1071 = 0, $1071$hi = 0, $1075 = 0, $1075$hi = 0, $1098 = 0, $1098$hi = 0, $1100 = 0, $1100$hi = 0, $1106 = 0, $1106$hi = 0, $1113 = 0, $1113$hi = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = $4_1 + $3_1 | 0;
  $10_1 = 0 - $9_1 | 0;
  i64toi32_i32$0 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$6
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label$4;
      }
      $11_1 = 1;
      $2_1 = $854($1_1 | 0) | 0;
      continue label$4;
     };
    }
    $2_1 = $854($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $19_1 = 0;
   $19$hi = i64toi32_i32$0;
   if (($2_1 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $854($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$5;
    if (($2_1 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $11_1 = 1;
   $8_1 = 1;
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         label$17 : {
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
           break label$17
          }
          i64toi32_i32$5 = 0;
          $20_1 = 0;
          $20$hi = i64toi32_i32$5;
          if ($13_1 >>> 0 <= 9 >>> 0) {
           break label$17
          }
          $15_1 = 0;
          $16_1 = 0;
          break label$16;
         }
         i64toi32_i32$5 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$5;
         $16_1 = 0;
         $15_1 = 0;
         $12_1 = 0;
         label$18 : while (1) {
          label$19 : {
           label$20 : {
            if (!($14_1 & 1 | 0)) {
             break label$20
            }
            label$21 : {
             if ($8_1) {
              break label$21
             }
             i64toi32_i32$5 = $20$hi;
             $19_1 = $20_1;
             $19$hi = i64toi32_i32$5;
             $8_1 = 1;
             break label$19;
            }
            $11_1 = !$11_1;
            break label$15;
           }
           i64toi32_i32$5 = $20$hi;
           i64toi32_i32$0 = $20_1;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $20_1 = i64toi32_i32$1;
           $20$hi = i64toi32_i32$4;
           label$22 : {
            if (($15_1 | 0) > (2044 | 0)) {
             break label$22
            }
            $14_1 = ($2_1 | 0) == (48 | 0);
            i64toi32_i32$4 = $20$hi;
            $17_1 = $20_1;
            $11_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
            label$23 : {
             if (!$16_1) {
              break label$23
             }
             $13_1 = ($2_1 + Math_imul(HEAP32[$11_1 >> 2] | 0, 10) | 0) + -48 | 0;
            }
            $12_1 = $14_1 ? $12_1 : $17_1;
            HEAP32[$11_1 >> 2] = $13_1;
            $11_1 = 1;
            $2_1 = $16_1 + 1 | 0;
            $127_1 = $2_1;
            $2_1 = ($2_1 | 0) == (9 | 0);
            $16_1 = $2_1 ? 0 : $127_1;
            $15_1 = $15_1 + $2_1 | 0;
            break label$19;
           }
           if (($2_1 | 0) == (48 | 0)) {
            break label$19
           }
           HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
           $12_1 = 18396;
          }
          label$24 : {
           label$25 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$25
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$24;
           }
           $2_1 = $854($1_1 | 0) | 0;
          }
          $13_1 = $2_1 + -48 | 0;
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
           continue label$18
          }
          if ($13_1 >>> 0 < 10 >>> 0) {
           continue label$18
          }
          break label$18;
         };
        }
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$0 = $20$hi;
        i64toi32_i32$3 = i64toi32_i32$2 ? $19_1 : $20_1;
        i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
        $19_1 = i64toi32_i32$3;
        $19$hi = i64toi32_i32$5;
        label$26 : {
         if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
          break label$26
         }
         if (!$11_1) {
          break label$26
         }
         label$27 : {
          i64toi32_i32$5 = $861($1_1 | 0, $6_1 | 0) | 0;
          i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
          $21_1 = i64toi32_i32$5;
          $21$hi = i64toi32_i32$3;
          i64toi32_i32$2 = i64toi32_i32$5;
          i64toi32_i32$5 = -2147483648;
          i64toi32_i32$4 = 0;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
           break label$27
          }
          if (!$6_1) {
           break label$12
          }
          i64toi32_i32$2 = 0;
          $21_1 = 0;
          $21$hi = i64toi32_i32$2;
          if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
           break label$27
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         if (!$11_1) {
          break label$13
         }
         i64toi32_i32$2 = $21$hi;
         i64toi32_i32$2 = $19$hi;
         i64toi32_i32$2 = $21$hi;
         i64toi32_i32$4 = $21_1;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$5 = $19_1;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
         }
         $19_1 = i64toi32_i32$0;
         $19$hi = i64toi32_i32$1;
         break label$11;
        }
        $11_1 = !$11_1;
        if (($2_1 | 0) < (0 | 0)) {
         break label$14
        }
       }
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$14
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$11_1) {
       break label$11
      }
     }
     HEAP32[($744() | 0) >> 2] = 28;
    }
    i64toi32_i32$1 = 0;
    $20_1 = 0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $853($1_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$1;
    break label$10;
   }
   label$28 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break label$28
    }
    $906($7_1 | 0, +(+($5_1 | 0) * 0.0));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$29 : {
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
     $168_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $169_1 = 0
      } else {
       $169_1 = 1
      }
      $170_1 = $169_1;
     } else {
      $170_1 = 0
     }
     $168_1 = $170_1;
    }
    if ($168_1) {
     break label$29
    }
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$4 = $20_1;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$29
    }
    label$30 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$30
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$29
     }
    }
    $893($7_1 + 48 | 0 | 0, $5_1 | 0);
    $905($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 52 | 0) >> 2] | 0;
    $235_1 = i64toi32_i32$5;
    $235$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $239_1 = i64toi32_i32$2;
    $239$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
    $241_1 = i64toi32_i32$5;
    $241$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $245_1 = i64toi32_i32$2;
    $245$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $235$hi;
    i64toi32_i32$2 = $239$hi;
    i64toi32_i32$4 = $241$hi;
    i64toi32_i32$1 = $245$hi;
    $899($7_1 + 16 | 0 | 0, $235_1 | 0, i64toi32_i32$5 | 0, $239_1 | 0, i64toi32_i32$2 | 0, $241_1 | 0, i64toi32_i32$4 | 0, $245_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$31 : {
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = 0;
    $255$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$4 = $255$hi;
    i64toi32_i32$5 = ($4_1 | 0) / (-2 | 0) | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $171_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $172_1 = 0
      } else {
       $172_1 = 1
      }
      $173_1 = $172_1;
     } else {
      $173_1 = 0
     }
     $171_1 = $173_1;
    }
    if ($171_1) {
     break label$31
    }
    HEAP32[($744() | 0) >> 2] = 68;
    $893($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    $264_1 = i64toi32_i32$2;
    $264$hi = i64toi32_i32$1;
    i64toi32_i32$5 = (i64toi32_i32$5 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $268_1 = i64toi32_i32$1;
    $268$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $264$hi;
    i64toi32_i32$1 = $268$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = 2147418111;
    $899($7_1 + 80 | 0 | 0, $264_1 | 0, i64toi32_i32$2 | 0, $268_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
    $272_1 = i64toi32_i32$4;
    $272$hi = i64toi32_i32$5;
    i64toi32_i32$1 = (i64toi32_i32$1 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $276_1 = i64toi32_i32$5;
    $276$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $272$hi;
    i64toi32_i32$5 = $276$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $899($7_1 + 64 | 0 | 0, $272_1 | 0, i64toi32_i32$4 | 0, $276_1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$5 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$2;
    break label$10;
   }
   label$32 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $286_1 = i64toi32_i32$1;
    $286$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $286$hi;
    i64toi32_i32$4 = $286_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $174_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       $175_1 = 0
      } else {
       $175_1 = 1
      }
      $176_1 = $175_1;
     } else {
      $176_1 = 0
     }
     $174_1 = $176_1;
    }
    if ($174_1) {
     break label$32
    }
    HEAP32[($744() | 0) >> 2] = 68;
    $893($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 148 | 0) >> 2] | 0;
    $295_1 = i64toi32_i32$5;
    $295$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $299_1 = i64toi32_i32$2;
    $299$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $295$hi;
    i64toi32_i32$2 = $299$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 65536;
    $899($7_1 + 128 | 0 | 0, $295_1 | 0, i64toi32_i32$5 | 0, $299_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $303_1 = i64toi32_i32$1;
    $303$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $307_1 = i64toi32_i32$4;
    $307$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $303$hi;
    i64toi32_i32$4 = $307$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    $899($7_1 + 112 | 0 | 0, $303_1 | 0, i64toi32_i32$1 | 0, $307_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$2;
    $20$hi = i64toi32_i32$5;
    break label$10;
   }
   label$33 : {
    if (!$16_1) {
     break label$33
    }
    label$34 : {
     if (($16_1 | 0) > (8 | 0)) {
      break label$34
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$35 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label$35
      }
      break label$35;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$5 = $19$hi;
   $8_1 = $19_1;
   label$36 : {
    if (($12_1 | 0) >= (9 | 0)) {
     break label$36
    }
    if (($12_1 | 0) > ($8_1 | 0)) {
     break label$36
    }
    if (($8_1 | 0) > (17 | 0)) {
     break label$36
    }
    label$37 : {
     if (($8_1 | 0) != (9 | 0)) {
      break label$37
     }
     $893($7_1 + 192 | 0 | 0, $5_1 | 0);
     $905($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 196 | 0) >> 2] | 0;
     $356_1 = i64toi32_i32$5;
     $356$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $360_1 = i64toi32_i32$2;
     $360$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
     $362_1 = i64toi32_i32$5;
     $362$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $366_1 = i64toi32_i32$2;
     $366$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $356$hi;
     i64toi32_i32$2 = $360$hi;
     i64toi32_i32$4 = $362$hi;
     i64toi32_i32$1 = $366$hi;
     $899($7_1 + 160 | 0 | 0, $356_1 | 0, i64toi32_i32$5 | 0, $360_1 | 0, i64toi32_i32$2 | 0, $362_1 | 0, i64toi32_i32$4 | 0, $366_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    label$38 : {
     if (($8_1 | 0) > (8 | 0)) {
      break label$38
     }
     $893($7_1 + 272 | 0 | 0, $5_1 | 0);
     $905($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     $385_1 = i64toi32_i32$1;
     $385$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $389_1 = i64toi32_i32$4;
     $389$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     $391_1 = i64toi32_i32$1;
     $391$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $395_1 = i64toi32_i32$4;
     $395$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $385$hi;
     i64toi32_i32$4 = $389$hi;
     i64toi32_i32$2 = $391$hi;
     i64toi32_i32$5 = $395$hi;
     $899($7_1 + 240 | 0 | 0, $385_1 | 0, i64toi32_i32$1 | 0, $389_1 | 0, i64toi32_i32$4 | 0, $391_1 | 0, i64toi32_i32$2 | 0, $395_1 | 0, i64toi32_i32$5 | 0);
     $893($7_1 + 224 | 0 | 0, HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 19728 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 244 | 0) >> 2] | 0;
     $406_1 = i64toi32_i32$5;
     $406$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $410_1 = i64toi32_i32$2;
     $410$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 228 | 0) >> 2] | 0;
     $412_1 = i64toi32_i32$5;
     $412$hi = i64toi32_i32$2;
     i64toi32_i32$4 = (i64toi32_i32$4 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $416_1 = i64toi32_i32$2;
     $416$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $406$hi;
     i64toi32_i32$2 = $410$hi;
     i64toi32_i32$4 = $412$hi;
     i64toi32_i32$1 = $416$hi;
     $895($7_1 + 208 | 0 | 0, $406_1 | 0, i64toi32_i32$5 | 0, $410_1 | 0, i64toi32_i32$2 | 0, $412_1 | 0, i64toi32_i32$4 | 0, $416_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    label$39 : {
     $2_1 = ($3_1 + Math_imul($8_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$39
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$36
     }
    }
    $893($7_1 + 352 | 0 | 0, $5_1 | 0);
    $905($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
    $444_1 = i64toi32_i32$1;
    $444$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $448_1 = i64toi32_i32$4;
    $448$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
    $450_1 = i64toi32_i32$1;
    $450$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $454_1 = i64toi32_i32$4;
    $454$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $444$hi;
    i64toi32_i32$4 = $448$hi;
    i64toi32_i32$2 = $450$hi;
    i64toi32_i32$5 = $454$hi;
    $899($7_1 + 320 | 0 | 0, $444_1 | 0, i64toi32_i32$1 | 0, $448_1 | 0, i64toi32_i32$4 | 0, $450_1 | 0, i64toi32_i32$2 | 0, $454_1 | 0, i64toi32_i32$5 | 0);
    $893($7_1 + 304 | 0 | 0, HEAP32[(($8_1 << 2 | 0) + 19688 | 0) >> 2] | 0 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 324 | 0) >> 2] | 0;
    $464_1 = i64toi32_i32$5;
    $464$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $468_1 = i64toi32_i32$2;
    $468$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $470_1 = i64toi32_i32$5;
    $470$hi = i64toi32_i32$2;
    i64toi32_i32$4 = (i64toi32_i32$4 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $474_1 = i64toi32_i32$2;
    $474$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $464$hi;
    i64toi32_i32$2 = $468$hi;
    i64toi32_i32$4 = $470$hi;
    i64toi32_i32$1 = $474$hi;
    $899($7_1 + 288 | 0 | 0, $464_1 | 0, i64toi32_i32$5 | 0, $468_1 | 0, i64toi32_i32$2 | 0, $470_1 | 0, i64toi32_i32$4 | 0, $474_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$40 : while (1) {
    $2_1 = $15_1;
    $15_1 = $2_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$40
    }
    break label$40;
   };
   $16_1 = 0;
   label$41 : {
    label$42 : {
     $1_1 = ($8_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$42
     }
     $11_1 = 0;
     break label$41;
    }
    $6_1 = ($8_1 | 0) > (-1 | 0) ? $1_1 : $1_1 + 9 | 0;
    label$43 : {
     label$44 : {
      if ($2_1) {
       break label$44
      }
      $11_1 = 0;
      $2_1 = 0;
      break label$43;
     }
     $13_1 = HEAP32[(((8 - $6_1 | 0) << 2 | 0) + 19728 | 0) >> 2] | 0;
     $17_1 = (1e9 | 0) / ($13_1 | 0) | 0;
     $14_1 = 0;
     $1_1 = 0;
     $11_1 = 0;
     label$45 : while (1) {
      $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
      $513_1 = $15_1;
      $15_1 = HEAP32[$15_1 >> 2] | 0;
      $12_1 = ($15_1 >>> 0) / ($13_1 >>> 0) | 0;
      $14_1 = $12_1 + $14_1 | 0;
      HEAP32[$513_1 >> 2] = $14_1;
      $14_1 = ($1_1 | 0) == ($11_1 | 0) & !$14_1 | 0;
      $11_1 = $14_1 ? ($11_1 + 1 | 0) & 2047 | 0 : $11_1;
      $8_1 = $14_1 ? $8_1 + -9 | 0 : $8_1;
      $14_1 = Math_imul($17_1, $15_1 - Math_imul($12_1, $13_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue label$45
      }
      break label$45;
     };
     if (!$14_1) {
      break label$43
     }
     HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $14_1;
     $2_1 = $2_1 + 1 | 0;
    }
    $8_1 = ($8_1 - $6_1 | 0) + 9 | 0;
   }
   label$46 : while (1) {
    $12_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
    label$47 : {
     label$48 : while (1) {
      label$49 : {
       if (($8_1 | 0) < (36 | 0)) {
        break label$49
       }
       if (($8_1 | 0) != (36 | 0)) {
        break label$47
       }
       if ((HEAP32[$12_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$47
       }
      }
      $15_1 = $2_1 + 2047 | 0;
      $14_1 = 0;
      $13_1 = $2_1;
      label$50 : while (1) {
       $2_1 = $13_1;
       label$51 : {
        label$52 : {
         $1_1 = $15_1 & 2047 | 0;
         $13_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $13_1;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$5 = 29;
         i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $177_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $177_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $591$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $593$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $591$hi;
         i64toi32_i32$4 = $177_1;
         i64toi32_i32$2 = $593$hi;
         i64toi32_i32$5 = $14_1;
         i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $19_1 = i64toi32_i32$3;
         $19$hi = i64toi32_i32$0;
         i64toi32_i32$1 = i64toi32_i32$3;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 1000000001;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$52
         }
         $14_1 = 0;
         break label$51;
        }
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($19_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $20_1 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $601_1 = i64toi32_i32$0;
        $601$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$5 = $19_1;
        i64toi32_i32$0 = $601$hi;
        i64toi32_i32$4 = $601_1;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $19_1 = i64toi32_i32$2;
        $19$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $20$hi;
        $14_1 = $20_1;
       }
       i64toi32_i32$3 = $19$hi;
       $15_1 = $19_1;
       HEAP32[$13_1 >> 2] = $19_1;
       $13_1 = ($1_1 | 0) != (($2_1 + -1 | 0) & 2047 | 0 | 0) ? $2_1 : ($1_1 | 0) == ($11_1 | 0) ? $2_1 : $19_1 ? $2_1 : $1_1;
       $15_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($11_1 | 0)) {
        continue label$50
       }
       break label$50;
      };
      $16_1 = $16_1 + -29 | 0;
      if (!$14_1) {
       continue label$48
      }
      break label$48;
     };
     label$53 : {
      $11_1 = ($11_1 + -1 | 0) & 2047 | 0;
      if (($11_1 | 0) != ($13_1 | 0)) {
       break label$53
      }
      $1_1 = ($7_1 + 784 | 0) + ((($13_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $2_1 = ($13_1 + -1 | 0) & 2047 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0) | 0;
     }
     $8_1 = $8_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0) >> 2] = $14_1;
     continue label$46;
    }
    break label$46;
   };
   label$54 : {
    label$55 : while (1) {
     $6_1 = ($2_1 + 1 | 0) & 2047 | 0;
     $18_1 = ($7_1 + 784 | 0) + ((($2_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$56 : while (1) {
      $15_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
      label$57 : {
       label$58 : while (1) {
        $13_1 = $11_1;
        $1_1 = 0;
        label$59 : {
         label$60 : {
          label$61 : while (1) {
           $11_1 = ($1_1 + $13_1 | 0) & 2047 | 0;
           if (($11_1 | 0) == ($2_1 | 0)) {
            break label$60
           }
           $11_1 = HEAP32[(($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0;
           $14_1 = HEAP32[(($1_1 << 2 | 0) + 19712 | 0) >> 2] | 0;
           if ($11_1 >>> 0 < $14_1 >>> 0) {
            break label$60
           }
           if ($11_1 >>> 0 > $14_1 >>> 0) {
            break label$59
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$61
           }
           break label$61;
          };
         }
         if (($8_1 | 0) != (36 | 0)) {
          break label$59
         }
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$3;
         label$62 : while (1) {
          label$63 : {
           $11_1 = ($1_1 + $13_1 | 0) & 2047 | 0;
           if (($11_1 | 0) != ($2_1 | 0)) {
            break label$63
           }
           $2_1 = ($2_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($2_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $20$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = 1075633366;
          $899($7_1 + 768 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$4 | 0);
          $905($7_1 + 752 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 772 | 0) >> 2] | 0;
          $742_1 = i64toi32_i32$4;
          $742$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 768 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $746_1 = i64toi32_i32$1;
          $746$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
          $748_1 = i64toi32_i32$4;
          $748$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $752_1 = i64toi32_i32$1;
          $752$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $742$hi;
          i64toi32_i32$1 = $746$hi;
          i64toi32_i32$5 = $748$hi;
          i64toi32_i32$3 = $752$hi;
          $896($7_1 + 736 | 0 | 0, $742_1 | 0, i64toi32_i32$4 | 0, $746_1 | 0, i64toi32_i32$1 | 0, $748_1 | 0, i64toi32_i32$5 | 0, $752_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$3;
          $20$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7_1 + 740 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$5;
          $19$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$62
          }
          break label$62;
         };
         $893($7_1 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$3 = $20$hi;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$3 = HEAP32[($7_1 + 720 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 724 | 0) >> 2] | 0;
         $771_1 = i64toi32_i32$3;
         $771$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7_1 + 720 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $775_1 = i64toi32_i32$5;
         $775$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$1 = $771$hi;
         i64toi32_i32$4 = $775$hi;
         $899($7_1 + 704 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $771_1 | 0, i64toi32_i32$1 | 0, $775_1 | 0, i64toi32_i32$4 | 0);
         i64toi32_i32$5 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$4;
         $20$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7_1;
         i64toi32_i32$1 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
         $21_1 = i64toi32_i32$1;
         $21$hi = i64toi32_i32$4;
         $14_1 = $16_1 + 113 | 0;
         $1_1 = $14_1 - $4_1 | 0;
         $15_1 = ($1_1 | 0) < ($3_1 | 0);
         $11_1 = $15_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if (($11_1 | 0) <= (112 | 0)) {
          break label$57
         }
         i64toi32_i32$4 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $24_1 = 0;
         $24$hi = i64toi32_i32$4;
         break label$54;
        }
        $16_1 = $15_1 + $16_1 | 0;
        $11_1 = $2_1;
        if (($13_1 | 0) == ($2_1 | 0)) {
         continue label$58
        }
        break label$58;
       };
       $12_1 = 1e9 >>> $15_1 | 0;
       $17_1 = (-1 << $15_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $11_1 = $13_1;
       label$64 : while (1) {
        $14_1 = ($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0;
        $817_1 = $14_1;
        $14_1 = HEAP32[$14_1 >> 2] | 0;
        $1_1 = ($14_1 >>> $15_1 | 0) + $1_1 | 0;
        HEAP32[$817_1 >> 2] = $1_1;
        $1_1 = ($13_1 | 0) == ($11_1 | 0) & !$1_1 | 0;
        $11_1 = $1_1 ? ($11_1 + 1 | 0) & 2047 | 0 : $11_1;
        $8_1 = $1_1 ? $8_1 + -9 | 0 : $8_1;
        $1_1 = Math_imul($14_1 & $17_1 | 0, $12_1);
        $13_1 = ($13_1 + 1 | 0) & 2047 | 0;
        if (($13_1 | 0) != ($2_1 | 0)) {
         continue label$64
        }
        break label$64;
       };
       if (!$1_1) {
        continue label$56
       }
       label$65 : {
        if (($6_1 | 0) == ($11_1 | 0)) {
         break label$65
        }
        HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
        $2_1 = $6_1;
        continue label$55;
       }
       HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] | 0 | 1 | 0;
       $11_1 = $6_1;
       continue label$56;
      }
      break label$56;
     };
     break label$55;
    };
    $906($7_1 + 656 | 0 | 0, +(+$949(+(1.0), 225 - $11_1 | 0 | 0)));
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
    $879_1 = i64toi32_i32$4;
    $879$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 656 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $883_1 = i64toi32_i32$1;
    $883$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$4 = $879$hi;
    i64toi32_i32$1 = $883$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    $855($7_1 + 688 | 0 | 0, $879_1 | 0, i64toi32_i32$4 | 0, $883_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 696 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 700 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$3;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 692 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$5;
    $23$hi = i64toi32_i32$3;
    $906($7_1 + 640 | 0 | 0, +(+$949(+(1.0), 113 - $11_1 | 0 | 0)));
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 640 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 644 | 0) >> 2] | 0;
    $900_1 = i64toi32_i32$3;
    $900$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 640 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $904_1 = i64toi32_i32$5;
    $904$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = $900$hi;
    i64toi32_i32$4 = $904$hi;
    $946($7_1 + 672 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $900_1 | 0, i64toi32_i32$1 | 0, $904_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 684 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $22$hi;
    $907($7_1 + 624 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$5 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $24$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 628 | 0) >> 2] | 0;
    $920_1 = i64toi32_i32$3;
    $920$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $924_1 = i64toi32_i32$5;
    $924$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $24$hi;
    i64toi32_i32$1 = $920$hi;
    i64toi32_i32$4 = $924$hi;
    $896($7_1 + 608 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $24_1 | 0, i64toi32_i32$5 | 0, $920_1 | 0, i64toi32_i32$1 | 0, $924_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
   }
   label$66 : {
    $8_1 = ($13_1 + 4 | 0) & 2047 | 0;
    if (($8_1 | 0) == ($2_1 | 0)) {
     break label$66
    }
    label$67 : {
     label$68 : {
      $8_1 = HEAP32[(($7_1 + 784 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if ($8_1 >>> 0 > 499999999 >>> 0) {
       break label$68
      }
      label$69 : {
       if ($8_1) {
        break label$69
       }
       if ((($13_1 + 5 | 0) & 2047 | 0 | 0) == ($2_1 | 0)) {
        break label$67
       }
      }
      $906($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
      $961_1 = i64toi32_i32$4;
      $961$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 496 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $965_1 = i64toi32_i32$1;
      $965$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $961$hi;
      i64toi32_i32$3 = $965$hi;
      $896($7_1 + 480 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $961_1 | 0, i64toi32_i32$5 | 0, $965_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 484 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$67;
     }
     label$70 : {
      if (($8_1 | 0) == (5e8 | 0)) {
       break label$70
      }
      $906($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$3 = HEAP32[($7_1 + 592 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 596 | 0) >> 2] | 0;
      $984 = i64toi32_i32$3;
      $984$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7_1 + 592 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $988 = i64toi32_i32$5;
      $988$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$1 = $984$hi;
      i64toi32_i32$4 = $988$hi;
      $896($7_1 + 576 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $984 | 0, i64toi32_i32$1 | 0, $988 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$5 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$4;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$4;
      break label$67;
     }
     $25_1 = +($5_1 | 0);
     label$71 : {
      if ((($13_1 + 5 | 0) & 2047 | 0 | 0) != ($2_1 | 0)) {
       break label$71
      }
      $906($7_1 + 528 | 0 | 0, +($25_1 * .5));
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
      $1011 = i64toi32_i32$4;
      $1011$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 528 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1015 = i64toi32_i32$1;
      $1015$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $1011$hi;
      i64toi32_i32$3 = $1015$hi;
      $896($7_1 + 512 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $1011 | 0, i64toi32_i32$5 | 0, $1015 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 516 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$67;
     }
     $906($7_1 + 560 | 0 | 0, +($25_1 * .75));
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = HEAP32[($7_1 + 560 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 564 | 0) >> 2] | 0;
     $1031 = i64toi32_i32$3;
     $1031$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7_1 + 560 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1035 = i64toi32_i32$5;
     $1035$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $1031$hi;
     i64toi32_i32$4 = $1035$hi;
     $896($7_1 + 544 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $1031 | 0, i64toi32_i32$1 | 0, $1035 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
    }
    if (($11_1 | 0) > (111 | 0)) {
     break label$66
    }
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $946($7_1 + 464 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 464 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 468 | 0) >> 2] | 0;
    $1049 = i64toi32_i32$3;
    $1049$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 472 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 476 | 0) >> 2] | 0;
    $1051 = i64toi32_i32$5;
    $1051$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1049$hi;
    i64toi32_i32$5 = $1051$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 0;
    if ($903($1049 | 0, i64toi32_i32$3 | 0, $1051 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
     break label$66
    }
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $896($7_1 + 448 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1 + 456 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$3;
    $22$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$4 = $22$hi;
   $896($7_1 + 432 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $22_1 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
   $1071 = i64toi32_i32$4;
   $1071$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7_1 + 432 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1075 = i64toi32_i32$1;
   $1075$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$4 = $24$hi;
   i64toi32_i32$4 = $1071$hi;
   i64toi32_i32$1 = $1075$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$3 = $24$hi;
   $907($7_1 + 416 | 0 | 0, $1071 | 0, i64toi32_i32$4 | 0, $1075 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$5 | 0, $24_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$3;
   $20$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 420 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$3;
   label$72 : {
    if (($14_1 & 2147483647 | 0 | 0) <= (-2 - $9_1 | 0 | 0)) {
     break label$72
    }
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    $857($7_1 + 400 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1073610752;
    $899($7_1 + 384 | 0 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $1098 = i64toi32_i32$4;
    $1098$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 408 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
    $1100 = i64toi32_i32$1;
    $1100$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1098$hi;
    i64toi32_i32$1 = $1100$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1081081856;
    $2_1 = $904($1098 | 0, i64toi32_i32$4 | 0, $1100 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1106 = i64toi32_i32$5;
    $1106$hi = i64toi32_i32$3;
    $14_1 = ($2_1 | 0) < (0 | 0);
    i64toi32_i32$0 = $14_1;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$5 = $1106$hi;
    i64toi32_i32$4 = i64toi32_i32$0 ? $20_1 : $1106;
    i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$5;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1113 = i64toi32_i32$1;
    $1113$hi = i64toi32_i32$4;
    i64toi32_i32$5 = $14_1;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $1113$hi;
    i64toi32_i32$3 = i64toi32_i32$5 ? $21_1 : $1113;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
    $21_1 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$0;
    $16_1 = $16_1 + (($2_1 | 0) > (-1 | 0)) | 0;
    label$73 : {
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 0;
     if (($903($19_1 | 0, $19$hi | 0, $22_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0 | 0) != (0 | 0) & ($15_1 & ($14_1 | ($11_1 | 0) != ($1_1 | 0) | 0) | 0) | 0) {
      break label$73
     }
     if (($16_1 + 110 | 0 | 0) <= ($10_1 | 0)) {
      break label$72
     }
    }
    HEAP32[($744() | 0) >> 2] = 68;
   }
   i64toi32_i32$4 = $21$hi;
   i64toi32_i32$4 = $20$hi;
   i64toi32_i32$4 = $21$hi;
   i64toi32_i32$5 = $20$hi;
   $856($7_1 + 368 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0);
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 376 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[($7_1 + 380 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$4;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$4;
   $20$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $20_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $861($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $85$hi = 0, $87_1 = 0, $87$hi = 0, $136$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $2_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $2_1 = $854($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    switch ($2_1 + -43 | 0 | 0) {
    default:
     $3_1 = $2_1 + -48 | 0;
     $4_1 = 0;
     break label$3;
    case 0:
    case 2:
     break label$4;
    };
   }
   label$6 : {
    label$7 : {
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if ($3_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
     $5_1 = HEAPU8[$3_1 >> 0] | 0;
     break label$6;
    }
    $5_1 = $854($0_1 | 0) | 0;
   }
   $4_1 = ($2_1 | 0) == (45 | 0);
   $3_1 = $5_1 + -48 | 0;
   label$8 : {
    if (!$1_1) {
     break label$8
    }
    if ($3_1 >>> 0 < 10 >>> 0) {
     break label$8
    }
    if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   $2_1 = $5_1;
  }
  label$9 : {
   label$10 : {
    if ($3_1 >>> 0 >= 10 >>> 0) {
     break label$10
    }
    $3_1 = 0;
    label$11 : while (1) {
     $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
     label$12 : {
      label$13 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$12;
      }
      $2_1 = $854($0_1 | 0) | 0;
     }
     $3_1 = $3_1 + -48 | 0;
     label$14 : {
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$14
      }
      if (($3_1 | 0) < (214748364 | 0)) {
       continue label$11
      }
     }
     break label$11;
    };
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    label$15 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$0 = 0;
      $85$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $87_1 = i64toi32_i32$1;
      $87$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $85$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $87$hi;
      i64toi32_i32$3 = $87_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$17;
       }
       $2_1 = $854($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $5_1 = $2_1 + -48 | 0;
      if ($5_1 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$21;
       }
       $2_1 = $854($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$23
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $136$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    break label$9;
   }
   i64toi32_i32$5 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $862($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $36_1 = 0, $36$hi = 0, $42_1 = 0, $42$hi = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $952($4_1 + 16 | 0 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4_1 + 92 | 0) >> 2] = -1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  i64toi32_i32$0 = 0;
  $853($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $858($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $32_1 = $2_1;
   $33_1 = $1_1;
   $34_1 = $1_1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[($4_1 + 136 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 140 | 0) >> 2] | 0;
   $36_1 = i64toi32_i32$0;
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$0 = (HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $42_1 = i64toi32_i32$0;
   $42$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $36$hi;
   i64toi32_i32$2 = $36_1;
   i64toi32_i32$0 = $42$hi;
   i64toi32_i32$3 = $42_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   HEAP32[$32_1 >> 2] = !(i64toi32_i32$4 | i64toi32_i32$5 | 0) ? $33_1 : $34_1 + i64toi32_i32$4 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $863($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $862($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = +$898($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $2_1 + 16 | 0;
  return +$3_1;
 }
 
 function $864($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($961($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $865($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $864($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $866($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  i64toi32_i32$1 = $2_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $3_1 = HEAPU8[$1_1 >> 0] | 0;
   if ($3_1) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   $4_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
   if ($4_1) {
    break label$2
   }
   $4_1 = $0_1;
   label$3 : while (1) {
    $1_1 = $4_1;
    $4_1 = $1_1 + 1 | 0;
    if ((HEAPU8[$1_1 >> 0] | 0 | 0) == ($3_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
   return $1_1 - $0_1 | 0 | 0;
  }
  $5_1 = $2_1 + (($3_1 >>> 3 | 0) & 28 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | (1 << ($3_1 & 31 | 0) | 0) | 0;
  label$4 : while (1) {
   $3_1 = $4_1 & 31 | 0;
   $5_1 = $4_1 >>> 3 | 0;
   $4_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
   $5_1 = $2_1 + ($5_1 & 28 | 0) | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | (1 << $3_1 | 0) | 0;
   $1_1 = $1_1 + 1 | 0;
   if ($4_1) {
    continue label$4
   }
   break label$4;
  };
  $3_1 = $0_1;
  label$5 : {
   $4_1 = HEAPU8[$3_1 >> 0] | 0;
   if (!$4_1) {
    break label$5
   }
   $1_1 = $0_1;
   label$6 : while (1) {
    label$7 : {
     if (((HEAP32[($2_1 + (($4_1 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> ($4_1 & 31 | 0) | 0) & 1 | 0) {
      break label$7
     }
     $3_1 = $1_1;
     break label$5;
    }
    $4_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = $1_1 + 1 | 0;
    $1_1 = $3_1;
    if ($4_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $3_1 - $0_1 | 0 | 0;
 }
 
 function $867($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP8[$1_1 >> 0] | 0;
   if ($2_1) {
    break label$1
   }
   return $0_1 | 0;
  }
  $3_1 = 0;
  label$2 : {
   $0_1 = $865($0_1 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break label$2
   }
   label$3 : {
    if (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) {
     break label$3
    }
    return $0_1 | 0;
   }
   if (!(HEAPU8[($0_1 + 1 | 0) >> 0] | 0)) {
    break label$2
   }
   label$4 : {
    if (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) {
     break label$4
    }
    return $868($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0_1 + 2 | 0) >> 0] | 0)) {
    break label$2
   }
   label$5 : {
    if (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) {
     break label$5
    }
    return $869($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0_1 + 3 | 0) >> 0] | 0)) {
    break label$2
   }
   label$6 : {
    if (HEAPU8[($1_1 + 4 | 0) >> 0] | 0) {
     break label$6
    }
    return $870($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   $3_1 = $871($0_1 | 0, $1_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $868($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
  $3_1 = !$2_1;
  label$1 : {
   $4_1 = (HEAPU8[$0_1 >> 0] | 0) << 8 | 0 | $2_1 | 0;
   $5_1 = (HEAPU8[$1_1 >> 0] | 0) << 8 | 0 | (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) | 0;
   if (($4_1 | 0) == ($5_1 | 0)) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $2_1 = $0_1 + 1 | 0;
   label$2 : while (1) {
    $0_1 = $2_1;
    $1_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    $3_1 = !$1_1;
    $4_1 = ($4_1 << 8 | 0) & 65280 | 0 | $1_1 | 0;
    if (($4_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    $2_1 = $0_1 + 1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return ($3_1 ? 0 : $0_1) | 0;
 }
 
 function $869($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $2_1 = $0_1 + 2 | 0;
  $3_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
  $4_1 = !$3_1;
  label$1 : {
   label$2 : {
    $5_1 = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0_1 >> 0] | 0) << 24 | 0) | 0 | ($3_1 << 8 | 0) | 0;
    $6_1 = (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$1_1 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 8 | 0) | 0;
    if (($5_1 | 0) == ($6_1 | 0)) {
     break label$2
    }
    if (!$3_1) {
     break label$2
    }
    label$3 : while (1) {
     $1_1 = $2_1 + 1 | 0;
     $0_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
     $4_1 = !$0_1;
     $5_1 = ($5_1 | $0_1 | 0) << 8 | 0;
     if (($5_1 | 0) == ($6_1 | 0)) {
      break label$1
     }
     $2_1 = $1_1;
     if ($0_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $1_1 = $2_1;
  }
  return ($4_1 ? 0 : $1_1 + -2 | 0) | 0;
 }
 
 function $870($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0;
  $2_1 = $0_1 + 3 | 0;
  $3_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
  $4_1 = !$3_1;
  label$1 : {
   label$2 : {
    $5_1 = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0_1 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0) << 8 | 0) | 0 | $3_1 | 0;
    $6_1 = $1_1;
    $0_1 = HEAPU8[$6_1 >> 0] | 0 | ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $1_1 = $0_1 << 24 | 0 | (($0_1 << 8 | 0) & 16711680 | 0) | 0 | (($0_1 >>> 8 | 0) & 65280 | 0 | ($0_1 >>> 24 | 0) | 0) | 0;
    if (($5_1 | 0) == ($1_1 | 0)) {
     break label$2
    }
    if (!$3_1) {
     break label$2
    }
    label$3 : while (1) {
     $3_1 = $2_1 + 1 | 0;
     $0_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
     $4_1 = !$0_1;
     $5_1 = $5_1 << 8 | 0 | $0_1 | 0;
     if (($5_1 | 0) == ($1_1 | 0)) {
      break label$1
     }
     $2_1 = $3_1;
     if ($0_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $3_1 = $2_1;
  }
  return ($4_1 ? 0 : $3_1 + -3 | 0) | 0;
 }
 
 function $871($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0, $7_1 = 0, $2_1 = 0, $11_1 = 0, $5_1 = 0, $9_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $10_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0;
  $2_1 = global$0 - 1056 | 0;
  global$0 = $2_1;
  i64toi32_i32$1 = $2_1 + 1048 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 1040 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 1032 | 0) >> 2] = 0;
  HEAP32[($2_1 + 1036 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 1024 | 0) >> 2] = 0;
  HEAP32[($2_1 + 1028 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $4_1 = HEAPU8[$1_1 >> 0] | 0;
        if ($4_1) {
         break label$6
        }
        $5_1 = -1;
        $6_1 = 1;
        break label$5;
       }
       label$7 : while (1) {
        if (!(HEAPU8[($0_1 + $3_1 | 0) >> 0] | 0)) {
         break label$2
        }
        $4_1 = $4_1 & 255 | 0;
        $3_1 = $3_1 + 1 | 0;
        HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] = $3_1;
        $6_1 = ($2_1 + 1024 | 0) + (($4_1 >>> 3 | 0) & 28 | 0) | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] | 0 | (1 << ($4_1 & 31 | 0) | 0) | 0;
        $4_1 = HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0;
        if ($4_1) {
         continue label$7
        }
        break label$7;
       };
       $6_1 = 1;
       $5_1 = -1;
       if ($3_1 >>> 0 > 1 >>> 0) {
        break label$4
       }
      }
      $7_1 = -1;
      $8_1 = 1;
      break label$3;
     }
     $8_1 = 0;
     $9_1 = 1;
     $4_1 = 1;
     label$8 : while (1) {
      label$9 : {
       label$10 : {
        $7_1 = HEAPU8[($1_1 + ($4_1 + $5_1 | 0) | 0) >> 0] | 0;
        $10_1 = HEAPU8[($1_1 + $6_1 | 0) >> 0] | 0;
        if (($7_1 | 0) != ($10_1 | 0)) {
         break label$10
        }
        label$11 : {
         if (($4_1 | 0) != ($9_1 | 0)) {
          break label$11
         }
         $8_1 = $9_1 + $8_1 | 0;
         $4_1 = 1;
         break label$9;
        }
        $4_1 = $4_1 + 1 | 0;
        break label$9;
       }
       label$12 : {
        if ($7_1 >>> 0 <= $10_1 >>> 0) {
         break label$12
        }
        $9_1 = $6_1 - $5_1 | 0;
        $4_1 = 1;
        $8_1 = $6_1;
        break label$9;
       }
       $4_1 = 1;
       $5_1 = $8_1;
       $8_1 = $8_1 + 1 | 0;
       $9_1 = 1;
      }
      $6_1 = $4_1 + $8_1 | 0;
      if ($6_1 >>> 0 < $3_1 >>> 0) {
       continue label$8
      }
      break label$8;
     };
     $8_1 = 1;
     $7_1 = -1;
     label$13 : {
      if ($3_1 >>> 0 > 1 >>> 0) {
       break label$13
      }
      $6_1 = $9_1;
      break label$3;
     }
     $6_1 = 0;
     $11_1 = 1;
     $4_1 = 1;
     label$14 : while (1) {
      label$15 : {
       label$16 : {
        $10_1 = HEAPU8[($1_1 + ($4_1 + $7_1 | 0) | 0) >> 0] | 0;
        $12_1 = HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0;
        if (($10_1 | 0) != ($12_1 | 0)) {
         break label$16
        }
        label$17 : {
         if (($4_1 | 0) != ($11_1 | 0)) {
          break label$17
         }
         $6_1 = $11_1 + $6_1 | 0;
         $4_1 = 1;
         break label$15;
        }
        $4_1 = $4_1 + 1 | 0;
        break label$15;
       }
       label$18 : {
        if ($10_1 >>> 0 >= $12_1 >>> 0) {
         break label$18
        }
        $11_1 = $8_1 - $7_1 | 0;
        $4_1 = 1;
        $6_1 = $8_1;
        break label$15;
       }
       $4_1 = 1;
       $7_1 = $6_1;
       $6_1 = $6_1 + 1 | 0;
       $11_1 = 1;
      }
      $8_1 = $4_1 + $6_1 | 0;
      if ($8_1 >>> 0 < $3_1 >>> 0) {
       continue label$14
      }
      break label$14;
     };
     $6_1 = $9_1;
     $8_1 = $11_1;
    }
    label$19 : {
     label$20 : {
      $4_1 = ($7_1 + 1 | 0) >>> 0 > ($5_1 + 1 | 0) >>> 0;
      $11_1 = $4_1 ? $8_1 : $6_1;
      $13_1 = $4_1 ? $7_1 : $5_1;
      $9_1 = $13_1 + 1 | 0;
      if (!($874($1_1 | 0, $1_1 + $11_1 | 0 | 0, $9_1 | 0) | 0)) {
       break label$20
      }
      $4_1 = $3_1 + ($13_1 ^ -1 | 0) | 0;
      $11_1 = ($13_1 >>> 0 > $4_1 >>> 0 ? $13_1 : $4_1) + 1 | 0;
      $14_1 = $3_1 - $11_1 | 0;
      $15_1 = 0;
      break label$19;
     }
     $14_1 = $3_1 - $11_1 | 0;
     $15_1 = $14_1;
    }
    $10_1 = $3_1 + -1 | 0;
    $12_1 = $3_1 | 63 | 0;
    $7_1 = 0;
    $6_1 = $0_1;
    label$21 : while (1) {
     label$22 : {
      if (($0_1 - $6_1 | 0) >>> 0 >= $3_1 >>> 0) {
       break label$22
      }
      label$23 : {
       $4_1 = $879($0_1 | 0, 0 | 0, $12_1 | 0) | 0;
       if (!$4_1) {
        break label$23
       }
       $0_1 = $4_1;
       if (($4_1 - $6_1 | 0) >>> 0 < $3_1 >>> 0) {
        break label$2
       }
       break label$22;
      }
      $0_1 = $0_1 + $12_1 | 0;
     }
     label$24 : {
      label$25 : {
       label$26 : {
        $4_1 = HEAPU8[($6_1 + $10_1 | 0) >> 0] | 0;
        if (((HEAP32[(($2_1 + 1024 | 0) + (($4_1 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> ($4_1 & 31 | 0) | 0) & 1 | 0) {
         break label$26
        }
        $4_1 = $3_1;
        break label$25;
       }
       label$27 : {
        $4_1 = $3_1 - (HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0) | 0;
        if (!$4_1) {
         break label$27
        }
        $4_1 = $15_1 ? ($7_1 ? ($4_1 >>> 0 < $11_1 >>> 0 ? $14_1 : $4_1) : $4_1) : $4_1;
        break label$25;
       }
       $4_1 = $9_1;
       label$28 : {
        label$29 : {
         $8_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $4_1 : $7_1;
         $5_1 = HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0;
         if (!$5_1) {
          break label$29
         }
         label$30 : while (1) {
          if (($5_1 & 255 | 0 | 0) != (HEAPU8[($6_1 + $8_1 | 0) >> 0] | 0 | 0)) {
           break label$28
          }
          $8_1 = $8_1 + 1 | 0;
          $5_1 = HEAPU8[($1_1 + $8_1 | 0) >> 0] | 0;
          if ($5_1) {
           continue label$30
          }
          break label$30;
         };
         $4_1 = $9_1;
        }
        label$31 : while (1) {
         if ($4_1 >>> 0 <= $7_1 >>> 0) {
          break label$1
         }
         $4_1 = $4_1 + -1 | 0;
         if ((HEAPU8[($1_1 + $4_1 | 0) >> 0] | 0 | 0) == (HEAPU8[($6_1 + $4_1 | 0) >> 0] | 0 | 0)) {
          continue label$31
         }
         break label$31;
        };
        $4_1 = $11_1;
        $7_1 = $15_1;
        break label$24;
       }
       $4_1 = $8_1 - $13_1 | 0;
      }
      $7_1 = 0;
     }
     $6_1 = $6_1 + $4_1 | 0;
     continue label$21;
    };
   }
   $6_1 = 0;
  }
  global$0 = $2_1 + 1056 | 0;
  return $6_1 | 0;
 }
 
 function $872($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (!$3_1) {
      break label$3
     }
     if (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) {
      break label$2
     }
    }
    $4_1 = $864($0_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $952($2_1 | 0, 0 | 0, 32 | 0) | 0;
   label$4 : {
    $3_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$3_1) {
     break label$4
    }
    label$5 : while (1) {
     $4_1 = $2_1 + (($3_1 >>> 3 | 0) & 28 | 0) | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | (1 << ($3_1 & 31 | 0) | 0) | 0;
     $3_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
     $1_1 = $1_1 + 1 | 0;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $4_1 = $0_1;
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   $1_1 = $0_1;
   label$6 : while (1) {
    label$7 : {
     if (!(((HEAP32[($2_1 + (($3_1 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> ($3_1 & 31 | 0) | 0) & 1 | 0)) {
      break label$7
     }
     $4_1 = $1_1;
     break label$1;
    }
    $3_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $4_1 = $1_1 + 1 | 0;
    $1_1 = $4_1;
    if ($3_1) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $2_1 + 32 | 0;
  return $4_1 - $0_1 | 0 | 0;
 }
 
 function $873($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $0_1 + ($872($0_1 | 0, $1_1 | 0) | 0) | 0;
  return (HEAPU8[$0_1 >> 0] | 0 ? $0_1 : 0) | 0;
 }
 
 function $874($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = HEAPU8[$0_1 >> 0] | 0;
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($4_1 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $3_1 = $4_1 - $5_1 | 0;
  }
  return $3_1 | 0;
 }
 
 function $875($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  $3_1 = 0;
  label$2 : {
   $4_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$4_1) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($4_1 & 255 | 0 | 0) != ($5_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$3
     }
     if (!$5_1) {
      break label$3
     }
     $1_1 = $1_1 + 1 | 0;
     $4_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($4_1) {
      continue label$4
     }
     break label$2;
    };
   }
   $3_1 = $4_1;
  }
  return ($3_1 & 255 | 0) - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $876($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $877($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$2
    }
    label$3 : {
     if (!($1_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      HEAP8[$0_1 >> 0] = $2_1;
      if (!$2_1) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      if ($1_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if ((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
     break label$2
    }
    label$5 : while (1) {
     HEAP32[$0_1 >> 2] = $2_1;
     $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $0_1 = $0_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     if (!((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $2_1 = HEAPU8[$1_1 >> 0] | 0;
   HEAP8[$0_1 >> 0] = $2_1;
   if (!$2_1) {
    break label$1
   }
   label$6 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $0_1 | 0;
 }
 
 function $878($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $877($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $879($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $0_1 = $0_1 + 1 | 0;
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      if (!$2_1) {
       break label$3
      }
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2_1 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0_1 = $0_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $880($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $881($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $881($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($882() | 0) + 176 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($744() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($744() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $882() {
  return $745() | 0 | 0;
 }
 
 function $883($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($1_1 & 4194368 | 0) {
     break label$2
    }
    $2_1 = 0;
    break label$1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   $2_1 = HEAP32[$2_1 >> 2] | 0;
  }
  HEAP32[$3_1 >> 2] = $2_1;
  $1_1 = $789(fimport$32($0_1 | 0, $1_1 | 32768 | 0 | 0, $3_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $884() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  label$1 : {
   if (fimport$40($0_1 + 12 | 0 | 0, $0_1 + 8 | 0 | 0) | 0) {
    break label$1
   }
   $1_1 = $939(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 23336 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1_1 = $939(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     if (!$1_1) {
      break label$3
     }
     $2_1 = HEAP32[(0 + 23336 | 0) >> 2] | 0;
     if ($2_1) {
      break label$2
     }
    }
    HEAP32[(0 + 23336 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($2_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
   if (!(fimport$41(HEAP32[(0 + 23336 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
    break label$1
   }
   HEAP32[(0 + 23336 | 0) >> 2] = 0;
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $885($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $1_1 = 0;
  $2_1 = $961($0_1 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 23336 | 0) >> 2] | 0)) {
    break label$1
   }
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$1
   }
   if ($865($0_1 | 0, 61 | 0) | 0) {
    break label$1
   }
   $1_1 = 0;
   $3_1 = HEAP32[(HEAP32[(0 + 23336 | 0) >> 2] | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = $875($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
     $3_1 = HEAP32[(0 + 23336 | 0) >> 2] | 0;
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $4_1 = (HEAP32[($3_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) + $2_1 | 0;
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (61 | 0)) {
       break label$2
      }
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAP32[($3_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
     if ($3_1) {
      continue label$3
     }
     break label$3;
    };
    return 0 | 0;
   }
   $1_1 = $4_1 + 1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $886() {
  return 23340 | 0;
 }
 
 function $887() {
  return 23348 | 0;
 }
 
 function $888() {
  return 23352 | 0;
 }
 
 function $889($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $890($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $891($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($744() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $892($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $42$hi = 0, $48_1 = 0, $49_1 = 0, $49$hi = 0, $53$hi = 0, $54_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$5 = 0;
   $900($2_1 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38_1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49_1 = $5_1;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3_1 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49_1;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $893($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 + $3_1 | 0) ^ $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $900($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $894($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $46_1;
  $4$hi = i64toi32_i32$2;
  $16_1 = $4_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $48_1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3_1 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $895($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $15$hi = 0, $13$hi = 0, $15_1 = 0, $16$hi = 0, $13_1 = 0, i64toi32_i32$6 = 0, $5_1 = 0, $18$hi = 0, $19$hi = 0, $17$hi = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, $11$hi = 0, $17_1 = 0, $12$hi = 0, $20$hi = 0, $11_1 = 0, $12_1 = 0, $20_1 = 0, $10$hi = 0, $10_1 = 0, $8_1 = 0, $6_1 = 0, $14_1 = 0, $14$hi = 0, $7_1 = 0, $21$hi = 0, $9_1 = 0, $470_1 = 0, $471_1 = 0, $475_1 = 0, $476_1 = 0, $478_1 = 0, $479_1 = 0, $480_1 = 0, $481_1 = 0, $482_1 = 0, $484_1 = 0, $485_1 = 0, $486_1 = 0, $488_1 = 0, $489_1 = 0, $490_1 = 0, $491_1 = 0, $494_1 = 0, $495_1 = 0, $496_1 = 0, $497_1 = 0, $498_1 = 0, $499_1 = 0, $501_1 = 0, $502_1 = 0, $503_1 = 0, $504_1 = 0, $505_1 = 0, $507_1 = 0, $508_1 = 0, $512_1 = 0, $513_1 = 0, $514_1 = 0, $515_1 = 0, $516_1 = 0, $518_1 = 0, $521_1 = 0, $522_1 = 0, $523_1 = 0, $524_1 = 0, $525_1 = 0, $526_1 = 0, $527_1 = 0, $528_1 = 0, $530_1 = 0, $21_1 = 0, $531_1 = 0, $532_1 = 0, $533_1 = 0, $537_1 = 0, $538_1 = 0, $539_1 = 0, $540_1 = 0, $542_1 = 0, $543_1 = 0, $544_1 = 0, $546_1 = 0, $547_1 = 0, $548_1 = 0, $549_1 = 0, $550_1 = 0, $552_1 = 0, $555_1 = 0, $556_1 = 0, $557_1 = 0, $558_1 = 0, $559_1 = 0, $560_1 = 0, $562_1 = 0, $563_1 = 0, $564_1 = 0, $565_1 = 0, $567_1 = 0, $568_1 = 0, $569_1 = 0, $570_1 = 0, $572_1 = 0, $573_1 = 0, $575_1 = 0, $576_1 = 0, $48_1 = 0, $52_1 = 0, $59_1 = 0, $63_1 = 0, $72_1 = 0, $72$hi = 0, $77_1 = 0, $77$hi = 0, $85_1 = 0, $85$hi = 0, $101_1 = 0, $102_1 = 0, $102$hi = 0, $103_1 = 0, $103$hi = 0, $110$hi = 0, $113$hi = 0, $128_1 = 0, $129_1 = 0, $129$hi = 0, $130_1 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $155_1 = 0, $157_1 = 0, $157$hi = 0, $161$hi = 0, $172_1 = 0, $172$hi = 0, $173$hi = 0, $176_1 = 0, $179_1 = 0, $179$hi = 0, $184$hi = 0, $194_1 = 0, $194$hi = 0, $195$hi = 0, $197_1 = 0, $200_1 = 0, $200$hi = 0, $205$hi = 0, $215_1 = 0, $215$hi = 0, $216$hi = 0, $218_1 = 0, $221_1 = 0, $221$hi = 0, $226$hi = 0, $236_1 = 0, $236$hi = 0, $237$hi = 0, $239_1 = 0, $242_1 = 0, $242$hi = 0, $247$hi = 0, $256_1 = 0, $256$hi = 0, $257$hi = 0, $265_1 = 0, $265$hi = 0, $269$hi = 0, $274_1 = 0, $274$hi = 0, $279_1 = 0, $279$hi = 0, $286_1 = 0, $286$hi = 0, $289_1 = 0, $289$hi = 0, $292_1 = 0, $294$hi = 0, $295_1 = 0, $295$hi = 0, $298_1 = 0, $298$hi = 0, $299_1 = 0, $299$hi = 0, $305_1 = 0, $305$hi = 0, $309_1 = 0, $310$hi = 0, $311_1 = 0, $311$hi = 0, $312_1 = 0, $312$hi = 0, $313_1 = 0, $313$hi = 0, $319_1 = 0, $319$hi = 0, $320_1 = 0, $320$hi = 0, $325_1 = 0, $325$hi = 0, $332_1 = 0, $332$hi = 0, $333$hi = 0, $335_1 = 0, $336_1 = 0, $336$hi = 0, $338_1 = 0, $338$hi = 0, $341_1 = 0, $343$hi = 0, $344_1 = 0, $344$hi = 0, $347_1 = 0, $347$hi = 0, $348$hi = 0, $349$hi = 0, $353_1 = 0, $354$hi = 0, $355$hi = 0, $357_1 = 0, $358$hi = 0, $359$hi = 0, $366_1 = 0, $366$hi = 0, $370_1 = 0, $370$hi = 0, $371_1 = 0, $371$hi = 0, $375_1 = 0, $375$hi = 0, $378$hi = 0, $383_1 = 0, $383$hi = 0, $385_1 = 0, $385$hi = 0, $388_1 = 0, $390$hi = 0, $391_1 = 0, $391$hi = 0, $394_1 = 0, $394$hi = 0, $395$hi = 0, $396_1 = 0, $396$hi = 0, $397_1 = 0, $397$hi = 0, $410_1 = 0, $410$hi = 0, $417_1 = 0, $417$hi = 0, $418$hi = 0, $420_1 = 0, $421_1 = 0, $421$hi = 0, $423_1 = 0, $423$hi = 0, $426_1 = 0, $428$hi = 0, $429_1 = 0, $429$hi = 0, $432_1 = 0, $432$hi = 0, $433$hi = 0, $434$hi = 0, $438_1 = 0, $439$hi = 0, $440_1 = 0, $440$hi = 0, $445_1 = 0, $446$hi = 0, $451_1 = 0, $451$hi = 0, $453_1 = 0, $453$hi = 0, $455$hi = 0, $460_1 = 0, $460$hi = 0, $464_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $472_1 = 0, $473_1 = 0, $473$hi = 0, $474_1 = 0, $474$hi = 0, $477_1 = 0, $477$hi = 0, $483_1 = 0, $483$hi = 0, $487_1 = 0, $488$hi = 0, $489$hi = 0, $492_1 = 0, $492$hi = 0, $493_1 = 0, $493$hi = 0, $500_1 = 0, $500$hi = 0, $506_1 = 0, $506$hi = 0, $508$hi = 0, $509_1 = 0, $509$hi = 0, $510_1 = 0, $510$hi = 0, $511_1 = 0, $511$hi = 0, $513$hi = 0, $517_1 = 0, $518$hi = 0, $519_1 = 0, $519$hi = 0, $520_1 = 0, $520$hi = 0, $529_1 = 0, $529$hi = 0, $534_1 = 0, $534$hi = 0, $535_1 = 0, $535$hi = 0, $536_1 = 0, $536$hi = 0, $541_1 = 0, $541$hi = 0, $545_1 = 0, $546$hi = 0, $547$hi = 0, $551_1 = 0, $552$hi = 0, $553_1 = 0, $553$hi = 0, $554_1 = 0, $554$hi = 0, $561_1 = 0, $561$hi = 0, $566_1 = 0, $566$hi = 0, $571_1 = 0, $571$hi = 0, $574_1 = 0, $574$hi = 0, $577_1 = 0, $578$hi = 0, $581_1 = 0, $582$hi = 0, $583$hi = 0, $586_1 = 0, $587$hi = 0, $589$hi = 0, $590_1 = 0, $590$hi = 0, $594_1 = 0, $595$hi = 0, $596_1 = 0, $596$hi = 0, $597_1 = 0, $597$hi = 0, $598_1 = 0, $598$hi = 0, $605_1 = 0, $605$hi = 0, $608_1 = 0, $608$hi = 0, $611_1 = 0, $613$hi = 0, $614_1 = 0, $614$hi = 0, $618_1 = 0, $619_1 = 0, $619$hi = 0, $620_1 = 0, $620$hi = 0, $622$hi = 0, $623$hi = 0, $625_1 = 0, $626$hi = 0, $627$hi = 0, $631_1 = 0, $632$hi = 0, $637$hi = 0, $646_1 = 0, $647$hi = 0, $648_1 = 0, $648$hi = 0, $651_1 = 0, $651$hi = 0, $657_1 = 0, $657$hi = 0, $658_1 = 0, $658$hi = 0, $662_1 = 0, $662$hi = 0, $667_1 = 0, $668$hi = 0, $669_1 = 0, $669$hi = 0, $670_1 = 0, $670$hi = 0, $672$hi = 0, $673_1 = 0, $673$hi = 0, $674_1 = 0, $674$hi = 0, $676$hi = 0, $677_1 = 0, $677$hi = 0, $678$hi = 0, $681_1 = 0, $681$hi = 0, $682$hi = 0, $685_1 = 0, $685$hi = 0, $687_1 = 0, $687$hi = 0, $689$hi = 0, $578_1 = 0, $691_1 = 0, $691$hi = 0, $694_1 = 0, $694$hi = 0, $695_1 = 0, $695$hi = 0, $696$hi = 0, $699_1 = 0, $699$hi = 0, $700_1 = 0, $700$hi = 0, $702_1 = 0, $702$hi = 0, $705_1 = 0, $707$hi = 0, $708_1 = 0, $708$hi = 0, $709$hi = 0, $710$hi = 0, $720_1 = 0, $720$hi = 0, $722_1 = 0, $722$hi = 0, $724$hi = 0, $734_1 = 0, $735$hi = 0, $736_1 = 0, $736$hi = 0, $739_1 = 0, $739$hi = 0, $740_1 = 0, $740$hi = 0, $745_1 = 0, $745$hi = 0, $746_1 = 0, $746$hi = 0, $748$hi = 0, $754_1 = 0, $754$hi = 0, $759_1 = 0, $760$hi = 0, $761_1 = 0, $761$hi = 0, $762_1 = 0, $762$hi = 0, $764$hi = 0, $765_1 = 0, $765$hi = 0, $766_1 = 0, $766$hi = 0, $768$hi = 0, $769_1 = 0, $769$hi = 0, $770_1 = 0, $770$hi = 0, $775_1 = 0, $775$hi = 0, $776$hi = 0, $779_1 = 0, $779$hi = 0, $781_1 = 0, $781$hi = 0, $784_1 = 0, $784$hi = 0, $786$hi = 0, $579_1 = 0, $788_1 = 0, $788$hi = 0, $789$hi = 0, $792_1 = 0, $792$hi = 0, $793_1 = 0, $793$hi = 0, $794_1 = 0, $794$hi = 0, $796_1 = 0, $796$hi = 0, $799_1 = 0, $801$hi = 0, $802_1 = 0, $802$hi = 0, $803$hi = 0, $804$hi = 0, $820_1 = 0, $820$hi = 0, $821_1 = 0, $821$hi = 0, $823$hi = 0, $825_1 = 0, $827_1 = 0, $827$hi = 0, $829$hi = 0, $833_1 = 0, $837_1 = 0, $838$hi = 0, $842_1 = 0, $843$hi = 0, $853$hi = 0, $855_1 = 0, $855$hi = 0, $856_1 = 0, $856$hi = 0, $857_1 = 0, $857$hi = 0, $859$hi = 0, $861_1 = 0, $863_1 = 0, $863$hi = 0, $865$hi = 0, $869_1 = 0, $873_1 = 0, $874$hi = 0, $878_1 = 0, $879$hi = 0, $880$hi = 0, $896_1 = 0;
  $5_1 = global$0 - 192 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $470_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $470_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $470_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 48;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $471_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $471_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $7_1 = $471_1 & 32767 | 0;
      if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
       break label$4
      }
      $8_1 = 0;
      if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
       break label$3
      }
     }
     label$5 : {
      i64toi32_i32$0 = $1$hi;
      $48_1 = !($1_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147483647;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      $52_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $52_1) {
       break label$5
      }
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $12$hi = i64toi32_i32$0;
      break label$2;
     }
     label$6 : {
      i64toi32_i32$0 = $3$hi;
      $59_1 = !($3_1 | i64toi32_i32$0 | 0);
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$2 = 2147483647;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$1 = 0;
      $63_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $59_1 : $63_1) {
       break label$6
      }
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$3 = $4_1;
      i64toi32_i32$0 = 32768;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $12$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $3$hi;
      $1_1 = $3_1;
      $1$hi = i64toi32_i32$0;
      break label$2;
     }
     label$7 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $72_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $72$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$1 = $72$hi;
      i64toi32_i32$2 = $72_1;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
       break label$7
      }
      label$8 : {
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $2$hi;
       i64toi32_i32$2 = $2_1;
       i64toi32_i32$1 = 2147418112;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
       $77$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $77$hi;
       i64toi32_i32$0 = $77_1;
       i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
       if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
        break label$8
       }
       i64toi32_i32$2 = 0;
       $1_1 = 0;
       $1$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 2147450880;
       $12_1 = 0;
       $12$hi = i64toi32_i32$2;
       break label$2;
      }
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $12$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$3;
      break label$2;
     }
     label$9 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $85_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $85$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $85$hi;
      i64toi32_i32$0 = $85_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$9
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$2;
     }
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     label$10 : {
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$10
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$0 = $12_1;
      i64toi32_i32$2 = 2147418112;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $12_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$2;
     }
     $8_1 = 0;
     label$11 : {
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$0 = 65535;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$11
      }
      $101_1 = $5_1 + 176 | 0;
      i64toi32_i32$1 = $1$hi;
      $102_1 = $1_1;
      $102$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      $103_1 = $11_1;
      $103$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$1 = $11$hi;
      $8_1 = !($11_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$0 = i64toi32_i32$4 ? $1_1 : $11_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
      i64toi32_i32$1 = Math_clz32(i64toi32_i32$3);
      i64toi32_i32$4 = 0;
      if ((i64toi32_i32$1 | 0) == (32 | 0)) {
       $475_1 = Math_clz32(i64toi32_i32$0) + 32 | 0
      } else {
       $475_1 = i64toi32_i32$1
      }
      $110$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $113$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $110$hi;
      i64toi32_i32$0 = $475_1;
      i64toi32_i32$3 = $113$hi;
      i64toi32_i32$1 = $8_1 << 6 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $8_1 = i64toi32_i32$2;
      i64toi32_i32$5 = $102$hi;
      i64toi32_i32$0 = $103$hi;
      $900($101_1 | 0, $102_1 | 0, i64toi32_i32$5 | 0, $103_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 + -15 | 0 | 0);
      $8_1 = 16 - i64toi32_i32$2 | 0;
      i64toi32_i32$4 = $5_1 + 184 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$5;
      i64toi32_i32$4 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$5 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     $128_1 = $5_1 + 160 | 0;
     i64toi32_i32$4 = $3$hi;
     $129_1 = $3_1;
     $129$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $10$hi;
     $130_1 = $10_1;
     $130$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $10$hi;
     $9_1 = !($10_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $3_1 : $10_1;
     i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$4 : i64toi32_i32$0;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $476_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $476_1 = i64toi32_i32$4
     }
     $137$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $140$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $137$hi;
     i64toi32_i32$5 = $476_1;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$4 = $9_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $9_1 = i64toi32_i32$0;
     i64toi32_i32$2 = $129$hi;
     i64toi32_i32$5 = $130$hi;
     $900($128_1 | 0, $129_1 | 0, i64toi32_i32$2 | 0, $130_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = (i64toi32_i32$0 + $8_1 | 0) + -16 | 0;
     i64toi32_i32$3 = $5_1 + 168 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$5;
    }
    $155_1 = $5_1 + 144 | 0;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 49;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $478_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $478_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $157_1 = $478_1;
    $157$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$3 = 65536;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $14$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 15;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
     $479_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $479_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    }
    $161$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $157$hi;
    i64toi32_i32$3 = $157_1;
    i64toi32_i32$2 = $161$hi;
    i64toi32_i32$4 = $479_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $2_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 1963258675;
    i64toi32_i32$5 = -102865788;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$4 = 0;
    $894($155_1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($5_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $172_1 = i64toi32_i32$4;
    $172$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $172$hi;
    i64toi32_i32$0 = $172_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    $173$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $173$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = 0;
    $894($5_1 + 128 | 0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $176_1 = $5_1 + 112 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 132 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $480_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $480_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $179_1 = $480_1;
    $179$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $481_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $481_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $184$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $179$hi;
    i64toi32_i32$5 = $179_1;
    i64toi32_i32$2 = $184$hi;
    i64toi32_i32$1 = $481_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = 0;
    $894($176_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $194_1 = i64toi32_i32$1;
    $194$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $194$hi;
    i64toi32_i32$2 = $194_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$2 = 0;
    $894($5_1 + 96 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $197_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 100 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $482_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     $482_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $200_1 = $482_1;
    $200$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $484_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $484_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $205$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $200$hi;
    i64toi32_i32$5 = $200_1;
    i64toi32_i32$0 = $205$hi;
    i64toi32_i32$3 = $484_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    $894($197_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 80 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $215_1 = i64toi32_i32$3;
    $215$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = $215$hi;
    i64toi32_i32$0 = $215_1;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $216$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $216$hi;
    i64toi32_i32$0 = 0;
    $894($5_1 + 64 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $218_1 = $5_1 + 48 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $485_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $485_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
    }
    $221_1 = $485_1;
    $221$hi = i64toi32_i32$0;
    i64toi32_i32$2 = ($5_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $486_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $486_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $226$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $221$hi;
    i64toi32_i32$5 = $221_1;
    i64toi32_i32$2 = $226$hi;
    i64toi32_i32$4 = $486_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = 0;
    $894($218_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$5 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $236_1 = i64toi32_i32$4;
    $236$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $236$hi;
    i64toi32_i32$2 = $236_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $237$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = $237$hi;
    i64toi32_i32$2 = 0;
    $894($5_1 + 32 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    $239_1 = $5_1 + 16 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $488_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $488_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
    }
    $242_1 = $488_1;
    $242$hi = i64toi32_i32$2;
    i64toi32_i32$0 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $489_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $489_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $247$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $242$hi;
    i64toi32_i32$5 = $242_1;
    i64toi32_i32$0 = $247$hi;
    i64toi32_i32$1 = $489_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    $894($239_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $256_1 = i64toi32_i32$1;
    $256$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $256$hi;
    i64toi32_i32$0 = $256_1;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    $257$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = $257$hi;
    i64toi32_i32$0 = 0;
    $894($5_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
    label$12 : {
     label$13 : {
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 63;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $490_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       $490_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
      }
      $265_1 = $490_1;
      $265$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $5_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $491_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $491_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $265$hi;
      i64toi32_i32$5 = $265_1;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$3 = $491_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $13_1 = i64toi32_i32$1;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $4_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$0;
      $274_1 = $4_1;
      $274$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $494_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
       $494_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
      }
      $15_1 = $494_1;
      $15$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $274$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = __wasm_i64_mul($274_1 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$4;
      $16$hi = i64toi32_i32$2;
      $279_1 = i64toi32_i32$4;
      $279$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$0 = $13_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $495_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
       $495_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
      }
      $13_1 = $495_1;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $17_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $17$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $286_1 = i64toi32_i32$2;
      $286$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $279$hi;
      i64toi32_i32$4 = $279_1;
      i64toi32_i32$2 = $286$hi;
      i64toi32_i32$3 = $286_1;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2_1 = i64toi32_i32$5;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$4 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $496_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $496_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
      }
      $289_1 = $496_1;
      $289$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $16_1;
      $292_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = $292_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
       $497_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
       $497_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      }
      $294$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $289$hi;
      i64toi32_i32$1 = $289_1;
      i64toi32_i32$3 = $294$hi;
      i64toi32_i32$0 = $497_1;
      i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
      $295_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $295$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $298_1 = i64toi32_i32$1;
      $298$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $295$hi;
      i64toi32_i32$4 = $295_1;
      i64toi32_i32$1 = $298$hi;
      i64toi32_i32$0 = $298_1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $299_1 = i64toi32_i32$2;
      $299$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $498_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $498_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $15_1 = $498_1;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $4$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $305_1 = i64toi32_i32$3;
      $305$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$3 = $305$hi;
      i64toi32_i32$0 = $305_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$0 = $15_1;
      $309_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $310$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $299$hi;
      i64toi32_i32$0 = $299_1;
      i64toi32_i32$2 = $310$hi;
      i64toi32_i32$5 = $309_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $311_1 = i64toi32_i32$3;
      $311$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      $312_1 = $2_1;
      $312$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      $313_1 = $4_1;
      $313$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$4 = $3_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 17;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $499_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       $499_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      i64toi32_i32$1 = $499_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
      $16_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $313$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($313_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$4;
      $319_1 = i64toi32_i32$1;
      $319$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $13$hi;
      $320_1 = $13_1;
      $320$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 15;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       $501_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
       $501_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      }
      i64toi32_i32$4 = $501_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -32768;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $18_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $320$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = __wasm_i64_mul($320_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $325_1 = i64toi32_i32$4;
      $325$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $319$hi;
      i64toi32_i32$1 = $319_1;
      i64toi32_i32$4 = $325$hi;
      i64toi32_i32$5 = $325_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $15_1 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       $502_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
       $502_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      }
      $19_1 = $502_1;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $332_1 = i64toi32_i32$0;
      $332$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$3 = $19_1;
      i64toi32_i32$0 = $332$hi;
      i64toi32_i32$5 = $332_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $333$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $333$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $335_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $336_1 = $335_1;
      $336$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $503_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $503_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $338_1 = $503_1;
      $338$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$1 = $15_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$3 = $17_1;
      $341_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = $341_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $504_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
       $504_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $343$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $338$hi;
      i64toi32_i32$1 = $338_1;
      i64toi32_i32$3 = $343$hi;
      i64toi32_i32$5 = $504_1;
      i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
      $344_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $344$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$3 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $347_1 = i64toi32_i32$1;
      $347$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $344$hi;
      i64toi32_i32$2 = $344_1;
      i64toi32_i32$1 = $347$hi;
      i64toi32_i32$5 = $347_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $348$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $336$hi;
      i64toi32_i32$3 = $336_1;
      i64toi32_i32$2 = $348$hi;
      i64toi32_i32$5 = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $349$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $312$hi;
      i64toi32_i32$4 = $312_1;
      i64toi32_i32$3 = $349$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $15_1 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$5 = $2_1;
      $353_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $354$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $311$hi;
      i64toi32_i32$5 = $311_1;
      i64toi32_i32$1 = $354$hi;
      i64toi32_i32$4 = $353_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $355$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 0;
      $357_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = 0;
      $358$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $355$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = $358$hi;
      i64toi32_i32$5 = $357_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $359$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$4 = $359$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $16_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      $16$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$0;
      $366_1 = i64toi32_i32$3;
      $366$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$0;
      $370_1 = i64toi32_i32$3;
      $370$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      $371_1 = $4_1;
      $371$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $505_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $505_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $19_1 = $505_1;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $371$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = __wasm_i64_mul($371_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $375_1 = i64toi32_i32$1;
      $375$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $370$hi;
      i64toi32_i32$0 = $370_1;
      i64toi32_i32$1 = $375$hi;
      i64toi32_i32$5 = $375_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $2_1 = i64toi32_i32$4;
      $2$hi = i64toi32_i32$2;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $507_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
       $507_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $378$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $366$hi;
      i64toi32_i32$2 = $366_1;
      i64toi32_i32$3 = $378$hi;
      i64toi32_i32$5 = $507_1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$5 = $17_1;
      i64toi32_i32$0 = 0;
      $383_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      $383$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $508_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $508_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $385_1 = $508_1;
      $385$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $388_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = $388_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       $512_1 = 0;
      } else {
       i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
       $512_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      }
      $390$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $385$hi;
      i64toi32_i32$0 = $385_1;
      i64toi32_i32$2 = $390$hi;
      i64toi32_i32$5 = $512_1;
      i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $391_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $391$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$0 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$2 | 0, $19_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $394_1 = i64toi32_i32$0;
      $394$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $391$hi;
      i64toi32_i32$4 = $391_1;
      i64toi32_i32$0 = $394$hi;
      i64toi32_i32$5 = $394_1;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $395$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $383$hi;
      i64toi32_i32$2 = $383_1;
      i64toi32_i32$4 = $395$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $396_1 = i64toi32_i32$0;
      $396$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      $397_1 = $16_1;
      $397$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
      $2_1 = i64toi32_i32$4;
      $2$hi = i64toi32_i32$0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $513_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
       $513_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
      }
      $15_1 = $513_1;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $17_1 = i64toi32_i32$3;
      $17$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $18_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $18$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $410_1 = i64toi32_i32$0;
      $410$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$1 = $17_1;
      i64toi32_i32$0 = $410$hi;
      i64toi32_i32$5 = $410_1;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $514_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
       $514_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $19_1 = $514_1;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $417_1 = i64toi32_i32$3;
      $417$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$4 = $19_1;
      i64toi32_i32$3 = $417$hi;
      i64toi32_i32$5 = $417_1;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $418$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$2 = $418$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $420_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $421_1 = $420_1;
      $421$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$5 = $2_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 32;
      i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $515_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       $515_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $423_1 = $515_1;
      $423$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$4 = $17_1;
      $426_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$4 = $426_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
       $516_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
       $516_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
      }
      $428$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $423$hi;
      i64toi32_i32$1 = $423_1;
      i64toi32_i32$4 = $428$hi;
      i64toi32_i32$5 = $516_1;
      i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
      $429_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
      $429$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $432_1 = i64toi32_i32$1;
      $432$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $429$hi;
      i64toi32_i32$2 = $429_1;
      i64toi32_i32$1 = $432$hi;
      i64toi32_i32$5 = $432_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $433$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $421$hi;
      i64toi32_i32$4 = $421_1;
      i64toi32_i32$2 = $433$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $434$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $397$hi;
      i64toi32_i32$0 = $397_1;
      i64toi32_i32$4 = $434$hi;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = $16_1;
      $438_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $439$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $396$hi;
      i64toi32_i32$5 = $396_1;
      i64toi32_i32$1 = $439$hi;
      i64toi32_i32$0 = $438_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $440_1 = i64toi32_i32$4;
      $440$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = -1;
      i64toi32_i32$0 = -2;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $17_1 = i64toi32_i32$1;
      $17$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $2$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$0 = $2_1;
      $445_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $446$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $440$hi;
      i64toi32_i32$0 = $440_1;
      i64toi32_i32$4 = $446$hi;
      i64toi32_i32$3 = $445_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      i64toi32_i32$2 = i64toi32_i32$5;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $15_1 = i64toi32_i32$4;
      $15$hi = i64toi32_i32$5;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $2_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $2$hi = i64toi32_i32$2;
      $451_1 = $2_1;
      $451$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$5 = $1_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 62;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $518_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       $518_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $453_1 = $518_1;
      $453$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$2 = $11_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 2;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
       $521_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
       $521_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      }
      $455$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $453$hi;
      i64toi32_i32$1 = $453_1;
      i64toi32_i32$2 = $455$hi;
      i64toi32_i32$3 = $521_1;
      i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $4_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $451$hi;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = __wasm_i64_mul($451_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $16_1 = i64toi32_i32$5;
      $16$hi = i64toi32_i32$1;
      $460_1 = i64toi32_i32$5;
      $460$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$3 = 30;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $522_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $522_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
      }
      i64toi32_i32$1 = $522_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      $13_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $13$hi = i64toi32_i32$2;
      $464_1 = $13_1;
      $464$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $523_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       $523_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
      }
      $15_1 = $523_1;
      $15$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $464$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = __wasm_i64_mul($464_1 | 0, i64toi32_i32$1 | 0, $15_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $468_1 = i64toi32_i32$5;
      $468$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $460$hi;
      i64toi32_i32$2 = $460_1;
      i64toi32_i32$5 = $468$hi;
      i64toi32_i32$3 = $468_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$3 = $16_1;
      $472_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $473_1 = $472_1;
      $473$hi = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$4;
      $474_1 = i64toi32_i32$0;
      $474$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $524_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
       $524_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
      }
      $16_1 = $524_1;
      $16$hi = i64toi32_i32$4;
      $477_1 = $16_1;
      $477$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$1 = $11_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 30;
      i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $525_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       $525_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      i64toi32_i32$4 = $525_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = -262145;
      i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 262144;
      i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
      $11_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $477$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = __wasm_i64_mul($477_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $483_1 = i64toi32_i32$3;
      $483$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $474$hi;
      i64toi32_i32$1 = $474_1;
      i64toi32_i32$3 = $483$hi;
      i64toi32_i32$2 = $483_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $487_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $488$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $473$hi;
      i64toi32_i32$2 = $473_1;
      i64toi32_i32$0 = $488$hi;
      i64toi32_i32$1 = $487_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $489$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $492_1 = i64toi32_i32$2;
      $492$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $489$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$2 = $492$hi;
      i64toi32_i32$1 = $492_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $493_1 = i64toi32_i32$0;
      $493$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$4;
      $20$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $500_1 = i64toi32_i32$4;
      $500$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$5 = $20_1;
      i64toi32_i32$4 = $500$hi;
      i64toi32_i32$1 = $500_1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $18_1 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$1 = $20_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $526_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
       $526_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $506_1 = $526_1;
      $506$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $527_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $527_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      $508$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $506$hi;
      i64toi32_i32$0 = $506_1;
      i64toi32_i32$3 = $508$hi;
      i64toi32_i32$5 = $527_1;
      i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
      $509_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
      $509$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $493$hi;
      i64toi32_i32$1 = $493_1;
      i64toi32_i32$0 = $509$hi;
      i64toi32_i32$5 = $509_1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $510_1 = i64toi32_i32$4;
      $510$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      $511_1 = $19_1;
      $511$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $18_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $528_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $528_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $513$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $511$hi;
      i64toi32_i32$2 = $511_1;
      i64toi32_i32$3 = $513$hi;
      i64toi32_i32$5 = $528_1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $18_1 = i64toi32_i32$0;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $517_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $518$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $510$hi;
      i64toi32_i32$5 = $510_1;
      i64toi32_i32$4 = $518$hi;
      i64toi32_i32$2 = $517_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $519_1 = i64toi32_i32$3;
      $519$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $18$hi;
      $520_1 = $18_1;
      $520$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $20_1 = i64toi32_i32$5;
      $20$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $17$hi;
      i64toi32_i32$1 = $17_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
      $17_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $17$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $529_1 = i64toi32_i32$1;
      $529$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$0 = $20_1;
      i64toi32_i32$1 = $529$hi;
      i64toi32_i32$2 = $529_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $20$hi;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $20$hi;
      i64toi32_i32$2 = $20_1;
      i64toi32_i32$5 = 0;
      $534_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      $534$hi = i64toi32_i32$5;
      i64toi32_i32$5 = i64toi32_i32$3;
      $535_1 = i64toi32_i32$4;
      $535$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $2$hi;
      $536_1 = $2_1;
      $536$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $530_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
       $530_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      i64toi32_i32$5 = $530_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = -4;
      i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
      $20_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $20$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $536$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($536_1 | 0, i64toi32_i32$2 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $541_1 = i64toi32_i32$5;
      $541$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $535$hi;
      i64toi32_i32$3 = $535_1;
      i64toi32_i32$5 = $541$hi;
      i64toi32_i32$0 = $541_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $21_1 = i64toi32_i32$1;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$0 = $19_1;
      $545_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $546$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $534$hi;
      i64toi32_i32$0 = $534_1;
      i64toi32_i32$4 = $546$hi;
      i64toi32_i32$3 = $545_1;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $547$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $520$hi;
      i64toi32_i32$2 = $520_1;
      i64toi32_i32$0 = $547$hi;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = $18$hi;
      i64toi32_i32$3 = $18_1;
      $551_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $552$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $519$hi;
      i64toi32_i32$3 = $519_1;
      i64toi32_i32$5 = $552$hi;
      i64toi32_i32$2 = $551_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $553_1 = i64toi32_i32$0;
      $553$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      $554_1 = $19_1;
      $554$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$3;
      $18$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $561_1 = i64toi32_i32$3;
      $561$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $18$hi;
      i64toi32_i32$1 = $18_1;
      i64toi32_i32$3 = $561$hi;
      i64toi32_i32$2 = $561_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $566_1 = i64toi32_i32$1;
      $566$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$1 = $566$hi;
      i64toi32_i32$2 = $566_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$4 = $13$hi;
      i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $571_1 = i64toi32_i32$4;
      $571$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$4 = $571$hi;
      i64toi32_i32$2 = $571_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $2_1 = i64toi32_i32$1;
      $2$hi = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $531_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $531_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
      }
      $574_1 = $531_1;
      $574$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$3 = $15_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $577_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $578$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = i64toi32_i32$0;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$5 = $15_1;
      $581_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $582$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $578$hi;
      i64toi32_i32$5 = $577_1;
      i64toi32_i32$3 = $582$hi;
      i64toi32_i32$0 = $581_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $583$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$0 = $4_1;
      $586_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $587$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $583$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$1 = $587$hi;
      i64toi32_i32$5 = $586_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $532_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $532_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $589$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $574$hi;
      i64toi32_i32$4 = $574_1;
      i64toi32_i32$2 = $589$hi;
      i64toi32_i32$5 = $532_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $590_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $590$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $554$hi;
      i64toi32_i32$0 = $554_1;
      i64toi32_i32$4 = $590$hi;
      i64toi32_i32$5 = $590_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $15_1 = i64toi32_i32$1;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $594_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $595$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $553$hi;
      i64toi32_i32$5 = $553_1;
      i64toi32_i32$3 = $595$hi;
      i64toi32_i32$0 = $594_1;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $596_1 = i64toi32_i32$4;
      $596$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      $597_1 = $15_1;
      $597$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $21$hi;
      $598_1 = $21_1;
      $598$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$5 = $20$hi;
      i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$1 | 0, $20_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$1 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $605_1 = i64toi32_i32$5;
      $605$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$5 = $605$hi;
      i64toi32_i32$0 = $605_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $13_1 = i64toi32_i32$3;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 32;
      i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $533_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
       $533_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
      }
      $608_1 = $533_1;
      $608$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$0 = $4_1;
      $611_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = $611_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 32;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
       $537_1 = 0;
      } else {
       i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
       $537_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
      }
      $613$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $608$hi;
      i64toi32_i32$4 = $608_1;
      i64toi32_i32$0 = $613$hi;
      i64toi32_i32$1 = $537_1;
      i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
      $614_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
      $614$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $598$hi;
      i64toi32_i32$2 = $598_1;
      i64toi32_i32$4 = $614$hi;
      i64toi32_i32$1 = $614_1;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = i64toi32_i32$5;
      i64toi32_i32$2 = $21$hi;
      i64toi32_i32$1 = $21_1;
      $618_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$0 = 0;
      $619_1 = $618_1;
      $619$hi = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$3;
      $620_1 = i64toi32_i32$5;
      $620$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $538_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $538_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $622$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $620$hi;
      i64toi32_i32$0 = $620_1;
      i64toi32_i32$1 = $622$hi;
      i64toi32_i32$2 = $538_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $623$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$5 = $623$hi;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$2 = $4_1;
      $625_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$3 = 0;
      $626$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $619$hi;
      i64toi32_i32$2 = $619_1;
      i64toi32_i32$5 = $626$hi;
      i64toi32_i32$0 = $625_1;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $627$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $597$hi;
      i64toi32_i32$3 = $597_1;
      i64toi32_i32$2 = $627$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $4_1 = i64toi32_i32$5;
      $4$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$0 = $15_1;
      $631_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $632$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $596$hi;
      i64toi32_i32$0 = $596_1;
      i64toi32_i32$1 = $632$hi;
      i64toi32_i32$3 = $631_1;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $2_1 = i64toi32_i32$2;
      $2$hi = i64toi32_i32$5;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$0 = 131071;
      i64toi32_i32$3 = -1;
      if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$13
      }
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 49;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
       $539_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $539_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
      }
      $637$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$4 = $4_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $1_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
      $1$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $13_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 0;
      $646_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$3 = 0;
      $647$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $637$hi;
      i64toi32_i32$0 = $539_1;
      i64toi32_i32$4 = $647$hi;
      i64toi32_i32$5 = $646_1;
      i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
      $648_1 = i64toi32_i32$1;
      $648$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$5 = $15_1;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
      $17_1 = i64toi32_i32$4;
      $17$hi = i64toi32_i32$1;
      $651_1 = i64toi32_i32$4;
      $651$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = 0;
       $540_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       $540_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
      }
      $15_1 = $540_1;
      $15$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $18_1 = i64toi32_i32$2;
      $18$hi = i64toi32_i32$3;
      $657_1 = i64toi32_i32$2;
      $657$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      $658_1 = $1_1;
      $658$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $542_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
       $542_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
      }
      $16_1 = $542_1;
      $16$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $658$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = __wasm_i64_mul($658_1 | 0, i64toi32_i32$2 | 0, $16_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $662_1 = i64toi32_i32$1;
      $662$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $657$hi;
      i64toi32_i32$3 = $657_1;
      i64toi32_i32$1 = $662$hi;
      i64toi32_i32$5 = $662_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $11_1 = i64toi32_i32$0;
      $11$hi = i64toi32_i32$4;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       $543_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
       $543_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      }
      $19_1 = $543_1;
      $19$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $651$hi;
      i64toi32_i32$4 = $651_1;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$5 = $19_1;
      $667_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      $668$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $648$hi;
      i64toi32_i32$5 = $648_1;
      i64toi32_i32$3 = $668$hi;
      i64toi32_i32$2 = $667_1;
      i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      $669_1 = i64toi32_i32$1;
      $669$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      $670_1 = $4_1;
      $670$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$4 = $14_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $544_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       $544_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
      }
      $672$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $670$hi;
      i64toi32_i32$4 = $672$hi;
      i64toi32_i32$4 = __wasm_i64_mul($670_1 | 0, i64toi32_i32$5 | 0, $544_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $673_1 = i64toi32_i32$4;
      $673$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $3$hi;
      $674_1 = $3_1;
      $674$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $546_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
       $546_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
      }
      $676$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $674$hi;
      i64toi32_i32$0 = $676$hi;
      i64toi32_i32$0 = __wasm_i64_mul($674_1 | 0, i64toi32_i32$4 | 0, $546_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $677_1 = i64toi32_i32$0;
      $677$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $673$hi;
      i64toi32_i32$5 = $673_1;
      i64toi32_i32$0 = $677$hi;
      i64toi32_i32$2 = $677_1;
      i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $678$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $16_1 | 0, i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $681_1 = i64toi32_i32$5;
      $681$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $678$hi;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$5 = $681$hi;
      i64toi32_i32$2 = $681_1;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $682$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $15$hi;
      i64toi32_i32$4 = $10$hi;
      i64toi32_i32$4 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $685_1 = i64toi32_i32$4;
      $685$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $682$hi;
      i64toi32_i32$1 = i64toi32_i32$0;
      i64toi32_i32$4 = $685$hi;
      i64toi32_i32$2 = $685_1;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      i64toi32_i32$3 = i64toi32_i32$5;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
       $547_1 = 0;
      } else {
       i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $547_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      }
      $687_1 = $547_1;
      $687$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
      $689$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $13$hi;
      i64toi32_i32$3 = $689$hi;
      $578_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$0 = __wasm_i64_mul($578_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $691_1 = i64toi32_i32$0;
      $691$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$1 = $10_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = -1;
      i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
      $694_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $694$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = $694$hi;
      i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $694_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $695_1 = i64toi32_i32$1;
      $695$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $691$hi;
      i64toi32_i32$3 = $691_1;
      i64toi32_i32$1 = $695$hi;
      i64toi32_i32$2 = $695_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $696$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $699_1 = i64toi32_i32$3;
      $699$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $696$hi;
      i64toi32_i32$0 = i64toi32_i32$4;
      i64toi32_i32$3 = $699$hi;
      i64toi32_i32$2 = $699_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $700_1 = i64toi32_i32$1;
      $700$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$5 = $11_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$2 = 32;
      i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $548_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       $548_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
      }
      $702_1 = $548_1;
      $702$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$0 = $11$hi;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $18_1;
      $705_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$4 = 0;
      i64toi32_i32$2 = $705_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 32;
      i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       $549_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
       $549_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      }
      $707$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $702$hi;
      i64toi32_i32$4 = $702_1;
      i64toi32_i32$2 = $707$hi;
      i64toi32_i32$5 = $549_1;
      i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
      $708_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $708$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $700$hi;
      i64toi32_i32$0 = $700_1;
      i64toi32_i32$4 = $708$hi;
      i64toi32_i32$5 = $708_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $709$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $687$hi;
      i64toi32_i32$2 = $687_1;
      i64toi32_i32$0 = $709$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $710$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $669$hi;
      i64toi32_i32$1 = $669_1;
      i64toi32_i32$2 = $710$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
      $13_1 = i64toi32_i32$0;
      $13$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$3 = $17_1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = $19_1;
      i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
      i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
      $1_1 = i64toi32_i32$2;
      $1$hi = i64toi32_i32$0;
      $6_1 = $6_1 + -1 | 0;
      break label$12;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 33;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $550_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
      $550_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16_1 = $550_1;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 48;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $552_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $552_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $720_1 = $552_1;
     $720$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $555_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      $555_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $722_1 = $555_1;
     $722$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $556_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
      $556_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $724$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $722$hi;
     i64toi32_i32$0 = $722_1;
     i64toi32_i32$4 = $724$hi;
     i64toi32_i32$5 = $556_1;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
     $1_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $13_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
     $13$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $15_1 = i64toi32_i32$4;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 0;
     $734_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = 0;
     $735$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $720$hi;
     i64toi32_i32$5 = $720_1;
     i64toi32_i32$3 = $735$hi;
     i64toi32_i32$4 = $734_1;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     $736_1 = i64toi32_i32$1;
     $736$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$1;
     $739_1 = i64toi32_i32$3;
     $739$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $740_1 = $1_1;
     $740$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $557_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $557_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $15_1 = $557_1;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $740$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = __wasm_i64_mul($740_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $17_1 = i64toi32_i32$2;
     $17$hi = i64toi32_i32$0;
     $745_1 = i64toi32_i32$2;
     $745$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     $746_1 = $16_1;
     $746$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 31;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $558_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $558_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $748$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $746$hi;
     i64toi32_i32$0 = $746_1;
     i64toi32_i32$1 = $748$hi;
     i64toi32_i32$4 = $558_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $18_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $19_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $754_1 = i64toi32_i32$2;
     $754$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $745$hi;
     i64toi32_i32$1 = $745_1;
     i64toi32_i32$2 = $754$hi;
     i64toi32_i32$4 = $754_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$5;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
      $559_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $559_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     }
     $20_1 = $559_1;
     $20$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $739$hi;
     i64toi32_i32$3 = $739_1;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$4 = $20_1;
     $759_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $760$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $736$hi;
     i64toi32_i32$4 = $736_1;
     i64toi32_i32$1 = $760$hi;
     i64toi32_i32$0 = $759_1;
     i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $761_1 = i64toi32_i32$2;
     $761$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     $762_1 = $4_1;
     $762$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $560_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $560_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $764$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $762$hi;
     i64toi32_i32$3 = $764$hi;
     i64toi32_i32$3 = __wasm_i64_mul($762_1 | 0, i64toi32_i32$4 | 0, $560_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $765_1 = i64toi32_i32$3;
     $765$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     $766_1 = $3_1;
     $766$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 33;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $562_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      $562_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
     }
     $768$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $766$hi;
     i64toi32_i32$5 = $768$hi;
     i64toi32_i32$5 = __wasm_i64_mul($766_1 | 0, i64toi32_i32$3 | 0, $562_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $769_1 = i64toi32_i32$5;
     $769$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $765$hi;
     i64toi32_i32$4 = $765_1;
     i64toi32_i32$5 = $769$hi;
     i64toi32_i32$0 = $769_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $770_1 = i64toi32_i32$1;
     $770$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $563_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $563_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
     }
     $2_1 = $563_1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $775_1 = i64toi32_i32$3;
     $775$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $770$hi;
     i64toi32_i32$2 = $770_1;
     i64toi32_i32$3 = $775$hi;
     i64toi32_i32$0 = $775_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $776$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $779_1 = i64toi32_i32$2;
     $779$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $776$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$2 = $779$hi;
     i64toi32_i32$0 = $779_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $564_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $564_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $781_1 = $564_1;
     $781$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$4 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $784_1 = i64toi32_i32$1;
     $784$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
     $786$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $786$hi;
     $579_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($579_1 | 0, i64toi32_i32$1 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $788_1 = i64toi32_i32$5;
     $788$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $784$hi;
     i64toi32_i32$4 = $784_1;
     i64toi32_i32$5 = $788$hi;
     i64toi32_i32$0 = $788_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $789$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = -1;
     i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
     $792_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $792$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$1 = $792$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$4 | 0, $792_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $793_1 = i64toi32_i32$1;
     $793$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $789$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$1 = $793$hi;
     i64toi32_i32$0 = $793_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $794_1 = i64toi32_i32$5;
     $794$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $565_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $565_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $796_1 = $565_1;
     $796$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$0 = $17_1;
     $799_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = $799_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $567_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $567_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $801$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $796$hi;
     i64toi32_i32$2 = $796_1;
     i64toi32_i32$0 = $801$hi;
     i64toi32_i32$4 = $567_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $802_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $802$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $794$hi;
     i64toi32_i32$3 = $794_1;
     i64toi32_i32$2 = $802$hi;
     i64toi32_i32$4 = $802_1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $803$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $781$hi;
     i64toi32_i32$0 = $781_1;
     i64toi32_i32$3 = $803$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $804$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $761$hi;
     i64toi32_i32$5 = $761_1;
     i64toi32_i32$0 = $804$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     $13_1 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $11_1;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$4 = $20_1;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
     $1_1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     $2$hi = i64toi32_i32$3;
    }
    label$14 : {
     if (($6_1 | 0) < (16384 | 0)) {
      break label$14
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    $7_1 = $6_1 + 16383 | 0;
    label$15 : {
     if (($6_1 | 0) > (-16383 | 0)) {
      break label$15
     }
     label$16 : {
      if ($7_1) {
       break label$16
      }
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$2 = 65535;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $820_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $820$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $4$hi;
      $821_1 = $4_1;
      $821$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 1;
      i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
       $568_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
       $568_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      }
      $823$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $823$hi;
      i64toi32_i32$2 = $568_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$4 = $3_1;
      $825_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$4 = $13_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
       $569_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
       $569_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      }
      $827_1 = $569_1;
      $827$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = 63;
      i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$4 = 0;
       $570_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
      } else {
       i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
       $570_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
      }
      $829$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $827$hi;
      i64toi32_i32$3 = $827_1;
      i64toi32_i32$2 = $829$hi;
      i64toi32_i32$1 = $570_1;
      i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = $1$hi;
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$3 = $14$hi;
      i64toi32_i32$1 = $14_1;
      $833_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$4 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$2 = i64toi32_i32$3;
      i64toi32_i32$3 = $14_1;
      $837_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $825_1 : $833_1;
      i64toi32_i32$1 = 0;
      $838$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $821$hi;
      i64toi32_i32$3 = $821_1;
      i64toi32_i32$4 = $838$hi;
      i64toi32_i32$2 = $837_1;
      i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
      }
      $1_1 = i64toi32_i32$5;
      $1$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$1 = i64toi32_i32$5;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4_1;
      $842_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
      i64toi32_i32$1 = 0;
      $843$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $820$hi;
      i64toi32_i32$2 = $820_1;
      i64toi32_i32$0 = $843$hi;
      i64toi32_i32$3 = $842_1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $3_1 = i64toi32_i32$4;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$2 = 65536;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
      if (!(i64toi32_i32$1 & i64toi32_i32$3 | 0 | i64toi32_i32$2 | 0)) {
       break label$16
      }
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $12_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      $12$hi = i64toi32_i32$1;
      break label$2;
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$2;
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $572_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $572_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $853$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $855_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $855$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $853$hi;
    i64toi32_i32$5 = $572_1;
    i64toi32_i32$1 = $855$hi;
    i64toi32_i32$3 = $855_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $856_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $856$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $857_1 = $4_1;
    $857$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $573_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $573_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $859$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $859$hi;
    i64toi32_i32$1 = $573_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    $861_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$3 = $13_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     $575_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $575_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    }
    $863_1 = $575_1;
    $863$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $576_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $576_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $865$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $863$hi;
    i64toi32_i32$5 = $863_1;
    i64toi32_i32$1 = $865$hi;
    i64toi32_i32$2 = $576_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $1_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$2 = $14_1;
    $869_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$5 = $14_1;
    $873_1 = (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $861_1 : $869_1;
    i64toi32_i32$2 = 0;
    $874$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $857$hi;
    i64toi32_i32$5 = $857_1;
    i64toi32_i32$3 = $874$hi;
    i64toi32_i32$1 = $873_1;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    $878_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = 0;
    $879$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $856$hi;
    i64toi32_i32$1 = $856_1;
    i64toi32_i32$4 = $879$hi;
    i64toi32_i32$5 = $878_1;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $880$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$0 = $880$hi;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $12_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $12$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$2 = $0_1;
   HEAP32[i64toi32_i32$2 >> 2] = $1_1;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $12_1;
   HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
   global$0 = $5_1 + 192 | 0;
   return;
  }
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$2 >> 2] = 0;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$5 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$4 = !(i64toi32_i32$0 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0);
  i64toi32_i32$2 = 2147450880;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$5 = i64toi32_i32$4 ? 0 : $12_1;
  i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
  $896_1 = i64toi32_i32$5;
  i64toi32_i32$5 = $0_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $896_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 192 | 0;
 }
 
 function $896($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6_1 = 0, $7_1 = 0, $5_1 = 0, $9$hi = 0, $9_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $8_1 = 0, $135_1 = 0, $136_1 = 0, $137_1 = 0, $138_1 = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $12_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $21_1 = 0, $27_1 = 0, $28$hi = 0, $32_1 = 0, $39_1 = 0, $43_1 = 0, $44$hi = 0, $48_1 = 0, $53_1 = 0, $55_1 = 0, $63_1 = 0, $65_1 = 0, $73_1 = 0, $73$hi = 0, $79_1 = 0, $79$hi = 0, $83_1 = 0, $83$hi = 0, $93_1 = 0, $93$hi = 0, $121_1 = 0, $124_1 = 0, $151_1 = 0, $152_1 = 0, $152$hi = 0, $153_1 = 0, $153$hi = 0, $160$hi = 0, $163$hi = 0, $183_1 = 0, $184_1 = 0, $184$hi = 0, $185_1 = 0, $185$hi = 0, $192$hi = 0, $195$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $214_1 = 0, $214$hi = 0, $216$hi = 0, $242_1 = 0, $242$hi = 0, $244_1 = 0, $244$hi = 0, $248_1 = 0, $248$hi = 0, $250_1 = 0, $251$hi = 0, $269$hi = 0, $272_1 = 0, $273$hi = 0, $282_1 = 0, $283_1 = 0, $283$hi = 0, $284_1 = 0, $284$hi = 0, $291$hi = 0, $294$hi = 0, $309_1 = 0, $309$hi = 0, $315_1 = 0, $316$hi = 0, $322_1 = 0, $322$hi = 0, $324$hi = 0, $325_1 = 0, $325$hi = 0, $327_1 = 0, $327$hi = 0, $354_1 = 0, $354$hi = 0, $356_1 = 0, $356$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $363$hi = 0, $369_1 = 0, $369$hi = 0, $371$hi = 0, $375$hi = 0, $377_1 = 0, $377$hi = 0, $380$hi = 0, $386_1 = 0, $386$hi = 0, $390$hi = 0, $394_1 = 0, $395$hi = 0, $400_1 = 0, $400$hi = 0, $408_1 = 0, $409$hi = 0, $411_1 = 0, $411$hi = 0, $417_1 = 0, $418$hi = 0, $422_1 = 0, $423$hi = 0, $426_1 = 0, $426$hi = 0, $432_1 = 0, $433$hi = 0, $437_1 = 0, $438$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $21_1 = (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     $27_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$3 = $27_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $32_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $21_1 : $32_1) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $39_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $43_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $44$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$3 = $44$hi;
     i64toi32_i32$5 = $43_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $48_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $39_1 : $48_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $55_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $53_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $63_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $65_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $63_1 : $65_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $73_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $73$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $73$hi;
     i64toi32_i32$2 = $73_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $79_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $79$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $83_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $79$hi;
     i64toi32_i32$2 = $79_1;
     i64toi32_i32$5 = $83$hi;
     i64toi32_i32$4 = $83_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1_1;
     i64toi32_i32$1 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
    $93_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $93$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $93$hi;
    i64toi32_i32$0 = $93_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   $121_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$1 = $11_1;
   $124_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $11_1;
   $7_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $121_1 : $124_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $9_1 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $2_1 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $135_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $135_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $8_1 = $135_1 & 32767 | 0;
   label$8 : {
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $136_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $136_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
    }
    $6_1 = $136_1 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $151_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $152_1 = $9_1;
    $152$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $153_1 = $10_1;
    $153$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ? $9_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $137_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $137_1 = i64toi32_i32$5
    }
    $160$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $163$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $160$hi;
    i64toi32_i32$1 = $137_1;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$3 = $152$hi;
    i64toi32_i32$1 = $153$hi;
    $900($151_1 | 0, $152_1 | 0, i64toi32_i32$3 | 0, $153_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$0 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$3;
    $9$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$2 ? $1_1 : $3_1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$5;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $183_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $184_1 = $3_1;
    $184$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $185_1 = $4_1;
    $185$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $4$hi;
    $7_1 = !($4_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $3_1 : $4_1;
    i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$2;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $138_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $138_1 = i64toi32_i32$5
    }
    $192$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $192$hi;
    i64toi32_i32$1 = $138_1;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$2;
    i64toi32_i32$4 = $184$hi;
    i64toi32_i32$1 = $185$hi;
    $900($183_1 | 0, $184_1 | 0, i64toi32_i32$4 | 0, $185_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5_1 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $139_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $139_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $208_1 = $139_1;
   $208$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $140_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $140_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   $210$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $208$hi;
   i64toi32_i32$4 = $208_1;
   i64toi32_i32$1 = $210$hi;
   i64toi32_i32$5 = $140_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $141_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $141_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $214_1 = $141_1;
   $214$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $142_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $142_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $216$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $214$hi;
   i64toi32_i32$3 = $214_1;
   i64toi32_i32$4 = $216$hi;
   i64toi32_i32$5 = $142_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $143_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $143_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $3_1 = $143_1;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$4 = $11_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $10$hi = i64toi32_i32$1;
   label$10 : {
    $7_1 = $6_1 - $8_1 | 0;
    if (!$7_1) {
     break label$10
    }
    label$11 : {
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $3_1 = 1;
     $3$hi = i64toi32_i32$1;
     break label$10;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    $900($5_1 + 64 | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $897($5_1 + 48 | 0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $242_1 = i64toi32_i32$1;
    $242$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $244_1 = i64toi32_i32$4;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $248_1 = i64toi32_i32$1;
    $248$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $244$hi;
    i64toi32_i32$3 = $244_1;
    i64toi32_i32$1 = $248$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $250_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $251$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $242$hi;
    i64toi32_i32$5 = $242_1;
    i64toi32_i32$1 = $251$hi;
    i64toi32_i32$3 = $250_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$1 = 524288;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $144_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $144_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $2_1 = $144_1;
   $2$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $145_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $146_1 = 0
       } else {
        $146_1 = 1
       }
       $147_1 = $146_1;
      } else {
       $147_1 = 0
      }
      $145_1 = $147_1;
     }
     if ($145_1) {
      break label$13
     }
     label$14 : {
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3_1;
      $272_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $273$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $273$hi;
      i64toi32_i32$1 = $272_1;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      if (!!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
       break label$14
      }
      i64toi32_i32$5 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$5;
      break label$1;
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$2 = 524287;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $282_1 = $5_1 + 32 | 0;
     i64toi32_i32$4 = $1$hi;
     $283_1 = $1_1;
     $283$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     $284_1 = $4_1;
     $284$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $4$hi;
     $7_1 = !($4_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$0 ? $1_1 : $4_1;
     i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$5;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $148_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $148_1 = i64toi32_i32$4
     }
     $291$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $294$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $291$hi;
     i64toi32_i32$2 = $148_1;
     i64toi32_i32$1 = $294$hi;
     i64toi32_i32$4 = $7_1 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $7_1 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$2 = $284$hi;
     $900($282_1 | 0, $283_1 | 0, i64toi32_i32$3 | 0, $284_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$0 = $5_1 + 40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$2;
     break label$12;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$4 = $12_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $309_1 = i64toi32_i32$1;
    $309$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    $315_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $316$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $309$hi;
    i64toi32_i32$4 = $309_1;
    i64toi32_i32$1 = $316$hi;
    i64toi32_i32$2 = $315_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = 1048576;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$2 | 0 | i64toi32_i32$4 | 0)) {
     break label$12
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $149_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $149_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $322_1 = $149_1;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $150_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $150_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $324$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $322$hi;
    i64toi32_i32$5 = $322_1;
    i64toi32_i32$4 = $324$hi;
    i64toi32_i32$2 = $150_1;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $325_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $325$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $327_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $327$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $325$hi;
    i64toi32_i32$4 = $325_1;
    i64toi32_i32$3 = $327$hi;
    i64toi32_i32$2 = $327_1;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$3;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $154_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $154_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $4_1 = $154_1;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $2$hi = i64toi32_i32$5;
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$3;
    break label$1;
   }
   $7_1 = 0;
   label$16 : {
    label$17 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$17
     }
     $7_1 = $6_1;
     break label$16;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $4$hi;
    $900($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$4 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    $897($5_1 | 0, $1_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $354_1 = i64toi32_i32$3;
    $354$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $356_1 = i64toi32_i32$4;
    $356$hi = i64toi32_i32$3;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $360_1 = i64toi32_i32$3;
    $360$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $356$hi;
    i64toi32_i32$5 = $356_1;
    i64toi32_i32$3 = $360$hi;
    i64toi32_i32$2 = $360_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    $362_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = 0;
    $363$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $354$hi;
    i64toi32_i32$2 = $354_1;
    i64toi32_i32$3 = $363$hi;
    i64toi32_i32$5 = $362_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $155_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $155_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $369_1 = $155_1;
   $369$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $156_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
    $156_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $371$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $369$hi;
   i64toi32_i32$3 = $369_1;
   i64toi32_i32$2 = $371$hi;
   i64toi32_i32$5 = $156_1;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $157_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $157_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$2 = $157_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $375$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $375$hi;
   i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $377_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $377$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $158_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $158_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $380$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $377$hi;
   i64toi32_i32$2 = $377_1;
   i64toi32_i32$4 = $380$hi;
   i64toi32_i32$5 = $158_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   $6_1 = $1_1 & 7 | 0;
   label$18 : {
    label$19 : {
     label$20 : {
      switch ($901() | 0 | 0) {
      case 0:
       i64toi32_i32$4 = $4$hi;
       $386_1 = $4_1;
       $386$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = 0;
       $390$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $390$hi;
       i64toi32_i32$5 = $6_1 >>> 0 > 4 >>> 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1_1 = i64toi32_i32$1;
       $1$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$5 = $3_1;
       $394_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $395$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $386$hi;
       i64toi32_i32$5 = $386_1;
       i64toi32_i32$0 = $395$hi;
       i64toi32_i32$3 = $394_1;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $4_1 = i64toi32_i32$2;
       $4$hi = i64toi32_i32$1;
       label$23 : {
        if (($6_1 | 0) == (4 | 0)) {
         break label$23
        }
        i64toi32_i32$1 = $1$hi;
        $3_1 = $1_1;
        $3$hi = i64toi32_i32$1;
        break label$19;
       }
       i64toi32_i32$1 = $4$hi;
       $400_1 = $4_1;
       $400$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$4 = $1_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       $2_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
       $2$hi = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$5 = $2$hi;
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $3_1 = i64toi32_i32$0;
       $3$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $2$hi;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$3 = $2_1;
       $408_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $409$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $400$hi;
       i64toi32_i32$3 = $400_1;
       i64toi32_i32$2 = $409$hi;
       i64toi32_i32$1 = $408_1;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $4_1 = i64toi32_i32$4;
       $4$hi = i64toi32_i32$0;
       break label$18;
      case 1:
       i64toi32_i32$0 = $4$hi;
       $411_1 = $4_1;
       $411$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $2$hi;
       i64toi32_i32$5 = $2_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       $417_1 = ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $418$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$0 = $418$hi;
       i64toi32_i32$3 = $417_1;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1_1 = i64toi32_i32$2;
       $1$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $422_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $423$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $411$hi;
       i64toi32_i32$3 = $411_1;
       i64toi32_i32$4 = $423$hi;
       i64toi32_i32$1 = $422_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $4_1 = i64toi32_i32$0;
       $4$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1$hi;
       $3_1 = $1_1;
       $3$hi = i64toi32_i32$2;
       break label$19;
      case 2:
       break label$20;
      default:
       break label$19;
      };
     }
     i64toi32_i32$2 = $4$hi;
     $426_1 = $4_1;
     $426$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     $432_1 = !($2_1 | i64toi32_i32$2 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $433$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$3 = $433$hi;
     i64toi32_i32$1 = $432_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $437_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $438$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $426$hi;
     i64toi32_i32$1 = $426_1;
     i64toi32_i32$0 = $438$hi;
     i64toi32_i32$5 = $437_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$4;
    }
    if (!$6_1) {
     break label$1
    }
   }
   $902() | 0;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$4;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $897($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $898($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $42_1 = 0, $43_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $33$hi = 0, $37_1 = 0, $39_1 = 0, $44_1 = 0, $44$hi = 0, $46$hi = 0, $74_1 = 0, $74$hi = 0, $78$hi = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $100$hi = 0, $107_1 = 0, $107$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $42_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $42_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $42_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $43_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $43_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $43_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $33$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$5 = $33$hi;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37_1 : $39_1) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $45_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $45_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44_1 = $45_1;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $46_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $46_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44_1;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $46_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $47_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $47_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $47_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   $900($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   $897($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $48_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74_1 = $48_1;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $49_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $49_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74_1;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $49_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83_1;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81_1;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $899($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $15$hi = 0, $13$hi = 0, $12$hi = 0, $5_1 = 0, $11$hi = 0, $14$hi = 0, $14_1 = 0, $15_1 = 0, $12_1 = 0, $16$hi = 0, $11_1 = 0, $18$hi = 0, $13_1 = 0, $8_1 = 0, $18_1 = 0, $16_1 = 0, $6_1 = 0, $10$hi = 0, $17$hi = 0, $7_1 = 0, $10_1 = 0, $17_1 = 0, $9_1 = 0, $220_1 = 0, $221_1 = 0, $222_1 = 0, $223_1 = 0, $224_1 = 0, $225_1 = 0, $226_1 = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $232_1 = 0, $235_1 = 0, $236_1 = 0, $237_1 = 0, $239_1 = 0, $240_1 = 0, $241_1 = 0, $242_1 = 0, $243_1 = 0, $245_1 = 0, $246_1 = 0, $247_1 = 0, $248_1 = 0, $250_1 = 0, $251_1 = 0, $252_1 = 0, $253_1 = 0, $254_1 = 0, $256_1 = 0, $257_1 = 0, $258_1 = 0, $260_1 = 0, $261_1 = 0, $262_1 = 0, $263_1 = 0, $264_1 = 0, $266_1 = 0, $267_1 = 0, $268_1 = 0, $269_1 = 0, $272_1 = 0, $273_1 = 0, $274_1 = 0, $23_1 = 0, $23$hi = 0, $25$hi = 0, $28_1 = 0, $28$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $37$hi = 0, $64_1 = 0, $68_1 = 0, $75_1 = 0, $79_1 = 0, $88_1 = 0, $88$hi = 0, $100_1 = 0, $100$hi = 0, $122_1 = 0, $123_1 = 0, $123$hi = 0, $124_1 = 0, $124$hi = 0, $131$hi = 0, $134$hi = 0, $144_1 = 0, $144$hi = 0, $149$hi = 0, $156_1 = 0, $157_1 = 0, $157$hi = 0, $158_1 = 0, $158$hi = 0, $165$hi = 0, $168$hi = 0, $180_1 = 0, $180$hi = 0, $185$hi = 0, $188_1 = 0, $188$hi = 0, $190$hi = 0, $198_1 = 0, $213_1 = 0, $213$hi = 0, $218_1 = 0, $218$hi = 0, $227_1 = 0, $227$hi = 0, $231_1 = 0, $232$hi = 0, $233_1 = 0, $233$hi = 0, $234_1 = 0, $234$hi = 0, $238_1 = 0, $238$hi = 0, $244_1 = 0, $244$hi = 0, $249_1 = 0, $249$hi = 0, $255_1 = 0, $255$hi = 0, $259_1 = 0, $260$hi = 0, $261$hi = 0, $265_1 = 0, $266$hi = 0, $267$hi = 0, $270_1 = 0, $270$hi = 0, $271_1 = 0, $271$hi = 0, $278_1 = 0, $278$hi = 0, $284_1 = 0, $284$hi = 0, $286$hi = 0, $287_1 = 0, $287$hi = 0, $288_1 = 0, $288$hi = 0, $289_1 = 0, $289$hi = 0, $291$hi = 0, $295_1 = 0, $296$hi = 0, $297_1 = 0, $297$hi = 0, $298_1 = 0, $298$hi = 0, $305_1 = 0, $305$hi = 0, $310_1 = 0, $310$hi = 0, $315_1 = 0, $315$hi = 0, $318_1 = 0, $318$hi = 0, $321_1 = 0, $322$hi = 0, $325_1 = 0, $326$hi = 0, $327$hi = 0, $330_1 = 0, $331$hi = 0, $333$hi = 0, $334_1 = 0, $334$hi = 0, $338_1 = 0, $339$hi = 0, $340_1 = 0, $340$hi = 0, $341_1 = 0, $341$hi = 0, $342_1 = 0, $342$hi = 0, $349_1 = 0, $349$hi = 0, $352_1 = 0, $352$hi = 0, $355_1 = 0, $357$hi = 0, $358_1 = 0, $358$hi = 0, $363_1 = 0, $363$hi = 0, $364_1 = 0, $364$hi = 0, $366$hi = 0, $370_1 = 0, $371$hi = 0, $372$hi = 0, $376_1 = 0, $377$hi = 0, $392_1 = 0, $392$hi = 0, $394$hi = 0, $395$hi = 0, $275_1 = 0, $406_1 = 0, $406$hi = 0, $410_1 = 0, $411$hi = 0, $419_1 = 0, $419$hi = 0, $421$hi = 0, $424$hi = 0, $425$hi = 0, $428_1 = 0, $428$hi = 0, $430$hi = 0, $431$hi = 0, $276_1 = 0, $466_1 = 0, $466$hi = 0, $468_1 = 0, $468$hi = 0, $469_1 = 0, $469$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $477_1 = 0, $478$hi = 0, $483_1 = 0, $483$hi = 0, $487_1 = 0, $487$hi = 0, $496$hi = 0, $498_1 = 0, $498$hi = 0, $504_1 = 0, $510_1 = 0, $510$hi = 0, $515_1 = 0, $516$hi = 0, $520_1 = 0, $520$hi = 0, $524_1 = 0, $524$hi = 0, $527_1 = 0, $527$hi = 0, $531_1 = 0, $532$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $220_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $220_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $220_1;
  $23$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $221_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $221_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $25$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $23$hi;
  i64toi32_i32$1 = $23_1;
  i64toi32_i32$0 = $25$hi;
  i64toi32_i32$3 = $221_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $10_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $222_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $222_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $28_1 = $222_1;
  $28$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $223_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $223_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $30$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $28$hi;
  i64toi32_i32$1 = $28_1;
  i64toi32_i32$0 = $30$hi;
  i64toi32_i32$3 = $223_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $224_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $224_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $33_1 = $224_1;
  $33$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $12_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $225_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $225_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $37$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $33$hi;
  i64toi32_i32$2 = $33_1;
  i64toi32_i32$1 = $37$hi;
  i64toi32_i32$3 = $225_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $14_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $226_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $226_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $16_1 = $226_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $228_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $228_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $17_1 = $228_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $229_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $229_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $229_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $230_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $230_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $230_1 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$2 = $1$hi;
     $64_1 = !($1_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $68_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64_1 : $68_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $75_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $79_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $75_1 : $79_1) {
      break label$5
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $88_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $88$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $88$hi;
     i64toi32_i32$1 = $88_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $100_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $100$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = $100$hi;
     i64toi32_i32$2 = $100_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     label$9 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2_1 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $122_1 = $5_1 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $123_1 = $1_1;
     $123$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     $124_1 = $15_1;
     $124$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $15$hi;
     $8_1 = !($15_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $15_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $232_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $232_1 = i64toi32_i32$0
     }
     $131$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $134$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $131$hi;
     i64toi32_i32$3 = $232_1;
     i64toi32_i32$1 = $134$hi;
     i64toi32_i32$0 = $8_1 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$2;
     i64toi32_i32$5 = $123$hi;
     i64toi32_i32$3 = $124$hi;
     $900($122_1 | 0, $123_1 | 0, i64toi32_i32$5 | 0, $124_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $235_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $235_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $144_1 = $235_1;
     $144$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $236_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $236_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $149$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $144$hi;
     i64toi32_i32$4 = $144_1;
     i64toi32_i32$5 = $149$hi;
     i64toi32_i32$0 = $236_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $10_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $237_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $237_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16_1 = $237_1;
     $16$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$2
    }
    $156_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $157_1 = $3_1;
    $157$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $158_1 = $12_1;
    $158$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $12$hi;
    $9_1 = !($12_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $12_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $239_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $239_1 = i64toi32_i32$5
    }
    $165$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $168$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $165$hi;
    i64toi32_i32$3 = $239_1;
    i64toi32_i32$0 = $168$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$2 = $157$hi;
    i64toi32_i32$3 = $158$hi;
    $900($156_1 | 0, $157_1 | 0, i64toi32_i32$2 | 0, $158_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $240_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $240_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $180_1 = $240_1;
    $180$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $241_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $241_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $185$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $180$hi;
    i64toi32_i32$1 = $180_1;
    i64toi32_i32$2 = $185$hi;
    i64toi32_i32$5 = $241_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $242_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $242_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $188_1 = $242_1;
    $188$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 47;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $243_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $243_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $190$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $188$hi;
    i64toi32_i32$1 = $188_1;
    i64toi32_i32$2 = $190$hi;
    i64toi32_i32$5 = $243_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $11_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $245_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $245_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $245_1;
    $17$hi = i64toi32_i32$1;
   }
   label$13 : {
    $198_1 = ($7_1 + $6_1 | 0) + $8_1 | 0;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$2 = $13_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = -1;
    i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $2_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$1 = $15_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = -1;
    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = -1;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $12_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
    $12$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$2 = $16_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 65536;
    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $15_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $15$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$2 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $213_1 = i64toi32_i32$2;
    $213$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$2 = $213$hi;
    i64toi32_i32$5 = $213_1;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $13_1 = i64toi32_i32$0;
    $13$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$3 = 0;
    $218_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    $218$hi = i64toi32_i32$3;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$5 = $17_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = -2147483648;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $11_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $11$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$4 = $10_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
    $10_1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$4 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $227_1 = i64toi32_i32$4;
    $227$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $13$hi;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = $227$hi;
    i64toi32_i32$1 = $227_1;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $16_1 = i64toi32_i32$2;
    $16$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$1 = $13_1;
    $231_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $232$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $218$hi;
    i64toi32_i32$1 = $218_1;
    i64toi32_i32$0 = $232$hi;
    i64toi32_i32$5 = $231_1;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $233_1 = i64toi32_i32$4;
    $233$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $16$hi;
    $234_1 = $16_1;
    $234$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$1 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $17_1 = i64toi32_i32$1;
    $17$hi = i64toi32_i32$2;
    $238_1 = i64toi32_i32$1;
    $238$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     $246_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
     $246_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    }
    i64toi32_i32$2 = $246_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = -32768;
    i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $3_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    $3$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $244_1 = i64toi32_i32$2;
    $244$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $238$hi;
    i64toi32_i32$1 = $238_1;
    i64toi32_i32$2 = $244$hi;
    i64toi32_i32$5 = $244_1;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $13_1 = i64toi32_i32$0;
    $13$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $17$hi;
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$5 = $17_1;
    i64toi32_i32$3 = 0;
    $249_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    $249$hi = i64toi32_i32$3;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $1_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $1_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $255_1 = i64toi32_i32$5;
    $255$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $13$hi;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$5 = $255$hi;
    i64toi32_i32$1 = $255_1;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $17_1 = i64toi32_i32$2;
    $17$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$3 = $13$hi;
    i64toi32_i32$1 = $13_1;
    $259_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $260$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $249$hi;
    i64toi32_i32$1 = $249_1;
    i64toi32_i32$0 = $260$hi;
    i64toi32_i32$3 = $259_1;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $261$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $234$hi;
    i64toi32_i32$4 = $234_1;
    i64toi32_i32$1 = $261$hi;
    i64toi32_i32$3 = i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $13_1 = i64toi32_i32$0;
    $13$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$3 = $16_1;
    $265_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = 0;
    $266$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $233$hi;
    i64toi32_i32$3 = $233_1;
    i64toi32_i32$5 = $266$hi;
    i64toi32_i32$4 = $265_1;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $267$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$3 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $270_1 = i64toi32_i32$3;
    $270$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $267$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$3 = $270$hi;
    i64toi32_i32$4 = $270_1;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $271_1 = i64toi32_i32$5;
    $271$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $18_1 = i64toi32_i32$2;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $278_1 = i64toi32_i32$2;
    $278$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$0 = $18_1;
    i64toi32_i32$2 = $278$hi;
    i64toi32_i32$4 = $278_1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $16_1 = i64toi32_i32$3;
    $16$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$4 = $18_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 32;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
     $247_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $247_1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    }
    $284_1 = $247_1;
    $284$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 32;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $248_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $248_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    $286$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $284$hi;
    i64toi32_i32$5 = $284_1;
    i64toi32_i32$1 = $286$hi;
    i64toi32_i32$0 = $248_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $287_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $287$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $271$hi;
    i64toi32_i32$4 = $271_1;
    i64toi32_i32$5 = $287$hi;
    i64toi32_i32$0 = $287_1;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $288_1 = i64toi32_i32$2;
    $288$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $13$hi;
    $289_1 = $13_1;
    $289$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 32;
    i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     $250_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
     $250_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
    }
    $291$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $289$hi;
    i64toi32_i32$3 = $289_1;
    i64toi32_i32$1 = $291$hi;
    i64toi32_i32$0 = $250_1;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $16_1 = i64toi32_i32$5;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$3 = $13$hi;
    i64toi32_i32$0 = $13_1;
    $295_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $296$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $288$hi;
    i64toi32_i32$0 = $288_1;
    i64toi32_i32$2 = $296$hi;
    i64toi32_i32$3 = $295_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $297_1 = i64toi32_i32$1;
    $297$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $16$hi;
    $298_1 = $16_1;
    $298$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $13_1 = i64toi32_i32$0;
    $13$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$0 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $305_1 = i64toi32_i32$0;
    $305$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $13$hi;
    i64toi32_i32$4 = $13_1;
    i64toi32_i32$0 = $305$hi;
    i64toi32_i32$3 = $305_1;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $310_1 = i64toi32_i32$4;
    $310$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$4 = $310$hi;
    i64toi32_i32$3 = $310_1;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $315_1 = i64toi32_i32$5;
    $315$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$5 = $315$hi;
    i64toi32_i32$3 = $315_1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $15_1 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $251_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
     $251_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $318_1 = $251_1;
    $318$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = $13$hi;
    i64toi32_i32$3 = $13_1;
    $321_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$0 = 0;
    $322$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = $4_1;
    $325_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $326$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $322$hi;
    i64toi32_i32$2 = $321_1;
    i64toi32_i32$0 = $326$hi;
    i64toi32_i32$1 = $325_1;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $327$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$3 = $15_1;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    $330_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $331$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $327$hi;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$4 = $331$hi;
    i64toi32_i32$2 = $330_1;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $252_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
     $252_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $333$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $318$hi;
    i64toi32_i32$5 = $318_1;
    i64toi32_i32$3 = $333$hi;
    i64toi32_i32$2 = $252_1;
    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $334_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $334$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $298$hi;
    i64toi32_i32$1 = $298_1;
    i64toi32_i32$5 = $334$hi;
    i64toi32_i32$2 = $334_1;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $2_1 = i64toi32_i32$4;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$2 = $16_1;
    $338_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $339$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $297$hi;
    i64toi32_i32$2 = $297_1;
    i64toi32_i32$0 = $339$hi;
    i64toi32_i32$1 = $338_1;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $340_1 = i64toi32_i32$5;
    $340$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    $341_1 = $2_1;
    $341$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $17$hi;
    $342_1 = $17_1;
    $342$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$4 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $349_1 = i64toi32_i32$2;
    $349$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = $349$hi;
    i64toi32_i32$1 = $349_1;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$0;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $253_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $253_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
    }
    $352_1 = $253_1;
    $352$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    $355_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $355_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 32;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $254_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $254_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $357$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $352$hi;
    i64toi32_i32$5 = $352_1;
    i64toi32_i32$1 = $357$hi;
    i64toi32_i32$4 = $254_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $358_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $358$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $342$hi;
    i64toi32_i32$3 = $342_1;
    i64toi32_i32$5 = $358$hi;
    i64toi32_i32$4 = $358_1;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$1 = 0;
    $363_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    $363$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$0;
    $364_1 = i64toi32_i32$2;
    $364$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$4 = $15_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     $256_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
     $256_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
    }
    $366$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $364$hi;
    i64toi32_i32$1 = $364_1;
    i64toi32_i32$4 = $366$hi;
    i64toi32_i32$3 = $256_1;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $15_1 = i64toi32_i32$5;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$0 = i64toi32_i32$5;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4_1;
    $370_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$0 = 0;
    $371$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $363$hi;
    i64toi32_i32$3 = $363_1;
    i64toi32_i32$2 = $371$hi;
    i64toi32_i32$1 = $370_1;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $372$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $341$hi;
    i64toi32_i32$0 = $341_1;
    i64toi32_i32$3 = $372$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    $376_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $377$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $340$hi;
    i64toi32_i32$1 = $340_1;
    i64toi32_i32$4 = $377$hi;
    i64toi32_i32$0 = $376_1;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$1 = 65536;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $11_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $257_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $257_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7_1 = $257_1;
    $6_1 = ($198_1 + $7_1 | 0) + -16383 | 0;
    if (($6_1 | 0) < (32767 | 0)) {
     break label$13
    }
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$1 = $14_1;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $14_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $14$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    $258_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $258_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
   }
   $392_1 = $258_1;
   $392$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 63;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $260_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $260_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $394$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $392$hi;
   i64toi32_i32$1 = $392_1;
   i64toi32_i32$2 = $394$hi;
   i64toi32_i32$0 = $260_1;
   i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   $395$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $11$hi;
   $8_1 = !($11_1 | i64toi32_i32$2 | 0);
   i64toi32_i32$4 = $8_1;
   i64toi32_i32$2 = $395$hi;
   $275_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4 ? $275_1 : $2_1;
   i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
   $11_1 = i64toi32_i32$0;
   $11$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $261_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
    $261_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $2_1 = $261_1;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $406_1 = i64toi32_i32$4;
   $406$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$4 = $406$hi;
   i64toi32_i32$2 = $406_1;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = $2_1;
   $410_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $411$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$0 = $411$hi;
   i64toi32_i32$2 = $410_1;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$5 = $15_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $3_1 = i64toi32_i32$4;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   $12_1 = $7_1 ^ 1 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $262_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
    $262_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $419_1 = $262_1;
   $419$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 1;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $263_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $263_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
   }
   $421$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $424$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $421$hi;
   i64toi32_i32$2 = $263_1;
   i64toi32_i32$1 = $424$hi;
   i64toi32_i32$5 = $7_1 | 62 | 0;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $264_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $264_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
   }
   $425$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $419$hi;
   i64toi32_i32$0 = $419_1;
   i64toi32_i32$2 = $425$hi;
   i64toi32_i32$5 = $264_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $2_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 1;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
    $266_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $266_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
   }
   $428_1 = $266_1;
   $428$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 63;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $267_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $267_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
   }
   $430$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $428$hi;
   i64toi32_i32$0 = $428_1;
   i64toi32_i32$2 = $430$hi;
   i64toi32_i32$5 = $267_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $431$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $8_1;
   i64toi32_i32$2 = $431$hi;
   $276_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = i64toi32_i32$3 ? $276_1 : $4_1;
   i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $268_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $268_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $1_1 = $268_1;
   $1$hi = i64toi32_i32$5;
   label$14 : {
    label$15 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$15
     }
     label$16 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 < 128 >>> 0) {
       break label$16
      }
      i64toi32_i32$5 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$5;
      break label$1;
     }
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     $6_1 = $6_1 + 127 | 0;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$3 = $2$hi;
     $900($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0);
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$5 = $11$hi;
     $900($5_1 + 32 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0);
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$3 = $2$hi;
     $897($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0);
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$5 = $11$hi;
     $897($5_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
     $466_1 = i64toi32_i32$5;
     $466$hi = i64toi32_i32$3;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
     $468_1 = i64toi32_i32$3;
     $468$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $466$hi;
     i64toi32_i32$1 = $466_1;
     i64toi32_i32$3 = $468$hi;
     i64toi32_i32$2 = $468_1;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $469_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $469$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
     $471_1 = i64toi32_i32$3;
     $471$hi = i64toi32_i32$1;
     i64toi32_i32$5 = (i64toi32_i32$5 + 48 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $475_1 = i64toi32_i32$1;
     $475$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $471$hi;
     i64toi32_i32$5 = $471_1;
     i64toi32_i32$1 = $475$hi;
     i64toi32_i32$2 = $475_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     $477_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = 0;
     $478$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $469$hi;
     i64toi32_i32$2 = $469_1;
     i64toi32_i32$1 = $478$hi;
     i64toi32_i32$5 = $477_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $1_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$3 = ($5_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $483_1 = i64toi32_i32$1;
     $483$hi = i64toi32_i32$2;
     i64toi32_i32$3 = ($5_1 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $487_1 = i64toi32_i32$2;
     $487$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $483$hi;
     i64toi32_i32$3 = $483_1;
     i64toi32_i32$2 = $487$hi;
     i64toi32_i32$5 = $487_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $5_1 + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$2;
     break label$14;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 48;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     $269_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
     $269_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $496$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$2 = $11_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$5 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $498_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    $498$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $496$hi;
    i64toi32_i32$3 = $269_1;
    i64toi32_i32$2 = $498$hi;
    i64toi32_i32$5 = $498_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$5 = $14_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $14_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $14$hi = i64toi32_i32$3;
   label$17 : {
    i64toi32_i32$3 = $1$hi;
    $504_1 = !($1_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$1 | 0)) {
     $272_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $273_1 = 0
      } else {
       $273_1 = 1
      }
      $274_1 = $273_1;
     } else {
      $274_1 = 0
     }
     $272_1 = $274_1;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0 ? $504_1 : $272_1) {
     break label$17
    }
    i64toi32_i32$5 = $14$hi;
    $510_1 = $14_1;
    $510$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4_1;
    $515_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $516$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $510$hi;
    i64toi32_i32$3 = $510_1;
    i64toi32_i32$4 = $516$hi;
    i64toi32_i32$1 = $515_1;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $14_1 = i64toi32_i32$2;
    $14$hi = i64toi32_i32$0;
    break label$1;
   }
   label$18 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    $520_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
    $520$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$5 = $520$hi;
    i64toi32_i32$1 = $520_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0) {
     break label$18
    }
    i64toi32_i32$3 = $4$hi;
    $1_1 = $4_1;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $14$hi;
   $524_1 = $14_1;
   $524$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $527_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $527$hi = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $527$hi;
   i64toi32_i32$0 = $527_1;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$4;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$0 = $4_1;
   $531_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = 0;
   $532$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $524$hi;
   i64toi32_i32$0 = $524_1;
   i64toi32_i32$2 = $532$hi;
   i64toi32_i32$3 = $531_1;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $14_1 = i64toi32_i32$1;
   $14$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $14$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $14_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$4;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $900($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $901() {
  return 0 | 0;
 }
 
 function $902() {
  return 0 | 0;
 }
 
 function $903($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $904($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $905($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $2_1 = 0, $2$hi = 0, $16_1 = 0, $17_1 = 0, $5_1 = 0, $5$hi = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0, $18$hi = 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $5_1 = $1_1;
   $5$hi = i64toi32_i32$0;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$0 = 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$3 = (($1_1 | 32 | 0) + 113 | 0) & 63 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $16_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $16_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   i64toi32_i32$0 = $16_1;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
   $14_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 16414 - $1_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $18$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$2 = $14_1;
   i64toi32_i32$1 = $18$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $2_1 = i64toi32_i32$4;
   $2$hi = i64toi32_i32$5;
  }
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$5 = 0;
  HEAP32[i64toi32_i32$2 >> 2] = 0;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
 }
 
 function $906($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $6_1 = 0, $6$hi = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $50_1 = 0, $50$hi = 0, $54$hi = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $6_1 = $26_1;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $6_1 = $28_1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   $32_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $33_1 = $5_1;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $37_1 = Math_clz32($4_1) + 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($30_1);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   $900($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50_1;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $907($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $17_1 = 0, $20_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $896($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $17_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 16 | 0;
 }
 
 function $908($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAP32[(0 + 23356 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[(0 + 23360 | 0) >> 2] = $1_1;
   HEAP32[(0 + 23356 | 0) >> 2] = $0_1;
  }
 }
 
 function $909($0_1) {
  $0_1 = $0_1 | 0;
  $940($0_1 | 0);
 }
 
 function $910($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $911($0_1) {
  $0_1 = $0_1 | 0;
  $910($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $912($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $913($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $914($0_1) {
  $0_1 = $0_1 | 0;
  $911($0_1 | 0) | 0;
  $909($0_1 | 0);
 }
 
 function $915($0_1) {
  $0_1 = $0_1 | 0;
  $911($0_1 | 0) | 0;
  $909($0_1 | 0);
 }
 
 function $916($0_1) {
  $0_1 = $0_1 | 0;
  $911($0_1 | 0) | 0;
  $909($0_1 | 0);
 }
 
 function $917($0_1) {
  $0_1 = $0_1 | 0;
  $911($0_1 | 0) | 0;
  $909($0_1 | 0);
 }
 
 function $918($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $919($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $919($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return $920($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !($876($921($0_1 | 0) | 0 | 0, $921($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $920($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
 }
 
 function $921($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $922($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   if ($919($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $4_1 = 0;
   $1_1 = $923($1_1 | 0, 19844 | 0, 19892 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($3_1 + 20 | 0) >> 2] = -1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   $952($3_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = 1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
   label$2 : {
    $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
    if (($4_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   }
   $4_1 = ($4_1 | 0) == (1 | 0);
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $923($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($5_1 + -4 | 0) >> 2] | 0;
  $5_1 = HEAP32[($5_1 + -8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
  $1_1 = 0;
  $952($4_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
  $0_1 = $0_1 + $5_1 | 0;
  label$1 : {
   label$2 : {
    if (!($919($6_1 | 0, $2_1 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, $0_1, 1, 0);
    $1_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0_1 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, 1, 0);
   label$3 : {
    switch (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) {
    case 0:
     $1_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4_1 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   label$5 : {
    if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$5
    }
    if (HEAP32[($4_1 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $1_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 64 | 0;
  return $1_1 | 0;
 }
 
 function $924($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   return;
  }
  label$2 : {
   label$3 : {
    if (($4_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $925($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($919($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $924($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $926($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($919($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $924($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $927($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 24 | 0) {
     break label$2
    }
    $3_1 = 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $923($1_1 | 0, 19844 | 0, 19940 | 0, 0 | 0) | 0;
    if (!$4_1) {
     break label$1
    }
    $3_1 = ((HEAPU8[($4_1 + 8 | 0) >> 0] | 0) & 24 | 0 | 0) != (0 | 0);
   }
   $3_1 = $919($0_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $928($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!($919($1_1 | 0, 20208 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = 0;
    $4_1 = 1;
    break label$1;
   }
   label$3 : {
    if (!($927($0_1 | 0, $1_1 | 0, $1_1 | 0) | 0)) {
     break label$3
    }
    $4_1 = 1;
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    break label$1;
   }
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    $4_1 = 0;
    $1_1 = $923($1_1 | 0, 19844 | 0, 19988 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    label$5 : {
     $5_1 = HEAP32[$2_1 >> 2] | 0;
     if (!$5_1) {
      break label$5
     }
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    }
    $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($5_1 & ($6_1 ^ -1 | 0) | 0) & 7 | 0) {
     break label$1
    }
    if ((($5_1 ^ -1 | 0) & $6_1 | 0) & 96 | 0) {
     break label$1
    }
    $4_1 = 1;
    if ($919(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0) {
     break label$1
    }
    label$6 : {
     if (!($919(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 20196 | 0, 0 | 0) | 0)) {
      break label$6
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$1
     }
     $4_1 = !($923($1_1 | 0, 19844 | 0, 20040 | 0, 0 | 0) | 0);
     break label$1;
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    $4_1 = 0;
    label$7 : {
     $5_1 = $923($5_1 | 0, 19844 | 0, 19988 | 0, 0 | 0) | 0;
     if (!$5_1) {
      break label$7
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4_1 = $929($5_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$1
    }
    $4_1 = 0;
    label$8 : {
     $5_1 = $923($5_1 | 0, 19844 | 0, 20100 | 0, 0 | 0) | 0;
     if (!$5_1) {
      break label$8
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$1
     }
     $4_1 = $930($5_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
    $4_1 = 0;
    $0_1 = $923($0_1 | 0, 19844 | 0, 19892 | 0, 0 | 0) | 0;
    if (!$0_1) {
     break label$1
    }
    $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = 0;
    $1_1 = $923($1_1 | 0, 19844 | 0, 19892 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    HEAP32[($3_1 + 20 | 0) >> 2] = -1;
    HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
    $952($3_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
    HEAP32[($3_1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
    $1_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
    label$9 : {
     if (!(HEAP32[$2_1 >> 2] | 0)) {
      break label$9
     }
     if (($1_1 | 0) != (1 | 0)) {
      break label$9
     }
     HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
    }
    $4_1 = ($1_1 | 0) == (1 | 0);
    break label$1;
   }
   $4_1 = 0;
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $929($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     return 0 | 0;
    }
    $2_1 = 0;
    $1_1 = $923($1_1 | 0, 19844 | 0, 19988 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
     break label$1
    }
    label$4 : {
     if (!($919(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
      break label$4
     }
     return 1 | 0;
    }
    if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$1
    }
    label$5 : {
     $3_1 = $923($3_1 | 0, 19844 | 0, 19988 | 0, 0 | 0) | 0;
     if (!$3_1) {
      break label$5
     }
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     $0_1 = $3_1;
     continue label$2;
    }
    break label$2;
   };
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   $2_1 = 0;
   $0_1 = $923($0_1 | 0, 19844 | 0, 20100 | 0, 0 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $2_1 = $930($0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $930($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = $923($1_1 | 0, 19844 | 0, 20100 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & ((HEAP32[($0_1 + 8 | 0) >> 2] | 0) ^ -1 | 0) | 0) {
    break label$1
   }
   if (!($919(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   return $919(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0, 0 | 0) | 0 | 0;
  }
  return 0 | 0;
 }
 
 function $931($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = 1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
    if (($4_1 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   label$3 : {
    if (($3_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    label$4 : {
     $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     if (($3_1 | 0) != (2 | 0)) {
      break label$4
     }
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     $3_1 = $4_1;
    }
    if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$1
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $932($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $933($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($919($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $932($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($919($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $934($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($919($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $932($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($919($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$4
     }
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $935($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($919($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $931($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $936($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($919($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $931($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $937($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $3_1 + 12 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $938($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return ($923($0_1 | 0, 19844 | 0, 19988 | 0, 0 | 0) | 0 | 0) != (0 | 0) | 0;
 }
 
 function $939($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $12_1 = 0, $9_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $11_1 = 0, $1_1 = 0, $83_1 = 0, $96_1 = 0, $107_1 = 0, $115_1 = 0, $123_1 = 0, $217_1 = 0, $228_1 = 0, $236_1 = 0, $244_1 = 0, $279_1 = 0, $354_1 = 0, $361_1 = 0, $368_1 = 0, $459_1 = 0, $470_1 = 0, $478_1 = 0, $486_1 = 0, $1194 = 0, $1201 = 0, $1208 = 0, $1330 = 0, $1332 = 0, $1393 = 0, $1400 = 0, $1407 = 0, $1640 = 0, $1647 = 0, $1654 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               if ($0_1 >>> 0 > 244 >>> 0) {
                break label$13
               }
               label$14 : {
                $2_1 = HEAP32[(0 + 23364 | 0) >> 2] | 0;
                $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
                $4_1 = $3_1 >>> 3 | 0;
                $0_1 = $2_1 >>> $4_1 | 0;
                if (!($0_1 & 3 | 0)) {
                 break label$14
                }
                $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
                $5_1 = $3_1 << 3 | 0;
                $4_1 = HEAP32[($5_1 + 23412 | 0) >> 2] | 0;
                $0_1 = $4_1 + 8 | 0;
                label$15 : {
                 label$16 : {
                  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $5_1 = $5_1 + 23404 | 0;
                  if (($6_1 | 0) != ($5_1 | 0)) {
                   break label$16
                  }
                  HEAP32[(0 + 23364 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
                  break label$15;
                 }
                 HEAP32[(0 + 23380 | 0) >> 2] | 0;
                 HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
                 HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
                }
                $6_1 = $3_1 << 3 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
                $4_1 = $4_1 + $6_1 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
                break label$1;
               }
               $7_1 = HEAP32[(0 + 23372 | 0) >> 2] | 0;
               if ($3_1 >>> 0 <= $7_1 >>> 0) {
                break label$12
               }
               label$17 : {
                if (!$0_1) {
                 break label$17
                }
                label$18 : {
                 label$19 : {
                  $83_1 = $0_1 << $4_1 | 0;
                  $0_1 = 2 << $4_1 | 0;
                  $0_1 = $83_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                  $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                  $96_1 = $0_1;
                  $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                  $4_1 = $96_1 >>> $0_1 | 0;
                  $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                  $107_1 = $6_1 | $0_1 | 0;
                  $0_1 = $4_1 >>> $6_1 | 0;
                  $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                  $115_1 = $107_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                  $123_1 = $115_1 | $4_1 | 0;
                  $0_1 = $0_1 >>> $4_1 | 0;
                  $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                  $6_1 = ($123_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                  $5_1 = $6_1 << 3 | 0;
                  $4_1 = HEAP32[($5_1 + 23412 | 0) >> 2] | 0;
                  $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                  $5_1 = $5_1 + 23404 | 0;
                  if (($0_1 | 0) != ($5_1 | 0)) {
                   break label$19
                  }
                  $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
                  HEAP32[(0 + 23364 | 0) >> 2] = $2_1;
                  break label$18;
                 }
                 HEAP32[(0 + 23380 | 0) >> 2] | 0;
                 HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
                 HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
                }
                $0_1 = $4_1 + 8 | 0;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                $5_1 = $4_1 + $3_1 | 0;
                $8_1 = $6_1 << 3 | 0;
                $6_1 = $8_1 - $3_1 | 0;
                HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
                HEAP32[($4_1 + $8_1 | 0) >> 2] = $6_1;
                label$20 : {
                 if (!$7_1) {
                  break label$20
                 }
                 $8_1 = $7_1 >>> 3 | 0;
                 $3_1 = ($8_1 << 3 | 0) + 23404 | 0;
                 $4_1 = HEAP32[(0 + 23384 | 0) >> 2] | 0;
                 label$21 : {
                  label$22 : {
                   $8_1 = 1 << $8_1 | 0;
                   if ($2_1 & $8_1 | 0) {
                    break label$22
                   }
                   HEAP32[(0 + 23364 | 0) >> 2] = $2_1 | $8_1 | 0;
                   $8_1 = $3_1;
                   break label$21;
                  }
                  $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                 }
                 HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                 HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                 HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                 HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
                }
                HEAP32[(0 + 23384 | 0) >> 2] = $5_1;
                HEAP32[(0 + 23372 | 0) >> 2] = $6_1;
                break label$1;
               }
               $9_1 = HEAP32[(0 + 23368 | 0) >> 2] | 0;
               if (!$9_1) {
                break label$12
               }
               $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
               $217_1 = $0_1;
               $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
               $4_1 = $217_1 >>> $0_1 | 0;
               $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
               $228_1 = $6_1 | $0_1 | 0;
               $0_1 = $4_1 >>> $6_1 | 0;
               $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
               $236_1 = $228_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
               $244_1 = $236_1 | $4_1 | 0;
               $0_1 = $0_1 >>> $4_1 | 0;
               $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
               $5_1 = HEAP32[(((($244_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 23668 | 0) >> 2] | 0;
               $4_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $6_1 = $5_1;
               label$23 : {
                label$24 : while (1) {
                 label$25 : {
                  $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                  if ($0_1) {
                   break label$25
                  }
                  $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                  if (!$0_1) {
                   break label$23
                  }
                 }
                 $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                 $279_1 = $6_1;
                 $6_1 = $6_1 >>> 0 < $4_1 >>> 0;
                 $4_1 = $6_1 ? $279_1 : $4_1;
                 $5_1 = $6_1 ? $0_1 : $5_1;
                 $6_1 = $0_1;
                 continue label$24;
                };
               }
               $10_1 = $5_1 + $3_1 | 0;
               if ($10_1 >>> 0 <= $5_1 >>> 0) {
                break label$11
               }
               $11_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
               label$26 : {
                $8_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
                if (($8_1 | 0) == ($5_1 | 0)) {
                 break label$26
                }
                label$27 : {
                 $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                 if ((HEAP32[(0 + 23380 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                  break label$27
                 }
                 HEAP32[($0_1 + 12 | 0) >> 2] | 0;
                }
                HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
                HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
                break label$2;
               }
               label$28 : {
                $6_1 = $5_1 + 20 | 0;
                $0_1 = HEAP32[$6_1 >> 2] | 0;
                if ($0_1) {
                 break label$28
                }
                $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$10
                }
                $6_1 = $5_1 + 16 | 0;
               }
               label$29 : while (1) {
                $12_1 = $6_1;
                $8_1 = $0_1;
                $6_1 = $0_1 + 20 | 0;
                $0_1 = HEAP32[$6_1 >> 2] | 0;
                if ($0_1) {
                 continue label$29
                }
                $6_1 = $8_1 + 16 | 0;
                $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$29
                }
                break label$29;
               };
               HEAP32[$12_1 >> 2] = 0;
               break label$2;
              }
              $3_1 = -1;
              if ($0_1 >>> 0 > -65 >>> 0) {
               break label$12
              }
              $0_1 = $0_1 + 11 | 0;
              $3_1 = $0_1 & -8 | 0;
              $7_1 = HEAP32[(0 + 23368 | 0) >> 2] | 0;
              if (!$7_1) {
               break label$12
              }
              $12_1 = 31;
              label$30 : {
               if ($3_1 >>> 0 > 16777215 >>> 0) {
                break label$30
               }
               $0_1 = $0_1 >>> 8 | 0;
               $354_1 = $0_1;
               $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
               $4_1 = $354_1 << $0_1 | 0;
               $361_1 = $4_1;
               $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
               $6_1 = $361_1 << $4_1 | 0;
               $368_1 = $6_1;
               $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
               $0_1 = (($368_1 << $6_1 | 0) >>> 15 | 0) - ($4_1 | $0_1 | 0 | $6_1 | 0) | 0;
               $12_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
              }
              $4_1 = 0 - $3_1 | 0;
              label$31 : {
               label$32 : {
                label$33 : {
                 label$34 : {
                  $6_1 = HEAP32[(($12_1 << 2 | 0) + 23668 | 0) >> 2] | 0;
                  if ($6_1) {
                   break label$34
                  }
                  $0_1 = 0;
                  $8_1 = 0;
                  break label$33;
                 }
                 $0_1 = 0;
                 $5_1 = $3_1 << (($12_1 | 0) == (31 | 0) ? 0 : 25 - ($12_1 >>> 1 | 0) | 0) | 0;
                 $8_1 = 0;
                 label$35 : while (1) {
                  label$36 : {
                   $2_1 = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                   if ($2_1 >>> 0 >= $4_1 >>> 0) {
                    break label$36
                   }
                   $4_1 = $2_1;
                   $8_1 = $6_1;
                   if ($4_1) {
                    break label$36
                   }
                   $4_1 = 0;
                   $8_1 = $6_1;
                   $0_1 = $6_1;
                   break label$32;
                  }
                  $2_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                  $6_1 = HEAP32[(($6_1 + (($5_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                  $0_1 = $2_1 ? (($2_1 | 0) == ($6_1 | 0) ? $0_1 : $2_1) : $0_1;
                  $5_1 = $5_1 << 1 | 0;
                  if ($6_1) {
                   continue label$35
                  }
                  break label$35;
                 };
                }
                label$37 : {
                 if ($0_1 | $8_1 | 0) {
                  break label$37
                 }
                 $0_1 = 2 << $12_1 | 0;
                 $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                 if (!$0_1) {
                  break label$12
                 }
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $459_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $6_1 = $459_1 >>> $0_1 | 0;
                 $5_1 = ($6_1 >>> 5 | 0) & 8 | 0;
                 $470_1 = $5_1 | $0_1 | 0;
                 $0_1 = $6_1 >>> $5_1 | 0;
                 $6_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $478_1 = $470_1 | $6_1 | 0;
                 $0_1 = $0_1 >>> $6_1 | 0;
                 $6_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $486_1 = $478_1 | $6_1 | 0;
                 $0_1 = $0_1 >>> $6_1 | 0;
                 $6_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $0_1 = HEAP32[(((($486_1 | $6_1 | 0) + ($0_1 >>> $6_1 | 0) | 0) << 2 | 0) + 23668 | 0) >> 2] | 0;
                }
                if (!$0_1) {
                 break label$31
                }
               }
               label$38 : while (1) {
                $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $5_1 = $2_1 >>> 0 < $4_1 >>> 0;
                label$39 : {
                 $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                 if ($6_1) {
                  break label$39
                 }
                 $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
                }
                $4_1 = $5_1 ? $2_1 : $4_1;
                $8_1 = $5_1 ? $0_1 : $8_1;
                $0_1 = $6_1;
                if ($0_1) {
                 continue label$38
                }
                break label$38;
               };
              }
              if (!$8_1) {
               break label$12
              }
              if ($4_1 >>> 0 >= ((HEAP32[(0 + 23372 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
               break label$12
              }
              $12_1 = $8_1 + $3_1 | 0;
              if ($12_1 >>> 0 <= $8_1 >>> 0) {
               break label$11
              }
              $9_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
              label$40 : {
               $5_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
               if (($5_1 | 0) == ($8_1 | 0)) {
                break label$40
               }
               label$41 : {
                $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
                if ((HEAP32[(0 + 23380 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                 break label$41
                }
                HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
               HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
               break label$3;
              }
              label$42 : {
               $6_1 = $8_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                break label$42
               }
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$9
               }
               $6_1 = $8_1 + 16 | 0;
              }
              label$43 : while (1) {
               $2_1 = $6_1;
               $5_1 = $0_1;
               $6_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                continue label$43
               }
               $6_1 = $5_1 + 16 | 0;
               $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$43
               }
               break label$43;
              };
              HEAP32[$2_1 >> 2] = 0;
              break label$3;
             }
             label$44 : {
              $0_1 = HEAP32[(0 + 23372 | 0) >> 2] | 0;
              if ($0_1 >>> 0 < $3_1 >>> 0) {
               break label$44
              }
              $4_1 = HEAP32[(0 + 23384 | 0) >> 2] | 0;
              label$45 : {
               label$46 : {
                $6_1 = $0_1 - $3_1 | 0;
                if ($6_1 >>> 0 < 16 >>> 0) {
                 break label$46
                }
                HEAP32[(0 + 23372 | 0) >> 2] = $6_1;
                $5_1 = $4_1 + $3_1 | 0;
                HEAP32[(0 + 23384 | 0) >> 2] = $5_1;
                HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
                HEAP32[($4_1 + $0_1 | 0) >> 2] = $6_1;
                HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
                break label$45;
               }
               HEAP32[(0 + 23384 | 0) >> 2] = 0;
               HEAP32[(0 + 23372 | 0) >> 2] = 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
               $0_1 = $4_1 + $0_1 | 0;
               HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              }
              $0_1 = $4_1 + 8 | 0;
              break label$1;
             }
             label$47 : {
              $5_1 = HEAP32[(0 + 23376 | 0) >> 2] | 0;
              if ($5_1 >>> 0 <= $3_1 >>> 0) {
               break label$47
              }
              $4_1 = $5_1 - $3_1 | 0;
              HEAP32[(0 + 23376 | 0) >> 2] = $4_1;
              $0_1 = HEAP32[(0 + 23388 | 0) >> 2] | 0;
              $6_1 = $0_1 + $3_1 | 0;
              HEAP32[(0 + 23388 | 0) >> 2] = $6_1;
              HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
              $0_1 = $0_1 + 8 | 0;
              break label$1;
             }
             label$48 : {
              label$49 : {
               if (!(HEAP32[(0 + 23836 | 0) >> 2] | 0)) {
                break label$49
               }
               $4_1 = HEAP32[(0 + 23844 | 0) >> 2] | 0;
               break label$48;
              }
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = -1;
              HEAP32[(i64toi32_i32$1 + 23848 | 0) >> 2] = -1;
              HEAP32[(i64toi32_i32$1 + 23852 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 4096;
              HEAP32[(i64toi32_i32$1 + 23840 | 0) >> 2] = 4096;
              HEAP32[(i64toi32_i32$1 + 23844 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(0 + 23836 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
              HEAP32[(0 + 23856 | 0) >> 2] = 0;
              HEAP32[(0 + 23808 | 0) >> 2] = 0;
              $4_1 = 4096;
             }
             $0_1 = 0;
             $7_1 = $3_1 + 47 | 0;
             $2_1 = $4_1 + $7_1 | 0;
             $12_1 = 0 - $4_1 | 0;
             $8_1 = $2_1 & $12_1 | 0;
             if ($8_1 >>> 0 <= $3_1 >>> 0) {
              break label$1
             }
             $0_1 = 0;
             label$50 : {
              $4_1 = HEAP32[(0 + 23804 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$50
              }
              $6_1 = HEAP32[(0 + 23796 | 0) >> 2] | 0;
              $9_1 = $6_1 + $8_1 | 0;
              if ($9_1 >>> 0 <= $6_1 >>> 0) {
               break label$1
              }
              if ($9_1 >>> 0 > $4_1 >>> 0) {
               break label$1
              }
             }
             if ((HEAPU8[(0 + 23808 | 0) >> 0] | 0) & 4 | 0) {
              break label$6
             }
             label$51 : {
              label$52 : {
               label$53 : {
                $4_1 = HEAP32[(0 + 23388 | 0) >> 2] | 0;
                if (!$4_1) {
                 break label$53
                }
                $0_1 = 23812;
                label$54 : while (1) {
                 label$55 : {
                  $6_1 = HEAP32[$0_1 >> 2] | 0;
                  if ($6_1 >>> 0 > $4_1 >>> 0) {
                   break label$55
                  }
                  if (($6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                   break label$52
                  }
                 }
                 $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                 if ($0_1) {
                  continue label$54
                 }
                 break label$54;
                };
               }
               $5_1 = $944(0 | 0) | 0;
               if (($5_1 | 0) == (-1 | 0)) {
                break label$7
               }
               $2_1 = $8_1;
               label$56 : {
                $0_1 = HEAP32[(0 + 23840 | 0) >> 2] | 0;
                $4_1 = $0_1 + -1 | 0;
                if (!($4_1 & $5_1 | 0)) {
                 break label$56
                }
                $2_1 = ($8_1 - $5_1 | 0) + (($4_1 + $5_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
               }
               if ($2_1 >>> 0 <= $3_1 >>> 0) {
                break label$7
               }
               if ($2_1 >>> 0 > 2147483646 >>> 0) {
                break label$7
               }
               label$57 : {
                $0_1 = HEAP32[(0 + 23804 | 0) >> 2] | 0;
                if (!$0_1) {
                 break label$57
                }
                $4_1 = HEAP32[(0 + 23796 | 0) >> 2] | 0;
                $6_1 = $4_1 + $2_1 | 0;
                if ($6_1 >>> 0 <= $4_1 >>> 0) {
                 break label$7
                }
                if ($6_1 >>> 0 > $0_1 >>> 0) {
                 break label$7
                }
               }
               $0_1 = $944($2_1 | 0) | 0;
               if (($0_1 | 0) != ($5_1 | 0)) {
                break label$51
               }
               break label$5;
              }
              $2_1 = ($2_1 - $5_1 | 0) & $12_1 | 0;
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              $5_1 = $944($2_1 | 0) | 0;
              if (($5_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
               break label$8
              }
              $0_1 = $5_1;
             }
             label$58 : {
              if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
               break label$58
              }
              if (($0_1 | 0) == (-1 | 0)) {
               break label$58
              }
              label$59 : {
               $4_1 = HEAP32[(0 + 23844 | 0) >> 2] | 0;
               $4_1 = (($7_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
               if ($4_1 >>> 0 <= 2147483646 >>> 0) {
                break label$59
               }
               $5_1 = $0_1;
               break label$5;
              }
              label$60 : {
               if (($944($4_1 | 0) | 0 | 0) == (-1 | 0)) {
                break label$60
               }
               $2_1 = $4_1 + $2_1 | 0;
               $5_1 = $0_1;
               break label$5;
              }
              $944(0 - $2_1 | 0 | 0) | 0;
              break label$7;
             }
             $5_1 = $0_1;
             if (($0_1 | 0) != (-1 | 0)) {
              break label$5
             }
             break label$7;
            }
            abort();
           }
           $8_1 = 0;
           break label$2;
          }
          $5_1 = 0;
          break label$3;
         }
         if (($5_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 23808 | 0) >> 2] = HEAP32[(0 + 23808 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $5_1 = $944($8_1 | 0) | 0;
       $0_1 = $944(0 | 0) | 0;
       if ($5_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       if (($5_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       $2_1 = $0_1 - $5_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 23796 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 23796 | 0) >> 2] = $0_1;
      label$61 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 23800 | 0) >> 2] | 0) >>> 0) {
        break label$61
       }
       HEAP32[(0 + 23800 | 0) >> 2] = $0_1;
      }
      label$62 : {
       label$63 : {
        label$64 : {
         label$65 : {
          $4_1 = HEAP32[(0 + 23388 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$65
          }
          $0_1 = 23812;
          label$66 : while (1) {
           $6_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == ($6_1 + $8_1 | 0 | 0)) {
            break label$64
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$66
           }
           break label$63;
          };
         }
         label$67 : {
          label$68 : {
           $0_1 = HEAP32[(0 + 23380 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$68
           }
           if ($5_1 >>> 0 >= $0_1 >>> 0) {
            break label$67
           }
          }
          HEAP32[(0 + 23380 | 0) >> 2] = $5_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 23816 | 0) >> 2] = $2_1;
         HEAP32[(0 + 23812 | 0) >> 2] = $5_1;
         HEAP32[(0 + 23396 | 0) >> 2] = -1;
         HEAP32[(0 + 23400 | 0) >> 2] = HEAP32[(0 + 23836 | 0) >> 2] | 0;
         HEAP32[(0 + 23824 | 0) >> 2] = 0;
         label$69 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $6_1 = $4_1 + 23404 | 0;
          HEAP32[($4_1 + 23412 | 0) >> 2] = $6_1;
          HEAP32[($4_1 + 23416 | 0) >> 2] = $6_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$69
          }
          break label$69;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
         $6_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 23376 | 0) >> 2] = $6_1;
         $4_1 = $5_1 + $4_1 | 0;
         HEAP32[(0 + 23388 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
         HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 23392 | 0) >> 2] = HEAP32[(0 + 23852 | 0) >> 2] | 0;
         break label$62;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$63
        }
        if ($5_1 >>> 0 <= $4_1 >>> 0) {
         break label$63
        }
        if ($6_1 >>> 0 > $4_1 >>> 0) {
         break label$63
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $6_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 23388 | 0) >> 2] = $6_1;
        $5_1 = (HEAP32[(0 + 23376 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $5_1 - $0_1 | 0;
        HEAP32[(0 + 23376 | 0) >> 2] = $0_1;
        HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $5_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 23392 | 0) >> 2] = HEAP32[(0 + 23852 | 0) >> 2] | 0;
        break label$62;
       }
       label$70 : {
        $8_1 = HEAP32[(0 + 23380 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= $8_1 >>> 0) {
         break label$70
        }
        HEAP32[(0 + 23380 | 0) >> 2] = $5_1;
        $8_1 = $5_1;
       }
       $6_1 = $5_1 + $2_1 | 0;
       $0_1 = 23812;
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            label$76 : {
             label$77 : {
              label$78 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($6_1 | 0)) {
                break label$77
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$78
               }
               break label$76;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$75
             }
            }
            $0_1 = 23812;
            label$79 : while (1) {
             label$80 : {
              $6_1 = HEAP32[$0_1 >> 2] | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$80
              }
              $6_1 = $6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$74
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$79;
            };
           }
           HEAP32[$0_1 >> 2] = $5_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $12_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($12_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $5_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           $0_1 = ($5_1 - $12_1 | 0) - $3_1 | 0;
           $6_1 = $12_1 + $3_1 | 0;
           label$81 : {
            if (($4_1 | 0) != ($5_1 | 0)) {
             break label$81
            }
            HEAP32[(0 + 23388 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 23376 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 23376 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$72;
           }
           label$82 : {
            if ((HEAP32[(0 + 23384 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
             break label$82
            }
            HEAP32[(0 + 23384 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 23372 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 23372 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
            break label$72;
           }
           label$83 : {
            $4_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
            if (($4_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$83
            }
            $7_1 = $4_1 & -8 | 0;
            label$84 : {
             label$85 : {
              if ($4_1 >>> 0 > 255 >>> 0) {
               break label$85
              }
              $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
              label$86 : {
               $2_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
               $9_1 = $4_1 >>> 3 | 0;
               $4_1 = ($9_1 << 3 | 0) + 23404 | 0;
               if (($2_1 | 0) == ($4_1 | 0)) {
                break label$86
               }
              }
              label$87 : {
               if (($3_1 | 0) != ($2_1 | 0)) {
                break label$87
               }
               HEAP32[(0 + 23364 | 0) >> 2] = (HEAP32[(0 + 23364 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
               break label$84;
              }
              label$88 : {
               if (($3_1 | 0) == ($4_1 | 0)) {
                break label$88
               }
              }
              HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
              HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
              break label$84;
             }
             $9_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
             label$89 : {
              label$90 : {
               $2_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
               if (($2_1 | 0) == ($5_1 | 0)) {
                break label$90
               }
               label$91 : {
                $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                if ($8_1 >>> 0 > $4_1 >>> 0) {
                 break label$91
                }
                HEAP32[($4_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
               HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
               break label$89;
              }
              label$92 : {
               $4_1 = $5_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$92
               }
               $4_1 = $5_1 + 16 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$92
               }
               $2_1 = 0;
               break label$89;
              }
              label$93 : while (1) {
               $8_1 = $4_1;
               $2_1 = $3_1;
               $4_1 = $3_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                continue label$93
               }
               $4_1 = $2_1 + 16 | 0;
               $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
               if ($3_1) {
                continue label$93
               }
               break label$93;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$84
             }
             label$94 : {
              label$95 : {
               $3_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
               $4_1 = ($3_1 << 2 | 0) + 23668 | 0;
               if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
                break label$95
               }
               HEAP32[$4_1 >> 2] = $2_1;
               if ($2_1) {
                break label$94
               }
               HEAP32[(0 + 23368 | 0) >> 2] = (HEAP32[(0 + 23368 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
               break label$84;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
              if (!$2_1) {
               break label$84
              }
             }
             HEAP32[($2_1 + 24 | 0) >> 2] = $9_1;
             label$96 : {
              $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$96
              }
              HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
             }
             $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$84
             }
             HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
             HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
            }
            $0_1 = $7_1 + $0_1 | 0;
            $5_1 = $5_1 + $7_1 | 0;
           }
           HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
           HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
           label$97 : {
            if ($0_1 >>> 0 > 255 >>> 0) {
             break label$97
            }
            $4_1 = $0_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 23404 | 0;
            label$98 : {
             label$99 : {
              $3_1 = HEAP32[(0 + 23364 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($3_1 & $4_1 | 0) {
               break label$99
              }
              HEAP32[(0 + 23364 | 0) >> 2] = $3_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$98;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
            HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
            break label$72;
           }
           $4_1 = 31;
           label$100 : {
            if ($0_1 >>> 0 > 16777215 >>> 0) {
             break label$100
            }
            $4_1 = $0_1 >>> 8 | 0;
            $1194 = $4_1;
            $4_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $3_1 = $1194 << $4_1 | 0;
            $1201 = $3_1;
            $3_1 = (($3_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $5_1 = $1201 << $3_1 | 0;
            $1208 = $5_1;
            $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $4_1 = (($1208 << $5_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $5_1 | 0) | 0;
            $4_1 = ($4_1 << 1 | 0 | (($0_1 >>> ($4_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($6_1 + 28 | 0) >> 2] = $4_1;
           i64toi32_i32$1 = $6_1;
           i64toi32_i32$0 = 0;
           HEAP32[($6_1 + 16 | 0) >> 2] = 0;
           HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $3_1 = ($4_1 << 2 | 0) + 23668 | 0;
           label$101 : {
            label$102 : {
             $5_1 = HEAP32[(0 + 23368 | 0) >> 2] | 0;
             $8_1 = 1 << $4_1 | 0;
             if ($5_1 & $8_1 | 0) {
              break label$102
             }
             HEAP32[(0 + 23368 | 0) >> 2] = $5_1 | $8_1 | 0;
             HEAP32[$3_1 >> 2] = $6_1;
             HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
             break label$101;
            }
            $4_1 = $0_1 << (($4_1 | 0) == (31 | 0) ? 0 : 25 - ($4_1 >>> 1 | 0) | 0) | 0;
            $5_1 = HEAP32[$3_1 >> 2] | 0;
            label$103 : while (1) {
             $3_1 = $5_1;
             if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
              break label$73
             }
             $5_1 = $4_1 >>> 29 | 0;
             $4_1 = $4_1 << 1 | 0;
             $8_1 = ($3_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
             $5_1 = HEAP32[$8_1 >> 2] | 0;
             if ($5_1) {
              continue label$103
             }
             break label$103;
            };
            HEAP32[$8_1 >> 2] = $6_1;
            HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
           }
           HEAP32[($6_1 + 12 | 0) >> 2] = $6_1;
           HEAP32[($6_1 + 8 | 0) >> 2] = $6_1;
           break label$72;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0;
          $12_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 23376 | 0) >> 2] = $12_1;
          $8_1 = $5_1 + $8_1 | 0;
          HEAP32[(0 + 23388 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $12_1 | 1 | 0;
          HEAP32[(($5_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 23392 | 0) >> 2] = HEAP32[(0 + 23852 | 0) >> 2] | 0;
          $0_1 = ($6_1 + (($6_1 + -39 | 0) & 7 | 0 ? (39 - $6_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 23820 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 23824 | 0) >> 2] | 0;
          $1330 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1330;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 23812 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 23816 | 0) >> 2] | 0;
          $1332 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1332;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 23820 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 23816 | 0) >> 2] = $2_1;
          HEAP32[(0 + 23812 | 0) >> 2] = $5_1;
          HEAP32[(0 + 23824 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$104 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $5_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($6_1 >>> 0 > $5_1 >>> 0) {
            continue label$104
           }
           break label$104;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$62
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$105 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$105
           }
           $6_1 = $2_1 >>> 3 | 0;
           $0_1 = ($6_1 << 3 | 0) + 23404 | 0;
           label$106 : {
            label$107 : {
             $5_1 = HEAP32[(0 + 23364 | 0) >> 2] | 0;
             $6_1 = 1 << $6_1 | 0;
             if ($5_1 & $6_1 | 0) {
              break label$107
             }
             HEAP32[(0 + 23364 | 0) >> 2] = $5_1 | $6_1 | 0;
             $6_1 = $0_1;
             break label$106;
            }
            $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($6_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
           break label$62;
          }
          $0_1 = 31;
          label$108 : {
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$108
           }
           $0_1 = $2_1 >>> 8 | 0;
           $1393 = $0_1;
           $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $6_1 = $1393 << $0_1 | 0;
           $1400 = $6_1;
           $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $5_1 = $1400 << $6_1 | 0;
           $1407 = $5_1;
           $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1407 << $5_1 | 0) >>> 15 | 0) - ($6_1 | $0_1 | 0 | $5_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $6_1 = ($0_1 << 2 | 0) + 23668 | 0;
          label$109 : {
           label$110 : {
            $5_1 = HEAP32[(0 + 23368 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($5_1 & $8_1 | 0) {
             break label$110
            }
            HEAP32[(0 + 23368 | 0) >> 2] = $5_1 | $8_1 | 0;
            HEAP32[$6_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
            break label$109;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $5_1 = HEAP32[$6_1 >> 2] | 0;
           label$111 : while (1) {
            $6_1 = $5_1;
            if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$71
            }
            $5_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($6_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
            $5_1 = HEAP32[$8_1 >> 2] | 0;
            if ($5_1) {
             continue label$111
            }
            break label$111;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$62;
         }
         $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
         HEAP32[($6_1 + 24 | 0) >> 2] = 0;
         HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $12_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 23376 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 23376 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 23388 | 0) >> 2] | 0;
      $6_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 23388 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     HEAP32[($744() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$1;
    }
    label$112 : {
     if (!$9_1) {
      break label$112
     }
     label$113 : {
      label$114 : {
       $6_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($6_1 << 2 | 0) + 23668 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$114
       }
       HEAP32[$0_1 >> 2] = $5_1;
       if ($5_1) {
        break label$113
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
       HEAP32[(0 + 23368 | 0) >> 2] = $7_1;
       break label$112;
      }
      HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$112
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $9_1;
     label$115 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$115
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$112
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    label$116 : {
     label$117 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$117
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$116;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($12_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($12_1 + $4_1 | 0) >> 2] = $4_1;
     label$118 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$118
      }
      $4_1 = $4_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 23404 | 0;
      label$119 : {
       label$120 : {
        $6_1 = HEAP32[(0 + 23364 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($6_1 & $4_1 | 0) {
         break label$120
        }
        HEAP32[(0 + 23364 | 0) >> 2] = $6_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$119;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $12_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $4_1;
      break label$116;
     }
     $0_1 = 31;
     label$121 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$121
      }
      $0_1 = $4_1 >>> 8 | 0;
      $1640 = $0_1;
      $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $6_1 = $1640 << $0_1 | 0;
      $1647 = $6_1;
      $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1647 << $6_1 | 0;
      $1654 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1654 << $3_1 | 0) >>> 15 | 0) - ($6_1 | $0_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($12_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$0 = 0;
     HEAP32[($12_1 + 16 | 0) >> 2] = 0;
     HEAP32[($12_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = ($0_1 << 2 | 0) + 23668 | 0;
     label$122 : {
      label$123 : {
       label$124 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$124
        }
        HEAP32[(0 + 23368 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$6_1 >> 2] = $12_1;
        HEAP32[($12_1 + 24 | 0) >> 2] = $6_1;
        break label$123;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$6_1 >> 2] | 0;
       label$125 : while (1) {
        $6_1 = $3_1;
        if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$122
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $5_1 = ($6_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        if ($3_1) {
         continue label$125
        }
        break label$125;
       };
       HEAP32[$5_1 >> 2] = $12_1;
       HEAP32[($12_1 + 24 | 0) >> 2] = $6_1;
      }
      HEAP32[($12_1 + 12 | 0) >> 2] = $12_1;
      HEAP32[($12_1 + 8 | 0) >> 2] = $12_1;
      break label$116;
     }
     $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $12_1;
     HEAP32[($6_1 + 8 | 0) >> 2] = $12_1;
     HEAP32[($12_1 + 24 | 0) >> 2] = 0;
     HEAP32[($12_1 + 12 | 0) >> 2] = $6_1;
     HEAP32[($12_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$126 : {
    if (!$11_1) {
     break label$126
    }
    label$127 : {
     label$128 : {
      $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($6_1 << 2 | 0) + 23668 | 0;
      if (($5_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$128
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$127
      }
      HEAP32[(0 + 23368 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
      break label$126;
     }
     HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$126
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $11_1;
    label$129 : {
     $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$129
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$126
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$130 : {
    label$131 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$131
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $5_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$130;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    HEAP32[($10_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($10_1 + $4_1 | 0) >> 2] = $4_1;
    label$132 : {
     if (!$7_1) {
      break label$132
     }
     $3_1 = $7_1 >>> 3 | 0;
     $6_1 = ($3_1 << 3 | 0) + 23404 | 0;
     $0_1 = HEAP32[(0 + 23384 | 0) >> 2] | 0;
     label$133 : {
      label$134 : {
       $3_1 = 1 << $3_1 | 0;
       if ($3_1 & $2_1 | 0) {
        break label$134
       }
       HEAP32[(0 + 23364 | 0) >> 2] = $3_1 | $2_1 | 0;
       $3_1 = $6_1;
       break label$133;
      }
      $3_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    }
    HEAP32[(0 + 23384 | 0) >> 2] = $10_1;
    HEAP32[(0 + 23372 | 0) >> 2] = $4_1;
   }
   $0_1 = $5_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $940($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $5_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $399_1 = 0, $406_1 = 0, $413_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 23380 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 23384 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       $7_1 = $2_1 >>> 3 | 0;
       $2_1 = ($7_1 << 3 | 0) + 23404 | 0;
       if (($6_1 | 0) == ($2_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 23364 | 0) >> 2] = (HEAP32[(0 + 23364 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($2_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($1_1 | 0)) {
        break label$9
       }
       label$10 : {
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $2_1 >>> 0) {
         break label$10
        }
        HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
       break label$8;
      }
      label$11 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $5_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $6_1 = $2_1;
       $5_1 = $4_1;
       $2_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       $2_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 23668 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$14
       }
       HEAP32[$2_1 >> 2] = $5_1;
       if ($5_1) {
        break label$13
       }
       HEAP32[(0 + 23368 | 0) >> 2] = (HEAP32[(0 + 23368 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$2
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$15
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 23372 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$16 : {
    label$17 : {
     if ($2_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 23388 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 23388 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 23376 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 23376 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 23384 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 23372 | 0) >> 2] = 0;
      HEAP32[(0 + 23384 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 23384 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 23384 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 23372 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 23372 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$20 : {
      label$21 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        $3_1 = $2_1 >>> 3 | 0;
        $2_1 = ($3_1 << 3 | 0) + 23404 | 0;
        if (($5_1 | 0) == ($2_1 | 0)) {
         break label$22
        }
        HEAP32[(0 + 23380 | 0) >> 2] | 0;
       }
       label$23 : {
        if (($4_1 | 0) != ($5_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 23364 | 0) >> 2] = (HEAP32[(0 + 23364 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($4_1 | 0) == ($2_1 | 0)) {
         break label$24
        }
        HEAP32[(0 + 23380 | 0) >> 2] | 0;
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
       break label$20;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$26
        }
        label$27 : {
         $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 23380 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
          break label$27
         }
         HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
        break label$25;
       }
       label$28 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $5_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $6_1 = $2_1;
        $5_1 = $4_1;
        $2_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        $2_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 23668 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$31
        }
        HEAP32[$2_1 >> 2] = $5_1;
        if ($5_1) {
         break label$30
        }
        HEAP32[(0 + 23368 | 0) >> 2] = (HEAP32[(0 + 23368 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
       if (!$5_1) {
        break label$20
       }
      }
      HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$32
       }
       HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$20
      }
      HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 23384 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 23372 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$33 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 23404 | 0;
    label$34 : {
     label$35 : {
      $4_1 = HEAP32[(0 + 23364 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 23364 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$34;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 31;
   label$36 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $2_1 = $0_1 >>> 8 | 0;
    $399_1 = $2_1;
    $2_1 = (($2_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $399_1 << $2_1 | 0;
    $406_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $5_1 = $406_1 << $4_1 | 0;
    $413_1 = $5_1;
    $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($413_1 << $5_1 | 0) >>> 15 | 0) - ($4_1 | $2_1 | 0 | $5_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 23668 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      label$40 : {
       $5_1 = HEAP32[(0 + 23368 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($5_1 & $3_1 | 0) {
        break label$40
       }
       HEAP32[(0 + 23368 | 0) >> 2] = $5_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$39;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      label$41 : while (1) {
       $4_1 = $5_1;
       if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$38
       }
       $5_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$41
       }
       break label$41;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$37;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 23396 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 23396 | 0) >> 2] = $1_1;
   if ($1_1) {
    break label$1
   }
   $1_1 = 23820;
   label$42 : while (1) {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $0_1 + 8 | 0;
    if ($0_1) {
     continue label$42
    }
    break label$42;
   };
   HEAP32[(0 + 23396 | 0) >> 2] = -1;
  }
 }
 
 function $941($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $939($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($744() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $942($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $939($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $951($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $940($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $942($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $7_1 = 0, $4_1 = 0, $2_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & 3 | 0;
  $4_1 = $2_1 & -8 | 0;
  $5_1 = $0_1 + $4_1 | 0;
  label$1 : {
   $6_1 = HEAP32[(0 + 23380 | 0) >> 2] | 0;
   if ($6_1 >>> 0 > $0_1 >>> 0) {
    break label$1
   }
   if (($3_1 | 0) == (1 | 0)) {
    break label$1
   }
  }
  label$2 : {
   label$3 : {
    if ($3_1) {
     break label$3
    }
    $3_1 = 0;
    if ($1_1 >>> 0 < 256 >>> 0) {
     break label$2
    }
    label$4 : {
     if ($4_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $3_1 = $0_1;
     if (($4_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 23844 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$2
     }
    }
    return 0 | 0;
   }
   label$5 : {
    label$6 : {
     if ($4_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $4_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $943($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $3_1 = 0;
    label$7 : {
     if ((HEAP32[(0 + 23388 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$7
     }
     $5_1 = (HEAP32[(0 + 23376 | 0) >> 2] | 0) + $4_1 | 0;
     if ($5_1 >>> 0 <= $1_1 >>> 0) {
      break label$2
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $3_1 = $0_1 + $1_1 | 0;
     $1_1 = $5_1 - $1_1 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 23376 | 0) >> 2] = $1_1;
     HEAP32[(0 + 23388 | 0) >> 2] = $3_1;
     break label$5;
    }
    label$8 : {
     if ((HEAP32[(0 + 23384 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$8
     }
     $3_1 = 0;
     $5_1 = (HEAP32[(0 + 23372 | 0) >> 2] | 0) + $4_1 | 0;
     if ($5_1 >>> 0 < $1_1 >>> 0) {
      break label$2
     }
     label$9 : {
      label$10 : {
       $3_1 = $5_1 - $1_1 | 0;
       if ($3_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
       $5_1 = $0_1 + $5_1 | 0;
       HEAP32[$5_1 >> 2] = $3_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $5_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $5_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $3_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 23384 | 0) >> 2] = $1_1;
     HEAP32[(0 + 23372 | 0) >> 2] = $3_1;
     break label$5;
    }
    $3_1 = 0;
    $7_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($7_1 & 2 | 0) {
     break label$2
    }
    $8_1 = ($7_1 & -8 | 0) + $4_1 | 0;
    if ($8_1 >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $9_1 = $8_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($7_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      label$13 : {
       $5_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       $7_1 = $7_1 >>> 3 | 0;
       $4_1 = ($7_1 << 3 | 0) + 23404 | 0;
       if (($5_1 | 0) == ($4_1 | 0)) {
        break label$13
       }
      }
      label$14 : {
       if (($3_1 | 0) != ($5_1 | 0)) {
        break label$14
       }
       HEAP32[(0 + 23364 | 0) >> 2] = (HEAP32[(0 + 23364 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$11;
      }
      label$15 : {
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$15
       }
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
      break label$11;
     }
     $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$16 : {
      label$17 : {
       $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($5_1 | 0)) {
        break label$17
       }
       label$18 : {
        $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        if ($6_1 >>> 0 > $3_1 >>> 0) {
         break label$18
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $7_1;
       HEAP32[($7_1 + 8 | 0) >> 2] = $3_1;
       break label$16;
      }
      label$19 : {
       $3_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$19
       }
       $3_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$19
       }
       $7_1 = 0;
       break label$16;
      }
      label$20 : while (1) {
       $6_1 = $3_1;
       $7_1 = $4_1;
       $3_1 = $7_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        continue label$20
       }
       $3_1 = $7_1 + 16 | 0;
       $4_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$20
       }
       break label$20;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$21 : {
      label$22 : {
       $4_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($4_1 << 2 | 0) + 23668 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
        break label$22
       }
       HEAP32[$3_1 >> 2] = $7_1;
       if ($7_1) {
        break label$21
       }
       HEAP32[(0 + 23368 | 0) >> 2] = (HEAP32[(0 + 23368 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $7_1;
      if (!$7_1) {
       break label$11
      }
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = $10_1;
     label$23 : {
      $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$23
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $7_1;
     }
     $5_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$11
     }
     HEAP32[($7_1 + 20 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
    }
    label$24 : {
     if ($9_1 >>> 0 > 15 >>> 0) {
      break label$24
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $8_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $8_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $9_1 | 3 | 0;
    $5_1 = $0_1 + $8_1 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $943($1_1 | 0, $9_1 | 0);
   }
   $3_1 = $0_1;
  }
  return $3_1 | 0;
 }
 
 function $943($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $382_1 = 0, $389_1 = 0, $396_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     $0_1 = $0_1 - $3_1 | 0;
     if ((HEAP32[(0 + 23384 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[(0 + 23380 | 0) >> 2] | 0;
     label$4 : {
      if ($3_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $7_1 = $3_1 >>> 3 | 0;
       $3_1 = ($7_1 << 3 | 0) + 23404 | 0;
       if (($6_1 | 0) == ($3_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       HEAP32[(0 + 23364 | 0) >> 2] = (HEAP32[(0 + 23364 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($3_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      break label$2;
     }
     $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($0_1 | 0)) {
        break label$9
       }
       label$10 : {
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $3_1 >>> 0) {
         break label$10
        }
        HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$8;
      }
      label$11 : {
       $3_1 = $0_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $3_1 = $0_1 + 16 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        break label$11
       }
       $6_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $4_1 = $3_1;
       $6_1 = $5_1;
       $3_1 = $6_1 + 20 | 0;
       $5_1 = HEAP32[$3_1 >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       $3_1 = $6_1 + 16 | 0;
       $5_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($5_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$4_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($5_1 << 2 | 0) + 23668 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
        break label$14
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$13
       }
       HEAP32[(0 + 23368 | 0) >> 2] = (HEAP32[(0 + 23368 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$15
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 23372 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[$2_1 >> 2] = $1_1;
    return;
   }
   label$16 : {
    label$17 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 23388 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 23388 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 23376 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 23376 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 23384 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 23372 | 0) >> 2] = 0;
      HEAP32[(0 + 23384 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 23384 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 23384 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 23372 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 23372 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $4_1 = HEAP32[(0 + 23380 | 0) >> 2] | 0;
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$20 : {
      label$21 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        $2_1 = $3_1 >>> 3 | 0;
        $3_1 = ($2_1 << 3 | 0) + 23404 | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$22
        }
       }
       label$23 : {
        if (($5_1 | 0) != ($6_1 | 0)) {
         break label$23
        }
        HEAP32[(0 + 23364 | 0) >> 2] = (HEAP32[(0 + 23364 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $2_1 | 0) | 0) | 0;
        break label$20;
       }
       label$24 : {
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$24
        }
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
       break label$20;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$26
        }
        label$27 : {
         $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         if ($4_1 >>> 0 > $3_1 >>> 0) {
          break label$27
         }
         HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$25;
       }
       label$28 : {
        $3_1 = $2_1 + 20 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         break label$28
        }
        $3_1 = $2_1 + 16 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         break label$28
        }
        $6_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $4_1 = $3_1;
        $6_1 = $5_1;
        $3_1 = $6_1 + 20 | 0;
        $5_1 = HEAP32[$3_1 >> 2] | 0;
        if ($5_1) {
         continue label$29
        }
        $3_1 = $6_1 + 16 | 0;
        $5_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($5_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$4_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $5_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($5_1 << 2 | 0) + 23668 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$31
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$30
        }
        HEAP32[(0 + 23368 | 0) >> 2] = (HEAP32[(0 + 23368 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$20
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$32
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 23384 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 23372 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$33 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $3_1 = $1_1 >>> 3 | 0;
    $1_1 = ($3_1 << 3 | 0) + 23404 | 0;
    label$34 : {
     label$35 : {
      $5_1 = HEAP32[(0 + 23364 | 0) >> 2] | 0;
      $3_1 = 1 << $3_1 | 0;
      if ($5_1 & $3_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 23364 | 0) >> 2] = $5_1 | $3_1 | 0;
      $3_1 = $1_1;
      break label$34;
     }
     $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    return;
   }
   $3_1 = 31;
   label$36 : {
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $3_1 = $1_1 >>> 8 | 0;
    $382_1 = $3_1;
    $3_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $5_1 = $382_1 << $3_1 | 0;
    $389_1 = $5_1;
    $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $389_1 << $5_1 | 0;
    $396_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3_1 = (($396_1 << $6_1 | 0) >>> 15 | 0) - ($5_1 | $3_1 | 0 | $6_1 | 0) | 0;
    $3_1 = ($3_1 << 1 | 0 | (($1_1 >>> ($3_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   $5_1 = ($3_1 << 2 | 0) + 23668 | 0;
   label$37 : {
    label$38 : {
     label$39 : {
      $6_1 = HEAP32[(0 + 23368 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$39
      }
      HEAP32[(0 + 23368 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$5_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
      break label$38;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     label$40 : while (1) {
      $5_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$37
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($5_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$40
      }
      break label$40;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $944($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 21044 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (($2_1 | 0) < (1 | 0)) {
     break label$2
    }
    if ($0_1 >>> 0 <= $1_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= (__wasm_memory_size() << 16 | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$42($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 21044 | 0) >> 2] = $0_1;
   return $1_1 | 0;
  }
  HEAP32[($744() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function $945($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $5$hi = 0, $7_1 = 0, $7$hi = 0, $2_1 = 0, $4$hi = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $6$hi = 0, i64toi32_i32$6 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $54$hi = 0, $73$hi = 0, $125_1 = 0, $125$hi = 0, $128$hi = 0, $133$hi = 0;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $5_1 = $25_1;
    $5$hi = i64toi32_i32$1;
    if (!($5_1 | i64toi32_i32$1 | 0)) {
     break label$2
    }
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    i64toi32_i32$0 = 2146435072;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $6_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 52;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $26_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $26_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $26_1 & 2047 | 0;
    if (($2_1 | 0) != (2047 | 0)) {
     break label$1
    }
   }
   $1_1 = $0_1 * $1_1;
   return +($1_1 / $1_1);
  }
  label$3 : {
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $27_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $27_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $7_1 = $27_1;
   $7$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$0 = $5_1;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 52;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $28_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $28_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $28_1 & 2047 | 0;
   label$4 : {
    label$5 : {
     if ($2_1) {
      break label$5
     }
     $2_1 = 0;
     label$6 : {
      i64toi32_i32$3 = $6$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 12;
      i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $29_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
       $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $5_1 = $29_1;
      $5$hi = i64toi32_i32$0;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$2 | 0)) {
       $30_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0) {
         $31_1 = 0
        } else {
         $31_1 = 1
        }
        $32_1 = $31_1;
       } else {
        $32_1 = 0
       }
       $30_1 = $32_1;
      }
      if ($30_1) {
       break label$6
      }
      label$7 : while (1) {
       $2_1 = $2_1 + -1 | 0;
       i64toi32_i32$3 = $5$hi;
       i64toi32_i32$1 = $5_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $33_1 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $33_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $5_1 = $33_1;
       $5$hi = i64toi32_i32$0;
       i64toi32_i32$3 = $5_1;
       i64toi32_i32$1 = -1;
       i64toi32_i32$2 = -1;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
        $34_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $35_1 = 0
         } else {
          $35_1 = 1
         }
         $36_1 = $35_1;
        } else {
         $36_1 = 0
        }
        $34_1 = $36_1;
       }
       if ($34_1) {
        continue label$7
       }
       break label$7;
      };
     }
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = 0;
     $54$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$0 = $54$hi;
     i64toi32_i32$1 = 1 - $2_1 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $37_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $37_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $5_1 = $37_1;
     $5$hi = i64toi32_i32$0;
     break label$4;
    }
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = 1048575;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    i64toi32_i32$3 = 1048576;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5$hi = i64toi32_i32$3;
   }
   label$8 : {
    label$9 : {
     if ($3_1) {
      break label$9
     }
     $3_1 = 0;
     label$10 : {
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = 12;
      i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $38_1 = 0;
      } else {
       i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
       $38_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $7_1 = $38_1;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$2 | 0)) {
       $39_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0) {
         $40_1 = 0
        } else {
         $40_1 = 1
        }
        $41_1 = $40_1;
       } else {
        $41_1 = 0
       }
       $39_1 = $41_1;
      }
      if ($39_1) {
       break label$10
      }
      label$11 : while (1) {
       $3_1 = $3_1 + -1 | 0;
       i64toi32_i32$3 = $7$hi;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $42_1 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $42_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $7_1 = $42_1;
       $7$hi = i64toi32_i32$0;
       i64toi32_i32$3 = $7_1;
       i64toi32_i32$1 = -1;
       i64toi32_i32$2 = -1;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
        $43_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $44_1 = 0
         } else {
          $44_1 = 1
         }
         $45_1 = $44_1;
        } else {
         $45_1 = 0
        }
        $43_1 = $45_1;
       }
       if ($43_1) {
        continue label$11
       }
       break label$11;
      };
     }
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = 0;
     $73$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$0 = $73$hi;
     i64toi32_i32$1 = 1 - $3_1 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $46_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $46_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $4_1 = $46_1;
     $4$hi = i64toi32_i32$0;
     break label$8;
    }
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = 1048575;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    i64toi32_i32$3 = 1048576;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $4_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$3;
   }
   label$12 : {
    if (($2_1 | 0) <= ($3_1 | 0)) {
     break label$12
    }
    label$13 : while (1) {
     label$14 : {
      i64toi32_i32$3 = $5$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $5$hi;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      $7_1 = i64toi32_i32$4;
      $7$hi = i64toi32_i32$5;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 0;
      if ((i64toi32_i32$5 | 0) < (i64toi32_i32$2 | 0)) {
       $47_1 = 1
      } else {
       if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$1 >>> 0) {
         $48_1 = 0
        } else {
         $48_1 = 1
        }
        $49_1 = $48_1;
       } else {
        $49_1 = 0
       }
       $47_1 = $49_1;
      }
      if ($47_1) {
       break label$14
      }
      i64toi32_i32$3 = $7$hi;
      $5_1 = $7_1;
      $5$hi = i64toi32_i32$3;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
       break label$14
      }
      return +($0_1 * 0.0);
     }
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      $50_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
      $50_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     }
     $5_1 = $50_1;
     $5$hi = i64toi32_i32$3;
     $2_1 = $2_1 + -1 | 0;
     if (($2_1 | 0) > ($3_1 | 0)) {
      continue label$13
     }
     break label$13;
    };
    $2_1 = $3_1;
   }
   label$15 : {
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
    $7_1 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
     $51_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $52_1 = 0
      } else {
       $52_1 = 1
      }
      $53_1 = $52_1;
     } else {
      $53_1 = 0
     }
     $51_1 = $53_1;
    }
    if ($51_1) {
     break label$15
    }
    i64toi32_i32$3 = $7$hi;
    $5_1 = $7_1;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | 0) {
     break label$15
    }
    return +($0_1 * 0.0);
   }
   label$16 : {
    label$17 : {
     i64toi32_i32$5 = $5$hi;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = 1048575;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$17
     }
     i64toi32_i32$1 = $5$hi;
     $7_1 = $5_1;
     $7$hi = i64toi32_i32$1;
     break label$16;
    }
    label$18 : while (1) {
     $2_1 = $2_1 + -1 | 0;
     i64toi32_i32$1 = $5$hi;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 524288;
     i64toi32_i32$3 = 0;
     $3_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      $54_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
      $54_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     }
     $7_1 = $54_1;
     $7$hi = i64toi32_i32$1;
     $5_1 = $7_1;
     $5$hi = i64toi32_i32$1;
     if ($3_1) {
      continue label$18
     }
     break label$18;
    };
   }
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$3;
   label$19 : {
    label$20 : {
     if (($2_1 | 0) < (1 | 0)) {
      break label$20
     }
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$4 = -1048576;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $125_1 = i64toi32_i32$2;
     $125$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 52;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $55_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $55_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $128$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $125$hi;
     i64toi32_i32$0 = $125_1;
     i64toi32_i32$3 = $128$hi;
     i64toi32_i32$5 = $55_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $7_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $7$hi = i64toi32_i32$3;
     break label$19;
    }
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = 0;
    $133$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = $133$hi;
    i64toi32_i32$5 = 1 - $2_1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $56_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $56_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7_1 = $56_1;
    $7$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$5 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
   return +(+wasm2js_scratch_load_f64());
  }
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$0 = $7_1;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$5 = $5_1;
  return +((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) | 0 ? $0_1 * 0.0 : $0_1);
 }
 
 function $946($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, i64toi32_i32$6 = 0, $11$hi = 0, $64_1 = 0, $7_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $70_1 = 0, $11_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $52_1 = 0, $52$hi = 0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $59_1 = 0, $59$hi = 0, $60_1 = 0, $60$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $131$hi = 0, $134_1 = 0, $135$hi = 0, $156_1 = 0, $156$hi = 0, $158$hi = 0, $161_1 = 0, $161$hi = 0, $163$hi = 0, $175$hi = 0, $178_1 = 0, $179$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $219_1 = 0, $220_1 = 0, $220$hi = 0, $222_1 = 0, $222$hi = 0, $228$hi = 0, $229_1 = 0, $229$hi = 0, $236_1 = 0, $236$hi = 0, $241$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($903($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6_1 = $950($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $64_1;
     $8_1 = $7_1 & 32767 | 0;
     if (($8_1 | 0) == (32767 | 0)) {
      break label$3
     }
     if ($6_1) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $899($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $895($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $52_1 = $1_1;
    $52$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $65_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $65_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $55$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $57_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $57$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $55$hi;
    i64toi32_i32$1 = $65_1;
    i64toi32_i32$3 = $57$hi;
    i64toi32_i32$0 = $57_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $9_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$3;
    $59_1 = $9_1;
    $59$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $60_1 = $3_1;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $66_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $66_1 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $67_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $67_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $69_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $69$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $67$hi;
    i64toi32_i32$2 = $67_1;
    i64toi32_i32$1 = $69$hi;
    i64toi32_i32$0 = $69_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $52$hi;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$3 = $60$hi;
    i64toi32_i32$0 = $10$hi;
    if (($903($52_1 | 0, i64toi32_i32$1 | 0, $59_1 | 0, i64toi32_i32$2 | 0, $60_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     if (!($903($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $899($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$8_1) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    $899($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $68_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $68_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $68_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($6_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    $899($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $70_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $70_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = $70_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $9_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$0;
   label$9 : {
    if (($8_1 | 0) <= ($6_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       $131$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $134_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $135$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $131$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $135$hi;
       i64toi32_i32$1 = $134_1;
       i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $71_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $72_1 = 0
         } else {
          $72_1 = 1
         }
         $73_1 = $72_1;
        } else {
         $73_1 = 0
        }
        $71_1 = $73_1;
       }
       if ($71_1) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        $899($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $74_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $74_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $156_1 = $74_1;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $75_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $75_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $158$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $156$hi;
       i64toi32_i32$3 = $156_1;
       i64toi32_i32$0 = $158$hi;
       i64toi32_i32$2 = $75_1;
       i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
       $9$hi = i64toi32_i32$0;
       break label$11;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $76_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $76_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $161_1 = $76_1;
      $161$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $77_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $77_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $163$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $161$hi;
      i64toi32_i32$3 = $161_1;
      i64toi32_i32$0 = $163$hi;
      i64toi32_i32$2 = $77_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $9$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $78_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $78_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $78_1;
     $4$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     if (($8_1 | 0) > ($6_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $8_1 = $6_1;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $175$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $178_1 = $4$hi >>> 0 < i64toi32_i32$0 >>> 0 | (($4$hi | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $179$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $175$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $179$hi;
     i64toi32_i32$0 = $178_1;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $79_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $80_1 = 0
       } else {
        $80_1 = 1
       }
       $81_1 = $80_1;
      } else {
       $81_1 = 0
      }
      $79_1 = $81_1;
     }
     if ($79_1) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    $899($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5_1 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $82_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $82_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $82_1;
     $3$hi = i64toi32_i32$3;
     $8_1 = $8_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $83_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $83_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4_1 = $83_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $208_1 = $3_1;
     $208$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $84_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $84_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $210$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $208$hi;
     i64toi32_i32$1 = $208_1;
     i64toi32_i32$3 = $210$hi;
     i64toi32_i32$2 = $84_1;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $6_1 = $7_1 & 32768 | 0;
   label$18 : {
    if (($8_1 | 0) > (0 | 0)) {
     break label$18
    }
    $219_1 = $5_1 + 64 | 0;
    i64toi32_i32$0 = $4$hi;
    $220_1 = $4_1;
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $222_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $222$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $8_1 + 120 | 0 | $6_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $85_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $85_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $222$hi;
    i64toi32_i32$3 = $222_1;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$1 = $85_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $229_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $229$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $220$hi;
    i64toi32_i32$3 = $229$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1065811968;
    $899($219_1 | 0, $220_1 | 0, i64toi32_i32$0 | 0, $229_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 72 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $236_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = $8_1 | $6_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $86_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $86_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $241$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$2 = $236_1;
   i64toi32_i32$1 = $241$hi;
   i64toi32_i32$0 = $86_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $947($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $1_1 = 0, $4$hi = 0, $7_1 = 0.0, $2_1 = 0, $5_1 = 0.0, $6_1 = 0.0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $3_1 = 0, $29_1 = 0, $30_1 = 0, $8_1 = 0.0, $9_1 = 0.0, $51$hi = 0, $53_1 = 0, $53$hi = 0, $82_1 = 0.0, $87_1 = 0.0, $92_1 = 0.0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       wasm2js_scratch_store_f64(+$0_1);
       i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
       $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
       $4$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $22_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $23_1 = 0
         } else {
          $23_1 = 1
         }
         $24_1 = $23_1;
        } else {
         $24_1 = 0
        }
        $22_1 = $24_1;
       }
       if ($22_1) {
        break label$5
       }
       i64toi32_i32$2 = $4$hi;
       i64toi32_i32$3 = $4_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $25_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $25_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
       }
       $1_1 = $25_1;
       if ($1_1 >>> 0 > 1048575 >>> 0) {
        break label$4
       }
      }
      label$6 : {
       i64toi32_i32$0 = $4$hi;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$3 = 2147483647;
       i64toi32_i32$1 = -1;
       i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
        break label$6
       }
       return +(-1.0 / ($0_1 * $0_1));
      }
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
       $26_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
         $27_1 = 0
        } else {
         $27_1 = 1
        }
        $28_1 = $27_1;
       } else {
        $28_1 = 0
       }
       $26_1 = $28_1;
      }
      if ($26_1) {
       break label$3
      }
      return +(($0_1 - $0_1) / 0.0);
     }
     if ($1_1 >>> 0 > 2146435071 >>> 0) {
      break label$1
     }
     $2_1 = 1072693248;
     $3_1 = -1023;
     label$7 : {
      if (($1_1 | 0) == (1072693248 | 0)) {
       break label$7
      }
      $2_1 = $1_1;
      break label$2;
     }
     i64toi32_i32$1 = $4$hi;
     if ($4_1) {
      break label$2
     }
     return +(0.0);
    }
    wasm2js_scratch_store_f64(+($0_1 * 18014398509481984.0));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $29_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $29_1;
    $3_1 = -1077;
   }
   $1_1 = $2_1 + 614242 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = ($1_1 & 1048575 | 0) + 1072079006 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $30_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $30_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $51$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $53_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   $53$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $51$hi;
   i64toi32_i32$2 = $30_1;
   i64toi32_i32$0 = $53$hi;
   i64toi32_i32$3 = $53_1;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64() + -1.0;
   $5_1 = $0_1 * ($0_1 * .5);
   wasm2js_scratch_store_f64(+($0_1 - $5_1));
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$2 = -1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $6_1 = +wasm2js_scratch_load_f64();
   $7_1 = $6_1 * 1.4426950407214463;
   $8_1 = +($3_1 + ($1_1 >>> 20 | 0) | 0 | 0);
   $9_1 = $7_1 + $8_1;
   $82_1 = $7_1 + ($8_1 - $9_1);
   $87_1 = $0_1 - $6_1 - $5_1;
   $0_1 = $0_1 / ($0_1 + 2.0);
   $92_1 = $0_1;
   $7_1 = $0_1 * $0_1;
   $0_1 = $7_1 * $7_1;
   $0_1 = $87_1 + $92_1 * ($5_1 + ($0_1 * ($0_1 * ($0_1 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $7_1 * ($0_1 * ($0_1 * ($0_1 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735)));
   $0_1 = $9_1 + ($82_1 + ($0_1 * 1.4426950407214463 + ($0_1 + $6_1) * 1.6751713164886512e-10));
  }
  return +$0_1;
 }
 
 function $948($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $1_1 = 0, $4$hi = 0, $6_1 = 0.0, $2_1 = 0, $7_1 = 0.0, $8_1 = 0.0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $31_1 = 0, $5_1 = 0.0, $32_1 = 0, $9_1 = 0.0, $10_1 = 0.0, $55_1 = 0.0, $60$hi = 0, $62_1 = 0, $62$hi = 0, $85_1 = 0.0, $90_1 = 0.0, $95_1 = 0.0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       wasm2js_scratch_store_f64(+$0_1);
       i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
       $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
       $4$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $24_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $25_1 = 0
         } else {
          $25_1 = 1
         }
         $26_1 = $25_1;
        } else {
         $26_1 = 0
        }
        $24_1 = $26_1;
       }
       if ($24_1) {
        break label$5
       }
       i64toi32_i32$2 = $4$hi;
       i64toi32_i32$3 = $4_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $27_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $27_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
       }
       $1_1 = $27_1;
       if ($1_1 >>> 0 > 1048575 >>> 0) {
        break label$4
       }
      }
      label$6 : {
       i64toi32_i32$0 = $4$hi;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$3 = 2147483647;
       i64toi32_i32$1 = -1;
       i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
        break label$6
       }
       return +(-1.0 / ($0_1 * $0_1));
      }
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
       $28_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
         $29_1 = 0
        } else {
         $29_1 = 1
        }
        $30_1 = $29_1;
       } else {
        $30_1 = 0
       }
       $28_1 = $30_1;
      }
      if ($28_1) {
       break label$3
      }
      return +(($0_1 - $0_1) / 0.0);
     }
     if ($1_1 >>> 0 > 2146435071 >>> 0) {
      break label$1
     }
     $2_1 = 1072693248;
     $3_1 = -1023;
     label$7 : {
      if (($1_1 | 0) == (1072693248 | 0)) {
       break label$7
      }
      $2_1 = $1_1;
      break label$2;
     }
     i64toi32_i32$1 = $4$hi;
     if ($4_1) {
      break label$2
     }
     return +(0.0);
    }
    wasm2js_scratch_store_f64(+($0_1 * 18014398509481984.0));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $31_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $31_1;
    $3_1 = -1077;
   }
   $1_1 = $2_1 + 614242 | 0;
   $5_1 = +($3_1 + ($1_1 >>> 20 | 0) | 0 | 0);
   $6_1 = $5_1 * .30102999566361177;
   $55_1 = $6_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = ($1_1 & 1048575 | 0) + 1072079006 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $32_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $32_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $60$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $62_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   $62$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $60$hi;
   i64toi32_i32$2 = $32_1;
   i64toi32_i32$0 = $62$hi;
   i64toi32_i32$3 = $62_1;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64() + -1.0;
   $7_1 = $0_1 * ($0_1 * .5);
   wasm2js_scratch_store_f64(+($0_1 - $7_1));
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$2 = -1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $8_1 = +wasm2js_scratch_load_f64();
   $9_1 = $8_1 * .4342944818781689;
   $10_1 = $55_1 + $9_1;
   $85_1 = $9_1 + ($6_1 - $10_1);
   $90_1 = $0_1 - $8_1 - $7_1;
   $0_1 = $0_1 / ($0_1 + 2.0);
   $95_1 = $0_1;
   $6_1 = $0_1 * $0_1;
   $0_1 = $6_1 * $6_1;
   $0_1 = $90_1 + $95_1 * ($7_1 + ($0_1 * ($0_1 * ($0_1 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $6_1 * ($0_1 * ($0_1 * ($0_1 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735)));
   $0_1 = $10_1 + ($85_1 + ($0_1 * .4342944818781689 + ($5_1 * 3.694239077158931e-13 + ($0_1 + $8_1) * 2.5082946711645275e-11)));
  }
  return +$0_1;
 }
 
 function $949($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1_1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   label$4 : {
    if (($1_1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1_1 = $1_1 + 1022 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   $1_1 = (($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $950($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4$hi = 0, $4_1 = 0, $13_1 = 0, $2_1 = 0, $3_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $4$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $13_1 & 32767 | 0;
    if (($2_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $3_1 = 4;
    if ($2_1) {
     break label$1
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $3_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $951($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$43($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if ($0_1 & 3 | 0) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if ($2_1 >>> 0 >= $3_1 >>> 0) {
       break label$4
      }
      if ($2_1 & 3 | 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $952($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $5_1 = 0, $14_1 = 0, $104$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $6_1 = $1_1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $104$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $6_1 = i64toi32_i32$0 | $6_1 | 0;
   $6$hi = i64toi32_i32$2;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$2;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $953($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $954($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $3_1 = -1;
    if ($953($0_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if ($4_1 >>> 0 >= $3_1 >>> 0) {
     break label$3
    }
    $3_1 = $1_1 & 255 | 0;
    if (($3_1 | 0) == (HEAP8[($0_1 + 75 | 0) >> 0] | 0 | 0)) {
     break label$3
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $1_1;
    break label$1;
   }
   $3_1 = -1;
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, $2_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $3_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $955($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($953($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3_1 = 0;
     break label$4;
    }
    $4_1 = $1_1;
    label$6 : while (1) {
     label$7 : {
      $3_1 = $4_1;
      if ($3_1) {
       break label$7
      }
      $3_1 = 0;
      break label$4;
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $0_1 = $0_1 + $3_1 | 0;
    $1_1 = $1_1 - $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   }
   $951($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $3_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $956($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $955($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $5_1 = $959($3_1 | 0) | 0;
   $0_1 = $955($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $960($3_1 | 0);
  }
  label$3 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break label$3
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $957($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $961($0_1 | 0) | 0;
  return (($2_1 | 0) != ($956($0_1 | 0, 1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) ? -1 : 0) | 0;
 }
 
 function $958($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $822(HEAP32[(0 + 19532 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $959($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $960($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $961($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($0_1 & 3 | 0)) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[$0_1 >> 0] | 0) {
      break label$3
     }
     return $0_1 - $0_1 | 0 | 0;
    }
    $1_1 = $0_1;
    label$4 : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     continue label$4;
    };
   }
   label$5 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$5
    }
    break label$5;
   };
   label$6 : {
    if ($3_1 & 255 | 0) {
     break label$6
    }
    return $2_1 - $0_1 | 0 | 0;
   }
   label$7 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $962() {
  return global$0 | 0;
 }
 
 function $963($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $964($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $965() {
  return ($966() | 0 | 0) > (0 | 0) | 0;
 }
 
 function $966() {
  return fimport$44() | 0 | 0;
 }
 
 function $967($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $968($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $967($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$45($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $969($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$46($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0, $23$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $21_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $21_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $22_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $22_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$2 = $22_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$5 = var$2;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_udiv($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17_1 = i64toi32_i32$1;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $23_1 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
   $23_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
  }
  var$0 = $23_1;
  var$0$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $17$hi;
  i64toi32_i32$1 = $17_1;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $23$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = $23$hi;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, var$2 = 0, $20_1 = 0, $21_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17$hi = 0, $19$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $20_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $20_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $21_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $21_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$0 = $21_1;
  var$0$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_urem($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$2$hi;
  i64toi32_i32$4 = $17$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $19$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = var$2$hi;
  i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$4 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_sdiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_srem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_popcnt_i32(var$0) {
  var$0 = var$0 | 0;
  var var$1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $5_1 = var$1;
    if (!var$0) {
     break label$1
    }
    var$0 = var$0 & (var$0 - 1 | 0) | 0;
    var$1 = var$1 + 1 | 0;
    continue label$2;
   };
  }
  return $5_1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_rotl_i64(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, var$2$hi = 0, var$2 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $6$hi = 0, $8$hi = 0, $10_1 = 0, $10$hi = 0, $15$hi = 0, $17$hi = 0, $19$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  var$2 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = -1;
  i64toi32_i32$2 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$1 = $19_1;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $10_1 = $20_1;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
  i64toi32_i32$5 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  var$1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  var$1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$5 = -1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
   $21_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
   $21_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
  }
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $21_1;
  i64toi32_i32$5 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$5 = $17$hi;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $22_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
   $22_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
  }
  $19$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$5 = $10_1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$3 = $22_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_urem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$0 = __wasm_intrinsics_temp_i64$hi;
  i64toi32_i32$1 = __wasm_intrinsics_temp_i64;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 var FUNCTION_TABLE = Table([null, $59, $208, $473, $206, $472, $215, $224, $227, $255, $405, $406, $478, $480, $521, $523, $532, $533, $534, $536, $542, $545, $548, $549, $552, $538, $540, $541, $539, $543, $544, $546, $547, $550, $551, $553, $554, $555, $556, $557, $558, $559, $560, $561, $562, $563, $564, $569, $566, $567, $568, $570, $571, $572, $573, $574, $575, $576, $577, $578, $579, $580, $581, $582, $583, $585, $592, $604, $596, $586, $587, $588, $590, $593, $594, $595, $597, $599, $600, $601, $606, $607, $608, $609, $610, $611, $612, $603, $613, $616, $617, $618, $619, $620, $621, $622, $623, $624, $625, $626, $627, $628, $629, $630, $631, $632, $633, $634, $635, $636, $637, $638, $640, $641, $643, $644, $645, $646, $647, $648, $649, $650, $652, $654, $656, $657, $658, $659, $660, $661, $668, $673, $665, $666, $667, $669, $671, $672, $674, $676, $677, $678, $679, $680, $681, $682, $683, $685, $686, $689, $691, $692, $693, $694, $695, $696, $697, $704, $705, $699, $700, $701, $702, $703, $708, $709, $710, $711, $712, $714, $716, $719, $727, $721, $722, $724, $725, $726, $728, $729, $730, $537, $707, $720, $653, $584, $639, $664, $614, $698, $565, $799, $803, $794, $819, $820, $842, $838, $839, $850, $911, $914, $912, $913, $918, $915, $922, $936, $934, $925, $916, $935, $933, $926, $917, $928]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__indirect_function_table": FUNCTION_TABLE, 
  "__wasm_call_ctors": $0, 
  "new_luavm": $477, 
  "lua_exec": $479, 
  "fflush": $795, 
  "lua_callfn": $481, 
  "lua_isfn": $482, 
  "close_luavm": $483, 
  "__errno_location": $744, 
  "free": $940, 
  "malloc": $939, 
  "_get_tzname": $886, 
  "_get_daylight": $887, 
  "_get_timezone": $888, 
  "stackSave": $962, 
  "stackRestore": $963, 
  "stackAlloc": $964, 
  "setThrew": $908, 
  "_ZSt18uncaught_exceptionv": $965, 
  "__cxa_can_catch": $937, 
  "__cxa_is_pointer_type": $938, 
  "__data_end": global$1, 
  "dynCall_jiji": $968
 };
}

var bufferView = new Uint8Array(wasmMemory.buffer);
for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    } 
  }
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
base64DecodeToExistingUint8Array(bufferView, 20376, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADkUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAL8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAADBAAAABFMAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAAAAAAAAAAAAAAL8AAAAAAAAAAAAAAAAAAAAAAAAAxAAAAAAAAADBAAAAGFMAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAMUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAADGAAAAKFcAAAAEAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAr/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBRAABAXVAA");
base64DecodeToExistingUint8Array(bufferView
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}
)(asmLibraryArg, wasmMemory);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];



if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}




// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}






// Wasm globals

var wasmMemory;
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}




// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}





// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STACK_BASE = 5266752,
    STACKTOP = STACK_BASE,
    STACK_MAX = 23872;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');


// In non-standalone/normal mode, we create the memory here.



// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);










// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}





// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}




// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}











function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}



function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}


var wasmBinaryFile = 'lua_emcc.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, and have the Fetch api, use that;
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function'
      // Let's not use fetch to get objects over file:// as it's most likely Cordova which doesn't support fetch for file://
      && !isFileURI(wasmBinaryFile)
      ) {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(getBinary);
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;




    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");


    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);


      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  5714: function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {let fn_key_str = UTF8ToString($0); scall(fn_key_str, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);}
};






  function abortStackOverflow(allocSize) {
      abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
    }

  function callRuntimeCallbacks(callbacks) {
      while(callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function dynCallLegacy(sig, ptr, args) {
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      if (args && args.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      if (args && args.length) {
        return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
      }
      return Module['dynCall_' + sig].call(null, ptr);
    }
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.indexOf('j') != -1) {
        return dynCallLegacy(sig, ptr, args);
      }
  
      return wasmTable.get(ptr).apply(null, args)
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  var _emscripten_get_now;if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else _emscripten_get_now = function() { return performance.now(); }
  ;
  
  var _emscripten_get_now_is_monotonic=true;;
  
  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)]=value;
      return value;
    }
  function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if ((clk_id === 1 || clk_id === 4) && _emscripten_get_now_is_monotonic) {
        now = _emscripten_get_now();
      } else {
        setErrNo(28);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }
  function ___clock_gettime(a0,a1
  ) {
  return _clock_gettime(a0,a1);
  }

  var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};
  function ___cxa_allocate_exception(size) {
      // Thrown object is prepended by exception metadata block
      return _malloc(size + ExceptionInfoAttrs.SIZE) + ExceptionInfoAttrs.SIZE;
    }

  function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - ExceptionInfoAttrs.SIZE;
  
      this.set_type = function(type) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.TYPE_OFFSET))>>2)]=type;
      };
  
      this.get_type = function() {
        return HEAP32[(((this.ptr)+(ExceptionInfoAttrs.TYPE_OFFSET))>>2)];
      };
  
      this.set_destructor = function(destructor) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.DESTRUCTOR_OFFSET))>>2)]=destructor;
      };
  
      this.get_destructor = function() {
        return HEAP32[(((this.ptr)+(ExceptionInfoAttrs.DESTRUCTOR_OFFSET))>>2)];
      };
  
      this.set_refcount = function(refcount) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)]=refcount;
      };
  
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        HEAP8[(((this.ptr)+(ExceptionInfoAttrs.CAUGHT_OFFSET))>>0)]=caught;
      };
  
      this.get_caught = function () {
        return HEAP8[(((this.ptr)+(ExceptionInfoAttrs.CAUGHT_OFFSET))>>0)] != 0;
      };
  
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(((this.ptr)+(ExceptionInfoAttrs.RETHROWN_OFFSET))>>0)]=rethrown;
      };
  
      this.get_rethrown = function () {
        return HEAP8[(((this.ptr)+(ExceptionInfoAttrs.RETHROWN_OFFSET))>>0)] != 0;
      };
  
      // Initialize native structure fields. Should be called once after allocated.
      this.init = function(type, destructor) {
        this.set_type(type);
        this.set_destructor(destructor);
        this.set_refcount(0);
        this.set_caught(false);
        this.set_rethrown(false);
      }
  
      this.add_ref = function() {
        var value = HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)];
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)]=value + 1;
      };
  
      // Returns true if last reference released.
      this.release_ref = function() {
        var prev = HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)];
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)]=prev - 1;
        assert(prev > 0);
        return prev === 1;
      };
    }
  function CatchInfo(ptr) {
  
      this.free = function() {
        _free(this.ptr);
        this.ptr = 0;
      };
  
      this.set_base_ptr = function(basePtr) {
        HEAP32[((this.ptr)>>2)]=basePtr;
      };
  
      this.get_base_ptr = function() {
        return HEAP32[((this.ptr)>>2)];
      };
  
      this.set_adjusted_ptr = function(adjustedPtr) {
        var ptrSize = 4;
        HEAP32[(((this.ptr)+(ptrSize))>>2)]=adjustedPtr;
      };
  
      this.get_adjusted_ptr = function() {
        var ptrSize = 4;
        return HEAP32[(((this.ptr)+(ptrSize))>>2)];
      };
  
      // Get pointer which is expected to be received by catch clause in C++ code. It may be adjusted
      // when the pointer is casted to some of the exception object base classes (e.g. when virtual
      // inheritance is used). When a pointer is thrown this method should return the thrown pointer
      // itself.
      this.get_exception_ptr = function() {
        // Work around a fastcomp bug, this code is still included for some reason in a build without
        // exceptions support.
        var isPointer = ___cxa_is_pointer_type(
          this.get_exception_info().get_type());
        if (isPointer) {
          return HEAP32[((this.get_base_ptr())>>2)];
        }
        var adjusted = this.get_adjusted_ptr();
        if (adjusted !== 0) return adjusted;
        return this.get_base_ptr();
      };
  
      this.get_exception_info = function() {
        return new ExceptionInfo(this.get_base_ptr());
      };
  
      if (ptr === undefined) {
        this.ptr = _malloc(8);
        this.set_adjusted_ptr(0);
      } else {
        this.ptr = ptr;
      }
    }
  
  var exceptionCaught= [];
  
  function exception_addRef(info) {
      info.add_ref();
    }
  function ___cxa_begin_catch(ptr) {
      var catchInfo = new CatchInfo(ptr);
      var info = catchInfo.get_exception_info();
      if (!info.get_caught()) {
        info.set_caught(true);
        __ZSt18uncaught_exceptionv.uncaught_exceptions--;
      }
      info.set_rethrown(false);
      exceptionCaught.push(catchInfo);
      exception_addRef(info);
      return catchInfo.get_exception_ptr();
    }

  var exceptionLast=0;
  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(new ExceptionInfo(ptr).ptr);
      } catch(e) {
        err('exception during cxa_free_exception: ' + e);
      }
    }
  function exception_decRef(info) {
      // A rethrown exception can reach refcount 0; it must not be discarded
      // Its next handler will clear the rethrown flag and addRef it, prior to
      // final decRef and destruction here
      if (info.release_ref() && !info.get_rethrown()) {
        var destructor = info.get_destructor();
        if (destructor) {
          // In Wasm, destructors return 'this' as in ARM
          wasmTable.get(destructor)(info.excPtr);
        }
        ___cxa_free_exception(info.excPtr);
      }
    }
  function ___cxa_end_catch() {
      // Clear state flag.
      _setThrew(0);
      assert(exceptionCaught.length > 0);
      // Call destructor if one is registered then clear it.
      var catchInfo = exceptionCaught.pop();
  
      exception_decRef(catchInfo.get_exception_info());
      catchInfo.free();
      exceptionLast = 0; // XXX in decRef?
    }

  function ___resumeException(catchInfoPtr) {
      var catchInfo = new CatchInfo(catchInfoPtr);
      var ptr = catchInfo.get_base_ptr();
      if (!exceptionLast) { exceptionLast = ptr; }
      catchInfo.free();
      throw ptr;
    }
  function ___cxa_find_matching_catch_3() {
      var thrown = exceptionLast;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = new ExceptionInfo(thrown);
      var thrownType = info.get_type();
      var catchInfo = new CatchInfo();
      catchInfo.set_base_ptr(thrown);
      if (!thrownType) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),catchInfo.ptr)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      // can_catch receives a **, add indirection
      var stackTop = stackSave();
      var exceptionThrowBuf = stackAlloc(4);
      HEAP32[((exceptionThrowBuf)>>2)]=thrown;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        var caughtType = typeArray[i];
        if (caughtType === 0 || caughtType === thrownType) {
          // Catch all clause matched or exactly the same type is caught
          break;
        }
        if (___cxa_can_catch(caughtType, thrownType, exceptionThrowBuf)) {
          var adjusted = HEAP32[((exceptionThrowBuf)>>2)];
          if (thrown !== adjusted) {
            catchInfo.set_adjusted_ptr(adjusted);
          }
          return ((setTempRet0(caughtType),catchInfo.ptr)|0);
        }
      }
      stackRestore(stackTop);
      return ((setTempRet0(thrownType),catchInfo.ptr)|0);
    }

  function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr;
    }

  function ___cxa_uncaught_exceptions() {
      return __ZSt18uncaught_exceptionv.uncaught_exceptions;
    }

  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  function getRandomDevice() {
      if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          // nodejs has crypto support
          return function() { return crypto_module['randomBytes'](1)[0]; };
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return function() { abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
    }
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function mmapAlloc(size) {
      var alignedSize = alignMemory(size, 16384);
      var ptr = _malloc(alignedSize);
      while (size < alignedSize) HEAP8[ptr + size++] = 0;
      return ptr;
    }
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          // We don't currently support location hints for the address of the mapping
          assert(address === 0);
  
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};
  var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },absolutePath:function() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },createFolder:function() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },createLink:function() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },joinPath:function() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },mmapAlloc:function() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },standardizePath:function() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }};
  var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function ___sys_dup2(oldfd, suggestFD) {try {
  
      var old = SYSCALLS.getStreamFromFD(oldfd);
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_dup3(fd, suggestFD, flags) {try {
  
      var old = SYSCALLS.getStreamFromFD(fd);
      assert(!flags);
      if (old.fd === suggestFD) return -28;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = SYSCALLS.get();
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_rename(old_path, new_path) {try {
  
      old_path = SYSCALLS.getStr(old_path);
      new_path = SYSCALLS.getStr(new_path);
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_rmdir(path) {try {
  
      path = SYSCALLS.getStr(path);
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_unlink(path) {try {
  
      path = SYSCALLS.getStr(path);
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_wait4(pid, wstart, options, rusage) {try {
  
      abort('cannot wait on child processes');
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___wait() {}

  function _abort() {
      abort();
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  function _difftime(time1, time0) {
      return time1 - time0;
    }

  function _dlclose(handle) {
      abort("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking");
    }

  function _dlerror() {
      abort("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking");
    }

  function _dlopen(filename, flag) {
      abort("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking");
    }

  function _dlsym(handle, symbol) {
      abort("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking");
    }

  function _emscripten_asm_const_int(code, sigPtr, argbuf) {
      var args = readAsmConstArgs(sigPtr, argbuf);
      return ASM_CONSTS[code].apply(null, args);
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  var ENV={};
  
  function getExecutableName() {
      return thisProgram || './this.program';
    }
  function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }
  function _environ_get(__environ, environ_buf) {
      var bufSize = 0;
      getEnvStrings().forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)]=ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = getEnvStrings();
      HEAP32[((penviron_count)>>2)]=strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)]=bufSize;
      return 0;
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _getTempRet0() {
      return (getTempRet0() | 0);
    }

  function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      // Allocate a string "GMT" for us to point to.
      if (!_gmtime_r.GMTString) _gmtime_r.GMTString = allocateUTF8("GMT");
      HEAP32[(((tmPtr)+(40))>>2)]=_gmtime_r.GMTString;
      return tmPtr;
    }

  function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      var currentYear = new Date().getFullYear();
      var winter = new Date(currentYear, 0, 1);
      var summer = new Date(currentYear, 6, 1);
      var winterOffset = winter.getTimezoneOffset();
      var summerOffset = summer.getTimezoneOffset();
  
      // Local standard timezone offset. Local standard time is not adjusted for daylight savings.
      // This code uses the fact that getTimezoneOffset returns a greater value during Standard Time versus Daylight Saving Time (DST). 
      // Thus it determines the expected output during Standard Time, and it compares whether the output of the given date the same (Standard) or less (DST).
      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by stdTimezoneOffset.
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAP32[((__get_timezone())>>2)]=stdTimezoneOffset * 60;
  
      HEAP32[((__get_daylight())>>2)]=Number(winterOffset != summerOffset);
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocateUTF8(winterName);
      var summerNamePtr = allocateUTF8(summerName);
      if (summerOffset < winterOffset) {
        // Northern hemisphere
        HEAP32[((__get_tzname())>>2)]=winterNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((__get_tzname())>>2)]=summerNamePtr;
        HEAP32[(((__get_tzname())+(4))>>2)]=winterNamePtr;
      }
    }
  function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // Attention: DST is in December in South, and some regions don't have DST at all.
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((__get_tzname())+(dst ? 4 : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }

  function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        // Attention: some regions don't have DST at all.
        HEAP32[(((tmPtr)+(32))>>2)]=Number(summerOffset != winterOffset && dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }

  /** @type {function(...*):?} */
  function _popen(
  ) {
  err('missing function: popen'); abort(-1);
  }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {
        // no-op
      }
      return sum;
    }
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];
  function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }
  function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  function _system(command) {
      if (ENVIRONMENT_IS_NODE) {
        if (!command) return 1; // shell is available
  
        var cmdstr = UTF8ToString(command);
        if (!cmdstr.length) return 0; // this is what glibc seems to do (shell works test?)
  
        var cp = require('child_process');
        var ret = cp.spawnSync(cmdstr, [], {shell:true, stdio:'inherit'});
  
        var _W_EXITCODE = function(ret, sig) {
          return ((ret) << 8 | (sig));
        }
  
        // this really only can happen if process is killed by signal
        if (ret.status === null) {
          // sadly node doesn't expose such function
          var signalToNumber = function(sig) {
            // implement only the most common ones, and fallback to SIGINT
            switch (sig) {
              case 'SIGHUP': return 1;
              case 'SIGINT': return 2;
              case 'SIGQUIT': return 3;
              case 'SIGFPE': return 8;
              case 'SIGKILL': return 9;
              case 'SIGALRM': return 14;
              case 'SIGTERM': return 15;
            }
            return 2; // SIGINT
          }
          return _W_EXITCODE(0, signalToNumber(ret.signal));
        }
  
        return _W_EXITCODE(ret.status, 0);
      }
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      if (!command) return 0; // no shell available
      setErrNo(6);
      return -1;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var readAsmConstArgsArray=[];
  function readAsmConstArgs(sigPtr, buf) {
      // Nobody should have mutated _readAsmConstArgsArray underneath us to be something else than an array.
      assert(Array.isArray(readAsmConstArgsArray));
      // The input buffer is allocated on the stack, so it must be stack-aligned.
      assert(buf % 16 == 0);
      readAsmConstArgsArray.length = 0;
      var ch;
      // Most arguments are i32s, so shift the buffer pointer so it is a plain
      // index into HEAP32.
      buf >>= 2;
      while (ch = HEAPU8[sigPtr++]) {
        assert(ch === 100/*'d'*/ || ch === 102/*'f'*/ || ch === 105 /*'i'*/);
        // A double takes two 32-bit slots, and must also be aligned - the backend
        // will emit padding to avoid that.
        var double = ch < 105;
        if (double && (buf & 1)) buf++;
        readAsmConstArgsArray.push(double ? HEAPF64[buf++ >> 1] : HEAP32[buf]);
        ++buf;
      }
      return readAsmConstArgsArray;
    }
var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



__ATINIT__.push({ func: function() { ___wasm_call_ctors() } });
var asmLibraryArg = {
  "__clock_gettime": ___clock_gettime,
  "__cxa_allocate_exception": ___cxa_allocate_exception,
  "__cxa_begin_catch": ___cxa_begin_catch,
  "__cxa_end_catch": ___cxa_end_catch,
  "__cxa_find_matching_catch_3": ___cxa_find_matching_catch_3,
  "__cxa_throw": ___cxa_throw,
  "__cxa_uncaught_exceptions": ___cxa_uncaught_exceptions,
  "__sys_dup2": ___sys_dup2,
  "__sys_dup3": ___sys_dup3,
  "__sys_fcntl64": ___sys_fcntl64,
  "__sys_ioctl": ___sys_ioctl,
  "__sys_open": ___sys_open,
  "__sys_rename": ___sys_rename,
  "__sys_rmdir": ___sys_rmdir,
  "__sys_unlink": ___sys_unlink,
  "__sys_wait4": ___sys_wait4,
  "__wait": ___wait,
  "abort": _abort,
  "clock": _clock,
  "difftime": _difftime,
  "dlclose": _dlclose,
  "dlerror": _dlerror,
  "dlopen": _dlopen,
  "dlsym": _dlsym,
  "emscripten_asm_const_int": _emscripten_asm_const_int,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "environ_get": _environ_get,
  "environ_sizes_get": _environ_sizes_get,
  "exit": _exit,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "gmtime_r": _gmtime_r,
  "invoke_iiii": invoke_iiii,
  "invoke_vi": invoke_vi,
  "invoke_vii": invoke_vii,
  "invoke_viii": invoke_viii,
  "localtime_r": _localtime_r,
  "memory": wasmMemory,
  "mktime": _mktime,
  "popen": _popen,
  "setTempRet0": setTempRet0,
  "strftime": _strftime,
  "system": _system,
  "time": _time
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _new_luavm = Module["_new_luavm"] = createExportWrapper("new_luavm");

/** @type {function(...*):?} */
var _lua_exec = Module["_lua_exec"] = createExportWrapper("lua_exec");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var _lua_callfn = Module["_lua_callfn"] = createExportWrapper("lua_callfn");

/** @type {function(...*):?} */
var _lua_isfn = Module["_lua_isfn"] = createExportWrapper("lua_isfn");

/** @type {function(...*):?} */
var _close_luavm = Module["_close_luavm"] = createExportWrapper("close_luavm");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var __get_tzname = Module["__get_tzname"] = createExportWrapper("_get_tzname");

/** @type {function(...*):?} */
var __get_daylight = Module["__get_daylight"] = createExportWrapper("_get_daylight");

/** @type {function(...*):?} */
var __get_timezone = Module["__get_timezone"] = createExportWrapper("_get_timezone");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = createExportWrapper("setThrew");

/** @type {function(...*):?} */
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = createExportWrapper("_ZSt18uncaught_exceptionv");

/** @type {function(...*):?} */
var ___cxa_can_catch = Module["___cxa_can_catch"] = createExportWrapper("__cxa_can_catch");

/** @type {function(...*):?} */
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = createExportWrapper("__cxa_is_pointer_type");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");


function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return wasmTable.get(index)(a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vi(index,a1) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}




// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow")) Module["abortStackOverflow"] = function() { abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfoAttrs")) Module["ExceptionInfoAttrs"] = function() { abort("'ExceptionInfoAttrs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });


var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};


/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {

    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);

    ABORT = true;
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();








